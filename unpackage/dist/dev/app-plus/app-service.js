if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue) {
  "use strict";
  var _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s2, _t2, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P, _Q, _R, _S, _T, _U, _V;
  const fontData = [
    {
      "font_class": "arrow-down",
      "unicode": ""
    },
    {
      "font_class": "arrow-left",
      "unicode": ""
    },
    {
      "font_class": "arrow-right",
      "unicode": ""
    },
    {
      "font_class": "arrow-up",
      "unicode": ""
    },
    {
      "font_class": "auth",
      "unicode": ""
    },
    {
      "font_class": "auth-filled",
      "unicode": ""
    },
    {
      "font_class": "back",
      "unicode": ""
    },
    {
      "font_class": "bars",
      "unicode": ""
    },
    {
      "font_class": "calendar",
      "unicode": ""
    },
    {
      "font_class": "calendar-filled",
      "unicode": ""
    },
    {
      "font_class": "camera",
      "unicode": ""
    },
    {
      "font_class": "camera-filled",
      "unicode": ""
    },
    {
      "font_class": "cart",
      "unicode": ""
    },
    {
      "font_class": "cart-filled",
      "unicode": ""
    },
    {
      "font_class": "chat",
      "unicode": ""
    },
    {
      "font_class": "chat-filled",
      "unicode": ""
    },
    {
      "font_class": "chatboxes",
      "unicode": ""
    },
    {
      "font_class": "chatboxes-filled",
      "unicode": ""
    },
    {
      "font_class": "chatbubble",
      "unicode": ""
    },
    {
      "font_class": "chatbubble-filled",
      "unicode": ""
    },
    {
      "font_class": "checkbox",
      "unicode": ""
    },
    {
      "font_class": "checkbox-filled",
      "unicode": ""
    },
    {
      "font_class": "checkmarkempty",
      "unicode": ""
    },
    {
      "font_class": "circle",
      "unicode": ""
    },
    {
      "font_class": "circle-filled",
      "unicode": ""
    },
    {
      "font_class": "clear",
      "unicode": ""
    },
    {
      "font_class": "close",
      "unicode": ""
    },
    {
      "font_class": "closeempty",
      "unicode": ""
    },
    {
      "font_class": "cloud-download",
      "unicode": ""
    },
    {
      "font_class": "cloud-download-filled",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload-filled",
      "unicode": ""
    },
    {
      "font_class": "color",
      "unicode": ""
    },
    {
      "font_class": "color-filled",
      "unicode": ""
    },
    {
      "font_class": "compose",
      "unicode": ""
    },
    {
      "font_class": "contact",
      "unicode": ""
    },
    {
      "font_class": "contact-filled",
      "unicode": ""
    },
    {
      "font_class": "down",
      "unicode": ""
    },
    {
      "font_class": "bottom",
      "unicode": ""
    },
    {
      "font_class": "download",
      "unicode": ""
    },
    {
      "font_class": "download-filled",
      "unicode": ""
    },
    {
      "font_class": "email",
      "unicode": ""
    },
    {
      "font_class": "email-filled",
      "unicode": ""
    },
    {
      "font_class": "eye",
      "unicode": ""
    },
    {
      "font_class": "eye-filled",
      "unicode": ""
    },
    {
      "font_class": "eye-slash",
      "unicode": ""
    },
    {
      "font_class": "eye-slash-filled",
      "unicode": ""
    },
    {
      "font_class": "fire",
      "unicode": ""
    },
    {
      "font_class": "fire-filled",
      "unicode": ""
    },
    {
      "font_class": "flag",
      "unicode": ""
    },
    {
      "font_class": "flag-filled",
      "unicode": ""
    },
    {
      "font_class": "folder-add",
      "unicode": ""
    },
    {
      "font_class": "folder-add-filled",
      "unicode": ""
    },
    {
      "font_class": "font",
      "unicode": ""
    },
    {
      "font_class": "forward",
      "unicode": ""
    },
    {
      "font_class": "gear",
      "unicode": ""
    },
    {
      "font_class": "gear-filled",
      "unicode": ""
    },
    {
      "font_class": "gift",
      "unicode": ""
    },
    {
      "font_class": "gift-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-down",
      "unicode": ""
    },
    {
      "font_class": "hand-down-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-up",
      "unicode": ""
    },
    {
      "font_class": "hand-up-filled",
      "unicode": ""
    },
    {
      "font_class": "headphones",
      "unicode": ""
    },
    {
      "font_class": "heart",
      "unicode": ""
    },
    {
      "font_class": "heart-filled",
      "unicode": ""
    },
    {
      "font_class": "help",
      "unicode": ""
    },
    {
      "font_class": "help-filled",
      "unicode": ""
    },
    {
      "font_class": "home",
      "unicode": ""
    },
    {
      "font_class": "home-filled",
      "unicode": ""
    },
    {
      "font_class": "image",
      "unicode": ""
    },
    {
      "font_class": "image-filled",
      "unicode": ""
    },
    {
      "font_class": "images",
      "unicode": ""
    },
    {
      "font_class": "images-filled",
      "unicode": ""
    },
    {
      "font_class": "info",
      "unicode": ""
    },
    {
      "font_class": "info-filled",
      "unicode": ""
    },
    {
      "font_class": "left",
      "unicode": ""
    },
    {
      "font_class": "link",
      "unicode": ""
    },
    {
      "font_class": "list",
      "unicode": ""
    },
    {
      "font_class": "location",
      "unicode": ""
    },
    {
      "font_class": "location-filled",
      "unicode": ""
    },
    {
      "font_class": "locked",
      "unicode": ""
    },
    {
      "font_class": "locked-filled",
      "unicode": ""
    },
    {
      "font_class": "loop",
      "unicode": ""
    },
    {
      "font_class": "mail-open",
      "unicode": ""
    },
    {
      "font_class": "mail-open-filled",
      "unicode": ""
    },
    {
      "font_class": "map",
      "unicode": ""
    },
    {
      "font_class": "map-filled",
      "unicode": ""
    },
    {
      "font_class": "map-pin",
      "unicode": ""
    },
    {
      "font_class": "map-pin-ellipse",
      "unicode": ""
    },
    {
      "font_class": "medal",
      "unicode": ""
    },
    {
      "font_class": "medal-filled",
      "unicode": ""
    },
    {
      "font_class": "mic",
      "unicode": ""
    },
    {
      "font_class": "mic-filled",
      "unicode": ""
    },
    {
      "font_class": "micoff",
      "unicode": ""
    },
    {
      "font_class": "micoff-filled",
      "unicode": ""
    },
    {
      "font_class": "minus",
      "unicode": ""
    },
    {
      "font_class": "minus-filled",
      "unicode": ""
    },
    {
      "font_class": "more",
      "unicode": ""
    },
    {
      "font_class": "more-filled",
      "unicode": ""
    },
    {
      "font_class": "navigate",
      "unicode": ""
    },
    {
      "font_class": "navigate-filled",
      "unicode": ""
    },
    {
      "font_class": "notification",
      "unicode": ""
    },
    {
      "font_class": "notification-filled",
      "unicode": ""
    },
    {
      "font_class": "paperclip",
      "unicode": ""
    },
    {
      "font_class": "paperplane",
      "unicode": ""
    },
    {
      "font_class": "paperplane-filled",
      "unicode": ""
    },
    {
      "font_class": "person",
      "unicode": ""
    },
    {
      "font_class": "person-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled-copy",
      "unicode": ""
    },
    {
      "font_class": "phone",
      "unicode": ""
    },
    {
      "font_class": "phone-filled",
      "unicode": ""
    },
    {
      "font_class": "plus",
      "unicode": ""
    },
    {
      "font_class": "plus-filled",
      "unicode": ""
    },
    {
      "font_class": "plusempty",
      "unicode": ""
    },
    {
      "font_class": "pulldown",
      "unicode": ""
    },
    {
      "font_class": "pyq",
      "unicode": ""
    },
    {
      "font_class": "qq",
      "unicode": ""
    },
    {
      "font_class": "redo",
      "unicode": ""
    },
    {
      "font_class": "redo-filled",
      "unicode": ""
    },
    {
      "font_class": "refresh",
      "unicode": ""
    },
    {
      "font_class": "refresh-filled",
      "unicode": ""
    },
    {
      "font_class": "refreshempty",
      "unicode": ""
    },
    {
      "font_class": "reload",
      "unicode": ""
    },
    {
      "font_class": "right",
      "unicode": ""
    },
    {
      "font_class": "scan",
      "unicode": ""
    },
    {
      "font_class": "search",
      "unicode": ""
    },
    {
      "font_class": "settings",
      "unicode": ""
    },
    {
      "font_class": "settings-filled",
      "unicode": ""
    },
    {
      "font_class": "shop",
      "unicode": ""
    },
    {
      "font_class": "shop-filled",
      "unicode": ""
    },
    {
      "font_class": "smallcircle",
      "unicode": ""
    },
    {
      "font_class": "smallcircle-filled",
      "unicode": ""
    },
    {
      "font_class": "sound",
      "unicode": ""
    },
    {
      "font_class": "sound-filled",
      "unicode": ""
    },
    {
      "font_class": "spinner-cycle",
      "unicode": ""
    },
    {
      "font_class": "staff",
      "unicode": ""
    },
    {
      "font_class": "staff-filled",
      "unicode": ""
    },
    {
      "font_class": "star",
      "unicode": ""
    },
    {
      "font_class": "star-filled",
      "unicode": ""
    },
    {
      "font_class": "starhalf",
      "unicode": ""
    },
    {
      "font_class": "trash",
      "unicode": ""
    },
    {
      "font_class": "trash-filled",
      "unicode": ""
    },
    {
      "font_class": "tune",
      "unicode": ""
    },
    {
      "font_class": "tune-filled",
      "unicode": ""
    },
    {
      "font_class": "undo",
      "unicode": ""
    },
    {
      "font_class": "undo-filled",
      "unicode": ""
    },
    {
      "font_class": "up",
      "unicode": ""
    },
    {
      "font_class": "top",
      "unicode": ""
    },
    {
      "font_class": "upload",
      "unicode": ""
    },
    {
      "font_class": "upload-filled",
      "unicode": ""
    },
    {
      "font_class": "videocam",
      "unicode": ""
    },
    {
      "font_class": "videocam-filled",
      "unicode": ""
    },
    {
      "font_class": "vip",
      "unicode": ""
    },
    {
      "font_class": "vip-filled",
      "unicode": ""
    },
    {
      "font_class": "wallet",
      "unicode": ""
    },
    {
      "font_class": "wallet-filled",
      "unicode": ""
    },
    {
      "font_class": "weibo",
      "unicode": ""
    },
    {
      "font_class": "weixin",
      "unicode": ""
    }
  ];
  const _export_sfc = (sfc, props2) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props2) {
      target[key] = val;
    }
    return target;
  };
  const getVal = (val) => {
    const reg = /^[0-9]*$/g;
    return typeof val === "number" || reg.test(val) ? val + "px" : val;
  };
  const _sfc_main$z = {
    name: "UniIcons",
    emits: ["click"],
    props: {
      type: {
        type: String,
        default: ""
      },
      color: {
        type: String,
        default: "#333333"
      },
      size: {
        type: [Number, String],
        default: 16
      },
      customPrefix: {
        type: String,
        default: ""
      },
      fontFamily: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        icons: fontData
      };
    },
    computed: {
      unicode() {
        let code2 = this.icons.find((v2) => v2.font_class === this.type);
        if (code2) {
          return code2.unicode;
        }
        return "";
      },
      iconSize() {
        return getVal(this.size);
      },
      styleObj() {
        if (this.fontFamily !== "") {
          return `color: ${this.color}; font-size: ${this.iconSize}; font-family: ${this.fontFamily};`;
        }
        return `color: ${this.color}; font-size: ${this.iconSize};`;
      }
    },
    methods: {
      _onClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "text",
      {
        style: vue.normalizeStyle($options.styleObj),
        class: vue.normalizeClass(["uni-icons", ["uniui-" + $props.type, $props.customPrefix, $props.customPrefix ? $props.type : ""]]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options._onClick && $options._onClick(...args))
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$4 = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$y], ["__scopeId", "data-v-d31e1c47"], ["__file", "E:/code/app/WH-app/uni_modules/uni-icons/components/uni-icons/uni-icons.vue"]]);
  const ON_SHOW = "onShow";
  const ON_HIDE = "onHide";
  const ON_PULL_DOWN_REFRESH = "onPullDownRefresh";
  function formatAppLog(type2, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type2, filename, ...args);
    } else {
      console[type2].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component, easycom2) {
    return typeof component === "string" ? easycom2 : component;
  }
  const createHook = (lifecycle) => (hook, target = vue.getCurrentInstance()) => {
    !vue.isInSSRComponentSetup && vue.injectHook(lifecycle, hook, target);
  };
  const onShow = /* @__PURE__ */ createHook(ON_SHOW);
  const onHide = /* @__PURE__ */ createHook(ON_HIDE);
  const onPullDownRefresh = /* @__PURE__ */ createHook(ON_PULL_DOWN_REFRESH);
  let platform = "other";
  const _sfc_main$y = {
    name: "UniFab",
    emits: ["fabClick", "trigger"],
    props: {
      pattern: {
        type: Object,
        default() {
          return {};
        }
      },
      horizontal: {
        type: String,
        default: "left"
      },
      vertical: {
        type: String,
        default: "bottom"
      },
      direction: {
        type: String,
        default: "horizontal"
      },
      content: {
        type: Array,
        default() {
          return [];
        }
      },
      show: {
        type: Boolean,
        default: false
      },
      popMenu: {
        type: Boolean,
        default: true
      }
    },
    data() {
      return {
        fabShow: false,
        isShow: false,
        isAndroidNvue: platform === "android",
        styles: {
          color: "#3c3e49",
          selectedColor: "#007AFF",
          backgroundColor: "#fff",
          buttonColor: "#007AFF",
          iconColor: "#fff",
          icon: "plusempty"
        }
      };
    },
    computed: {
      contentWidth(e2) {
        return (this.content.length + 1) * 55 + 15 + "px";
      },
      contentWidthMin() {
        return "55px";
      },
      // 动态计算宽度
      boxWidth() {
        return this.getPosition(3, "horizontal");
      },
      // 动态计算高度
      boxHeight() {
        return this.getPosition(3, "vertical");
      },
      // 计算左下位置
      leftBottom() {
        return this.getPosition(0, "left", "bottom");
      },
      // 计算右下位置
      rightBottom() {
        return this.getPosition(0, "right", "bottom");
      },
      // 计算左上位置
      leftTop() {
        return this.getPosition(0, "left", "top");
      },
      rightTop() {
        return this.getPosition(0, "right", "top");
      },
      flexDirectionStart() {
        return this.getPosition(1, "vertical", "top");
      },
      flexDirectionEnd() {
        return this.getPosition(1, "vertical", "bottom");
      },
      horizontalLeft() {
        return this.getPosition(2, "horizontal", "left");
      },
      horizontalRight() {
        return this.getPosition(2, "horizontal", "right");
      },
      // 计算 nvue bottom
      nvueBottom() {
        return 30;
      }
    },
    watch: {
      pattern: {
        handler(val, oldVal) {
          this.styles = Object.assign({}, this.styles, val);
        },
        deep: true
      }
    },
    created() {
      this.isShow = this.show;
      if (this.top === 0) {
        this.fabShow = true;
      }
      this.styles = Object.assign({}, this.styles, this.pattern);
    },
    methods: {
      _onClick() {
        this.$emit("fabClick");
        if (!this.popMenu) {
          return;
        }
        this.isShow = !this.isShow;
      },
      open() {
        this.isShow = true;
      },
      close() {
        this.isShow = false;
      },
      /**
       * 按钮点击事件
       */
      _onItemClick(index2, item) {
        if (!this.isShow) {
          return;
        }
        this.$emit("trigger", {
          index: index2,
          item
        });
      },
      /**
       * 获取 位置信息
       */
      getPosition(types2, paramA, paramB) {
        if (types2 === 0) {
          return this.horizontal === paramA && this.vertical === paramB;
        } else if (types2 === 1) {
          return this.direction === paramA && this.vertical === paramB;
        } else if (types2 === 2) {
          return this.direction === paramA && this.horizontal === paramB;
        } else {
          return this.isShow && this.direction === paramA ? this.contentWidth : this.contentWidthMin;
        }
      }
    }
  };
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-cursor-point" }, [
      $props.popMenu && ($options.leftBottom || $options.rightBottom || $options.leftTop || $options.rightTop) && $props.content.length > 0 ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass([{
            "uni-fab--leftBottom": $options.leftBottom,
            "uni-fab--rightBottom": $options.rightBottom,
            "uni-fab--leftTop": $options.leftTop,
            "uni-fab--rightTop": $options.rightTop
          }, "uni-fab"]),
          style: vue.normalizeStyle($options.nvueBottom)
        },
        [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass([{
                "uni-fab__content--left": $props.horizontal === "left",
                "uni-fab__content--right": $props.horizontal === "right",
                "uni-fab__content--flexDirection": $props.direction === "vertical",
                "uni-fab__content--flexDirectionStart": $options.flexDirectionStart,
                "uni-fab__content--flexDirectionEnd": $options.flexDirectionEnd,
                "uni-fab__content--other-platform": !$data.isAndroidNvue
              }, "uni-fab__content"]),
              style: vue.normalizeStyle({ width: $options.boxWidth, height: $options.boxHeight, backgroundColor: $data.styles.backgroundColor }),
              elevation: "5"
            },
            [
              $options.flexDirectionStart || $options.horizontalLeft ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "uni-fab__item uni-fab__item--first"
              })) : vue.createCommentVNode("v-if", true),
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($props.content, (item, index2) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: index2,
                    class: vue.normalizeClass([{ "uni-fab__item--active": $data.isShow }, "uni-fab__item"]),
                    onClick: ($event) => $options._onItemClick(index2, item)
                  }, [
                    vue.createElementVNode("image", {
                      src: item.active ? item.selectedIconPath : item.iconPath,
                      class: "uni-fab__item-image",
                      mode: "aspectFit"
                    }, null, 8, ["src"]),
                    vue.createElementVNode(
                      "text",
                      {
                        class: "uni-fab__item-text",
                        style: vue.normalizeStyle({ color: item.active ? $data.styles.selectedColor : $data.styles.color })
                      },
                      vue.toDisplayString(item.text),
                      5
                      /* TEXT, STYLE */
                    )
                  ], 10, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              )),
              $options.flexDirectionEnd || $options.horizontalRight ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "uni-fab__item uni-fab__item--first"
              })) : vue.createCommentVNode("v-if", true)
            ],
            6
            /* CLASS, STYLE */
          )
        ],
        6
        /* CLASS, STYLE */
      )) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass([{
            "uni-fab__circle--leftBottom": $options.leftBottom,
            "uni-fab__circle--rightBottom": $options.rightBottom,
            "uni-fab__circle--leftTop": $options.leftTop,
            "uni-fab__circle--rightTop": $options.rightTop,
            "uni-fab__content--other-platform": !$data.isAndroidNvue
          }, "uni-fab__circle uni-fab__plus"]),
          style: vue.normalizeStyle({ "background-color": $data.styles.buttonColor, "bottom": $options.nvueBottom }),
          onClick: _cache[0] || (_cache[0] = (...args) => $options._onClick && $options._onClick(...args))
        },
        [
          vue.createVNode(_component_uni_icons, {
            class: vue.normalizeClass(["fab-circle-icon", { "uni-fab__plus--active": $data.isShow && $props.content.length > 0 }]),
            type: $data.styles.icon,
            color: $data.styles.iconColor,
            size: "32"
          }, null, 8, ["type", "color", "class"]),
          vue.createCommentVNode(` <view class="fab-circle-v"  :class="{'uni-fab__plus--active': isShow && content.length > 0}"></view>\r
			<view class="fab-circle-h" :class="{'uni-fab__plus--active': isShow  && content.length > 0}"></view> `)
        ],
        6
        /* CLASS, STYLE */
      )
    ]);
  }
  const __easycom_0$3 = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$x], ["__scopeId", "data-v-85f34dfc"], ["__file", "E:/code/app/WH-app/uni_modules/uni-fab/components/uni-fab/uni-fab.vue"]]);
  const mpMixin = {};
  function email(value2) {
    return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(value2);
  }
  function mobile(value2) {
    return /^1([3589]\d|4[5-9]|6[1-2,4-7]|7[0-8])\d{8}$/.test(value2);
  }
  function url(value2) {
    return /^((https|http|ftp|rtsp|mms):\/\/)(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-zA-Z_!~*'()-]+.)*([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z].[a-zA-Z]{2,6})(:[0-9]{1,4})?((\/?)|(\/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+\/?)$/.test(value2);
  }
  function date(value2) {
    if (!value2)
      return false;
    if (number(value2))
      value2 = +value2;
    return !/Invalid|NaN/.test(new Date(value2).toString());
  }
  function dateISO(value2) {
    return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value2);
  }
  function number(value2) {
    return /^[\+-]?(\d+\.?\d*|\.\d+|\d\.\d+e\+\d+)$/.test(value2);
  }
  function string$1(value2) {
    return typeof value2 === "string";
  }
  function digits(value2) {
    return /^\d+$/.test(value2);
  }
  function idCard(value2) {
    return /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(
      value2
    );
  }
  function carNo(value2) {
    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;
    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
    if (value2.length === 7) {
      return creg.test(value2);
    }
    if (value2.length === 8) {
      return xreg.test(value2);
    }
    return false;
  }
  function amount(value2) {
    return /^[1-9]\d*(,\d{3})*(\.\d{1,2})?$|^0\.\d{1,2}$/.test(value2);
  }
  function chinese(value2) {
    const reg = /^[\u4e00-\u9fa5]+$/gi;
    return reg.test(value2);
  }
  function letter(value2) {
    return /^[a-zA-Z]*$/.test(value2);
  }
  function enOrNum(value2) {
    const reg = /^[0-9a-zA-Z]*$/g;
    return reg.test(value2);
  }
  function contains(value2, param) {
    return value2.indexOf(param) >= 0;
  }
  function range$2(value2, param) {
    return value2 >= param[0] && value2 <= param[1];
  }
  function rangeLength(value2, param) {
    return value2.length >= param[0] && value2.length <= param[1];
  }
  function landline(value2) {
    const reg = /^\d{3,4}-\d{7,8}(-\d{3,4})?$/;
    return reg.test(value2);
  }
  function empty(value2) {
    switch (typeof value2) {
      case "undefined":
        return true;
      case "string":
        if (value2.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, "").length == 0)
          return true;
        break;
      case "boolean":
        if (!value2)
          return true;
        break;
      case "number":
        if (value2 === 0 || isNaN(value2))
          return true;
        break;
      case "object":
        if (value2 === null || value2.length === 0)
          return true;
        for (const i2 in value2) {
          return false;
        }
        return true;
    }
    return false;
  }
  function jsonString(value2) {
    if (typeof value2 === "string") {
      try {
        const obj = JSON.parse(value2);
        if (typeof obj === "object" && obj) {
          return true;
        }
        return false;
      } catch (e2) {
        return false;
      }
    }
    return false;
  }
  function array(value2) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(value2);
    }
    return Object.prototype.toString.call(value2) === "[object Array]";
  }
  function object(value2) {
    return Object.prototype.toString.call(value2) === "[object Object]";
  }
  function code(value2, len = 6) {
    return new RegExp(`^\\d{${len}}$`).test(value2);
  }
  function func(value2) {
    return typeof value2 === "function";
  }
  function promise(value2) {
    return object(value2) && func(value2.then) && func(value2.catch);
  }
  function image(value2) {
    const newValue = value2.split("?")[0];
    const IMAGE_REGEXP = /\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;
    return IMAGE_REGEXP.test(newValue);
  }
  function video(value2) {
    const VIDEO_REGEXP = /\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8)/i;
    return VIDEO_REGEXP.test(value2);
  }
  function regExp(o2) {
    return o2 && Object.prototype.toString.call(o2) === "[object RegExp]";
  }
  const test = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    amount,
    array,
    carNo,
    chinese,
    code,
    contains,
    date,
    dateISO,
    digits,
    email,
    empty,
    enOrNum,
    func,
    idCard,
    image,
    jsonString,
    landline,
    letter,
    mobile,
    number,
    object,
    promise,
    range: range$2,
    rangeLength,
    regExp,
    string: string$1,
    url,
    video
  }, Symbol.toStringTag, { value: "Module" }));
  function strip(num, precision = 15) {
    return +parseFloat(Number(num).toPrecision(precision));
  }
  function digitLength(num) {
    const eSplit = num.toString().split(/[eE]/);
    const len = (eSplit[0].split(".")[1] || "").length - +(eSplit[1] || 0);
    return len > 0 ? len : 0;
  }
  function float2Fixed(num) {
    if (num.toString().indexOf("e") === -1) {
      return Number(num.toString().replace(".", ""));
    }
    const dLen = digitLength(num);
    return dLen > 0 ? strip(Number(num) * Math.pow(10, dLen)) : Number(num);
  }
  function checkBoundary(num) {
    {
      if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {
        formatAppLog("warn", "at uni_modules/uv-ui-tools/libs/function/digit.js:45", `${num} 超出了精度限制，结果可能不正确`);
      }
    }
  }
  function iteratorOperation(arr, operation) {
    const [num1, num2, ...others] = arr;
    let res = operation(num1, num2);
    others.forEach((num) => {
      res = operation(res, num);
    });
    return res;
  }
  function times(...nums) {
    if (nums.length > 2) {
      return iteratorOperation(nums, times);
    }
    const [num1, num2] = nums;
    const num1Changed = float2Fixed(num1);
    const num2Changed = float2Fixed(num2);
    const baseNum = digitLength(num1) + digitLength(num2);
    const leftValue = num1Changed * num2Changed;
    checkBoundary(leftValue);
    return leftValue / Math.pow(10, baseNum);
  }
  function divide(...nums) {
    if (nums.length > 2) {
      return iteratorOperation(nums, divide);
    }
    const [num1, num2] = nums;
    const num1Changed = float2Fixed(num1);
    const num2Changed = float2Fixed(num2);
    checkBoundary(num1Changed);
    checkBoundary(num2Changed);
    return times(num1Changed / num2Changed, strip(Math.pow(10, digitLength(num2) - digitLength(num1))));
  }
  function round(num, ratio) {
    const base = Math.pow(10, ratio);
    let result = divide(Math.round(Math.abs(times(num, base))), base);
    if (num < 0 && result !== 0) {
      result = times(result, -1);
    }
    return result;
  }
  function range$1(min = 0, max = 0, value2 = 0) {
    return Math.max(min, Math.min(max, Number(value2)));
  }
  function getPx(value2, unit = false) {
    if (number(value2)) {
      return unit ? `${value2}px` : Number(value2);
    }
    if (/(rpx|upx)$/.test(value2)) {
      return unit ? `${uni.upx2px(parseInt(value2))}px` : Number(uni.upx2px(parseInt(value2)));
    }
    return unit ? `${parseInt(value2)}px` : parseInt(value2);
  }
  function sleep(value2 = 30) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, value2);
    });
  }
  function os$1() {
    return uni.getSystemInfoSync().platform.toLowerCase();
  }
  function sys() {
    return uni.getSystemInfoSync();
  }
  function random(min, max) {
    if (min >= 0 && max > 0 && max >= min) {
      const gab = max - min + 1;
      return Math.floor(Math.random() * gab + min);
    }
    return 0;
  }
  function guid(len = 32, firstU = true, radix = null) {
    const chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
    const uuid = [];
    radix = radix || chars.length;
    if (len) {
      for (let i2 = 0; i2 < len; i2++)
        uuid[i2] = chars[0 | Math.random() * radix];
    } else {
      let r2;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
      uuid[14] = "4";
      for (let i2 = 0; i2 < 36; i2++) {
        if (!uuid[i2]) {
          r2 = 0 | Math.random() * 16;
          uuid[i2] = chars[i2 == 19 ? r2 & 3 | 8 : r2];
        }
      }
    }
    if (firstU) {
      uuid.shift();
      return `u${uuid.join("")}`;
    }
    return uuid.join("");
  }
  function $parent(name = void 0) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options && parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        return parent;
      }
    }
    return false;
  }
  function addStyle(customStyle, target = "object") {
    if (empty(customStyle) || typeof customStyle === "object" && target === "object" || target === "string" && typeof customStyle === "string") {
      return customStyle;
    }
    if (target === "object") {
      customStyle = trim(customStyle);
      const styleArray = customStyle.split(";");
      const style = {};
      for (let i2 = 0; i2 < styleArray.length; i2++) {
        if (styleArray[i2]) {
          const item = styleArray[i2].split(":");
          style[trim(item[0])] = trim(item[1]);
        }
      }
      return style;
    }
    let string2 = "";
    for (const i2 in customStyle) {
      const key = i2.replace(/([A-Z])/g, "-$1").toLowerCase();
      string2 += `${key}:${customStyle[i2]};`;
    }
    return trim(string2);
  }
  function addUnit(value2 = "auto", unit = ((_b) => (_b = ((_a) => (_a = uni == null ? void 0 : uni.$uv) == null ? void 0 : _a.config)()) == null ? void 0 : _b.unit)() ? ((_d) => (_d = ((_c) => (_c = uni == null ? void 0 : uni.$uv) == null ? void 0 : _c.config)()) == null ? void 0 : _d.unit)() : "px") {
    value2 = String(value2);
    return number(value2) ? `${value2}${unit}` : value2;
  }
  function deepClone(obj, cache = /* @__PURE__ */ new WeakMap()) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (cache.has(obj))
      return cache.get(obj);
    let clone;
    if (obj instanceof Date) {
      clone = new Date(obj.getTime());
    } else if (obj instanceof RegExp) {
      clone = new RegExp(obj);
    } else if (obj instanceof Map) {
      clone = new Map(Array.from(obj, ([key, value2]) => [key, deepClone(value2, cache)]));
    } else if (obj instanceof Set) {
      clone = new Set(Array.from(obj, (value2) => deepClone(value2, cache)));
    } else if (Array.isArray(obj)) {
      clone = obj.map((value2) => deepClone(value2, cache));
    } else if (Object.prototype.toString.call(obj) === "[object Object]") {
      clone = Object.create(Object.getPrototypeOf(obj));
      cache.set(obj, clone);
      for (const [key, value2] of Object.entries(obj)) {
        clone[key] = deepClone(value2, cache);
      }
    } else {
      clone = Object.assign({}, obj);
    }
    cache.set(obj, clone);
    return clone;
  }
  function deepMerge$1(target = {}, source = {}) {
    target = deepClone(target);
    if (typeof target !== "object" || target === null || typeof source !== "object" || source === null)
      return target;
    const merged = Array.isArray(target) ? target.slice() : Object.assign({}, target);
    for (const prop in source) {
      if (!source.hasOwnProperty(prop))
        continue;
      const sourceValue = source[prop];
      const targetValue = merged[prop];
      if (sourceValue instanceof Date) {
        merged[prop] = new Date(sourceValue);
      } else if (sourceValue instanceof RegExp) {
        merged[prop] = new RegExp(sourceValue);
      } else if (sourceValue instanceof Map) {
        merged[prop] = new Map(sourceValue);
      } else if (sourceValue instanceof Set) {
        merged[prop] = new Set(sourceValue);
      } else if (typeof sourceValue === "object" && sourceValue !== null) {
        merged[prop] = deepMerge$1(targetValue, sourceValue);
      } else {
        merged[prop] = sourceValue;
      }
    }
    return merged;
  }
  function error(err) {
    {
      formatAppLog("error", "at uni_modules/uv-ui-tools/libs/function/index.js:250", `uvui提示：${err}`);
    }
  }
  function randomArray(array3 = []) {
    return array3.sort(() => Math.random() - 0.5);
  }
  if (!String.prototype.padStart) {
    String.prototype.padStart = function(maxLength, fillString = " ") {
      if (Object.prototype.toString.call(fillString) !== "[object String]") {
        throw new TypeError(
          "fillString must be String"
        );
      }
      const str = this;
      if (str.length >= maxLength)
        return String(str);
      const fillLength = maxLength - str.length;
      let times2 = Math.ceil(fillLength / fillString.length);
      while (times2 >>= 1) {
        fillString += fillString;
        if (times2 === 1) {
          fillString += fillString;
        }
      }
      return fillString.slice(0, fillLength) + str;
    };
  }
  function timeFormat(dateTime = null, formatStr = "yyyy-mm-dd") {
    let date3;
    if (!dateTime) {
      date3 = /* @__PURE__ */ new Date();
    } else if (/^\d{10}$/.test(dateTime == null ? void 0 : dateTime.toString().trim())) {
      date3 = new Date(dateTime * 1e3);
    } else if (typeof dateTime === "string" && /^\d+$/.test(dateTime.trim())) {
      date3 = new Date(Number(dateTime));
    } else if (typeof dateTime === "string" && dateTime.includes("-") && !dateTime.includes("T")) {
      date3 = new Date(dateTime.replace(/-/g, "/"));
    } else {
      date3 = new Date(dateTime);
    }
    const timeSource = {
      "y": date3.getFullYear().toString(),
      // 年
      "m": (date3.getMonth() + 1).toString().padStart(2, "0"),
      // 月
      "d": date3.getDate().toString().padStart(2, "0"),
      // 日
      "h": date3.getHours().toString().padStart(2, "0"),
      // 时
      "M": date3.getMinutes().toString().padStart(2, "0"),
      // 分
      "s": date3.getSeconds().toString().padStart(2, "0")
      // 秒
      // 有其他格式化字符需求可以继续添加，必须转化成字符串
    };
    for (const key in timeSource) {
      const [ret] = new RegExp(`${key}+`).exec(formatStr) || [];
      if (ret) {
        const beginIndex = key === "y" && ret.length === 2 ? 2 : 0;
        formatStr = formatStr.replace(ret, timeSource[key].slice(beginIndex));
      }
    }
    return formatStr;
  }
  function timeFrom(timestamp = null, format2 = "yyyy-mm-dd") {
    if (timestamp == null)
      timestamp = Number(/* @__PURE__ */ new Date());
    timestamp = parseInt(timestamp);
    if (timestamp.toString().length == 10)
      timestamp *= 1e3;
    let timer = (/* @__PURE__ */ new Date()).getTime() - timestamp;
    timer = parseInt(timer / 1e3);
    let tips = "";
    switch (true) {
      case timer < 300:
        tips = "刚刚";
        break;
      case (timer >= 300 && timer < 3600):
        tips = `${parseInt(timer / 60)}分钟前`;
        break;
      case (timer >= 3600 && timer < 86400):
        tips = `${parseInt(timer / 3600)}小时前`;
        break;
      case (timer >= 86400 && timer < 2592e3):
        tips = `${parseInt(timer / 86400)}天前`;
        break;
      default:
        if (format2 === false) {
          if (timer >= 2592e3 && timer < 365 * 86400) {
            tips = `${parseInt(timer / (86400 * 30))}个月前`;
          } else {
            tips = `${parseInt(timer / (86400 * 365))}年前`;
          }
        } else {
          tips = timeFormat(timestamp, format2);
        }
    }
    return tips;
  }
  function trim(str, pos = "both") {
    str = String(str);
    if (pos == "both") {
      return str.replace(/^\s+|\s+$/g, "");
    }
    if (pos == "left") {
      return str.replace(/^\s*/, "");
    }
    if (pos == "right") {
      return str.replace(/(\s*$)/g, "");
    }
    if (pos == "all") {
      return str.replace(/\s+/g, "");
    }
    return str;
  }
  function queryParams(data = {}, isPrefix = true, arrayFormat = "brackets") {
    const prefix = isPrefix ? "?" : "";
    const _result = [];
    if (["indices", "brackets", "repeat", "comma"].indexOf(arrayFormat) == -1)
      arrayFormat = "brackets";
    for (const key in data) {
      const value2 = data[key];
      if (["", void 0, null].indexOf(value2) >= 0) {
        continue;
      }
      if (value2.constructor === Array) {
        switch (arrayFormat) {
          case "indices":
            for (let i2 = 0; i2 < value2.length; i2++) {
              _result.push(`${key}[${i2}]=${value2[i2]}`);
            }
            break;
          case "brackets":
            value2.forEach((_value) => {
              _result.push(`${key}[]=${_value}`);
            });
            break;
          case "repeat":
            value2.forEach((_value) => {
              _result.push(`${key}=${_value}`);
            });
            break;
          case "comma":
            let commaStr = "";
            value2.forEach((_value) => {
              commaStr += (commaStr ? "," : "") + _value;
            });
            _result.push(`${key}=${commaStr}`);
            break;
          default:
            value2.forEach((_value) => {
              _result.push(`${key}[]=${_value}`);
            });
        }
      } else {
        _result.push(`${key}=${value2}`);
      }
    }
    return _result.length ? prefix + _result.join("&") : "";
  }
  function toast(title, duration = 2e3) {
    uni.showToast({
      title: String(title),
      icon: "none",
      duration
    });
  }
  function type2icon(type2 = "success", fill2 = false) {
    if (["primary", "info", "error", "warning", "success"].indexOf(type2) == -1)
      type2 = "success";
    let iconName = "";
    switch (type2) {
      case "primary":
        iconName = "info-circle";
        break;
      case "info":
        iconName = "info-circle";
        break;
      case "error":
        iconName = "close-circle";
        break;
      case "warning":
        iconName = "error-circle";
        break;
      case "success":
        iconName = "checkmark-circle";
        break;
      default:
        iconName = "checkmark-circle";
    }
    if (fill2)
      iconName += "-fill";
    return iconName;
  }
  function priceFormat(number22, decimals = 0, decimalPoint = ".", thousandsSeparator = ",") {
    number22 = `${number22}`.replace(/[^0-9+-Ee.]/g, "");
    const n2 = !isFinite(+number22) ? 0 : +number22;
    const prec = !isFinite(+decimals) ? 0 : Math.abs(decimals);
    const sep = typeof thousandsSeparator === "undefined" ? "," : thousandsSeparator;
    const dec2 = typeof decimalPoint === "undefined" ? "." : decimalPoint;
    let s2 = "";
    s2 = (prec ? round(n2, prec) + "" : `${Math.round(n2)}`).split(".");
    const re2 = /(-?\d+)(\d{3})/;
    while (re2.test(s2[0])) {
      s2[0] = s2[0].replace(re2, `$1${sep}$2`);
    }
    if ((s2[1] || "").length < prec) {
      s2[1] = s2[1] || "";
      s2[1] += new Array(prec - s2[1].length + 1).join("0");
    }
    return s2.join(dec2);
  }
  function getDuration(value2, unit = true) {
    const valueNum = parseInt(value2);
    if (unit) {
      if (/s$/.test(value2))
        return value2;
      return value2 > 30 ? `${value2}ms` : `${value2}s`;
    }
    if (/ms$/.test(value2))
      return valueNum;
    if (/s$/.test(value2))
      return valueNum > 30 ? valueNum : valueNum * 1e3;
    return valueNum;
  }
  function padZero(value2) {
    return `00${value2}`.slice(-2);
  }
  function formValidate(instance, event) {
    const formItem = $parent.call(instance, "uv-form-item");
    const form = $parent.call(instance, "uv-form");
    if (formItem && form) {
      form.validateField(formItem.prop, () => {
      }, event);
    }
  }
  function getProperty(obj, key) {
    if (!obj) {
      return;
    }
    if (typeof key !== "string" || key === "") {
      return "";
    }
    if (key.indexOf(".") !== -1) {
      const keys2 = key.split(".");
      let firstObj = obj[keys2[0]] || {};
      for (let i2 = 1; i2 < keys2.length; i2++) {
        if (firstObj) {
          firstObj = firstObj[keys2[i2]];
        }
      }
      return firstObj;
    }
    return obj[key];
  }
  function setProperty(obj, key, value2) {
    if (!obj) {
      return;
    }
    const inFn = function(_obj, keys2, v2) {
      if (keys2.length === 1) {
        _obj[keys2[0]] = v2;
        return;
      }
      while (keys2.length > 1) {
        const k = keys2[0];
        if (!_obj[k] || typeof _obj[k] !== "object") {
          _obj[k] = {};
        }
        keys2.shift();
        inFn(_obj[k], keys2, v2);
      }
    };
    if (typeof key !== "string" || key === "")
      ;
    else if (key.indexOf(".") !== -1) {
      const keys2 = key.split(".");
      inFn(obj, keys2, value2);
    } else {
      obj[key] = value2;
    }
  }
  function page() {
    var _a;
    const pages2 = getCurrentPages();
    const route2 = (_a = pages2[pages2.length - 1]) == null ? void 0 : _a.route;
    return `/${route2 ? route2 : ""}`;
  }
  function pages$1() {
    const pages2 = getCurrentPages();
    return pages2;
  }
  function getHistoryPage(back = 0) {
    const pages2 = getCurrentPages();
    const len = pages2.length;
    return pages2[len - 1 + back];
  }
  function setConfig({
    props: props2 = {},
    config = {},
    color = {},
    zIndex = {}
  }) {
    const {
      deepMerge: deepMerge2
    } = uni.$uv;
    uni.$uv.config = deepMerge2(uni.$uv.config, config);
    uni.$uv.props = deepMerge2(uni.$uv.props, props2);
    uni.$uv.color = deepMerge2(uni.$uv.color, color);
    uni.$uv.zIndex = deepMerge2(uni.$uv.zIndex, zIndex);
  }
  const index = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    $parent,
    addStyle,
    addUnit,
    deepClone,
    deepMerge: deepMerge$1,
    error,
    formValidate,
    getDuration,
    getHistoryPage,
    getProperty,
    getPx,
    guid,
    os: os$1,
    padZero,
    page,
    pages: pages$1,
    priceFormat,
    queryParams,
    random,
    randomArray,
    range: range$1,
    setConfig,
    setProperty,
    sleep,
    sys,
    timeFormat,
    timeFrom,
    toast,
    trim,
    type2icon
  }, Symbol.toStringTag, { value: "Module" }));
  class Router {
    constructor() {
      this.config = {
        type: "navigateTo",
        url: "",
        delta: 1,
        // navigateBack页面后退时,回退的层数
        params: {},
        // 传递的参数
        animationType: "pop-in",
        // 窗口动画,只在APP有效
        animationDuration: 300,
        // 窗口动画持续时间,单位毫秒,只在APP有效
        intercept: false,
        // 是否需要拦截
        events: {}
        // 页面间通信接口，用于监听被打开页面发送到当前页面的数据。hbuilderx 2.8.9+ 开始支持。
      };
      this.route = this.route.bind(this);
    }
    // 判断url前面是否有"/"，如果没有则加上，否则无法跳转
    addRootPath(url2) {
      return url2[0] === "/" ? url2 : `/${url2}`;
    }
    // 整合路由参数
    mixinParam(url2, params) {
      url2 = url2 && this.addRootPath(url2);
      let query = "";
      if (/.*\/.*\?.*=.*/.test(url2)) {
        query = queryParams(params, false);
        return url2 += `&${query}`;
      }
      query = queryParams(params);
      return url2 += query;
    }
    // 对外的方法名称
    async route(options = {}, params = {}) {
      let mergeConfig = {};
      if (typeof options === "string") {
        mergeConfig.url = this.mixinParam(options, params);
        mergeConfig.type = "navigateTo";
      } else {
        mergeConfig = deepMerge$1(this.config, options);
        mergeConfig.url = this.mixinParam(options.url, options.params);
      }
      if (mergeConfig.url === page())
        return;
      if (params.intercept) {
        mergeConfig.intercept = params.intercept;
      }
      mergeConfig.params = params;
      mergeConfig = deepMerge$1(this.config, mergeConfig);
      if (typeof mergeConfig.intercept === "function") {
        const isNext = await new Promise((resolve, reject) => {
          mergeConfig.intercept(mergeConfig, resolve);
        });
        isNext && this.openPage(mergeConfig);
      } else {
        this.openPage(mergeConfig);
      }
    }
    // 执行路由跳转
    openPage(config) {
      const {
        url: url2,
        type: type2,
        delta,
        animationType,
        animationDuration,
        events
      } = config;
      if (config.type == "navigateTo" || config.type == "to") {
        uni.navigateTo({
          url: url2,
          animationType,
          animationDuration,
          events
        });
      }
      if (config.type == "redirectTo" || config.type == "redirect") {
        uni.redirectTo({
          url: url2
        });
      }
      if (config.type == "switchTab" || config.type == "tab") {
        uni.switchTab({
          url: url2
        });
      }
      if (config.type == "reLaunch" || config.type == "launch") {
        uni.reLaunch({
          url: url2
        });
      }
      if (config.type == "navigateBack" || config.type == "back") {
        uni.navigateBack({
          delta
        });
      }
    }
  }
  const route = new Router().route;
  let timeout = null;
  function debounce(func2, wait = 500, immediate = false) {
    if (timeout !== null)
      clearTimeout(timeout);
    if (immediate) {
      const callNow = !timeout;
      timeout = setTimeout(() => {
        timeout = null;
      }, wait);
      if (callNow)
        typeof func2 === "function" && func2();
    } else {
      timeout = setTimeout(() => {
        typeof func2 === "function" && func2();
      }, wait);
    }
  }
  let flag;
  function throttle(func2, wait = 500, immediate = true) {
    if (immediate) {
      if (!flag) {
        flag = true;
        typeof func2 === "function" && func2();
        setTimeout(() => {
          flag = false;
        }, wait);
      }
    } else if (!flag) {
      flag = true;
      setTimeout(() => {
        flag = false;
        typeof func2 === "function" && func2();
      }, wait);
    }
  }
  const mixin = {
    // 定义每个组件都可能需要用到的外部样式以及类名
    props: {
      // 每个组件都有的父组件传递的样式，可以为字符串或者对象形式
      customStyle: {
        type: [Object, String],
        default: () => ({})
      },
      customClass: {
        type: String,
        default: ""
      },
      // 跳转的页面路径
      url: {
        type: String,
        default: ""
      },
      // 页面跳转的类型
      linkType: {
        type: String,
        default: "navigateTo"
      }
    },
    data() {
      return {};
    },
    onLoad() {
      this.$uv.getRect = this.$uvGetRect;
    },
    created() {
      this.$uv.getRect = this.$uvGetRect;
    },
    computed: {
      $uv() {
        var _a, _b;
        return {
          ...index,
          test,
          route,
          debounce,
          throttle,
          unit: (_b = (_a = uni == null ? void 0 : uni.$uv) == null ? void 0 : _a.config) == null ? void 0 : _b.unit
        };
      },
      /**
       * 生成bem规则类名
       * 由于微信小程序，H5，nvue之间绑定class的差异，无法通过:class="[bem()]"的形式进行同用
       * 故采用如下折中做法，最后返回的是数组（一般平台）或字符串（支付宝和字节跳动平台），类似['a', 'b', 'c']或'a b c'的形式
       * @param {String} name 组件名称
       * @param {Array} fixed 一直会存在的类名
       * @param {Array} change 会根据变量值为true或者false而出现或者隐藏的类名
       * @returns {Array|string}
       */
      bem() {
        return function(name, fixed, change) {
          const prefix = `uv-${name}--`;
          const classes = {};
          if (fixed) {
            fixed.map((item) => {
              classes[prefix + this[item]] = true;
            });
          }
          if (change) {
            change.map((item) => {
              this[item] ? classes[prefix + item] = this[item] : delete classes[prefix + item];
            });
          }
          return Object.keys(classes);
        };
      }
    },
    methods: {
      // 跳转某一个页面
      openPage(urlKey = "url") {
        const url2 = this[urlKey];
        if (url2) {
          uni[this.linkType]({
            url: url2
          });
        }
      },
      // 查询节点信息
      // 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)
      // 解决办法为在组件根部再套一个没有任何作用的view元素
      $uvGetRect(selector, all) {
        return new Promise((resolve) => {
          uni.createSelectorQuery().in(this)[all ? "selectAll" : "select"](selector).boundingClientRect((rect) => {
            if (all && Array.isArray(rect) && rect.length) {
              resolve(rect);
            }
            if (!all && rect) {
              resolve(rect);
            }
          }).exec();
        });
      },
      getParentData(parentName = "") {
        if (!this.parent)
          this.parent = {};
        this.parent = this.$uv.$parent.call(this, parentName);
        if (this.parent.children) {
          this.parent.children.indexOf(this) === -1 && this.parent.children.push(this);
        }
        if (this.parent && this.parentData) {
          Object.keys(this.parentData).map((key) => {
            this.parentData[key] = this.parent[key];
          });
        }
      },
      // 阻止事件冒泡
      preventEvent(e2) {
        e2 && typeof e2.stopPropagation === "function" && e2.stopPropagation();
      },
      // 空操作
      noop(e2) {
        this.preventEvent(e2);
      }
    },
    onReachBottom() {
      uni.$emit("uvOnReachBottom");
    },
    beforeDestroy() {
      if (this.parent && array(this.parent.children)) {
        const childrenList = this.parent.children;
        childrenList.map((child, index2) => {
          if (child === this) {
            childrenList.splice(index2, 1);
          }
        });
      }
    },
    // 兼容vue3
    unmounted() {
      if (this.parent && array(this.parent.children)) {
        const childrenList = this.parent.children;
        childrenList.map((child, index2) => {
          if (child === this) {
            childrenList.splice(index2, 1);
          }
        });
      }
    }
  };
  const icons = {
    "uvicon-level": "e68f",
    "uvicon-checkbox-mark": "e659",
    "uvicon-folder": "e694",
    "uvicon-movie": "e67c",
    "uvicon-star-fill": "e61e",
    "uvicon-star": "e618",
    "uvicon-phone-fill": "e6ac",
    "uvicon-phone": "e6ba",
    "uvicon-apple-fill": "e635",
    "uvicon-backspace": "e64d",
    "uvicon-attach": "e640",
    "uvicon-empty-data": "e671",
    "uvicon-empty-address": "e68a",
    "uvicon-empty-favor": "e662",
    "uvicon-empty-car": "e657",
    "uvicon-empty-order": "e66b",
    "uvicon-empty-list": "e672",
    "uvicon-empty-search": "e677",
    "uvicon-empty-permission": "e67d",
    "uvicon-empty-news": "e67e",
    "uvicon-empty-history": "e685",
    "uvicon-empty-coupon": "e69b",
    "uvicon-empty-page": "e60e",
    "uvicon-empty-wifi-off": "e6cc",
    "uvicon-reload": "e627",
    "uvicon-order": "e695",
    "uvicon-server-man": "e601",
    "uvicon-search": "e632",
    "uvicon-more-dot-fill": "e66f",
    "uvicon-scan": "e631",
    "uvicon-map": "e665",
    "uvicon-map-fill": "e6a8",
    "uvicon-tags": "e621",
    "uvicon-tags-fill": "e613",
    "uvicon-eye": "e664",
    "uvicon-eye-fill": "e697",
    "uvicon-eye-off": "e69c",
    "uvicon-eye-off-outline": "e688",
    "uvicon-mic": "e66d",
    "uvicon-mic-off": "e691",
    "uvicon-calendar": "e65c",
    "uvicon-trash": "e623",
    "uvicon-trash-fill": "e6ce",
    "uvicon-play-left": "e6bf",
    "uvicon-play-right": "e6b3",
    "uvicon-minus": "e614",
    "uvicon-plus": "e625",
    "uvicon-info-circle": "e69f",
    "uvicon-info-circle-fill": "e6a7",
    "uvicon-question-circle": "e622",
    "uvicon-question-circle-fill": "e6bc",
    "uvicon-close": "e65a",
    "uvicon-checkmark": "e64a",
    "uvicon-checkmark-circle": "e643",
    "uvicon-checkmark-circle-fill": "e668",
    "uvicon-setting": "e602",
    "uvicon-setting-fill": "e6d0",
    "uvicon-heart": "e6a2",
    "uvicon-heart-fill": "e68b",
    "uvicon-camera": "e642",
    "uvicon-camera-fill": "e650",
    "uvicon-more-circle": "e69e",
    "uvicon-more-circle-fill": "e684",
    "uvicon-chat": "e656",
    "uvicon-chat-fill": "e63f",
    "uvicon-bag": "e647",
    "uvicon-error-circle": "e66e",
    "uvicon-error-circle-fill": "e655",
    "uvicon-close-circle": "e64e",
    "uvicon-close-circle-fill": "e666",
    "uvicon-share": "e629",
    "uvicon-share-fill": "e6bb",
    "uvicon-share-square": "e6c4",
    "uvicon-shopping-cart": "e6cb",
    "uvicon-shopping-cart-fill": "e630",
    "uvicon-bell": "e651",
    "uvicon-bell-fill": "e604",
    "uvicon-list": "e690",
    "uvicon-list-dot": "e6a9",
    "uvicon-zhifubao-circle-fill": "e617",
    "uvicon-weixin-circle-fill": "e6cd",
    "uvicon-weixin-fill": "e620",
    "uvicon-qq-fill": "e608",
    "uvicon-qq-circle-fill": "e6b9",
    "uvicon-moments-circel-fill": "e6c2",
    "uvicon-moments": "e6a0",
    "uvicon-car": "e64f",
    "uvicon-car-fill": "e648",
    "uvicon-warning-fill": "e6c7",
    "uvicon-warning": "e6c1",
    "uvicon-clock-fill": "e64b",
    "uvicon-clock": "e66c",
    "uvicon-edit-pen": "e65d",
    "uvicon-edit-pen-fill": "e679",
    "uvicon-email": "e673",
    "uvicon-email-fill": "e683",
    "uvicon-minus-circle": "e6a5",
    "uvicon-plus-circle": "e603",
    "uvicon-plus-circle-fill": "e611",
    "uvicon-file-text": "e687",
    "uvicon-file-text-fill": "e67f",
    "uvicon-pushpin": "e6d1",
    "uvicon-pushpin-fill": "e6b6",
    "uvicon-grid": "e68c",
    "uvicon-grid-fill": "e698",
    "uvicon-play-circle": "e6af",
    "uvicon-play-circle-fill": "e62a",
    "uvicon-pause-circle-fill": "e60c",
    "uvicon-pause": "e61c",
    "uvicon-pause-circle": "e696",
    "uvicon-gift-fill": "e6b0",
    "uvicon-gift": "e680",
    "uvicon-kefu-ermai": "e660",
    "uvicon-server-fill": "e610",
    "uvicon-coupon-fill": "e64c",
    "uvicon-coupon": "e65f",
    "uvicon-integral": "e693",
    "uvicon-integral-fill": "e6b1",
    "uvicon-home-fill": "e68e",
    "uvicon-home": "e67b",
    "uvicon-account": "e63a",
    "uvicon-account-fill": "e653",
    "uvicon-thumb-down-fill": "e628",
    "uvicon-thumb-down": "e60a",
    "uvicon-thumb-up": "e612",
    "uvicon-thumb-up-fill": "e62c",
    "uvicon-lock-fill": "e6a6",
    "uvicon-lock-open": "e68d",
    "uvicon-lock-opened-fill": "e6a1",
    "uvicon-lock": "e69d",
    "uvicon-red-packet": "e6c3",
    "uvicon-photo-fill": "e6b4",
    "uvicon-photo": "e60d",
    "uvicon-volume-off-fill": "e6c8",
    "uvicon-volume-off": "e6bd",
    "uvicon-volume-fill": "e624",
    "uvicon-volume": "e605",
    "uvicon-download": "e670",
    "uvicon-arrow-up-fill": "e636",
    "uvicon-arrow-down-fill": "e638",
    "uvicon-play-left-fill": "e6ae",
    "uvicon-play-right-fill": "e6ad",
    "uvicon-arrow-downward": "e634",
    "uvicon-arrow-leftward": "e63b",
    "uvicon-arrow-rightward": "e644",
    "uvicon-arrow-upward": "e641",
    "uvicon-arrow-down": "e63e",
    "uvicon-arrow-right": "e63c",
    "uvicon-arrow-left": "e646",
    "uvicon-arrow-up": "e633",
    "uvicon-skip-back-left": "e6c5",
    "uvicon-skip-forward-right": "e61f",
    "uvicon-arrow-left-double": "e637",
    "uvicon-man": "e675",
    "uvicon-woman": "e626",
    "uvicon-en": "e6b8",
    "uvicon-twitte": "e607",
    "uvicon-twitter-circle-fill": "e6cf"
  };
  const props$l = {
    props: {
      // 图标类名
      name: {
        type: String,
        default: ""
      },
      // 图标颜色，可接受主题色
      color: {
        type: String,
        default: "#606266"
      },
      // 字体大小，单位px
      size: {
        type: [String, Number],
        default: "16px"
      },
      // 是否显示粗体
      bold: {
        type: Boolean,
        default: false
      },
      // 点击图标的时候传递事件出去的index（用于区分点击了哪一个）
      index: {
        type: [String, Number],
        default: null
      },
      // 触摸图标时的类名
      hoverClass: {
        type: String,
        default: ""
      },
      // 自定义扩展前缀，方便用户扩展自己的图标库
      customPrefix: {
        type: String,
        default: "uvicon"
      },
      // 图标右边或者下面的文字
      label: {
        type: [String, Number],
        default: ""
      },
      // label的位置，只能右边或者下边
      labelPos: {
        type: String,
        default: "right"
      },
      // label的大小
      labelSize: {
        type: [String, Number],
        default: "15px"
      },
      // label的颜色
      labelColor: {
        type: String,
        default: "#606266"
      },
      // label与图标的距离
      space: {
        type: [String, Number],
        default: "3px"
      },
      // 图片的mode
      imgMode: {
        type: String,
        default: "aspectFit"
      },
      // 用于显示图片小图标时，图片的宽度
      width: {
        type: [String, Number],
        default: ""
      },
      // 用于显示图片小图标时，图片的高度
      height: {
        type: [String, Number],
        default: ""
      },
      // 用于解决某些情况下，让图标垂直居中的用途
      top: {
        type: [String, Number],
        default: 0
      },
      // 是否阻止事件传播
      stop: {
        type: Boolean,
        default: false
      },
      ...(_f = (_e2 = uni.$uv) == null ? void 0 : _e2.props) == null ? void 0 : _f.icon
    }
  };
  const _sfc_main$x = {
    name: "uv-icon",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$l],
    data() {
      return {
        colorType: [
          "primary",
          "success",
          "info",
          "error",
          "warning"
        ]
      };
    },
    computed: {
      uClasses() {
        let classes = [];
        classes.push(this.customPrefix);
        classes.push(this.customPrefix + "-" + this.name);
        if (this.color && this.colorType.includes(this.color))
          classes.push("uv-icon__icon--" + this.color);
        return classes;
      },
      iconStyle() {
        let style = {};
        style = {
          fontSize: this.$uv.addUnit(this.size),
          lineHeight: this.$uv.addUnit(this.size),
          fontWeight: this.bold ? "bold" : "normal",
          // 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
          top: this.$uv.addUnit(this.top)
        };
        if (this.color && !this.colorType.includes(this.color))
          style.color = this.color;
        return style;
      },
      // 判断传入的name属性，是否图片路径，只要带有"/"均认为是图片形式
      isImg() {
        const isBase64 = this.name.indexOf("data:") > -1 && this.name.indexOf("base64") > -1;
        return this.name.indexOf("/") !== -1 || isBase64;
      },
      imgStyle() {
        let style = {};
        style.width = this.width ? this.$uv.addUnit(this.width) : this.$uv.addUnit(this.size);
        style.height = this.height ? this.$uv.addUnit(this.height) : this.$uv.addUnit(this.size);
        return style;
      },
      // 通过图标名，查找对应的图标
      icon() {
        const code2 = icons["uvicon-" + this.name];
        return code2 ? unescape(`%u${code2}`) : ["uvicon"].indexOf(this.customPrefix) > -1 ? this.name : "";
      }
    },
    methods: {
      clickHandler(e2) {
        this.$emit("click", this.index);
        this.stop && this.preventEvent(e2);
      }
    }
  };
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uv-icon", ["uv-icon--" + _ctx.labelPos]]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args))
      },
      [
        $options.isImg ? (vue.openBlock(), vue.createElementBlock("image", {
          key: 0,
          class: "uv-icon__img",
          src: _ctx.name,
          mode: _ctx.imgMode,
          style: vue.normalizeStyle([$options.imgStyle, _ctx.$uv.addStyle(_ctx.customStyle)])
        }, null, 12, ["src", "mode"])) : (vue.openBlock(), vue.createElementBlock("text", {
          key: 1,
          class: vue.normalizeClass(["uv-icon__icon", $options.uClasses]),
          style: vue.normalizeStyle([$options.iconStyle, _ctx.$uv.addStyle(_ctx.customStyle)]),
          "hover-class": _ctx.hoverClass
        }, vue.toDisplayString($options.icon), 15, ["hover-class"])),
        vue.createCommentVNode(' 这里进行空字符串判断，如果仅仅是v-if="label"，可能会出现传递0的时候，结果也无法显示 '),
        _ctx.label !== "" ? (vue.openBlock(), vue.createElementBlock(
          "text",
          {
            key: 2,
            class: "uv-icon__label",
            style: vue.normalizeStyle({
              color: _ctx.labelColor,
              fontSize: _ctx.$uv.addUnit(_ctx.labelSize),
              marginLeft: _ctx.labelPos == "right" ? _ctx.$uv.addUnit(_ctx.space) : 0,
              marginTop: _ctx.labelPos == "bottom" ? _ctx.$uv.addUnit(_ctx.space) : 0,
              marginRight: _ctx.labelPos == "left" ? _ctx.$uv.addUnit(_ctx.space) : 0,
              marginBottom: _ctx.labelPos == "top" ? _ctx.$uv.addUnit(_ctx.space) : 0
            })
          },
          vue.toDisplayString(_ctx.label),
          5
          /* TEXT, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      2
      /* CLASS */
    );
  }
  const __easycom_8$2 = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$w], ["__scopeId", "data-v-b7a6dd5d"], ["__file", "E:/code/app/WH-app/uni_modules/uv-icon/components/uv-icon/uv-icon.vue"]]);
  const props$k = {
    props: {
      // 文字颜色
      color: {
        type: String,
        default: ""
      },
      // 字体大小，单位px
      fontSize: {
        type: [String, Number],
        default: 14
      },
      // 是否显示下划线
      underLine: {
        type: Boolean,
        default: false
      },
      // 要跳转的链接
      href: {
        type: String,
        default: ""
      },
      // 小程序中复制到粘贴板的提示语
      mpTips: {
        type: String,
        default: "链接已复制，请在浏览器打开"
      },
      // 下划线颜色
      lineColor: {
        type: String,
        default: ""
      },
      // 超链接的问题，不使用slot形式传入，是因为nvue下无法修改颜色
      text: {
        type: String,
        default: ""
      },
      ...(_h = (_g = uni.$uv) == null ? void 0 : _g.props) == null ? void 0 : _h.link
    }
  };
  const _sfc_main$w = {
    name: "uv-link",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$k],
    computed: {
      linkStyle() {
        const style = {
          color: this.color,
          fontSize: this.$uv.addUnit(this.fontSize),
          // line-height设置为比字体大小多2px
          lineHeight: this.$uv.addUnit(this.$uv.getPx(this.fontSize) + 2),
          textDecoration: this.underLine ? "underline" : "none"
        };
        return style;
      }
    },
    methods: {
      openLink() {
        plus.runtime.openURL(this.href);
        this.$emit("click");
      }
    }
  };
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "text",
      {
        class: "uv-link",
        onClick: _cache[0] || (_cache[0] = vue.withModifiers((...args) => $options.openLink && $options.openLink(...args), ["stop"])),
        style: vue.normalizeStyle([$options.linkStyle, _ctx.$uv.addStyle(_ctx.customStyle)])
      },
      vue.toDisplayString(_ctx.text),
      5
      /* TEXT, STYLE */
    );
  }
  const __easycom_1$4 = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$v], ["__scopeId", "data-v-86e87617"], ["__file", "E:/code/app/WH-app/uni_modules/uv-link/components/uv-link/uv-link.vue"]]);
  const value = {
    computed: {
      // 经处理后需要显示的值
      value() {
        const {
          text,
          mode,
          format: format2,
          href
        } = this;
        if (mode === "price") {
          if (!/^\d+(\.\d+)?$/.test(text)) {
            error("金额模式下，text参数需要为金额格式");
          }
          if (func(format2)) {
            return format2(text);
          }
          return priceFormat(text, 2);
        }
        if (mode === "date") {
          !date(text) && error("日期模式下，text参数需要为日期或时间戳格式");
          if (func(format2)) {
            return format2(text);
          }
          if (format2) {
            return timeFormat(text, format2);
          }
          return timeFormat(text, "yyyy-mm-dd");
        }
        if (mode === "phone") {
          if (func(format2)) {
            return format2(text);
          }
          if (format2 === "encrypt") {
            return `${text.substr(0, 3)}****${text.substr(7)}`;
          }
          return text;
        }
        if (mode === "name") {
          !(typeof text === "string") && error("姓名模式下，text参数需要为字符串格式");
          if (func(format2)) {
            return format2(text);
          }
          if (format2 === "encrypt") {
            return this.formatName(text);
          }
          return text;
        }
        if (mode === "link") {
          !url(href) && error("超链接模式下，href参数需要为URL格式");
          return text;
        }
        return text;
      }
    },
    methods: {
      // 默认的姓名脱敏规则
      formatName(name) {
        let value2 = "";
        if (name.length === 2) {
          value2 = name.substr(0, 1) + "*";
        } else if (name.length > 2) {
          let char = "";
          for (let i2 = 0, len = name.length - 2; i2 < len; i2++) {
            char += "*";
          }
          value2 = name.substr(0, 1) + char + name.substr(-1, 1);
        } else {
          value2 = name;
        }
        return value2;
      }
    }
  };
  const props$j = {
    props: {
      // 主题颜色
      type: {
        type: String,
        default: ""
      },
      // 是否显示
      show: {
        type: Boolean,
        default: true
      },
      // 显示的值
      text: {
        type: [String, Number],
        default: ""
      },
      // 前置图标
      prefixIcon: {
        type: String,
        default: ""
      },
      // 后置图标
      suffixIcon: {
        type: String,
        default: ""
      },
      // 文本处理的匹配模式
      // text-普通文本，price-价格，phone-手机号，name-姓名，date-日期，link-超链接
      mode: {
        type: String,
        default: ""
      },
      // mode=link下，配置的链接
      href: {
        type: String,
        default: ""
      },
      // 格式化规则
      format: {
        type: [String, Function],
        default: ""
      },
      // mode=phone时，点击文本是否拨打电话
      call: {
        type: Boolean,
        default: true
      },
      // 小程序的打开方式
      openType: {
        type: String,
        default: ""
      },
      // 是否粗体，默认normal
      bold: {
        type: Boolean,
        default: false
      },
      // 是否块状
      block: {
        type: Boolean,
        default: false
      },
      // 文本显示的行数，如果设置，超出此行数，将会显示省略号
      lines: {
        type: [String, Number],
        default: ""
      },
      // 文本颜色
      color: {
        type: String,
        default: "#303133"
      },
      // 字体大小
      size: {
        type: [String, Number],
        default: 15
      },
      // 图标的样式
      iconStyle: {
        type: [Object, String],
        default: () => ({
          fontSize: "15px"
        })
      },
      // 文字装饰，下划线，中划线等，可选值 none|underline|line-through
      decoration: {
        type: String,
        default: "none"
      },
      // 外边距，对象、字符串，数值形式均可
      margin: {
        type: [Object, String, Number],
        default: 0
      },
      // 文本行高
      lineHeight: {
        type: [String, Number],
        default: ""
      },
      // 文本对齐方式，可选值left|center|right
      align: {
        type: String,
        default: "left"
      },
      // 文字换行，可选值break-word|normal|anywhere
      wordWrap: {
        type: String,
        default: "normal"
      },
      ...(_j = (_i = uni.$uv) == null ? void 0 : _i.props) == null ? void 0 : _j.text
    }
  };
  const _sfc_main$v = {
    name: "uv-text",
    emits: ["click"],
    mixins: [mpMixin, mixin, value, props$j],
    computed: {
      valueStyle() {
        const style = {
          textDecoration: this.decoration,
          fontWeight: this.bold ? "bold" : "normal",
          wordWrap: this.wordWrap,
          fontSize: this.$uv.addUnit(this.size)
        };
        !this.type && (style.color = this.color);
        this.isNvue && this.lines && (style.lines = this.lines);
        if (this.isNvue && this.mode != "price" && !this.prefixIcon && !this.suffixIcon) {
          style.flex = 1;
          style.textAlign = this.align === "left" ? "flex-start" : this.align === "center" ? "center" : "right";
        }
        this.lineHeight && (style.lineHeight = this.$uv.addUnit(this.lineHeight));
        !this.isNvue && this.block && (style.display = "block");
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      },
      isNvue() {
        let nvue = false;
        return nvue;
      },
      isMp() {
        let mp = false;
        return mp;
      }
    },
    data() {
      return {};
    },
    methods: {
      clickHandler() {
        if (this.call && this.mode === "phone") {
          uni.makePhoneCall({
            phoneNumber: this.text
          });
        }
        this.$emit("click");
      }
    }
  };
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_link = resolveEasycom(vue.resolveDynamicComponent("uv-link"), __easycom_1$4);
    return _ctx.show ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["uv-text", []]),
        style: vue.normalizeStyle({
          margin: _ctx.margin,
          justifyContent: _ctx.align === "left" ? "flex-start" : _ctx.align === "center" ? "center" : "flex-end"
        }),
        onClick: _cache[6] || (_cache[6] = (...args) => $options.clickHandler && $options.clickHandler(...args))
      },
      [
        _ctx.mode === "price" ? (vue.openBlock(), vue.createElementBlock(
          "text",
          {
            key: 0,
            class: vue.normalizeClass(["uv-text__price", _ctx.type && `uv-text__value--${_ctx.type}`]),
            style: vue.normalizeStyle([$options.valueStyle])
          },
          "￥",
          6
          /* CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true),
        _ctx.prefixIcon ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "uv-text__prefix-icon"
        }, [
          vue.createVNode(_component_uv_icon, {
            name: _ctx.prefixIcon,
            customStyle: _ctx.$uv.addStyle(_ctx.iconStyle)
          }, null, 8, ["name", "customStyle"])
        ])) : vue.createCommentVNode("v-if", true),
        _ctx.mode === "link" ? (vue.openBlock(), vue.createBlock(_component_uv_link, {
          key: 2,
          text: _ctx.value,
          href: _ctx.href,
          underLine: ""
        }, null, 8, ["text", "href"])) : _ctx.openType && $options.isMp ? (vue.openBlock(), vue.createElementBlock("button", {
          key: 3,
          class: "uv-reset-button uv-text__value",
          style: vue.normalizeStyle([$options.valueStyle]),
          openType: _ctx.openType,
          onGetuserinfo: _cache[0] || (_cache[0] = (...args) => _ctx.onGetUserInfo && _ctx.onGetUserInfo(...args)),
          onContact: _cache[1] || (_cache[1] = (...args) => _ctx.onContact && _ctx.onContact(...args)),
          onGetphonenumber: _cache[2] || (_cache[2] = (...args) => _ctx.onGetPhoneNumber && _ctx.onGetPhoneNumber(...args)),
          onError: _cache[3] || (_cache[3] = (...args) => _ctx.onError && _ctx.onError(...args)),
          onLaunchapp: _cache[4] || (_cache[4] = (...args) => _ctx.onLaunchApp && _ctx.onLaunchApp(...args)),
          onOpensetting: _cache[5] || (_cache[5] = (...args) => _ctx.onOpenSetting && _ctx.onOpenSetting(...args)),
          lang: _ctx.lang,
          "session-from": _ctx.sessionFrom,
          "send-message-title": _ctx.sendMessageTitle,
          "send-message-path": _ctx.sendMessagePath,
          "send-message-img": _ctx.sendMessageImg,
          "show-message-card": _ctx.showMessageCard,
          "app-parameter": _ctx.appParameter
        }, vue.toDisplayString(_ctx.value), 45, ["openType", "lang", "session-from", "send-message-title", "send-message-path", "send-message-img", "show-message-card", "app-parameter"])) : (vue.openBlock(), vue.createElementBlock(
          "text",
          {
            key: 4,
            class: vue.normalizeClass(["uv-text__value", [
              _ctx.type && `uv-text__value--${_ctx.type}`,
              _ctx.lines && `uv-line-${_ctx.lines}`
            ]]),
            style: vue.normalizeStyle([$options.valueStyle])
          },
          vue.toDisplayString(_ctx.value),
          7
          /* TEXT, CLASS, STYLE */
        )),
        _ctx.suffixIcon ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 5,
          class: "uv-text__suffix-icon"
        }, [
          vue.createVNode(_component_uv_icon, {
            name: _ctx.suffixIcon,
            customStyle: _ctx.$uv.addStyle(_ctx.iconStyle)
          }, null, 8, ["name", "customStyle"])
        ])) : vue.createCommentVNode("v-if", true)
      ],
      4
      /* STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0$2 = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$u], ["__scopeId", "data-v-8da47eb3"], ["__file", "E:/code/app/WH-app/uni_modules/uv-text/components/uv-text/uv-text.vue"]]);
  const props$i = {
    props: {
      color: {
        type: String,
        default: "#d6d7d9"
      },
      // 长度，竖向时表现为高度，横向时表现为长度，可以为百分比，带px单位的值等
      length: {
        type: [String, Number],
        default: "100%"
      },
      // 线条方向，col-竖向，row-横向
      direction: {
        type: String,
        default: "row"
      },
      // 是否显示细边框
      hairline: {
        type: Boolean,
        default: true
      },
      // 线条与上下左右元素的间距，字符串形式，如"30px"、"20px 30px"
      margin: {
        type: [String, Number],
        default: 0
      },
      // 是否虚线，true-虚线，false-实线
      dashed: {
        type: Boolean,
        default: false
      },
      ...(_l = (_k = uni.$uv) == null ? void 0 : _k.props) == null ? void 0 : _l.line
    }
  };
  const _sfc_main$u = {
    name: "uv-line",
    mixins: [mpMixin, mixin, props$i],
    computed: {
      lineStyle() {
        const style = {};
        style.margin = this.margin;
        if (this.direction === "row") {
          style.borderBottomWidth = "1px";
          style.borderBottomStyle = this.dashed ? "dashed" : "solid";
          style.width = this.$uv.addUnit(this.length);
          if (this.hairline)
            style.transform = "scaleY(0.5)";
        } else {
          style.borderLeftWidth = "1px";
          style.borderLeftStyle = this.dashed ? "dashed" : "solid";
          style.height = this.$uv.addUnit(this.length);
          if (this.hairline)
            style.transform = "scaleX(0.5)";
        }
        style.borderColor = this.color;
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    }
  };
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "uv-line",
        style: vue.normalizeStyle([$options.lineStyle])
      },
      null,
      4
      /* STYLE */
    );
  }
  const __easycom_1$3 = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$t], ["__scopeId", "data-v-dcf8cb8f"], ["__file", "E:/code/app/WH-app/uni_modules/uv-line/components/uv-line/uv-line.vue"]]);
  const props$h = {
    props: {
      // 占父容器宽度的多少等分，总分为12份
      span: {
        type: [String, Number],
        default: 12
      },
      // 指定栅格左侧的间隔数(总12栏)
      offset: {
        type: [String, Number],
        default: 0
      },
      // 水平排列方式，可选值为`start`(或`flex-start`)、`end`(或`flex-end`)、`center`、`around`(或`space-around`)、`between`(或`space-between`)
      justify: {
        type: String,
        default: "start"
      },
      // 垂直对齐方式，可选值为top、center、bottom、stretch
      align: {
        type: String,
        default: "stretch"
      },
      // 文字对齐方式
      textAlign: {
        type: String,
        default: "left"
      },
      ...(_n = (_m = uni.$uv) == null ? void 0 : _m.props) == null ? void 0 : _n.col
    }
  };
  const _sfc_main$t = {
    name: "uv-col",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$h],
    data() {
      return {
        width: 0,
        parentData: {
          gutter: 0
        },
        gridNum: 12
      };
    },
    computed: {
      uJustify() {
        if (this.justify == "end" || this.justify == "start")
          return "flex-" + this.justify;
        else if (this.justify == "around" || this.justify == "between")
          return "space-" + this.justify;
        else
          return this.justify;
      },
      uAlignItem() {
        if (this.align == "top")
          return "flex-start";
        if (this.align == "bottom")
          return "flex-end";
        else
          return this.align;
      },
      colStyle() {
        const style = {
          // 这里写成"padding: 0 10px"的形式是因为nvue的需要
          paddingLeft: this.$uv.addUnit(this.$uv.getPx(this.parentData.gutter) / 2),
          paddingRight: this.$uv.addUnit(this.$uv.getPx(this.parentData.gutter) / 2),
          alignItems: this.uAlignItem,
          justifyContent: this.uJustify,
          textAlign: this.textAlign,
          // 在非nvue上，使用百分比形式
          flex: `0 0 ${100 / this.gridNum * this.span}%`,
          marginLeft: 100 / 12 * this.offset + "%"
        };
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    mounted() {
      this.init();
    },
    methods: {
      async init() {
        this.updateParentData();
        this.width = await this.parent.getComponentWidth();
      },
      updateParentData() {
        this.getParentData("uv-row");
      },
      clickHandler(e2) {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uv-col", [
          "uv-col-" + _ctx.span
        ]]),
        ref: "uv-col",
        style: vue.normalizeStyle([$options.colStyle]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args))
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_4$1 = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$s], ["__scopeId", "data-v-d2bffd23"], ["__file", "E:/code/app/WH-app/uni_modules/uv-row/components/uv-col/uv-col.vue"]]);
  const props$g = {
    props: {
      // 给col添加间距，左右边距各占一半
      gutter: {
        type: [String, Number],
        default: 0
      },
      // 水平排列方式，可选值为`start`(或`flex-start`)、`end`(或`flex-end`)、`center`、`around`(或`space-around`)、`between`(或`space-between`)
      justify: {
        type: String,
        default: "start"
      },
      // 垂直对齐方式，可选值为top、center、bottom
      align: {
        type: String,
        default: "center"
      },
      ...(_p = (_o = uni.$uv) == null ? void 0 : _o.props) == null ? void 0 : _p.row
    }
  };
  const _sfc_main$s = {
    name: "uv-row",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$g],
    data() {
      return {};
    },
    computed: {
      uJustify() {
        if (this.justify == "end" || this.justify == "start")
          return "flex-" + this.justify;
        else if (this.justify == "around" || this.justify == "between")
          return "space-" + this.justify;
        else
          return this.justify;
      },
      uAlignItem() {
        if (this.align == "top")
          return "flex-start";
        if (this.align == "bottom")
          return "flex-end";
        else
          return this.align;
      },
      rowStyle() {
        const style = {
          alignItems: this.uAlignItem,
          justifyContent: this.uJustify
        };
        if (this.gutter) {
          style.marginLeft = this.$uv.addUnit(-Number(this.gutter) / 2);
          style.marginRight = this.$uv.addUnit(-Number(this.gutter) / 2);
        }
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    methods: {
      clickHandler(e2) {
        this.$emit("click");
      },
      async getComponentWidth() {
        await this.$uv.sleep();
        return new Promise((resolve) => {
          this.$uvGetRect(".uv-row").then((res) => {
            resolve(res.width);
          });
        });
      }
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "uv-row",
        ref: "uv-row",
        style: vue.normalizeStyle([$options.rowStyle]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args))
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_5 = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$r], ["__scopeId", "data-v-692ff899"], ["__file", "E:/code/app/WH-app/uni_modules/uv-row/components/uv-row/uv-row.vue"]]);
  const props$f = {
    props: {
      // 是否显示圆点
      isDot: {
        type: Boolean,
        default: false
      },
      // 显示的内容
      value: {
        type: [Number, String],
        default: ""
      },
      // 是否显示
      show: {
        type: Boolean,
        default: true
      },
      // 最大值，超过最大值会显示 '{max}+'
      max: {
        type: [Number, String],
        default: 999
      },
      // 主题类型，error|warning|success|primary
      type: {
        type: [String, void 0, null],
        default: "error"
      },
      // 当数值为 0 时，是否展示 Badge
      showZero: {
        type: Boolean,
        default: false
      },
      // 背景颜色，优先级比type高，如设置，type参数会失效
      bgColor: {
        type: [String, null],
        default: null
      },
      // 字体颜色
      color: {
        type: [String, null],
        default: null
      },
      // 徽标形状，circle-四角均为圆角，horn-左下角为直角
      shape: {
        type: [String, void 0, null],
        default: "circle"
      },
      // 设置数字的显示方式，overflow|ellipsis|limit
      // overflow会根据max字段判断，超出显示`${max}+`
      // ellipsis会根据max判断，超出显示`${max}...`
      // limit会依据1000作为判断条件，超出1000，显示`${value/1000}K`，比如2.2k、3.34w，最多保留2位小数
      numberType: {
        type: [String, void 0, null],
        default: "overflow"
      },
      // 设置badge的位置偏移，格式为 [x, y]，也即设置的为top和right的值，absolute为true时有效
      offset: {
        type: Array,
        default: () => []
      },
      // 是否反转背景和字体颜色
      inverted: {
        type: Boolean,
        default: false
      },
      // 是否绝对定位
      absolute: {
        type: Boolean,
        default: false
      },
      ...(_r = (_q = uni.$uv) == null ? void 0 : _q.props) == null ? void 0 : _r.badge
    }
  };
  const _sfc_main$r = {
    name: "uv-badge",
    mixins: [mpMixin, mixin, props$f],
    computed: {
      // 是否将badge中心与父组件右上角重合
      boxStyle() {
        let style = {};
        return style;
      },
      // 整个组件的样式
      badgeStyle() {
        const style = {};
        if (this.color) {
          style.color = this.color;
        }
        if (this.bgColor && !this.inverted) {
          style.backgroundColor = this.bgColor;
        }
        if (this.absolute) {
          style.position = "absolute";
          if (this.offset.length) {
            const top = this.offset[0];
            const right = this.offset[1] || top;
            style.top = this.$uv.addUnit(top);
            style.right = this.$uv.addUnit(right);
          }
        }
        return style;
      },
      showValue() {
        switch (this.numberType) {
          case "overflow":
            return Number(this.value) > Number(this.max) ? this.max + "+" : this.value;
          case "ellipsis":
            return Number(this.value) > Number(this.max) ? "..." : this.value;
          case "limit":
            return Number(this.value) > 999 ? Number(this.value) >= 9999 ? Math.floor(this.value / 1e4 * 100) / 100 + "w" : Math.floor(this.value / 1e3 * 100) / 100 + "k" : this.value;
          default:
            return Number(this.value);
        }
      },
      propsType() {
        return this.type || "error";
      }
    }
  };
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return _ctx.show && ((Number(_ctx.value) === 0 ? _ctx.showZero : true) || _ctx.isDot) ? (vue.openBlock(), vue.createElementBlock(
      "text",
      {
        key: 0,
        class: vue.normalizeClass([[_ctx.isDot ? "uv-badge--dot" : "uv-badge--not-dot", _ctx.inverted && "uv-badge--inverted", _ctx.shape === "horn" && "uv-badge--horn", `uv-badge--${$options.propsType}${_ctx.inverted ? "--inverted" : ""}`], "uv-badge"]),
        style: vue.normalizeStyle([_ctx.$uv.addStyle(_ctx.customStyle), $options.badgeStyle])
      },
      vue.toDisplayString(_ctx.isDot ? "" : $options.showValue),
      7
      /* TEXT, CLASS, STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_1$2 = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$q], ["__scopeId", "data-v-91e4945b"], ["__file", "E:/code/app/WH-app/uni_modules/uv-badge/components/uv-badge/uv-badge.vue"]]);
  function colorGradient(startColor = "rgb(0, 0, 0)", endColor = "rgb(255, 255, 255)", step = 10) {
    const startRGB = hexToRgb(startColor, false);
    const startR = startRGB[0];
    const startG = startRGB[1];
    const startB = startRGB[2];
    const endRGB = hexToRgb(endColor, false);
    const endR = endRGB[0];
    const endG = endRGB[1];
    const endB = endRGB[2];
    const sR = (endR - startR) / step;
    const sG = (endG - startG) / step;
    const sB = (endB - startB) / step;
    const colorArr = [];
    for (let i2 = 0; i2 < step; i2++) {
      let hex = rgbToHex(`rgb(${Math.round(sR * i2 + startR)},${Math.round(sG * i2 + startG)},${Math.round(sB * i2 + startB)})`);
      if (i2 === 0)
        hex = rgbToHex(startColor);
      if (i2 === step - 1)
        hex = rgbToHex(endColor);
      colorArr.push(hex);
    }
    return colorArr;
  }
  function hexToRgb(sColor, str = true) {
    const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    sColor = String(sColor).toLowerCase();
    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        let sColorNew = "#";
        for (let i2 = 1; i2 < 4; i2 += 1) {
          sColorNew += sColor.slice(i2, i2 + 1).concat(sColor.slice(i2, i2 + 1));
        }
        sColor = sColorNew;
      }
      const sColorChange = [];
      for (let i2 = 1; i2 < 7; i2 += 2) {
        sColorChange.push(parseInt(`0x${sColor.slice(i2, i2 + 2)}`));
      }
      if (!str) {
        return sColorChange;
      }
      return `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`;
    }
    if (/^(rgb|RGB)/.test(sColor)) {
      const arr = sColor.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      return arr.map((val) => Number(val));
    }
    return sColor;
  }
  function rgbToHex(rgb) {
    const _this = rgb;
    const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    if (/^(rgb|RGB)/.test(_this)) {
      const aColor = _this.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      let strHex = "#";
      for (let i2 = 0; i2 < aColor.length; i2++) {
        let hex = Number(aColor[i2]).toString(16);
        hex = String(hex).length == 1 ? `${0}${hex}` : hex;
        if (hex === "0") {
          hex += hex;
        }
        strHex += hex;
      }
      if (strHex.length !== 7) {
        strHex = _this;
      }
      return strHex;
    }
    if (reg.test(_this)) {
      const aNum = _this.replace(/#/, "").split("");
      if (aNum.length === 6) {
        return _this;
      }
      if (aNum.length === 3) {
        let numHex = "#";
        for (let i2 = 0; i2 < aNum.length; i2 += 1) {
          numHex += aNum[i2] + aNum[i2];
        }
        return numHex;
      }
    } else {
      return _this;
    }
  }
  const props$e = {
    props: {
      // 是否显示组件
      show: {
        type: Boolean,
        default: true
      },
      // 颜色
      color: {
        type: String,
        default: "#909193"
      },
      // 提示文字颜色
      textColor: {
        type: String,
        default: "#909193"
      },
      // 文字和图标是否垂直排列
      vertical: {
        type: Boolean,
        default: false
      },
      // 模式选择，circle-圆形，spinner-花朵形，semicircle-半圆形
      mode: {
        type: String,
        default: "spinner"
      },
      // 图标大小，单位默认px
      size: {
        type: [String, Number],
        default: 24
      },
      // 文字大小
      textSize: {
        type: [String, Number],
        default: 15
      },
      // 文字样式
      textStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 文字内容
      text: {
        type: [String, Number],
        default: ""
      },
      // 动画模式 https://www.runoob.com/cssref/css3-pr-animation-timing-function.html
      timingFunction: {
        type: String,
        default: "linear"
      },
      // 动画执行周期时间
      duration: {
        type: [String, Number],
        default: 1200
      },
      // mode=circle时的暗边颜色
      inactiveColor: {
        type: String,
        default: ""
      },
      ...(_t2 = (_s2 = uni.$uv) == null ? void 0 : _s2.props) == null ? void 0 : _t2.loadingIcon
    }
  };
  const _sfc_main$q = {
    name: "uv-loading-icon",
    mixins: [mpMixin, mixin, props$e],
    data() {
      return {
        // Array.form可以通过一个伪数组对象创建指定长度的数组
        // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from
        array12: Array.from({
          length: 12
        }),
        // 这里需要设置默认值为360，否则在安卓nvue上，会延迟一个duration周期后才执行
        // 在iOS nvue上，则会一开始默认执行两个周期的动画
        aniAngel: 360,
        // 动画旋转角度
        webviewHide: false,
        // 监听webview的状态，如果隐藏了页面，则停止动画，以免性能消耗
        loading: false
        // 是否运行中，针对nvue使用
      };
    },
    computed: {
      // 当为circle类型时，给其另外三边设置一个更轻一些的颜色
      // 之所以需要这么做的原因是，比如父组件传了color为红色，那么需要另外的三个边为浅红色
      // 而不能是固定的某一个其他颜色(因为这个固定的颜色可能浅蓝，导致效果没有那么细腻良好)
      otherBorderColor() {
        const lightColor = colorGradient(this.color, "#ffffff", 100)[80];
        if (this.mode === "circle") {
          return this.inactiveColor ? this.inactiveColor : lightColor;
        } else {
          return "transparent";
        }
      }
    },
    watch: {
      show(n2) {
      }
    },
    mounted() {
      this.init();
    },
    methods: {
      init() {
        setTimeout(() => {
          this.show && this.addEventListenerToWebview();
        }, 20);
      },
      // 监听webview的显示与隐藏
      addEventListenerToWebview() {
        const pages2 = getCurrentPages();
        const page2 = pages2[pages2.length - 1];
        const currentWebview = page2.$getAppWebview();
        currentWebview.addEventListener("hide", () => {
          this.webviewHide = true;
        });
        currentWebview.addEventListener("show", () => {
          this.webviewHide = false;
        });
      }
    }
  };
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return _ctx.show ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["uv-loading-icon", [_ctx.vertical && "uv-loading-icon--vertical"]]),
        style: vue.normalizeStyle([_ctx.$uv.addStyle(_ctx.customStyle)])
      },
      [
        !$data.webviewHide ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: vue.normalizeClass(["uv-loading-icon__spinner", [`uv-loading-icon__spinner--${_ctx.mode}`]]),
            ref: "ani",
            style: vue.normalizeStyle({
              color: _ctx.color,
              width: _ctx.$uv.addUnit(_ctx.size),
              height: _ctx.$uv.addUnit(_ctx.size),
              borderTopColor: _ctx.color,
              borderBottomColor: $options.otherBorderColor,
              borderLeftColor: $options.otherBorderColor,
              borderRightColor: $options.otherBorderColor,
              "animation-duration": `${_ctx.duration}ms`,
              "animation-timing-function": _ctx.mode === "semicircle" || _ctx.mode === "circle" ? _ctx.timingFunction : ""
            })
          },
          [
            _ctx.mode === "spinner" ? (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              { key: 0 },
              vue.renderList($data.array12, (item, index2) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  key: index2,
                  class: "uv-loading-icon__dot"
                });
              }),
              128
              /* KEYED_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true)
          ],
          6
          /* CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true),
        _ctx.text ? (vue.openBlock(), vue.createElementBlock(
          "text",
          {
            key: 1,
            class: "uv-loading-icon__text",
            style: vue.normalizeStyle([{
              fontSize: _ctx.$uv.addUnit(_ctx.textSize),
              color: _ctx.textColor
            }, _ctx.$uv.addStyle(_ctx.textStyle)])
          },
          vue.toDisplayString(_ctx.text),
          5
          /* TEXT, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0$1 = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$p], ["__scopeId", "data-v-29b619ea"], ["__file", "E:/code/app/WH-app/uni_modules/uv-loading-icon/components/uv-loading-icon/uv-loading-icon.vue"]]);
  const props$d = {
    props: {
      value: {
        type: [Boolean, String, Number],
        default: false
      },
      modelValue: {
        type: [Boolean, String, Number],
        default: false
      },
      // 是否为加载中状态
      loading: {
        type: Boolean,
        default: false
      },
      // 是否为禁用装填
      disabled: {
        type: Boolean,
        default: false
      },
      // 开关尺寸，单位px
      size: {
        type: [String, Number],
        default: 25
      },
      // 打开时的背景颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 关闭时的背景颜色
      inactiveColor: {
        type: String,
        default: "#fff"
      },
      // switch打开时的值
      activeValue: {
        type: [String, Number, Boolean],
        default: true
      },
      // switch关闭时的值
      inactiveValue: {
        type: [String, Number, Boolean],
        default: false
      },
      // 是否开启异步变更，开启后需要手动控制输入值
      asyncChange: {
        type: Boolean,
        default: false
      },
      // 圆点与外边框的距离
      space: {
        type: [String, Number],
        default: 0
      },
      ...(_v = (_u = uni.$uv) == null ? void 0 : _u.props) == null ? void 0 : _v.switch
    }
  };
  const _sfc_main$p = {
    name: "uv-switch",
    mixins: [mpMixin, mixin, props$d],
    data() {
      return {
        bgColor: "#ffffff",
        innerValue: false
      };
    },
    watch: {
      modelValue: {
        immediate: true,
        handler(newVal) {
          if (newVal !== this.inactiveValue && newVal !== this.activeValue) {
            return this.$uv.error("v-model绑定的值必须为inactiveValue、activeValue二者之一");
          }
          this.innerValue = newVal;
        }
      }
    },
    created() {
      this.innerValue = this.value || this.modelValue;
    },
    computed: {
      isActive() {
        return this.innerValue === this.activeValue;
      },
      switchStyle() {
        let style = {};
        style.width = this.$uv.addUnit(this.$uv.getPx(this.size) * 2 + 2);
        style.height = this.$uv.addUnit(this.$uv.getPx(this.size) + 2);
        if (this.customInactiveColor) {
          style.borderColor = "rgba(0, 0, 0, 0)";
        }
        style.backgroundColor = this.isActive ? this.activeColor : this.inactiveColor;
        return style;
      },
      nodeStyle() {
        let style = {};
        style.width = this.$uv.addUnit(this.$uv.getPx(this.size) - this.space);
        style.height = this.$uv.addUnit(this.$uv.getPx(this.size) - this.space);
        const translateX = this.isActive ? this.$uv.addUnit(this.space) : this.$uv.addUnit(this.$uv.getPx(this.size));
        style.transform = `translateX(-${translateX})`;
        return style;
      },
      bgStyle() {
        let style = {};
        style.width = this.$uv.addUnit(this.$uv.getPx(this.size) * 2 - this.$uv.getPx(this.size) / 2);
        style.height = this.$uv.addUnit(this.$uv.getPx(this.size));
        style.backgroundColor = this.inactiveColor;
        style.transform = `scale(${this.isActive ? 0 : 1})`;
        return style;
      },
      customInactiveColor() {
        return this.inactiveColor !== "#fff" && this.inactiveColor !== "#ffffff";
      }
    },
    methods: {
      clickHandler() {
        if (!this.disabled && !this.loading) {
          const oldValue = this.isActive ? this.inactiveValue : this.activeValue;
          if (!this.asyncChange) {
            this.$emit("input", oldValue);
            this.$emit("update:modelValue", oldValue);
          }
          this.$nextTick(() => {
            this.$emit("change", oldValue);
          });
        }
      }
    }
  };
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_loading_icon = resolveEasycom(vue.resolveDynamicComponent("uv-loading-icon"), __easycom_0$1);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uv-switch", [_ctx.disabled && "uv-switch--disabled"]]),
        style: vue.normalizeStyle([$options.switchStyle, _ctx.$uv.addStyle(_ctx.customStyle)]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args))
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "uv-switch__bg",
            style: vue.normalizeStyle([$options.bgStyle])
          },
          null,
          4
          /* STYLE */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uv-switch__node", [$data.innerValue && "uv-switch__node--on"]]),
            style: vue.normalizeStyle([$options.nodeStyle]),
            ref: "uv-switch__node"
          },
          [
            vue.createVNode(_component_uv_loading_icon, {
              show: _ctx.loading,
              mode: "circle",
              timingFunction: "linear",
              color: $data.innerValue ? _ctx.activeColor : "#AAABAD",
              size: _ctx.size * 0.6
            }, null, 8, ["show", "color", "size"])
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_2$2 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$o], ["__scopeId", "data-v-c713e4c9"], ["__file", "E:/code/app/WH-app/uni_modules/uv-switch/components/uv-switch/uv-switch.vue"]]);
  const _sfc_main$o = {
    name: "uv-list-item",
    mixins: [mpMixin, mixin],
    emits: ["click", "switchChange"],
    props: {
      direction: {
        type: String,
        default: "row"
      },
      title: {
        type: String,
        default: ""
      },
      note: {
        type: String,
        default: ""
      },
      ellipsis: {
        type: [Number, String],
        default: 0
      },
      disabled: {
        type: [Boolean, String],
        default: false
      },
      clickable: {
        type: Boolean,
        default: false
      },
      showArrow: {
        type: [Boolean, String],
        default: false
      },
      link: {
        type: [Boolean, String],
        default: false
      },
      to: {
        type: String,
        default: ""
      },
      showSwitch: {
        type: [Boolean, String],
        default: false
      },
      switchChecked: {
        type: [Boolean, String],
        default: false
      },
      showBadge: {
        type: [Boolean, String],
        default: false
      },
      badge: {
        type: Object,
        default() {
          return {};
        }
      },
      rightText: {
        type: String,
        default: ""
      },
      thumb: {
        type: String,
        default: ""
      },
      thumbSize: {
        type: String,
        default: "base"
      },
      showExtraIcon: {
        type: [Boolean, String],
        default: false
      },
      extraIcon: {
        type: Object,
        default() {
          return {
            name: "",
            color: "#000000",
            size: 20,
            customPrefix: ""
          };
        }
      },
      border: {
        type: Boolean,
        default: false
      },
      customStyle: {
        type: Object,
        default() {
          return {
            padding: "",
            backgroundColor: "#FFFFFF"
          };
        }
      },
      keepScrollPosition: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      directionData() {
        return this.direction ? this.direction : this.parentData.direction ? this.parentData.direction : "row";
      }
    },
    watch: {
      "customStyle.padding": {
        handler(padding) {
          if (padding)
            this.setPadding(padding);
        },
        immediate: true
      }
    },
    data() {
      return {
        isFirstChild: false,
        padding: {
          top: "",
          right: "",
          bottom: "",
          left: ""
        },
        parentData: {
          direction: "row",
          padding: 0
        }
      };
    },
    created() {
      this.updateParentData();
    },
    mounted() {
      this.init();
      this.list = this.getForm();
      if (this.list) {
        if (!this.list.firstChildAppend) {
          this.list.firstChildAppend = true;
          this.isFirstChild = true;
        }
      }
    },
    methods: {
      init() {
        if (!this.parent) {
          this.$uv.error("uv-list-item必须搭配uv-list组件使用");
        }
        this.$nextTick(() => {
          if (!(this.padding.top || this.padding.right || this.padding.bottom || this.padding.left)) {
            this.setPadding(this.parentData.padding);
          }
        });
      },
      updateParentData() {
        this.getParentData("uv-list");
      },
      setPadding(padding) {
        if (typeof padding == "number") {
          padding += "";
        }
        let paddingArr = padding.split(" ");
        if (paddingArr.length === 1) {
          const allPadding = paddingArr[0];
          this.padding = {
            "top": allPadding,
            "right": allPadding,
            "bottom": allPadding,
            "left": allPadding
          };
        } else if (paddingArr.length === 2) {
          const [verticalPadding, horizontalPadding] = paddingArr;
          this.padding = {
            "top": verticalPadding,
            "right": horizontalPadding,
            "bottom": verticalPadding,
            "left": horizontalPadding
          };
        } else if (paddingArr.length === 4) {
          const [topPadding, rightPadding, bottomPadding, leftPadding] = paddingArr;
          this.padding = {
            "top": topPadding,
            "right": rightPadding,
            "bottom": bottomPadding,
            "left": leftPadding
          };
        }
      },
      /**
       * 获取父元素实例
       */
      getForm(name = "uniList") {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      },
      onClick() {
        if (this.to !== "") {
          this.openPage();
          return;
        }
        if (this.clickable || this.link) {
          this.$emit("click", {
            data: {}
          });
        }
      },
      onSwitchChange(e2) {
        this.$emit("switchChange", e2);
      },
      openPage() {
        if (["navigateTo", "redirectTo", "reLaunch", "switchTab"].indexOf(this.link) !== -1) {
          this.pageApi(this.link);
        } else {
          this.pageApi("navigateTo");
        }
      },
      pageApi(api) {
        let callback = {
          url: this.to,
          success: (res) => {
            this.$emit("click", {
              data: res
            });
          },
          fail: (err) => {
            this.$emit("click", {
              data: err
            });
          }
        };
        switch (api) {
          case "navigateTo":
            uni.navigateTo(callback);
            break;
          case "redirectTo":
            uni.redirectTo(callback);
            break;
          case "reLaunch":
            uni.reLaunch(callback);
            break;
          case "switchTab":
            uni.switchTab(callback);
            break;
          default:
            uni.navigateTo(callback);
        }
      }
    }
  };
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_badge = resolveEasycom(vue.resolveDynamicComponent("uv-badge"), __easycom_1$2);
    const _component_uv_switch = resolveEasycom(vue.resolveDynamicComponent("uv-switch"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass([{ "uv-list-item--disabled": $props.disabled }, "uv-list-item"]),
      style: vue.normalizeStyle([_ctx.$uv.addStyle($props.customStyle), { "background-color": $props.customStyle.backgroundColor ? $props.customStyle.backgroundColor : "#fff" }]),
      "hover-class": !$props.clickable && !$props.link || $props.disabled || $props.showSwitch ? "" : "uv-list-item--hover",
      onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args))
    }, [
      !$data.isFirstChild ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass(["border--left", { "uv-list--border": $props.border }])
        },
        null,
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("view", { class: "uv-list-item__wrapper" }, [
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["uv-list-item__container", { "container--right": $props.showArrow || $props.link, "flex--direction": $options.directionData === "column" }]),
              style: vue.normalizeStyle({ paddingTop: $data.padding.top, paddingLeft: $data.padding.left, paddingRight: $data.padding.right, paddingBottom: $data.padding.bottom })
            },
            [
              vue.renderSlot(_ctx.$slots, "header", {}, () => [
                vue.createElementVNode("view", { class: "uv-list-item__header" }, [
                  $props.thumb ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "uv-list-item__icon"
                  }, [
                    vue.createElementVNode("image", {
                      src: $props.thumb,
                      class: vue.normalizeClass(["uv-list-item__icon-img", ["uv-list--" + $props.thumbSize]])
                    }, null, 10, ["src"])
                  ])) : $props.showExtraIcon ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "uv-list-item__icon"
                  }, [
                    vue.createVNode(_component_uv_icon, {
                      name: $props.extraIcon.icon,
                      customPrefix: $props.extraIcon.customPrefix,
                      color: $props.extraIcon.color,
                      size: $props.extraIcon.size
                    }, null, 8, ["name", "customPrefix", "color", "size"])
                  ])) : vue.createCommentVNode("v-if", true)
                ])
              ], true),
              vue.renderSlot(_ctx.$slots, "body", {}, () => [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["uv-list-item__content", { "uv-list-item__content--center": $props.thumb || $props.showExtraIcon || $props.showBadge || $props.showSwitch }])
                  },
                  [
                    $props.title ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: vue.normalizeClass(["uv-list-item__content-title", [$props.ellipsis && `uv-line-${$props.ellipsis}`]])
                      },
                      vue.toDisplayString($props.title),
                      3
                      /* TEXT, CLASS */
                    )) : vue.createCommentVNode("v-if", true),
                    $props.note ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 1,
                        class: "uv-list-item__content-note"
                      },
                      vue.toDisplayString($props.note),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true)
                  ],
                  2
                  /* CLASS */
                )
              ], true),
              vue.renderSlot(_ctx.$slots, "footer", {}, () => [
                $props.rightText || $props.showBadge || $props.showSwitch ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 0,
                    class: vue.normalizeClass(["uv-list-item__extra", { "flex--justify": $options.directionData === "column" }])
                  },
                  [
                    $props.rightText ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: "uv-list-item__extra-text"
                      },
                      vue.toDisplayString($props.rightText),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true),
                    $props.showBadge ? (vue.openBlock(), vue.createBlock(_component_uv_badge, {
                      key: 1,
                      show: !!($props.badge.show || $props.badge.isDot || $props.badge.value),
                      isDot: $props.badge.isDot,
                      value: $props.badge.value,
                      max: $props.badge.max,
                      type: $props.badge.type,
                      showZero: $props.badge.showZero,
                      bgColor: $props.badge.bgColor,
                      color: $props.badge.color,
                      shape: $props.badge.shape,
                      numberType: $props.badge.numberType,
                      inverted: $props.badge.inverted,
                      customStyle: "margin-left: 4px;"
                    }, null, 8, ["show", "isDot", "value", "max", "type", "showZero", "bgColor", "color", "shape", "numberType", "inverted"])) : vue.createCommentVNode("v-if", true),
                    $props.showSwitch ? (vue.openBlock(), vue.createBlock(_component_uv_switch, {
                      key: 2,
                      value: $props.switchChecked,
                      disabled: $props.disabled,
                      onChange: $options.onSwitchChange
                    }, null, 8, ["value", "disabled", "onChange"])) : vue.createCommentVNode("v-if", true)
                  ],
                  2
                  /* CLASS */
                )) : vue.createCommentVNode("v-if", true)
              ], true)
            ],
            6
            /* CLASS, STYLE */
          )
        ], true)
      ]),
      $props.showArrow || $props.link ? (vue.openBlock(), vue.createBlock(_component_uv_icon, {
        key: 1,
        size: "34rpx",
        class: "uv-icon-wrapper",
        color: "#bbb",
        name: "arrow-right"
      })) : vue.createCommentVNode("v-if", true)
    ], 14, ["hover-class"]);
  }
  const __easycom_6$1 = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$n], ["__scopeId", "data-v-d568ce32"], ["__file", "E:/code/app/WH-app/uni_modules/uv-list/components/uv-list-item/uv-list-item.vue"]]);
  const _sfc_main$n = {
    name: "uv-list",
    mixins: [mpMixin, mixin],
    "mp-weixin": {
      options: {
        multipleSlots: false
      }
    },
    props: {
      border: {
        type: Boolean,
        default: false
      },
      borderColor: {
        type: String,
        default: "#dadbde"
      },
      // 排版方向，默认row，列表里面使用其他组件  最好设置成column
      direction: {
        type: String,
        default: "row"
      },
      // 内边距
      padding: {
        type: [String, Number],
        default: "20rpx 30rpx"
      }
    },
    created() {
      this.firstChildAppend = false;
    },
    computed: {
      parentData() {
        return [this.direction, this.padding];
      }
    },
    methods: {
      loadMore(e2) {
        this.$emit("scrolltolower");
      },
      scroll(e2) {
        this.$emit("scroll", e2);
      }
    }
  };
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "uv-list",
        style: vue.normalizeStyle([_ctx.$uv.addStyle(_ctx.customStyle)])
      },
      [
        $props.border ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: "uv-list--border-top",
            style: vue.normalizeStyle([{ "background-color": $props.borderColor }])
          },
          null,
          4
          /* STYLE */
        )) : vue.createCommentVNode("v-if", true),
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
        $props.border ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 1,
            class: "uv-list--border-bottom",
            style: vue.normalizeStyle([{ "background-color": $props.borderColor }])
          },
          null,
          4
          /* STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_7$1 = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$m], ["__scopeId", "data-v-53ea9bef"], ["__file", "E:/code/app/WH-app/uni_modules/uv-list/components/uv-list/uv-list.vue"]]);
  class MPAnimation {
    constructor(options, _this) {
      this.options = options;
      this.animation = uni.createAnimation({
        ...options
      });
      this.currentStepAnimates = {};
      this.next = 0;
      this.$ = _this;
    }
    _nvuePushAnimates(type2, args) {
      let aniObj = this.currentStepAnimates[this.next];
      let styles = {};
      if (!aniObj) {
        styles = {
          styles: {},
          config: {}
        };
      } else {
        styles = aniObj;
      }
      if (animateTypes1.includes(type2)) {
        if (!styles.styles.transform) {
          styles.styles.transform = "";
        }
        let unit = "";
        if (type2 === "rotate") {
          unit = "deg";
        }
        styles.styles.transform += `${type2}(${args + unit}) `;
      } else {
        styles.styles[type2] = `${args}`;
      }
      this.currentStepAnimates[this.next] = styles;
    }
    _animateRun(styles = {}, config = {}) {
      let ref = this.$.$refs["ani"].ref;
      if (!ref)
        return;
      return new Promise((resolve, reject) => {
        nvueAnimation.transition(ref, {
          styles,
          ...config
        }, (res) => {
          resolve();
        });
      });
    }
    _nvueNextAnimate(animates, step = 0, fn) {
      let obj = animates[step];
      if (obj) {
        let {
          styles,
          config
        } = obj;
        this._animateRun(styles, config).then(() => {
          step += 1;
          this._nvueNextAnimate(animates, step, fn);
        });
      } else {
        this.currentStepAnimates = {};
        typeof fn === "function" && fn();
        this.isEnd = true;
      }
    }
    step(config = {}) {
      this.animation.step(config);
      return this;
    }
    run(fn) {
      this.$.animationData = this.animation.export();
      this.$.timer = setTimeout(() => {
        typeof fn === "function" && fn();
      }, this.$.durationTime);
    }
  }
  const animateTypes1 = [
    "matrix",
    "matrix3d",
    "rotate",
    "rotate3d",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "scale3d",
    "scaleX",
    "scaleY",
    "scaleZ",
    "skew",
    "skewX",
    "skewY",
    "translate",
    "translate3d",
    "translateX",
    "translateY",
    "translateZ"
  ];
  const animateTypes2 = ["opacity", "backgroundColor"];
  const animateTypes3 = ["width", "height", "left", "right", "top", "bottom"];
  animateTypes1.concat(animateTypes2, animateTypes3).forEach((type2) => {
    MPAnimation.prototype[type2] = function(...args) {
      this.animation[type2](...args);
      return this;
    };
  });
  function createAnimation(option, _this) {
    if (!_this)
      return;
    clearTimeout(_this.timer);
    return new MPAnimation(option, _this);
  }
  const _sfc_main$m = {
    name: "uv-transition",
    mixins: [mpMixin, mixin],
    emits: ["click", "change"],
    props: {
      // 是否展示组件
      show: {
        type: Boolean,
        default: false
      },
      // 使用的动画模式
      mode: {
        type: [Array, String, null],
        default() {
          return "fade";
        }
      },
      // 动画的执行时间，单位ms
      duration: {
        type: [String, Number],
        default: 300
      },
      // 使用的动画过渡函数
      timingFunction: {
        type: String,
        default: "ease-out"
      },
      customClass: {
        type: String,
        default: ""
      },
      // nvue模式下 是否直接显示，在uv-list等cell下面使用就需要设置
      cellChild: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        isShow: false,
        transform: "",
        opacity: 1,
        animationData: {},
        durationTime: 300,
        config: {}
      };
    },
    watch: {
      show: {
        handler(newVal) {
          if (newVal) {
            this.open();
          } else {
            if (this.isShow) {
              this.close();
            }
          }
        },
        immediate: true
      }
    },
    computed: {
      // 初始化动画条件
      transformStyles() {
        const style = {
          transform: this.transform,
          opacity: this.opacity,
          ...this.$uv.addStyle(this.customStyle),
          "transition-duration": `${this.duration / 1e3}s`
        };
        return this.$uv.addStyle(style, "string");
      }
    },
    created() {
      this.config = {
        duration: this.duration,
        timingFunction: this.timingFunction,
        transformOrigin: "50% 50%",
        delay: 0
      };
      this.durationTime = this.duration;
    },
    methods: {
      /**
       *  ref 触发 初始化动画
       */
      init(obj = {}) {
        if (obj.duration) {
          this.durationTime = obj.duration;
        }
        this.animation = createAnimation(Object.assign(this.config, obj), this);
      },
      /**
       * 点击组件触发回调
       */
      onClick() {
        this.$emit("click", {
          detail: this.isShow
        });
      },
      /**
       * ref 触发 动画分组
       * @param {Object} obj
       */
      step(obj, config = {}) {
        if (!this.animation)
          return;
        for (let i2 in obj) {
          try {
            if (typeof obj[i2] === "object") {
              this.animation[i2](...obj[i2]);
            } else {
              this.animation[i2](obj[i2]);
            }
          } catch (e2) {
            formatAppLog("error", "at uni_modules/uv-transition/components/uv-transition/uv-transition.vue:166", `方法 ${i2} 不存在`);
          }
        }
        this.animation.step(config);
        return this;
      },
      /**
       *  ref 触发 执行动画
       */
      run(fn) {
        if (!this.animation)
          return;
        this.animation.run(fn);
      },
      // 开始过度动画
      open() {
        clearTimeout(this.timer);
        this.transform = "";
        this.isShow = true;
        let { opacity, transform } = this.styleInit(false);
        if (typeof opacity !== "undefined") {
          this.opacity = opacity;
        }
        this.transform = transform;
        this.$nextTick(() => {
          this.timer = setTimeout(() => {
            this.animation = createAnimation(this.config, this);
            this.tranfromInit(false).step();
            this.animation.run();
            this.$emit("change", {
              detail: this.isShow
            });
          }, 20);
        });
      },
      // 关闭过渡动画
      close(type2) {
        if (!this.animation)
          return;
        this.tranfromInit(true).step().run(() => {
          this.isShow = false;
          this.animationData = null;
          this.animation = null;
          let { opacity, transform } = this.styleInit(false);
          this.opacity = opacity || 1;
          this.transform = transform;
          this.$emit("change", {
            detail: this.isShow
          });
        });
      },
      // 处理动画开始前的默认样式
      styleInit(type2) {
        let styles = {
          transform: ""
        };
        let buildStyle = (type3, mode) => {
          if (mode === "fade") {
            styles.opacity = this.animationType(type3)[mode];
          } else {
            styles.transform += this.animationType(type3)[mode] + " ";
          }
        };
        if (typeof this.mode === "string") {
          buildStyle(type2, this.mode);
        } else {
          this.mode.forEach((mode) => {
            buildStyle(type2, mode);
          });
        }
        return styles;
      },
      // 处理内置组合动画
      tranfromInit(type2) {
        let buildTranfrom = (type3, mode) => {
          let aniNum = null;
          if (mode === "fade") {
            aniNum = type3 ? 0 : 1;
          } else {
            aniNum = type3 ? "-100%" : "0";
            if (mode === "zoom-in") {
              aniNum = type3 ? 0.8 : 1;
            }
            if (mode === "zoom-out") {
              aniNum = type3 ? 1.2 : 1;
            }
            if (mode === "slide-right") {
              aniNum = type3 ? "100%" : "0";
            }
            if (mode === "slide-bottom") {
              aniNum = type3 ? "100%" : "0";
            }
          }
          this.animation[this.animationMode()[mode]](aniNum);
        };
        if (typeof this.mode === "string") {
          buildTranfrom(type2, this.mode);
        } else {
          this.mode.forEach((mode) => {
            buildTranfrom(type2, mode);
          });
        }
        return this.animation;
      },
      animationType(type2) {
        return {
          fade: type2 ? 1 : 0,
          "slide-top": `translateY(${type2 ? "0" : "-100%"})`,
          "slide-right": `translateX(${type2 ? "0" : "100%"})`,
          "slide-bottom": `translateY(${type2 ? "0" : "100%"})`,
          "slide-left": `translateX(${type2 ? "0" : "-100%"})`,
          "zoom-in": `scaleX(${type2 ? 1 : 0.8}) scaleY(${type2 ? 1 : 0.8})`,
          "zoom-out": `scaleX(${type2 ? 1 : 1.2}) scaleY(${type2 ? 1 : 1.2})`
        };
      },
      // 内置动画类型与实际动画对应字典
      animationMode() {
        return {
          fade: "opacity",
          "slide-top": "translateY",
          "slide-right": "translateX",
          "slide-bottom": "translateY",
          "slide-left": "translateX",
          "zoom-in": "scale",
          "zoom-out": "scale"
        };
      },
      // 驼峰转中横线
      toLine(name) {
        return name.replace(/([A-Z])/g, "-$1").toLowerCase();
      }
    }
  };
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return $data.isShow ? (vue.openBlock(), vue.createElementBlock("view", {
      key: 0,
      ref: "ani",
      animation: $data.animationData,
      class: vue.normalizeClass($props.customClass),
      style: vue.normalizeStyle($options.transformStyles),
      onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 14, ["animation"])) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_1$1 = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$l], ["__file", "E:/code/app/WH-app/uni_modules/uv-transition/components/uv-transition/uv-transition.vue"]]);
  const props$c = {
    props: {
      // 图片地址
      src: {
        type: String,
        default: ""
      },
      // 裁剪模式
      mode: {
        type: String,
        default: "aspectFill"
      },
      // 宽度，单位任意
      width: {
        type: [String, Number],
        default: "300"
      },
      // 高度，单位任意
      height: {
        type: [String, Number],
        default: "225"
      },
      // 图片形状，circle-圆形，square-方形
      shape: {
        type: String,
        default: "square"
      },
      // 圆角，单位任意
      radius: {
        type: [String, Number],
        default: 0
      },
      // 是否懒加载，微信小程序、App、百度小程序、字节跳动小程序
      lazyLoad: {
        type: Boolean,
        default: true
      },
      // 是否开启observer懒加载，nvue不生效
      observeLazyLoad: {
        type: Boolean,
        default: false
      },
      // 开启长按图片显示识别微信小程序码菜单
      showMenuByLongpress: {
        type: Boolean,
        default: true
      },
      // 加载中的图标，或者小图片
      loadingIcon: {
        type: String,
        default: "photo"
      },
      // 加载失败的图标，或者小图片
      errorIcon: {
        type: String,
        default: "error-circle"
      },
      // 是否显示加载中的图标或者自定义的slot
      showLoading: {
        type: Boolean,
        default: true
      },
      // 是否显示加载错误的图标或者自定义的slot
      showError: {
        type: Boolean,
        default: true
      },
      // 是否需要淡入效果
      fade: {
        type: Boolean,
        default: true
      },
      // 只支持网络资源，只对微信小程序有效
      webp: {
        type: Boolean,
        default: false
      },
      // 过渡时间，单位ms
      duration: {
        type: [String, Number],
        default: 500
      },
      // 背景颜色，用于深色页面加载图片时，为了和背景色融合
      bgColor: {
        type: String,
        default: "#f3f4f6"
      },
      // nvue模式下 是否直接显示，在uv-list等cell下面使用就需要设置
      cellChild: {
        type: Boolean,
        default: false
      },
      ...(_x = (_w = uni.$uv) == null ? void 0 : _w.props) == null ? void 0 : _x.image
    }
  };
  const _sfc_main$l = {
    name: "uv-image",
    emits: ["click", "load", "error"],
    mixins: [mpMixin, mixin, props$c],
    data() {
      return {
        // 图片是否加载错误，如果是，则显示错误占位图
        isError: false,
        // 初始化组件时，默认为加载中状态
        loading: true,
        // 图片加载完成时，去掉背景颜色，因为如果是png图片，就会显示灰色的背景
        backgroundStyle: {},
        // 用于fade模式的控制组件显示与否
        show: false,
        // 是否开启图片出现在可视范围进行加载（另一种懒加载）
        observeShow: !this.observeLazyLoad,
        elIndex: "",
        // 因为props的值无法修改，故需要一个中间值
        imgWidth: this.width,
        // 因为props的值无法修改，故需要一个中间值
        imgHeight: this.height,
        thresholdValue: 50
      };
    },
    watch: {
      src: {
        immediate: true,
        handler(n2) {
          if (!n2) {
            this.isError = true;
          } else {
            this.isError = false;
            this.loading = true;
          }
        }
      },
      width(newVal) {
        this.show = false;
        this.$uv.sleep(2).then((res) => {
          this.show = true;
        });
        this.imgWidth = newVal;
      },
      height(newVal) {
        this.show = false;
        this.$uv.sleep(2).then((res) => {
          this.show = true;
        });
        this.imgHeight = newVal;
      }
    },
    computed: {
      wrapStyle() {
        let style = {};
        if (this.mode !== "heightFix") {
          style.width = this.$uv.addUnit(this.imgWidth);
        }
        if (this.mode !== "widthFix") {
          style.height = this.$uv.addUnit(this.imgHeight);
        }
        style.borderRadius = this.shape == "circle" ? "10000px" : this.$uv.addUnit(this.radius);
        style.overflow = this.radius > 0 ? "hidden" : "visible";
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      },
      imageStyle() {
        let style = {};
        style.borderRadius = this.shape == "circle" ? "10000px" : this.$uv.addUnit(this.radius);
        return style;
      }
    },
    created() {
      this.elIndex = this.$uv.guid();
      this.observer = {};
      this.observerName = "lazyLoadContentObserver";
    },
    mounted() {
      this.show = true;
      this.$nextTick(() => {
        if (this.observeLazyLoad)
          this.observerFn();
      });
    },
    methods: {
      // 点击图片
      onClick() {
        this.$emit("click");
      },
      // 图片加载失败
      onErrorHandler(err) {
        this.loading = false;
        this.isError = true;
        this.$emit("error", err);
      },
      // 图片加载完成，标记loading结束
      onLoadHandler(event) {
        if (this.mode == "widthFix")
          this.imgHeight = "auto";
        if (this.mode == "heightFix")
          this.imgWidth = "auto";
        this.loading = false;
        this.isError = false;
        this.$emit("load", event);
        this.removeBgColor();
      },
      // 移除图片的背景色
      removeBgColor() {
        this.backgroundStyle = {
          backgroundColor: "transparent"
        };
      },
      // 观察图片是否在可见视口
      observerFn() {
        this.$nextTick(() => {
          uni.$once("onLazyLoadReachBottom", () => {
            if (!this.observeShow)
              this.observeShow = true;
          });
        });
        setTimeout(() => {
          this.disconnectObserver(this.observerName);
          const contentObserver = uni.createIntersectionObserver(this);
          contentObserver.relativeToViewport({
            bottom: this.thresholdValue
          }).observe(`.uv-image--${this.elIndex}`, (res) => {
            if (res.intersectionRatio > 0) {
              this.observeShow = true;
              this.disconnectObserver(this.observerName);
            }
          });
          this[this.observerName] = contentObserver;
        }, 50);
      },
      disconnectObserver(observerName) {
        const observer = this[observerName];
        observer && observer.disconnect();
      }
    }
  };
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_transition = resolveEasycom(vue.resolveDynamicComponent("uv-transition"), __easycom_1$1);
    return $data.show ? (vue.openBlock(), vue.createBlock(_component_uv_transition, {
      key: 0,
      show: $data.show,
      mode: "fade",
      duration: _ctx.fade ? _ctx.duration : 0,
      "cell-child": _ctx.cellChild,
      "custom-style": $options.wrapStyle
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uv-image", [`uv-image--${$data.elIndex}`]]),
            onClick: _cache[2] || (_cache[2] = (...args) => $options.onClick && $options.onClick(...args)),
            style: vue.normalizeStyle([$options.wrapStyle, $data.backgroundStyle])
          },
          [
            !$data.isError && $data.observeShow ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 0,
              src: _ctx.src,
              mode: _ctx.mode,
              onError: _cache[0] || (_cache[0] = (...args) => $options.onErrorHandler && $options.onErrorHandler(...args)),
              onLoad: _cache[1] || (_cache[1] = (...args) => $options.onLoadHandler && $options.onLoadHandler(...args)),
              "show-menu-by-longpress": _ctx.showMenuByLongpress,
              "lazy-load": _ctx.lazyLoad,
              class: "uv-image__image",
              style: vue.normalizeStyle([$options.imageStyle]),
              webp: _ctx.webp
            }, null, 44, ["src", "mode", "show-menu-by-longpress", "lazy-load", "webp"])) : vue.createCommentVNode("v-if", true),
            _ctx.showLoading && $data.loading ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 1,
                class: "uv-image__loading",
                style: vue.normalizeStyle({
                  borderRadius: _ctx.shape == "circle" ? "50%" : _ctx.$uv.addUnit(_ctx.radius),
                  backgroundColor: _ctx.bgColor,
                  width: _ctx.$uv.addUnit(_ctx.width),
                  height: _ctx.$uv.addUnit(_ctx.height)
                })
              },
              [
                vue.renderSlot(_ctx.$slots, "loading", {}, () => [
                  vue.createVNode(_component_uv_icon, {
                    name: _ctx.loadingIcon,
                    width: _ctx.width,
                    height: _ctx.height
                  }, null, 8, ["name", "width", "height"])
                ], true)
              ],
              4
              /* STYLE */
            )) : vue.createCommentVNode("v-if", true),
            _ctx.showError && $data.isError && !$data.loading ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 2,
                class: "uv-image__error",
                style: vue.normalizeStyle({
                  borderRadius: _ctx.shape == "circle" ? "50%" : _ctx.$uv.addUnit(_ctx.radius),
                  width: _ctx.$uv.addUnit(_ctx.width),
                  height: _ctx.$uv.addUnit(_ctx.height)
                })
              },
              [
                vue.renderSlot(_ctx.$slots, "error", {}, () => [
                  vue.createVNode(_component_uv_icon, {
                    name: _ctx.errorIcon,
                    width: _ctx.width,
                    height: _ctx.height
                  }, null, 8, ["name", "width", "height"])
                ], true)
              ],
              4
              /* STYLE */
            )) : vue.createCommentVNode("v-if", true)
          ],
          6
          /* CLASS, STYLE */
        )
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["show", "duration", "cell-child", "custom-style"])) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_8$1 = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$k], ["__scopeId", "data-v-8fe9e33e"], ["__file", "E:/code/app/WH-app/uni_modules/uv-image/components/uv-image/uv-image.vue"]]);
  const props$b = {
    props: {
      // 标题
      title: {
        type: [String, Number],
        default: ""
      },
      // 标题下方的描述信息
      label: {
        type: [String, Number],
        default: ""
      },
      // 右侧的内容
      value: {
        type: [String, Number],
        default: ""
      },
      // 左侧图标名称，或者图片链接(本地文件建议使用绝对地址)
      icon: {
        type: String,
        default: ""
      },
      // 是否禁用cell
      disabled: {
        type: Boolean,
        default: false
      },
      // 是否显示下边框
      border: {
        type: Boolean,
        default: true
      },
      // 内容是否垂直居中(主要是针对右侧的value部分)
      center: {
        type: Boolean,
        default: true
      },
      // 点击后跳转的URL地址
      url: {
        type: String,
        default: ""
      },
      // 链接跳转的方式，内部使用的是uvui封装的route方法，可能会进行拦截操作
      linkType: {
        type: String,
        default: "navigateTo"
      },
      // 是否开启点击反馈(表现为点击时加上灰色背景)
      clickable: {
        type: Boolean,
        default: false
      },
      // 是否展示右侧箭头并开启点击反馈
      isLink: {
        type: Boolean,
        default: false
      },
      // 是否显示表单状态下的必填星号(此组件可能会内嵌入input组件)
      required: {
        type: Boolean,
        default: false
      },
      // 右侧的图标箭头
      rightIcon: {
        type: String,
        default: "arrow-right"
      },
      // 右侧箭头的方向，可选值为：left，up，down
      arrowDirection: {
        type: String,
        default: ""
      },
      // 左侧图标样式
      iconStyle: {
        type: [Object, String],
        default: () => {
          return {};
        }
      },
      // 右侧箭头图标的样式
      rightIconStyle: {
        type: [Object, String],
        default: () => {
          return {};
        }
      },
      // 标题的样式
      titleStyle: {
        type: [Object, String],
        default: () => {
          return {};
        }
      },
      // 单位元的大小，可选值为large
      size: {
        type: String,
        default: ""
      },
      // 点击cell是否阻止事件传播
      stop: {
        type: Boolean,
        default: true
      },
      // 标识符，cell被点击时返回
      name: {
        type: [Number, String],
        default: ""
      },
      // 单元格自定义样式
      cellStyle: {
        type: [Object, String],
        default: () => {
        }
      },
      ...(_z = (_y = uni.$uv) == null ? void 0 : _y.props) == null ? void 0 : _z.cell
    }
  };
  const _sfc_main$k = {
    name: "uv-cell",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$b],
    computed: {
      titleTextStyle() {
        return this.$uv.addStyle(this.titleStyle);
      }
    },
    methods: {
      // 点击cell
      clickHandler(e2) {
        if (this.disabled)
          return;
        this.$emit("click", {
          name: this.name
        });
        this.openPage();
        this.stop && this.preventEvent(e2);
      }
    }
  };
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_line = resolveEasycom(vue.resolveDynamicComponent("uv-line"), __easycom_1$3);
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass(["uv-cell", [_ctx.customClass]]),
      style: vue.normalizeStyle([_ctx.$uv.addStyle(_ctx.customStyle)]),
      "hover-class": !_ctx.disabled && (_ctx.clickable || _ctx.isLink) ? "uv-cell--clickable" : "",
      "hover-stay-time": 250,
      onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args))
    }, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["uv-cell__body", [_ctx.center && "uv-cell--center", _ctx.size === "large" && "uv-cell__body--large"]]),
          style: vue.normalizeStyle([_ctx.cellStyle])
        },
        [
          vue.createElementVNode("view", { class: "uv-cell__body__content" }, [
            vue.createElementVNode("view", { class: "uv-cell__left-icon-wrap" }, [
              vue.renderSlot(_ctx.$slots, "icon", {}, () => [
                _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_uv_icon, {
                  key: 0,
                  name: _ctx.icon,
                  "custom-style": _ctx.iconStyle,
                  size: _ctx.size === "large" ? 22 : 18
                }, null, 8, ["name", "custom-style", "size"])) : vue.createCommentVNode("v-if", true)
              ], true)
            ]),
            vue.createElementVNode("view", { class: "uv-cell__title" }, [
              vue.renderSlot(_ctx.$slots, "title", {}, () => [
                _ctx.title ? (vue.openBlock(), vue.createElementBlock(
                  "text",
                  {
                    key: 0,
                    class: vue.normalizeClass(["uv-cell__title-text", [_ctx.disabled && "uv-cell--disabled", _ctx.size === "large" && "uv-cell__title-text--large"]]),
                    style: vue.normalizeStyle([$options.titleTextStyle])
                  },
                  vue.toDisplayString(_ctx.title),
                  7
                  /* TEXT, CLASS, STYLE */
                )) : vue.createCommentVNode("v-if", true)
              ], true),
              vue.renderSlot(_ctx.$slots, "label", {}, () => [
                _ctx.label ? (vue.openBlock(), vue.createElementBlock(
                  "text",
                  {
                    key: 0,
                    class: vue.normalizeClass(["uv-cell__label", [_ctx.disabled && "uv-cell--disabled", _ctx.size === "large" && "uv-cell__label--large"]])
                  },
                  vue.toDisplayString(_ctx.label),
                  3
                  /* TEXT, CLASS */
                )) : vue.createCommentVNode("v-if", true)
              ], true)
            ])
          ]),
          vue.renderSlot(_ctx.$slots, "value", {}, () => [
            !_ctx.$uv.test.empty(_ctx.value) ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: vue.normalizeClass(["uv-cell__value", [_ctx.disabled && "uv-cell--disabled", _ctx.size === "large" && "uv-cell__value--large"]])
              },
              vue.toDisplayString(_ctx.value),
              3
              /* TEXT, CLASS */
            )) : vue.createCommentVNode("v-if", true)
          ], true),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["uv-cell__right-icon-wrap", [`uv-cell__right-icon-wrap--${_ctx.arrowDirection}`]])
            },
            [
              vue.renderSlot(_ctx.$slots, "right-icon", {}, () => [
                _ctx.isLink ? (vue.openBlock(), vue.createBlock(_component_uv_icon, {
                  key: 0,
                  name: _ctx.rightIcon,
                  "custom-style": _ctx.rightIconStyle,
                  color: _ctx.disabled ? "#c8c9cc" : "info",
                  size: _ctx.size === "large" ? 18 : 16
                }, null, 8, ["name", "custom-style", "color", "size"])) : vue.createCommentVNode("v-if", true)
              ], true)
            ],
            2
            /* CLASS */
          )
        ],
        6
        /* CLASS, STYLE */
      ),
      _ctx.border ? (vue.openBlock(), vue.createBlock(_component_uv_line, { key: 0 })) : vue.createCommentVNode("v-if", true)
    ], 14, ["hover-class"]);
  }
  const __easycom_9$1 = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$j], ["__scopeId", "data-v-565cfae0"], ["__file", "E:/code/app/WH-app/uni_modules/uv-cell/components/uv-cell/uv-cell.vue"]]);
  const props$a = {
    props: {
      // 分组标题
      title: {
        type: String,
        default: ""
      },
      // 是否显示外边框
      border: {
        type: Boolean,
        default: true
      },
      ...(_B = (_A = uni.$uv) == null ? void 0 : _A.props) == null ? void 0 : _B.cellGroup
    }
  };
  const _sfc_main$j = {
    name: "uv-cell-group",
    mixins: [mpMixin, mixin, props$a]
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_line = resolveEasycom(vue.resolveDynamicComponent("uv-line"), __easycom_1$3);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        style: vue.normalizeStyle([_ctx.$uv.addStyle(_ctx.customStyle)]),
        class: vue.normalizeClass([[_ctx.customClass], "uv-cell-group"])
      },
      [
        _ctx.title ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "uv-cell-group__title"
        }, [
          vue.renderSlot(_ctx.$slots, "title", {}, () => [
            vue.createElementVNode(
              "text",
              { class: "uv-cell-group__title__text" },
              vue.toDisplayString(_ctx.title),
              1
              /* TEXT */
            )
          ], true)
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "uv-cell-group__wrapper" }, [
          _ctx.border ? (vue.openBlock(), vue.createBlock(_component_uv_line, { key: 0 })) : vue.createCommentVNode("v-if", true),
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_10$1 = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__scopeId", "data-v-400210fd"], ["__file", "E:/code/app/WH-app/uni_modules/uv-cell/components/uv-cell-group/uv-cell-group.vue"]]);
  const props$9 = {
    props: {
      // 是否显示遮罩
      show: {
        type: Boolean,
        default: false
      },
      // 层级z-index
      zIndex: {
        type: [String, Number],
        default: 10070
      },
      // 遮罩的过渡时间，单位为ms
      duration: {
        type: [String, Number],
        default: 300
      },
      // 不透明度值，当做rgba的第四个参数
      opacity: {
        type: [String, Number],
        default: 0.5
      },
      ...(_D = (_C = uni.$uv) == null ? void 0 : _C.props) == null ? void 0 : _D.overlay
    }
  };
  const _sfc_main$i = {
    name: "uv-overlay",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$9],
    watch: {
      show(newVal) {
      }
    },
    computed: {
      overlayStyle() {
        const style = {
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          zIndex: this.zIndex,
          bottom: 0,
          "background-color": `rgba(0, 0, 0, ${this.opacity})`
        };
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    methods: {
      clickHandler() {
        this.$emit("click");
      },
      clear() {
      }
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_transition = resolveEasycom(vue.resolveDynamicComponent("uv-transition"), __easycom_1$1);
    return vue.openBlock(), vue.createBlock(_component_uv_transition, {
      show: _ctx.show,
      mode: "fade",
      "custom-class": "uv-overlay",
      duration: _ctx.duration,
      "custom-style": $options.overlayStyle,
      onClick: $options.clickHandler,
      onTouchmove: vue.withModifiers($options.clear, ["stop", "prevent"])
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["show", "duration", "custom-style", "onClick", "onTouchmove"]);
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__scopeId", "data-v-7303e1aa"], ["__file", "E:/code/app/WH-app/uni_modules/uv-overlay/components/uv-overlay/uv-overlay.vue"]]);
  const props$8 = {
    props: {
      bgColor: {
        type: String,
        default: "transparent"
      }
    }
  };
  const _sfc_main$h = {
    name: "uv-status-bar",
    mixins: [mpMixin, mixin, props$8],
    data() {
      return {};
    },
    computed: {
      style() {
        const style = {};
        style.height = this.$uv.addUnit(this.$uv.sys().statusBarHeight, "px");
        if (this.bgColor) {
          if (this.bgColor.indexOf("gradient") > -1) {
            style.backgroundImage = this.bgColor;
          } else {
            style.background = this.bgColor;
          }
        }
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    }
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        style: vue.normalizeStyle([$options.style]),
        class: "uv-status-bar"
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__scopeId", "data-v-f5bd6f5a"], ["__file", "E:/code/app/WH-app/uni_modules/uv-status-bar/components/uv-status-bar/uv-status-bar.vue"]]);
  const _sfc_main$g = {
    name: "uv-safe-bottom",
    mixins: [mpMixin, mixin],
    data() {
      return {
        safeAreaBottomHeight: 0,
        isNvue: false
      };
    },
    computed: {
      style() {
        const style = {};
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    mounted() {
    }
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uv-safe-bottom", [!$data.isNvue && "uv-safe-area-inset-bottom"]]),
        style: vue.normalizeStyle([$options.style])
      },
      null,
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_2$1 = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__scopeId", "data-v-560f16b2"], ["__file", "E:/code/app/WH-app/uni_modules/uv-safe-bottom/components/uv-safe-bottom/uv-safe-bottom.vue"]]);
  const _sfc_main$f = {
    name: "uv-popup",
    components: {},
    mixins: [mpMixin, mixin],
    emits: ["change", "maskClick"],
    props: {
      // 弹出层类型，可选值，top: 顶部弹出层；bottom：底部弹出层；center：全屏弹出层
      // message: 消息提示 ; dialog : 对话框
      mode: {
        type: String,
        default: "center"
      },
      // 动画时长，单位ms
      duration: {
        type: [String, Number],
        default: 300
      },
      // 层级
      zIndex: {
        type: [String, Number],
        default: 10075
      },
      bgColor: {
        type: String,
        default: "#ffffff"
      },
      safeArea: {
        type: Boolean,
        default: true
      },
      // 是否显示遮罩
      overlay: {
        type: Boolean,
        default: true
      },
      // 点击遮罩是否关闭弹窗
      closeOnClickOverlay: {
        type: Boolean,
        default: true
      },
      // 遮罩的透明度，0-1之间
      overlayOpacity: {
        type: [Number, String],
        default: 0.4
      },
      // 自定义遮罩的样式
      overlayStyle: {
        type: [Object, String],
        default: ""
      },
      // 是否为iPhoneX留出底部安全距离
      safeAreaInsetBottom: {
        type: Boolean,
        default: true
      },
      // 是否留出顶部安全距离（状态栏高度）
      safeAreaInsetTop: {
        type: Boolean,
        default: false
      },
      // 是否显示关闭图标
      closeable: {
        type: Boolean,
        default: false
      },
      // 自定义关闭图标位置，top-left为左上角，top-right为右上角，bottom-left为左下角，bottom-right为右下角
      closeIconPos: {
        type: String,
        default: "top-right"
      },
      // mode=center，也即中部弹出时，是否使用缩放模式
      zoom: {
        type: Boolean,
        default: true
      },
      round: {
        type: [Number, String],
        default: 0
      },
      ...(_F = (_E = uni.$uv) == null ? void 0 : _E.props) == null ? void 0 : _F.popup
    },
    watch: {
      /**
       * 监听type类型
       */
      type: {
        handler: function(type2) {
          if (!this.config[type2])
            return;
          this[this.config[type2]](true);
        },
        immediate: true
      },
      isDesktop: {
        handler: function(newVal) {
          if (!this.config[newVal])
            return;
          this[this.config[this.mode]](true);
        },
        immediate: true
      },
      // H5 下禁止底部滚动
      showPopup(show) {
      }
    },
    data() {
      return {
        ani: [],
        showPopup: false,
        showTrans: false,
        popupWidth: 0,
        popupHeight: 0,
        config: {
          top: "top",
          bottom: "bottom",
          center: "center",
          left: "left",
          right: "right",
          message: "top",
          dialog: "center",
          share: "bottom"
        },
        transitionStyle: {
          position: "fixed",
          left: 0,
          right: 0
        },
        maskShow: true,
        mkclick: true,
        popupClass: this.isDesktop ? "fixforpc-top" : "top",
        direction: ""
      };
    },
    computed: {
      isDesktop() {
        return this.popupWidth >= 500 && this.popupHeight >= 500;
      },
      bg() {
        if (this.bgColor === "" || this.bgColor === "none" || this.$uv.getPx(this.round) > 0) {
          return "transparent";
        }
        return this.bgColor;
      },
      contentStyle() {
        const style = {};
        if (this.bgColor) {
          style.backgroundColor = this.bg;
        }
        if (this.round) {
          const value2 = this.$uv.addUnit(this.round);
          const mode = this.direction ? this.direction : this.mode;
          style.backgroundColor = this.bgColor;
          if (mode === "top") {
            style.borderBottomLeftRadius = value2;
            style.borderBottomRightRadius = value2;
          } else if (mode === "bottom") {
            style.borderTopLeftRadius = value2;
            style.borderTopRightRadius = value2;
          } else if (mode === "center") {
            style.borderRadius = value2;
          }
        }
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    // TODO vue3
    unmounted() {
      this.setH5Visible();
    },
    created() {
      this.messageChild = null;
      this.clearPropagation = false;
    },
    methods: {
      setH5Visible() {
      },
      /**
       * 公用方法，不显示遮罩层
       */
      closeMask() {
        this.maskShow = false;
      },
      // TODO nvue 取消冒泡
      clear(e2) {
        e2.stopPropagation();
        this.clearPropagation = true;
      },
      open(direction) {
        if (this.showPopup) {
          return;
        }
        let innerType = ["top", "center", "bottom", "left", "right", "message", "dialog", "share"];
        if (!(direction && innerType.indexOf(direction) !== -1)) {
          direction = this.mode;
        } else {
          this.direction = direction;
        }
        if (!this.config[direction]) {
          return this.$uv.error(`缺少类型：${direction}`);
        }
        this[this.config[direction]]();
        this.$emit("change", {
          show: true,
          type: direction
        });
      },
      close(type2) {
        this.showTrans = false;
        this.$emit("change", {
          show: false,
          type: this.mode
        });
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.showPopup = false;
        }, 300);
      },
      // TODO 处理冒泡事件，头条的冒泡事件有问题 ，先这样兼容
      touchstart() {
        this.clearPropagation = false;
      },
      onTap() {
        if (this.clearPropagation) {
          this.clearPropagation = false;
          return;
        }
        this.$emit("maskClick");
        if (!this.closeOnClickOverlay)
          return;
        this.close();
      },
      /**
       * 顶部弹出样式处理
       */
      top(type2) {
        this.popupClass = this.isDesktop ? "fixforpc-top" : "top";
        this.ani = ["slide-top"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          left: 0,
          right: 0,
          backgroundColor: this.bg
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
        this.$nextTick(() => {
          if (this.messageChild && this.mode === "message") {
            this.messageChild.timerClose();
          }
        });
      },
      /**
       * 底部弹出样式处理
       */
      bottom(type2) {
        this.popupClass = "bottom";
        this.ani = ["slide-bottom"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: this.bg
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      /**
       * 中间弹出样式处理
       */
      center(type2) {
        this.popupClass = "center";
        this.ani = this.zoom ? ["zoom-in", "fade"] : ["fade"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          display: "flex",
          flexDirection: "column",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0,
          justifyContent: "center",
          alignItems: "center"
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      left(type2) {
        this.popupClass = "left";
        this.ani = ["slide-left"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          left: 0,
          bottom: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      right(type2) {
        this.popupClass = "right";
        this.ani = ["slide-right"];
        this.transitionStyle = {
          position: "fixed",
          zIndex: this.zIndex,
          bottom: 0,
          right: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type2)
          return;
        this.showPopup = true;
        this.showTrans = true;
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_overlay = resolveEasycom(vue.resolveDynamicComponent("uv-overlay"), __easycom_0);
    const _component_uv_status_bar = resolveEasycom(vue.resolveDynamicComponent("uv-status-bar"), __easycom_1);
    const _component_uv_safe_bottom = resolveEasycom(vue.resolveDynamicComponent("uv-safe-bottom"), __easycom_2$1);
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_transition = resolveEasycom(vue.resolveDynamicComponent("uv-transition"), __easycom_1$1);
    return $data.showPopup ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["uv-popup", [$data.popupClass, $options.isDesktop ? "fixforpc-z-index" : ""]]),
        style: vue.normalizeStyle([{ zIndex: $props.zIndex }])
      },
      [
        vue.createElementVNode(
          "view",
          {
            onTouchstart: _cache[2] || (_cache[2] = (...args) => $options.touchstart && $options.touchstart(...args))
          },
          [
            vue.createCommentVNode(" 遮罩层 "),
            $data.maskShow && $props.overlay ? (vue.openBlock(), vue.createBlock(_component_uv_overlay, {
              key: "1",
              show: $data.showTrans,
              duration: $props.duration,
              "custom-style": $props.overlayStyle,
              opacity: $props.overlayOpacity,
              zIndex: $props.zIndex,
              onClick: $options.onTap
            }, null, 8, ["show", "duration", "custom-style", "opacity", "zIndex", "onClick"])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(_component_uv_transition, {
              key: "2",
              mode: $data.ani,
              name: "content",
              "custom-style": $data.transitionStyle,
              duration: $props.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["uv-popup__content", [$data.popupClass]]),
                    style: vue.normalizeStyle([$options.contentStyle]),
                    onClick: _cache[1] || (_cache[1] = (...args) => $options.clear && $options.clear(...args))
                  },
                  [
                    $props.safeAreaInsetTop ? (vue.openBlock(), vue.createBlock(_component_uv_status_bar, { key: 0 })) : vue.createCommentVNode("v-if", true),
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
                    $props.safeAreaInsetBottom ? (vue.openBlock(), vue.createBlock(_component_uv_safe_bottom, { key: 1 })) : vue.createCommentVNode("v-if", true),
                    $props.closeable ? (vue.openBlock(), vue.createElementBlock(
                      "view",
                      {
                        key: 2,
                        onClick: _cache[0] || (_cache[0] = vue.withModifiers((...args) => $options.close && $options.close(...args), ["stop"])),
                        class: vue.normalizeClass(["uv-popup__content__close", ["uv-popup__content__close--" + $props.closeIconPos]]),
                        "hover-class": "uv-popup__content__close--hover",
                        "hover-stay-time": "150"
                      },
                      [
                        vue.createVNode(_component_uv_icon, {
                          name: "close",
                          color: "#909399",
                          size: "18",
                          bold: ""
                        })
                      ],
                      2
                      /* CLASS */
                    )) : vue.createCommentVNode("v-if", true)
                  ],
                  6
                  /* CLASS, STYLE */
                )
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["mode", "custom-style", "duration", "show", "onClick"])
          ],
          32
          /* NEED_HYDRATION */
        )
      ],
      6
      /* CLASS, STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_11 = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__scopeId", "data-v-01a3ad6e"], ["__file", "E:/code/app/WH-app/uni_modules/uv-popup/components/uv-popup/uv-popup.vue"]]);
  const _sfc_main$e = {
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const isShow = vue.ref(true);
      const fat = vue.ref();
      const set = vue.ref(null);
      const edit = vue.ref(null);
      const equipment_list = vue.ref([]);
      const equipment = vue.ref([]);
      const device = vue.ref([]);
      const daysDifference = vue.ref();
      const timedifference = vue.ref();
      const set_list = [
        { id: 0, name: "参数调整" },
        { id: 1, name: "清空数据" },
        { id: 2, name: "通知设置" }
      ];
      const content = vue.ref(
        [
          {
            iconPath: "/static/category-add.png",
            text: "设备录入",
            active: false
          },
          {
            iconPath: "/static/product.png",
            text: "设备管理",
            active: false
          },
          {
            iconPath: "/static/change.png",
            text: "同步数据",
            active: false
          }
        ]
      );
      const set_up = () => {
        set.value.open();
      };
      const edit_open = () => {
        edit.value.open();
      };
      const trigger = (e2) => {
        switch (e2.index) {
          case 0:
            uni.navigateTo({ url: "/pages/equipment/equipment_Input" });
            break;
          case 1:
            uni.navigateTo({ url: "/pages/equipment/equipment_manage" });
            break;
        }
      };
      const goto = vue.ref((URL) => {
        uni.navigateTo({
          url: URL
        });
      });
      const setclick = (e2) => {
        if (e2 == 1) {
          if (equipment.value.length != 0) {
            uni.removeStorageSync("deviceList");
            uni.showToast({
              title: "删除成功",
              icon: "success"
            });
          } else {
            uni.showToast({
              title: "删除失败",
              icon: "fail"
            });
          }
        }
        storage();
      };
      const storage = () => {
        equipment.value = uni.getStorageSync("deviceList") || [];
        const currentDate = /* @__PURE__ */ new Date();
        equipment_list.value = equipment.value.map((item) => {
          const presetDate = new Date(item.lasttime);
          const daysDiff = Math.floor((currentDate - presetDate) / (1e3 * 3600 * 24));
          return {
            ...item,
            remainingDays: item.time - daysDiff
          };
        }).filter(
          (item) => item.remainingDays >= 0 && item.remainingDays <= 7
        );
      };
      const systemBarHeight = vue.ref(0);
      const getSysteminfo = () => {
        uni.getSystemInfo({
          success: (res) => {
            systemBarHeight.value = res.statusBarHeight;
          }
        });
      };
      vue.onMounted(() => {
        getSysteminfo();
        storage();
      });
      onPullDownRefresh(() => {
        storage();
        fat.value.close();
        setTimeout(() => {
          uni.stopPullDownRefresh();
        }, 1e3);
      });
      onHide(() => {
        if (fat.value.isShow) {
          fat.value.close();
        }
      });
      onShow(() => {
        setTimeout(() => {
          isShow.value = false;
        }, 1e3);
      });
      const __returned__ = { isShow, fat, set, edit, equipment_list, equipment, device, daysDifference, timedifference, set_list, content, set_up, edit_open, trigger, goto, setclick, storage, systemBarHeight, getSysteminfo, ref: vue.ref, onMounted: vue.onMounted, computed: vue.computed, get onPullDownRefresh() {
        return onPullDownRefresh;
      }, get onHide() {
        return onHide;
      }, get onShow() {
        return onShow;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_fab = resolveEasycom(vue.resolveDynamicComponent("uni-fab"), __easycom_0$3);
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_text = resolveEasycom(vue.resolveDynamicComponent("uv-text"), __easycom_0$2);
    const _component_uv_line = resolveEasycom(vue.resolveDynamicComponent("uv-line"), __easycom_1$3);
    const _component_uv_col = resolveEasycom(vue.resolveDynamicComponent("uv-col"), __easycom_4$1);
    const _component_uv_row = resolveEasycom(vue.resolveDynamicComponent("uv-row"), __easycom_5);
    const _component_uv_list_item = resolveEasycom(vue.resolveDynamicComponent("uv-list-item"), __easycom_6$1);
    const _component_uv_list = resolveEasycom(vue.resolveDynamicComponent("uv-list"), __easycom_7$1);
    const _component_uv_image = resolveEasycom(vue.resolveDynamicComponent("uv-image"), __easycom_8$1);
    const _component_uv_cell = resolveEasycom(vue.resolveDynamicComponent("uv-cell"), __easycom_9$1);
    const _component_uv_cell_group = resolveEasycom(vue.resolveDynamicComponent("uv-cell-group"), __easycom_10$1);
    const _component_uv_popup = resolveEasycom(vue.resolveDynamicComponent("uv-popup"), __easycom_11);
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(' 	<uv-loading-page :loading="true" image="/static/WH.ico" icon-size="80px" v-if="isShow"></uv-loading-page> '),
        vue.createElementVNode("view", { class: "content" }, [
          vue.createElementVNode(
            "view",
            {
              class: "nav-bar",
              style: vue.normalizeStyle({ marginTop: $setup.systemBarHeight + "px" })
            },
            null,
            4
            /* STYLE */
          ),
          vue.createVNode(_component_uni_fab, {
            horizontal: "right",
            content: $setup.content,
            onTrigger: $setup.trigger,
            ref: "fat"
          }, null, 8, ["content"]),
          vue.createElementVNode("view", { class: "icon" }, [
            vue.createVNode(_component_uv_icon, {
              name: "list",
              size: "42px",
              onClick: $setup.set_up
            })
          ]),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createVNode(_component_uv_text, {
              text: "维护系统",
              align: "center",
              size: "55"
            })
          ]),
          vue.createElementVNode("view", { style: { "width": "360px", "margin": "0px 60px 0px 60px" } }, [
            vue.createVNode(_component_uv_line),
            vue.createVNode(_component_uv_row, {
              justify: "space-between",
              gutter: "6",
              style: { "height": "50px" }
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uv_col, {
                  justify: "center",
                  align: "center",
                  "text-align": "center",
                  span: "2"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("编号")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_uv_col, {
                  justify: "center",
                  align: "center",
                  "text-align": "center",
                  span: "3"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("设备名称")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_uv_col, {
                  justify: "center",
                  align: "center",
                  "text-align": "center",
                  span: "5"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("上次保养时间")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_uv_col, {
                  justify: "center",
                  align: "center",
                  "text-align": "center",
                  span: "2"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("剩余")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_line)
          ]),
          vue.createElementVNode("view", { class: "list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($setup.equipment_list, (item, index2) => {
                return vue.openBlock(), vue.createBlock(
                  _component_uv_list,
                  {
                    key: index2,
                    style: { "max-height": "80px" },
                    border: true
                  },
                  {
                    default: vue.withCtx(() => [
                      vue.createVNode(
                        _component_uv_list_item,
                        {
                          border: true,
                          style: { "height": "40px" }
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(
                              _component_uv_row,
                              {
                                justify: "space-between",
                                gutter: "6"
                              },
                              {
                                default: vue.withCtx(() => [
                                  vue.createVNode(
                                    _component_uv_col,
                                    { span: "2" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createElementVNode(
                                          "view",
                                          { style: { "display": "flex", "justify-content": "center" } },
                                          vue.toDisplayString(item.id),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  ),
                                  vue.createVNode(
                                    _component_uv_col,
                                    { span: "3" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createElementVNode(
                                          "view",
                                          { style: { "display": "flex", "justify-content": "center" } },
                                          vue.toDisplayString(item.name),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  ),
                                  vue.createVNode(
                                    _component_uv_col,
                                    { span: "5" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createElementVNode(
                                          "view",
                                          { style: { "margin-left": "30px" } },
                                          vue.toDisplayString(item.lasttime),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  ),
                                  vue.createVNode(
                                    _component_uv_col,
                                    { span: "2" },
                                    {
                                      default: vue.withCtx(() => [
                                        vue.createElementVNode(
                                          "view",
                                          { style: { "display": "flex", "justify-content": "center" } },
                                          vue.toDisplayString(item.remainingDays),
                                          1
                                          /* TEXT */
                                        )
                                      ]),
                                      _: 2
                                      /* DYNAMIC */
                                    },
                                    1024
                                    /* DYNAMIC_SLOTS */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              },
                              1024
                              /* DYNAMIC_SLOTS */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          vue.createVNode(
            _component_uv_popup,
            {
              ref: "set",
              mode: "left",
              safeAreaInsetTop: true
            },
            {
              default: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "set" }, [
                  vue.createElementVNode("view", { style: { "display": "flex", "flex-direction": "column", "align-items": "center", "justify-content": "center", "height": "220px" } }, [
                    vue.createVNode(_component_uv_image, {
                      src: "/static/WH.ico",
                      mode: "widthFix",
                      width: "100px",
                      height: "100px"
                    })
                  ]),
                  vue.createElementVNode("view", { style: { "min-height": "100px" } }, [
                    (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($setup.set_list, (item) => {
                        return vue.createVNode(
                          _component_uv_cell_group,
                          {
                            key: item.id,
                            customStyle: "min-height: 10px"
                          },
                          {
                            default: vue.withCtx(() => [
                              vue.createVNode(_component_uv_cell, {
                                title: item.name,
                                size: "large",
                                onClick: ($event) => $setup.setclick(item.id)
                              }, null, 8, ["title", "onClick"])
                            ]),
                            _: 2
                            /* DYNAMIC */
                          },
                          1024
                          /* DYNAMIC_SLOTS */
                        );
                      }),
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ]),
                  vue.createElementVNode("view", { style: { "position": "fixed", "bottom": "0", "padding": "10px" } }, [
                    vue.createVNode(_component_uv_image, {
                      src: "/static/tuichu.png",
                      width: "30px",
                      height: "30px"
                    })
                  ])
                ])
              ]),
              _: 1
              /* STABLE */
            },
            512
            /* NEED_PATCH */
          )
        ])
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    );
  }
  const PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__file", "E:/code/app/WH-app/pages/index/index.vue"]]);
  const props$7 = {
    props: {
      value: {
        type: [String, Number],
        default: ""
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      // 输入框类型
      // number-数字输入键盘，app-vue下可以输入浮点数，app-nvue和小程序平台下只能输入整数
      // idcard-身份证输入键盘，微信、支付宝、百度、QQ小程序
      // digit-带小数点的数字键盘，App的nvue页面、微信、支付宝、百度、头条、QQ小程序
      // text-文本输入键盘
      type: {
        type: String,
        default: "text"
      },
      // 是否禁用输入框
      disabled: {
        type: Boolean,
        default: false
      },
      // 禁用状态时的背景色
      disabledColor: {
        type: String,
        default: "#f5f7fa"
      },
      // 是否显示清除控件
      clearable: {
        type: Boolean,
        default: false
      },
      // 是否密码类型
      password: {
        type: Boolean,
        default: false
      },
      // 最大输入长度，设置为 -1 的时候不限制最大长度
      maxlength: {
        type: [String, Number],
        default: -1
      },
      // 	输入框为空时的占位符
      placeholder: {
        type: String,
        default: null
      },
      // 指定placeholder的样式类，注意页面或组件的style中写了scoped时，需要在类名前写/deep/
      placeholderClass: {
        type: String,
        default: "input-placeholder"
      },
      // 指定placeholder的样式
      placeholderStyle: {
        type: [String, Object],
        default: "color: #c0c4cc"
      },
      // 设置右下角按钮的文字，有效值：send|search|next|go|done，兼容性详见uni-app文档
      // https://uniapp.dcloud.io/component/input
      // https://uniapp.dcloud.io/component/textarea
      confirmType: {
        type: String,
        default: "done"
      },
      // 点击键盘右下角按钮时是否保持键盘不收起，H5无效
      confirmHold: {
        type: Boolean,
        default: false
      },
      // focus时，点击页面的时候不收起键盘，微信小程序有效
      holdKeyboard: {
        type: Boolean,
        default: false
      },
      // 自动获取焦点
      // 在 H5 平台能否聚焦以及软键盘是否跟随弹出，取决于当前浏览器本身的实现。nvue 页面不支持，需使用组件的 focus()、blur() 方法控制焦点
      focus: {
        type: Boolean,
        default: false
      },
      // 键盘收起时，是否自动失去焦点，目前仅App3.0.0+有效
      autoBlur: {
        type: Boolean,
        default: false
      },
      // 指定focus时光标的位置
      cursor: {
        type: [String, Number],
        default: -1
      },
      // 输入框聚焦时底部与键盘的距离
      cursorSpacing: {
        type: [String, Number],
        default: 30
      },
      // 光标起始位置，自动聚集时有效，需与selection-end搭配使用
      selectionStart: {
        type: [String, Number],
        default: -1
      },
      // 光标结束位置，自动聚集时有效，需与selection-start搭配使用
      selectionEnd: {
        type: [String, Number],
        default: -1
      },
      // 键盘弹起时，是否自动上推页面
      adjustPosition: {
        type: Boolean,
        default: true
      },
      // 输入框内容对齐方式，可选值为：left|center|right
      inputAlign: {
        type: String,
        default: "left"
      },
      // 输入框字体的大小
      fontSize: {
        type: [String, Number],
        default: "14px"
      },
      // 输入框字体颜色
      color: {
        type: String,
        default: "#303133"
      },
      // 输入框前置图标
      prefixIcon: {
        type: String,
        default: ""
      },
      // 前置图标样式，对象或字符串
      prefixIconStyle: {
        type: [String, Object],
        default: ""
      },
      // 输入框后置图标
      suffixIcon: {
        type: String,
        default: ""
      },
      // 后置图标样式，对象或字符串
      suffixIconStyle: {
        type: [String, Object],
        default: ""
      },
      // 边框类型，surround-四周边框，bottom-底部边框，none-无边框
      border: {
        type: String,
        default: "surround"
      },
      // 是否只读，与disabled不同之处在于disabled会置灰组件，而readonly则不会
      readonly: {
        type: Boolean,
        default: false
      },
      // 输入框形状，circle-圆形，square-方形
      shape: {
        type: String,
        default: "square"
      },
      // 用于处理或者过滤输入框内容的方法
      formatter: {
        type: [Function, null],
        default: null
      },
      // 是否忽略组件内对文本合成系统事件的处理
      ignoreCompositionEvent: {
        type: Boolean,
        default: true
      },
      ...(_H = (_G = uni.$uv) == null ? void 0 : _G.props) == null ? void 0 : _H.input
    }
  };
  const _sfc_main$d = {
    name: "uv-input",
    mixins: [mpMixin, mixin, props$7],
    data() {
      return {
        // 输入框的值
        innerValue: "",
        // 是否处于获得焦点状态
        focused: false,
        // 过滤处理方法
        innerFormatter: (value2) => value2
      };
    },
    created() {
      this.innerValue = this.modelValue;
    },
    watch: {
      value(newVal) {
        this.innerValue = newVal;
      },
      modelValue(newVal) {
        this.innerValue = newVal;
      }
    },
    computed: {
      // 是否显示清除控件
      isShowClear() {
        const { clearable, readonly, focused, innerValue } = this;
        return !!clearable && !readonly && !!focused && innerValue !== "";
      },
      // 组件的类名
      inputClass() {
        let classes = [], { border, disabled, shape } = this;
        border === "surround" && (classes = classes.concat(["uv-border", "uv-input--radius"]));
        classes.push(`uv-input--${shape}`);
        border === "bottom" && (classes = classes.concat([
          "uv-border-bottom",
          "uv-input--no-radius"
        ]));
        return classes.join(" ");
      },
      // 组件的样式
      wrapperStyle() {
        const style = {};
        if (this.disabled) {
          style.backgroundColor = this.disabledColor;
        }
        if (this.border === "none") {
          style.padding = "0";
        } else {
          style.paddingTop = "6px";
          style.paddingBottom = "6px";
          style.paddingLeft = "9px";
          style.paddingRight = "9px";
        }
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      },
      // 输入框的样式
      inputStyle() {
        const style = {
          color: this.color,
          fontSize: this.$uv.addUnit(this.fontSize),
          textAlign: this.inputAlign
        };
        if (this.disabled || this.readonly) {
          style["pointer-events"] = "none";
        }
        return style;
      }
    },
    methods: {
      // 在微信小程序中，不支持将函数当做props参数，故只能通过ref形式调用
      setFormatter(e2) {
        this.innerFormatter = e2;
      },
      // 当键盘输入时，触发input事件
      onInput(e2) {
        let { value: value2 = "" } = e2.detail || {};
        const formatter = this.formatter || this.innerFormatter;
        const formatValue = formatter(value2);
        this.innerValue = value2;
        this.$nextTick(() => {
          this.innerValue = formatValue;
          this.valueChange();
        });
      },
      // 输入框失去焦点时触发
      onBlur(event) {
        this.$emit("blur", event.detail.value);
        this.$uv.sleep(100).then(() => {
          this.focused = false;
        });
        this.$uv.formValidate(this, "blur");
      },
      // 输入框聚焦时触发
      onFocus(event) {
        this.focused = true;
        this.$emit("focus");
      },
      // 点击完成按钮时触发
      onConfirm(event) {
        this.$emit("confirm", this.innerValue);
      },
      // 键盘高度发生变化的时候触发此事件
      // 兼容性：微信小程序2.7.0+、App 3.1.0+
      onkeyboardheightchange(e2) {
        this.$emit("keyboardheightchange", e2);
      },
      // 内容发生变化，进行处理
      valueChange() {
        if (this.isClear)
          this.innerValue = "";
        const value2 = this.innerValue;
        this.$nextTick(() => {
          this.$emit("input", value2);
          this.$emit("update:modelValue", value2);
          this.$emit("change", value2);
          this.$uv.formValidate(this, "change");
        });
      },
      // 点击清除控件
      onClear() {
        this.innerValue = "";
        this.isClear = true;
        this.$uv.sleep(200).then((res) => {
          this.isClear = false;
        });
        this.$nextTick(() => {
          this.$emit("clear");
          this.valueChange();
        });
      },
      /**
       * 在安卓nvue上，事件无法冒泡
       * 在某些时间，我们希望监听uv-from-item的点击事件，此时会导致点击uv-form-item内的uv-input后
       * 无法触发uv-form-item的点击事件，这里通过手动调用uv-form-item的方法进行触发
       */
      clickHandler() {
      }
    }
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uv-input", $options.inputClass]),
        style: vue.normalizeStyle([$options.wrapperStyle])
      },
      [
        vue.createElementVNode("view", { class: "uv-input__content" }, [
          vue.createElementVNode("view", { class: "uv-input__content__prefix-icon" }, [
            vue.renderSlot(_ctx.$slots, "prefix", {}, () => [
              _ctx.prefixIcon ? (vue.openBlock(), vue.createBlock(_component_uv_icon, {
                key: 0,
                name: _ctx.prefixIcon,
                size: "18",
                customStyle: _ctx.prefixIconStyle
              }, null, 8, ["name", "customStyle"])) : vue.createCommentVNode("v-if", true)
            ], true)
          ]),
          vue.createElementVNode("view", {
            class: "uv-input__content__field-wrapper",
            onClick: _cache[5] || (_cache[5] = (...args) => $options.clickHandler && $options.clickHandler(...args))
          }, [
            vue.createCommentVNode(" 根据uni-app的input组件文档，H5和APP中只要声明了password参数(无论true还是false)，type均失效，此时\r\n				为了防止type=number时，又存在password属性，type无效，此时需要设置password为undefined\r\n			 "),
            vue.createElementVNode("input", {
              class: "uv-input__content__field-wrapper__field",
              style: vue.normalizeStyle([$options.inputStyle]),
              type: _ctx.type,
              focus: _ctx.focus,
              cursor: _ctx.cursor,
              value: $data.innerValue,
              "auto-blur": _ctx.autoBlur,
              disabled: _ctx.disabled || _ctx.readonly,
              maxlength: _ctx.maxlength,
              placeholder: _ctx.placeholder,
              "placeholder-style": _ctx.placeholderStyle,
              "placeholder-class": _ctx.placeholderClass,
              "confirm-type": _ctx.confirmType,
              "confirm-hold": _ctx.confirmHold,
              "hold-keyboard": _ctx.holdKeyboard,
              "cursor-spacing": _ctx.cursorSpacing,
              "adjust-position": _ctx.adjustPosition,
              "selection-end": _ctx.selectionEnd,
              "selection-start": _ctx.selectionStart,
              password: _ctx.password || _ctx.type === "password" || void 0,
              ignoreCompositionEvent: _ctx.ignoreCompositionEvent,
              onInput: _cache[0] || (_cache[0] = (...args) => $options.onInput && $options.onInput(...args)),
              onBlur: _cache[1] || (_cache[1] = (...args) => $options.onBlur && $options.onBlur(...args)),
              onFocus: _cache[2] || (_cache[2] = (...args) => $options.onFocus && $options.onFocus(...args)),
              onConfirm: _cache[3] || (_cache[3] = (...args) => $options.onConfirm && $options.onConfirm(...args)),
              onKeyboardheightchange: _cache[4] || (_cache[4] = (...args) => $options.onkeyboardheightchange && $options.onkeyboardheightchange(...args))
            }, null, 44, ["type", "focus", "cursor", "value", "auto-blur", "disabled", "maxlength", "placeholder", "placeholder-style", "placeholder-class", "confirm-type", "confirm-hold", "hold-keyboard", "cursor-spacing", "adjust-position", "selection-end", "selection-start", "password", "ignoreCompositionEvent"])
          ]),
          $options.isShowClear ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "uv-input__content__clear",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.onClear && $options.onClear(...args))
          }, [
            vue.createVNode(_component_uv_icon, {
              name: "close",
              size: "11",
              color: "#ffffff",
              customStyle: "line-height: 12px"
            })
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "uv-input__content__subfix-icon" }, [
            vue.renderSlot(_ctx.$slots, "suffix", {}, () => [
              _ctx.suffixIcon ? (vue.openBlock(), vue.createBlock(_component_uv_icon, {
                key: 0,
                name: _ctx.suffixIcon,
                size: "18",
                customStyle: _ctx.suffixIconStyle
              }, null, 8, ["name", "customStyle"])) : vue.createCommentVNode("v-if", true)
            ], true)
          ])
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_6 = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__scopeId", "data-v-651602aa"], ["__file", "E:/code/app/WH-app/uni_modules/uv-input/components/uv-input/uv-input.vue"]]);
  const props$6 = {
    props: {
      // input的label提示语
      label: {
        type: String,
        default: ""
      },
      // 绑定的值
      prop: {
        type: String,
        default: ""
      },
      // 是否显示表单域的下划线边框
      borderBottom: {
        type: [Boolean],
        default: false
      },
      // label的位置，left-左边，top-上边
      labelPosition: {
        type: String,
        default: ""
      },
      // label的宽度，单位px
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      // 右侧图标
      rightIcon: {
        type: String,
        default: ""
      },
      // 左侧图标
      leftIcon: {
        type: String,
        default: ""
      },
      // 是否显示左边的必填星号，只作显示用，具体校验必填的逻辑，请在rules中配置
      required: {
        type: Boolean,
        default: false
      },
      leftIconStyle: {
        type: [String, Object],
        default: ""
      },
      ...(_J = (_I = uni.$uv) == null ? void 0 : _I.props) == null ? void 0 : _J.formItem
    }
  };
  const _sfc_main$c = {
    name: "uv-form-item",
    emits: ["click"],
    mixins: [mpMixin, mixin, props$6],
    data() {
      return {
        // 错误提示语
        message: "",
        parentData: {
          // 提示文本的位置
          labelPosition: "left",
          // 提示文本对齐方式
          labelAlign: "left",
          // 提示文本的样式
          labelStyle: {},
          // 提示文本的宽度
          labelWidth: 45,
          // 错误提示方式
          errorType: "message"
        }
      };
    },
    created() {
      this.init();
    },
    methods: {
      init() {
        this.updateParentData();
        if (!this.parent) {
          this.$uv.error("uv-form-item需要结合uv-form组件使用");
        }
      },
      // 获取父组件的参数
      updateParentData() {
        this.getParentData("uv-form");
      },
      // 移除uv-form-item的校验结果
      clearValidate() {
        this.message = null;
      },
      // 清空当前的组件的校验结果，并重置为初始值
      resetField() {
        const value2 = this.$uv.getProperty(this.parent.originalModel, this.prop);
        this.$uv.setProperty(this.parent.model, this.prop, value2);
        this.message = null;
      },
      // 点击组件
      clickHandler() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_transition = resolveEasycom(vue.resolveDynamicComponent("uv-transition"), __easycom_1$1);
    const _component_uv_line = resolveEasycom(vue.resolveDynamicComponent("uv-line"), __easycom_1$3);
    return vue.openBlock(), vue.createElementBlock("view", { class: "uv-form-item" }, [
      vue.createElementVNode(
        "view",
        {
          class: "uv-form-item__body",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args)),
          style: vue.normalizeStyle([_ctx.$uv.addStyle(_ctx.customStyle), {
            flexDirection: (_ctx.labelPosition || $data.parentData.labelPosition) === "left" ? "row" : "column"
          }])
        },
        [
          vue.createCommentVNode(' 微信小程序中，将一个参数设置空字符串，结果会变成字符串"true" '),
          vue.renderSlot(_ctx.$slots, "label", {}, () => [
            _ctx.required || _ctx.leftIcon || _ctx.label ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "uv-form-item__body__left",
                style: vue.normalizeStyle({
                  width: _ctx.$uv.addUnit(_ctx.labelWidth || $data.parentData.labelWidth),
                  marginBottom: $data.parentData.labelPosition === "left" ? 0 : "5px"
                })
              },
              [
                vue.createCommentVNode(" 为了块对齐 "),
                vue.createElementVNode("view", { class: "uv-form-item__body__left__content" }, [
                  vue.createCommentVNode(" nvue不支持伪元素before "),
                  _ctx.required ? (vue.openBlock(), vue.createElementBlock("text", {
                    key: 0,
                    class: "uv-form-item__body__left__content__required"
                  }, "*")) : vue.createCommentVNode("v-if", true),
                  _ctx.leftIcon ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "uv-form-item__body__left__content__icon"
                  }, [
                    vue.createVNode(_component_uv_icon, {
                      name: _ctx.leftIcon,
                      "custom-style": _ctx.leftIconStyle
                    }, null, 8, ["name", "custom-style"])
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode(
                    "text",
                    {
                      class: "uv-form-item__body__left__content__label",
                      style: vue.normalizeStyle([$data.parentData.labelStyle, {
                        justifyContent: $data.parentData.labelAlign === "left" ? "flex-start" : $data.parentData.labelAlign === "center" ? "center" : "flex-end"
                      }])
                    },
                    vue.toDisplayString(_ctx.label),
                    5
                    /* TEXT, STYLE */
                  )
                ])
              ],
              4
              /* STYLE */
            )) : vue.createCommentVNode("v-if", true)
          ], true),
          vue.createElementVNode("view", { class: "uv-form-item__body__right" }, [
            vue.createElementVNode("view", { class: "uv-form-item__body__right__content" }, [
              vue.createElementVNode("view", { class: "uv-form-item__body__right__content__slot" }, [
                vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
              ]),
              vue.createElementVNode("view", { class: "item__body__right__content__icon" }, [
                vue.renderSlot(_ctx.$slots, "right", {}, void 0, true)
              ])
            ])
          ])
        ],
        4
        /* STYLE */
      ),
      vue.renderSlot(_ctx.$slots, "error", {}, () => [
        !!$data.message && $data.parentData.errorType === "message" ? (vue.openBlock(), vue.createBlock(_component_uv_transition, {
          key: 0,
          show: true,
          duration: 100,
          mode: "fade"
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode(
              "text",
              {
                class: "uv-form-item__body__right__message",
                style: vue.normalizeStyle({
                  marginLeft: _ctx.$uv.addUnit($data.parentData.labelPosition === "top" ? 0 : _ctx.labelWidth || $data.parentData.labelWidth)
                })
              },
              vue.toDisplayString($data.message),
              5
              /* TEXT, STYLE */
            )
          ]),
          _: 1
          /* STABLE */
        })) : vue.createCommentVNode("v-if", true)
      ], true),
      _ctx.borderBottom ? (vue.openBlock(), vue.createBlock(_component_uv_line, {
        key: 0,
        color: $data.message && $data.parentData.errorType === "border-bottom" ? "#f56c6c" : "#d6d7d9"
      }, null, 8, ["color"])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const __easycom_7 = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__scopeId", "data-v-d1e73275"], ["__file", "E:/code/app/WH-app/uni_modules/uv-form/components/uv-form-item/uv-form-item.vue"]]);
  const props$5 = {
    props: {
      // radio的名称
      name: {
        type: [String, Number, Boolean],
        default: ""
      },
      // 形状，square为方形，circle为圆型
      shape: {
        type: String,
        default: ""
      },
      // 是否禁用
      disabled: {
        type: [String, Boolean],
        default: ""
      },
      // 是否禁止点击提示语选中单选框
      labelDisabled: {
        type: [String, Boolean],
        default: ""
      },
      // 选中状态下的颜色，如设置此值，将会覆盖parent的activeColor值
      activeColor: {
        type: String,
        default: ""
      },
      // 未选中的颜色
      inactiveColor: {
        type: String,
        default: ""
      },
      // 图标的大小，单位px
      iconSize: {
        type: [String, Number],
        default: ""
      },
      // label的字体大小，px单位
      labelSize: {
        type: [String, Number],
        default: ""
      },
      // label提示文字，因为nvue下，直接slot进来的文字，由于特殊的结构，无法修改样式
      label: {
        type: [String, Number, Boolean],
        default: ""
      },
      // 整体的大小
      size: {
        type: [String, Number],
        default: ""
      },
      // 图标颜色
      iconColor: {
        type: String,
        default: ""
      },
      // label的颜色
      labelColor: {
        type: String,
        default: ""
      },
      ...(_L = (_K = uni.$uv) == null ? void 0 : _K.props) == null ? void 0 : _L.radio
    }
  };
  const _sfc_main$b = {
    name: "uv-radio",
    mixins: [mpMixin, mixin, props$5],
    data() {
      return {
        checked: false,
        // 当你看到这段代码的时候，
        // 父组件的默认值，因为头条小程序不支持在computed中使用this.parent.shape的形式
        // 故只能使用如此方法
        parentData: {
          iconSize: 12,
          labelSize: 14,
          labelColor: "#303133",
          labelDisabled: null,
          disabled: null,
          shape: null,
          activeColor: null,
          inactiveColor: null,
          size: 18,
          value: null,
          modelValue: null,
          iconColor: null,
          placement: "row",
          borderBottom: false,
          iconPlacement: "left"
        }
      };
    },
    computed: {
      // 是否禁用，如果父组件uv-raios-group禁用的话，将会忽略子组件的配置
      elDisabled() {
        return this.disabled !== "" ? this.disabled : this.parentData.disabled !== null ? this.parentData.disabled : false;
      },
      // 是否禁用label点击
      elLabelDisabled() {
        return this.labelDisabled !== "" ? this.labelDisabled : this.parentData.labelDisabled !== null ? this.parentData.labelDisabled : false;
      },
      // 组件尺寸，对应size的值，默认值为21px
      elSize() {
        return this.size ? this.size : this.parentData.size ? this.parentData.size : 21;
      },
      // 组件的勾选图标的尺寸，默认12px
      elIconSize() {
        return this.iconSize ? this.iconSize : this.parentData.iconSize ? this.parentData.iconSize : 12;
      },
      // 组件选中激活时的颜色
      elActiveColor() {
        return this.activeColor ? this.activeColor : this.parentData.activeColor ? this.parentData.activeColor : "#2979ff";
      },
      // 组件选未中激活时的颜色
      elInactiveColor() {
        return this.inactiveColor ? this.inactiveColor : this.parentData.inactiveColor ? this.parentData.inactiveColor : "#c8c9cc";
      },
      // label的颜色
      elLabelColor() {
        return this.labelColor ? this.labelColor : this.parentData.labelColor ? this.parentData.labelColor : "#606266";
      },
      // 组件的形状
      elShape() {
        return this.shape ? this.shape : this.parentData.shape ? this.parentData.shape : "circle";
      },
      // label大小
      elLabelSize() {
        return this.$uv.addUnit(this.labelSize ? this.labelSize : this.parentData.labelSize ? this.parentData.labelSize : "15");
      },
      elIconColor() {
        const iconColor = this.iconColor ? this.iconColor : this.parentData.iconColor ? this.parentData.iconColor : "#ffffff";
        if (this.elDisabled) {
          return this.checked ? this.elInactiveColor : "transparent";
        } else {
          return this.checked ? iconColor : "transparent";
        }
      },
      iconClasses() {
        let classes = [];
        classes.push("uv-radio__icon-wrap--" + this.elShape);
        if (this.elDisabled) {
          classes.push("uv-radio__icon-wrap--disabled");
        }
        if (this.checked && this.elDisabled) {
          classes.push("uv-radio__icon-wrap--disabled--checked");
        }
        return classes;
      },
      iconWrapStyle() {
        const style = {};
        style.backgroundColor = this.checked && !this.elDisabled ? this.elActiveColor : "#ffffff";
        style.borderColor = this.checked && !this.elDisabled ? this.elActiveColor : this.elInactiveColor;
        style.width = this.$uv.addUnit(this.elSize);
        style.height = this.$uv.addUnit(this.elSize);
        if (this.parentData.iconPlacement === "right") {
          style.marginRight = 0;
        }
        return style;
      },
      radioStyle() {
        const style = {};
        if (this.parentData.borderBottom && this.parentData.placement === "row") {
          this.$uv.error("检测到您将borderBottom设置为true，需要同时将uv-radio-group的placement设置为column才有效");
        }
        if (this.parentData.borderBottom && this.parentData.placement === "column") {
          style.paddingBottom = this.$uv.os() === "ios" ? "12px" : "8px";
        }
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      }
    },
    created() {
      this.init();
    },
    methods: {
      init() {
        this.updateParentData();
        if (!this.parent) {
          this.$uv.error("uv-radio必须搭配uv-radio-group组件使用");
        }
        this.$nextTick(() => {
          let parentValue = null;
          parentValue = this.parentData.modelValue;
          this.checked = this.name === parentValue;
        });
      },
      updateParentData() {
        this.getParentData("uv-radio-group");
      },
      // 点击图标
      iconClickHandler(e2) {
        this.preventEvent(e2);
        if (!this.elDisabled) {
          this.setRadioCheckedStatus();
        }
      },
      // 横向两端排列时，点击组件即可触发选中事件
      wrapperClickHandler(e2) {
        this.parentData.iconPlacement === "right" && this.iconClickHandler(e2);
      },
      // 点击label
      labelClickHandler(e2) {
        this.preventEvent(e2);
        if (!this.elLabelDisabled && !this.elDisabled) {
          this.setRadioCheckedStatus();
        }
      },
      emitEvent() {
        if (!this.checked) {
          this.$emit("change", this.name);
          this.$nextTick(() => {
            this.$uv.formValidate(this, "change");
          });
        }
      },
      // 改变组件选中状态
      // 这里的改变的依据是，更改本组件的checked值为true，同时通过父组件遍历所有uv-radio实例
      // 将本组件外的其他uv-radio的checked都设置为false(都被取消选中状态)，因而只剩下一个为选中状态
      setRadioCheckedStatus() {
        this.emitEvent();
        this.checked = true;
        typeof this.parent.unCheckedOther === "function" && this.parent.unCheckedOther(this);
      }
    }
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uv-radio", [`uv-radio-label--${$data.parentData.iconPlacement}`, $data.parentData.borderBottom && $data.parentData.placement === "column" && "uv-border-bottom"]]),
        onClick: _cache[2] || (_cache[2] = vue.withModifiers((...args) => $options.wrapperClickHandler && $options.wrapperClickHandler(...args), ["stop"])),
        style: vue.normalizeStyle([$options.radioStyle])
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uv-radio__icon-wrap", $options.iconClasses]),
            onClick: _cache[0] || (_cache[0] = vue.withModifiers((...args) => $options.iconClickHandler && $options.iconClickHandler(...args), ["stop"])),
            style: vue.normalizeStyle([$options.iconWrapStyle])
          },
          [
            vue.renderSlot(_ctx.$slots, "icon", {}, () => [
              vue.createVNode(_component_uv_icon, {
                class: "uv-radio__icon-wrap__icon",
                name: "checkbox-mark",
                size: $options.elIconSize,
                color: $options.elIconColor
              }, null, 8, ["size", "color"])
            ], true)
          ],
          6
          /* CLASS, STYLE */
        ),
        vue.createElementVNode("view", {
          class: "uv-radio__label-wrap",
          onClick: _cache[1] || (_cache[1] = vue.withModifiers((...args) => $options.labelClickHandler && $options.labelClickHandler(...args), ["stop"]))
        }, [
          vue.renderSlot(_ctx.$slots, "default", {}, () => [
            vue.createElementVNode(
              "text",
              {
                style: vue.normalizeStyle({
                  color: $options.elDisabled ? $options.elInactiveColor : $options.elLabelColor,
                  fontSize: $options.elLabelSize,
                  lineHeight: $options.elLabelSize
                })
              },
              vue.toDisplayString(_ctx.label),
              5
              /* TEXT, STYLE */
            )
          ], true)
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_3$1 = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__scopeId", "data-v-2da5b323"], ["__file", "E:/code/app/WH-app/uni_modules/uv-radio/components/uv-radio/uv-radio.vue"]]);
  const props$4 = {
    props: {
      // 绑定的值
      value: {
        type: [String, Number, Boolean],
        default: ""
      },
      modelValue: {
        type: [String, Number, Boolean],
        default: ""
      },
      // 是否禁用全部radio
      disabled: {
        type: Boolean,
        default: false
      },
      // 形状，circle-圆形，square-方形
      shape: {
        type: String,
        default: "circle"
      },
      // 选中状态下的颜色，如设置此值，将会覆盖parent的activeColor值
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 未选中的颜色
      inactiveColor: {
        type: String,
        default: "#c8c9cc"
      },
      // 标识符
      name: {
        type: String,
        default: ""
      },
      // 整个组件的尺寸，默认px
      size: {
        type: [String, Number],
        default: 18
      },
      // 布局方式，row-横向，column-纵向
      placement: {
        type: String,
        default: "row"
      },
      // label的文本
      label: {
        type: [String],
        default: ""
      },
      // label的颜色 （默认 '#303133' ）
      labelColor: {
        type: [String],
        default: "#303133"
      },
      // label的字体大小，px单位
      labelSize: {
        type: [String, Number],
        default: 14
      },
      // 是否禁止点击文本操作checkbox(默认 false )
      labelDisabled: {
        type: Boolean,
        default: false
      },
      // 图标颜色
      iconColor: {
        type: String,
        default: "#fff"
      },
      // 图标的大小，单位px
      iconSize: {
        type: [String, Number],
        default: 12
      },
      // 竖向配列时，是否显示下划线
      borderBottom: {
        type: Boolean,
        default: false
      },
      // 图标与文字的对齐方式
      iconPlacement: {
        type: String,
        default: "left"
      },
      ...(_N = (_M = uni.$uv) == null ? void 0 : _M.props) == null ? void 0 : _N.radioGroup
    }
  };
  const _sfc_main$a = {
    name: "uv-radio-group",
    mixins: [mpMixin, mixin, props$4],
    computed: {
      // 这里computed的变量，都是子组件uv-radio需要用到的，由于头条小程序的兼容性差异，子组件无法实时监听父组件参数的变化
      // 所以需要手动通知子组件，这里返回一个parentData变量，供watch监听，在其中去通知每一个子组件重新从父组件(uv-radio-group)
      // 拉取父组件新的变化后的参数
      parentData() {
        const value2 = this.value || this.modelValue;
        return [
          value2,
          this.disabled,
          this.inactiveColor,
          this.activeColor,
          this.size,
          this.labelDisabled,
          this.shape,
          this.iconSize,
          this.borderBottom,
          this.placement
        ];
      },
      bemClass() {
        return this.bem("radio-group", ["placement"]);
      }
    },
    watch: {
      // 当父组件需要子组件需要共享的参数发生了变化，手动通知子组件
      parentData() {
        if (this.children.length) {
          this.children.map((child) => {
            typeof child.init === "function" && child.init();
          });
        }
      }
    },
    data() {
      return {};
    },
    created() {
      this.children = [];
    },
    methods: {
      // 将其他的radio设置为未选中的状态
      unCheckedOther(childInstance) {
        this.children.map((child) => {
          if (childInstance !== child) {
            child.checked = false;
          }
        });
        const {
          name
        } = childInstance;
        this.$emit("update:modelValue", name);
        this.$emit("change", name);
      }
    }
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uv-radio-group", $options.bemClass]),
        style: vue.normalizeStyle([_ctx.$uv.addStyle(this.customStyle)])
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_4 = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__scopeId", "data-v-0d20093d"], ["__file", "E:/code/app/WH-app/uni_modules/uv-radio/components/uv-radio-group/uv-radio-group.vue"]]);
  const props$3 = {
    props: {
      // 是否细边框
      hairline: {
        type: Boolean,
        default: true
      },
      // 按钮的预置样式，info，primary，error，warning，success
      type: {
        type: String,
        default: "info"
      },
      // 按钮尺寸，large，normal，small，mini
      size: {
        type: String,
        default: "normal"
      },
      // 按钮形状，circle（两边为半圆），square（带圆角）
      shape: {
        type: String,
        default: "square"
      },
      // 按钮是否镂空
      plain: {
        type: Boolean,
        default: false
      },
      // 是否禁止状态
      disabled: {
        type: Boolean,
        default: false
      },
      // 是否加载中
      loading: {
        type: Boolean,
        default: false
      },
      // 加载中提示文字
      loadingText: {
        type: [String, Number],
        default: ""
      },
      // 加载状态图标类型
      loadingMode: {
        type: String,
        default: "spinner"
      },
      // 加载图标大小
      loadingSize: {
        type: [String, Number],
        default: 14
      },
      // 开放能力，具体请看uniapp稳定关于button组件部分说明
      // https://uniapp.dcloud.io/component/button
      openType: {
        type: String,
        default: ""
      },
      // 用于 <form> 组件，点击分别会触发 <form> 组件的 submit/reset 事件
      // 取值为submit（提交表单），reset（重置表单）
      formType: {
        type: String,
        default: ""
      },
      // 打开 APP 时，向 APP 传递的参数，open-type=launchApp时有效
      // 只微信小程序、QQ小程序有效
      appParameter: {
        type: String,
        default: ""
      },
      // 指定是否阻止本节点的祖先节点出现点击态，微信小程序有效
      hoverStopPropagation: {
        type: Boolean,
        default: true
      },
      // 指定返回用户信息的语言，zh_CN 简体中文，zh_TW 繁体中文，en 英文。只微信小程序有效
      lang: {
        type: String,
        default: "en"
      },
      // 会话来源，open-type="contact"时有效。只微信小程序有效
      sessionFrom: {
        type: String,
        default: ""
      },
      // 会话内消息卡片标题，open-type="contact"时有效
      // 默认当前标题，只微信小程序有效
      sendMessageTitle: {
        type: String,
        default: ""
      },
      // 会话内消息卡片点击跳转小程序路径，open-type="contact"时有效
      // 默认当前分享路径，只微信小程序有效
      sendMessagePath: {
        type: String,
        default: ""
      },
      // 会话内消息卡片图片，open-type="contact"时有效
      // 默认当前页面截图，只微信小程序有效
      sendMessageImg: {
        type: String,
        default: ""
      },
      // 是否显示会话内消息卡片，设置此参数为 true，用户进入客服会话会在右下角显示"可能要发送的小程序"提示，
      // 用户点击后可以快速发送小程序消息，open-type="contact"时有效
      showMessageCard: {
        type: Boolean,
        default: true
      },
      // 额外传参参数，用于小程序的data-xxx属性，通过target.dataset.name获取
      dataName: {
        type: String,
        default: ""
      },
      // 节流，一定时间内只能触发一次
      throttleTime: {
        type: [String, Number],
        default: 0
      },
      // 按住后多久出现点击态，单位毫秒
      hoverStartTime: {
        type: [String, Number],
        default: 0
      },
      // 手指松开后点击态保留时间，单位毫秒
      hoverStayTime: {
        type: [String, Number],
        default: 200
      },
      // 按钮文字，之所以通过props传入，是因为slot传入的话
      // nvue中无法控制文字的样式
      text: {
        type: [String, Number],
        default: ""
      },
      // 按钮图标
      icon: {
        type: String,
        default: ""
      },
      // 按钮图标大小
      iconSize: {
        type: [String, Number],
        default: ""
      },
      // 按钮图标颜色
      iconColor: {
        type: String,
        default: "#000000"
      },
      // 按钮颜色，支持传入linear-gradient渐变色
      color: {
        type: String,
        default: ""
      },
      // 自定义按钮文本样式
      customTextStyle: {
        type: [Object, String],
        default: ""
      },
      ...(_P = (_O = uni.$uv) == null ? void 0 : _O.props) == null ? void 0 : _P.button
    }
  };
  const _sfc_main$9 = {
    name: "uv-button",
    mixins: [mpMixin, mixin, props$3],
    emits: ["click"],
    data() {
      return {};
    },
    computed: {
      // 生成bem风格的类名
      bemClass() {
        if (!this.color) {
          return this.bem(
            "button",
            ["type", "shape", "size"],
            ["disabled", "plain", "hairline"]
          );
        } else {
          return this.bem(
            "button",
            ["shape", "size"],
            ["disabled", "plain", "hairline"]
          );
        }
      },
      loadingColor() {
        if (this.plain) {
          return this.color ? this.color : "#3c9cff";
        }
        if (this.type === "info") {
          return "#c9c9c9";
        }
        return "rgb(200, 200, 200)";
      },
      iconColorCom() {
        if (this.iconColor)
          return this.iconColor;
        if (this.plain) {
          return this.color ? this.color : this.type;
        } else {
          return this.type === "info" ? "#000000" : "#ffffff";
        }
      },
      baseColor() {
        let style = {};
        if (this.color) {
          style.color = this.plain ? this.color : "white";
          if (!this.plain) {
            style["background-color"] = this.color;
          }
          if (this.color.indexOf("gradient") !== -1) {
            style.borderTopWidth = 0;
            style.borderRightWidth = 0;
            style.borderBottomWidth = 0;
            style.borderLeftWidth = 0;
            if (!this.plain) {
              style.backgroundImage = this.color;
            }
          } else {
            style.borderColor = this.color;
            style.borderWidth = "1px";
            style.borderStyle = "solid";
          }
        }
        return style;
      },
      // nvue版本按钮的字体不会继承父组件的颜色，需要对每一个text组件进行单独的设置
      nvueTextStyle() {
        let style = {};
        if (this.type === "info") {
          style.color = "#323233";
        }
        if (this.color) {
          style.color = this.plain ? this.color : "white";
        }
        style.fontSize = this.textSize + "px";
        return style;
      },
      // 字体大小
      textSize() {
        let fontSize = 14, { size } = this;
        if (size === "large")
          fontSize = 16;
        if (size === "normal")
          fontSize = 14;
        if (size === "small")
          fontSize = 12;
        if (size === "mini")
          fontSize = 10;
        return fontSize;
      },
      // 设置图标大小
      getIconSize() {
        const size = this.iconSize ? this.iconSize : this.textSize * 1.35;
        return this.$uv.addUnit(size);
      },
      // 设置外层盒子的宽度，其他样式不需要
      btnWrapperStyle() {
        const style = {};
        const customStyle = this.$uv.addStyle(this.customStyle);
        if (customStyle.width)
          style.width = customStyle.width;
        return style;
      }
    },
    methods: {
      clickHandler() {
        if (!this.disabled && !this.loading) {
          throttle(() => {
            this.$emit("click");
          }, this.throttleTime);
        }
      }
    }
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_loading_icon = resolveEasycom(vue.resolveDynamicComponent("uv-loading-icon"), __easycom_0$1);
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "uv-button-wrapper",
        style: vue.normalizeStyle([$options.btnWrapperStyle])
      },
      [
        vue.createElementVNode("button", {
          "hover-start-time": Number(_ctx.hoverStartTime),
          "hover-stay-time": Number(_ctx.hoverStayTime),
          "form-type": _ctx.formType,
          "open-type": _ctx.openType,
          "app-parameter": _ctx.appParameter,
          "hover-stop-propagation": _ctx.hoverStopPropagation,
          "send-message-title": _ctx.sendMessageTitle,
          "send-message-path": _ctx.sendMessagePath,
          lang: _ctx.lang,
          "data-name": _ctx.dataName,
          "session-from": _ctx.sessionFrom,
          "send-message-img": _ctx.sendMessageImg,
          "show-message-card": _ctx.showMessageCard,
          "hover-class": !_ctx.disabled && !_ctx.loading ? "uv-button--active" : "",
          class: vue.normalizeClass(["uv-button uv-reset-button", $options.bemClass]),
          style: vue.normalizeStyle([$options.baseColor, _ctx.$uv.addStyle(_ctx.customStyle)]),
          onClick: _cache[0] || (_cache[0] = (...args) => $options.clickHandler && $options.clickHandler(...args))
        }, [
          _ctx.loading ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 0 },
            [
              vue.createVNode(_component_uv_loading_icon, {
                mode: _ctx.loadingMode,
                size: _ctx.loadingSize * 1.15,
                color: $options.loadingColor
              }, null, 8, ["mode", "size", "color"]),
              vue.createElementVNode(
                "text",
                {
                  class: "uv-button__loading-text",
                  style: vue.normalizeStyle([
                    { fontSize: $options.textSize + "px" },
                    _ctx.$uv.addStyle(_ctx.customTextStyle)
                  ])
                },
                vue.toDisplayString(_ctx.loadingText || _ctx.text),
                5
                /* TEXT, STYLE */
              )
            ],
            64
            /* STABLE_FRAGMENT */
          )) : (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            [
              _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_uv_icon, {
                key: 0,
                name: _ctx.icon,
                color: $options.iconColorCom,
                size: $options.getIconSize,
                customStyle: { marginRight: "2px" }
              }, null, 8, ["name", "color", "size"])) : vue.createCommentVNode("v-if", true),
              vue.renderSlot(_ctx.$slots, "default", {}, () => [
                vue.createElementVNode(
                  "text",
                  {
                    class: "uv-button__text",
                    style: vue.normalizeStyle([
                      { fontSize: $options.textSize + "px" },
                      _ctx.$uv.addStyle(_ctx.customTextStyle)
                    ])
                  },
                  vue.toDisplayString(_ctx.text),
                  5
                  /* TEXT, STYLE */
                )
              ], true),
              vue.renderSlot(_ctx.$slots, "suffix", {}, void 0, true)
            ],
            64
            /* STABLE_FRAGMENT */
          ))
        ], 14, ["hover-start-time", "hover-stay-time", "form-type", "open-type", "app-parameter", "hover-stop-propagation", "send-message-title", "send-message-path", "lang", "data-name", "session-from", "send-message-img", "show-message-card", "hover-class"])
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_10 = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__scopeId", "data-v-ae8e42c7"], ["__file", "E:/code/app/WH-app/uni_modules/uv-button/components/uv-button/uv-button.vue"]]);
  const props$2 = {
    props: {
      // 当前form的需要验证字段的集合
      model: {
        type: Object,
        default: () => ({})
      },
      // 验证规则
      rules: {
        type: [Object, Function, Array],
        default: () => ({})
      },
      // 有错误时的提示方式，message-提示信息，toast-进行toast提示
      // border-bottom-下边框呈现红色，none-无提示
      errorType: {
        type: String,
        default: "message"
      },
      // 是否显示表单域的下划线边框
      borderBottom: {
        type: Boolean,
        default: true
      },
      // label的位置，left-左边，top-上边
      labelPosition: {
        type: String,
        default: "left"
      },
      // label的宽度，单位px
      labelWidth: {
        type: [String, Number],
        default: 45
      },
      // lable字体的对齐方式
      labelAlign: {
        type: String,
        default: "left"
      },
      // lable的样式，对象形式
      labelStyle: {
        type: Object,
        default: () => ({})
      },
      ...(_R = (_Q = uni.$uv) == null ? void 0 : _Q.props) == null ? void 0 : _R.form
    }
  };
  var define_process_env_default = {};
  const formatRegExp = /%[sdj%]/g;
  let warning = function warning2() {
  };
  if (typeof process !== "undefined" && define_process_env_default && true && typeof window !== "undefined" && typeof document !== "undefined") {
    warning = function warning3(type2, errors) {
      if (typeof console !== "undefined" && console.warn) {
        if (errors.every((e2) => typeof e2 === "string")) {
          formatAppLog("warn", "at uni_modules/uv-form/components/uv-form/valid.js:28", type2, errors);
        }
      }
    };
  }
  function convertFieldsError(errors) {
    if (!errors || !errors.length)
      return null;
    const fields = {};
    errors.forEach((error2) => {
      const { field } = error2;
      fields[field] = fields[field] || [];
      fields[field].push(error2);
    });
    return fields;
  }
  function format() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    let i2 = 1;
    const f2 = args[0];
    const len = args.length;
    if (typeof f2 === "function") {
      return f2.apply(null, args.slice(1));
    }
    if (typeof f2 === "string") {
      let str = String(f2).replace(formatRegExp, (x) => {
        if (x === "%%") {
          return "%";
        }
        if (i2 >= len) {
          return x;
        }
        switch (x) {
          case "%s":
            return String(args[i2++]);
          case "%d":
            return Number(args[i2++]);
          case "%j":
            try {
              return JSON.stringify(args[i2++]);
            } catch (_2) {
              return "[Circular]";
            }
            break;
          default:
            return x;
        }
      });
      for (let arg = args[i2]; i2 < len; arg = args[++i2]) {
        str += ` ${arg}`;
      }
      return str;
    }
    return f2;
  }
  function isNativeStringType(type2) {
    return type2 === "string" || type2 === "url" || type2 === "hex" || type2 === "email" || type2 === "pattern";
  }
  function isEmptyValue(value2, type2) {
    if (value2 === void 0 || value2 === null) {
      return true;
    }
    if (type2 === "array" && Array.isArray(value2) && !value2.length) {
      return true;
    }
    if (isNativeStringType(type2) && typeof value2 === "string" && !value2) {
      return true;
    }
    return false;
  }
  function asyncParallelArray(arr, func2, callback) {
    const results = [];
    let total = 0;
    const arrLength = arr.length;
    function count(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === arrLength) {
        callback(results);
      }
    }
    arr.forEach((a2) => {
      func2(a2, count);
    });
  }
  function asyncSerialArray(arr, func2, callback) {
    let index2 = 0;
    const arrLength = arr.length;
    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }
      const original = index2;
      index2 += 1;
      if (original < arrLength) {
        func2(arr[original], next);
      } else {
        callback([]);
      }
    }
    next([]);
  }
  function flattenObjArr(objArr) {
    const ret = [];
    Object.keys(objArr).forEach((k) => {
      ret.push.apply(ret, objArr[k]);
    });
    return ret;
  }
  function asyncMap(objArr, option, func2, callback) {
    if (option.first) {
      const _pending = new Promise((resolve, reject) => {
        const next = function next2(errors) {
          callback(errors);
          return errors.length ? reject({
            errors,
            fields: convertFieldsError(errors)
          }) : resolve();
        };
        const flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func2, next);
      });
      _pending.catch((e2) => e2);
      return _pending;
    }
    let firstFields = option.firstFields || [];
    if (firstFields === true) {
      firstFields = Object.keys(objArr);
    }
    const objArrKeys = Object.keys(objArr);
    const objArrLength = objArrKeys.length;
    let total = 0;
    const results = [];
    const pending = new Promise((resolve, reject) => {
      const next = function next2(errors) {
        results.push.apply(results, errors);
        total++;
        if (total === objArrLength) {
          callback(results);
          return results.length ? reject({
            errors: results,
            fields: convertFieldsError(results)
          }) : resolve();
        }
      };
      if (!objArrKeys.length) {
        callback(results);
        resolve();
      }
      objArrKeys.forEach((key) => {
        const arr = objArr[key];
        if (firstFields.indexOf(key) !== -1) {
          asyncSerialArray(arr, func2, next);
        } else {
          asyncParallelArray(arr, func2, next);
        }
      });
    });
    pending.catch((e2) => e2);
    return pending;
  }
  function complementError(rule) {
    return function(oe2) {
      if (oe2 && oe2.message) {
        oe2.field = oe2.field || rule.fullField;
        return oe2;
      }
      return {
        message: typeof oe2 === "function" ? oe2() : oe2,
        field: oe2.field || rule.fullField
      };
    };
  }
  function deepMerge(target, source) {
    if (source) {
      for (const s2 in source) {
        if (source.hasOwnProperty(s2)) {
          const value2 = source[s2];
          if (typeof value2 === "object" && typeof target[s2] === "object") {
            target[s2] = { ...target[s2], ...value2 };
          } else {
            target[s2] = value2;
          }
        }
      }
    }
    return target;
  }
  function required(rule, value2, source, errors, options, type2) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value2, type2 || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  }
  function whitespace(rule, value2, source, errors, options) {
    if (/^\s+$/.test(value2) || value2 === "") {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  }
  const pattern = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    url: new RegExp(
      "^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$",
      "i"
    ),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer(value2) {
      return /^(-)?\d+$/.test(value2);
    },
    float: function float(value2) {
      return /^(-)?\d+(\.\d+)?$/.test(value2);
    },
    array: function array3(value2) {
      return Array.isArray(value2);
    },
    regexp: function regexp(value2) {
      if (value2 instanceof RegExp) {
        return true;
      }
      try {
        return !!new RegExp(value2);
      } catch (e2) {
        return false;
      }
    },
    date: function date3(value2) {
      return typeof value2.getTime === "function" && typeof value2.getMonth === "function" && typeof value2.getYear === "function";
    },
    number: function number3(value2) {
      if (isNaN(value2)) {
        return false;
      }
      return typeof +value2 === "number";
    },
    object: function object3(value2) {
      return typeof value2 === "object" && !types.array(value2);
    },
    method: function method(value2) {
      return typeof value2 === "function";
    },
    email: function email2(value2) {
      return typeof value2 === "string" && !!value2.match(pattern.email) && value2.length < 255;
    },
    url: function url2(value2) {
      return typeof value2 === "string" && !!value2.match(pattern.url);
    },
    hex: function hex(value2) {
      return typeof value2 === "string" && !!value2.match(pattern.hex);
    }
  };
  function type(rule, value2, source, errors, options) {
    if (rule.required && value2 === void 0) {
      required(rule, value2, source, errors, options);
      return;
    }
    const custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    const ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value2)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } else if (ruleType && typeof value2 !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  }
  function range(rule, value2, source, errors, options) {
    const len = typeof rule.len === "number";
    const min = typeof rule.min === "number";
    const max = typeof rule.max === "number";
    const spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    let val = value2;
    let key = null;
    const num = typeof value2 === "number";
    const str = typeof value2 === "string";
    const arr = Array.isArray(value2);
    if (num) {
      key = "number";
    } else if (str) {
      key = "string";
    } else if (arr) {
      key = "array";
    }
    if (!key) {
      return false;
    }
    if (arr) {
      val = value2.length;
    }
    if (str) {
      val = value2.replace(spRegexp, "_").length;
    }
    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors.push(format(options.messages[key].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors.push(format(options.messages[key].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  }
  const ENUM = "enum";
  function enumerable(rule, value2, source, errors, options) {
    rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
    if (rule[ENUM].indexOf(value2) === -1) {
      errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(", ")));
    }
  }
  function pattern$1(rule, value2, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex = 0;
        if (!rule.pattern.test(value2)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value2, rule.pattern));
        }
      } else if (typeof rule.pattern === "string") {
        const _pattern = new RegExp(rule.pattern);
        if (!_pattern.test(value2)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value2, rule.pattern));
        }
      }
    }
  }
  const rules = {
    required,
    whitespace,
    type,
    range,
    enum: enumerable,
    pattern: pattern$1
  };
  function string(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options, "string");
      if (!isEmptyValue(value2, "string")) {
        rules.type(rule, value2, source, errors, options);
        rules.range(rule, value2, source, errors, options);
        rules.pattern(rule, value2, source, errors, options);
        if (rule.whitespace === true) {
          rules.whitespace(rule, value2, source, errors, options);
        }
      }
    }
    callback(errors);
  }
  function method2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (value2 !== void 0) {
        rules.type(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function number2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (value2 === "") {
        value2 = void 0;
      }
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (value2 !== void 0) {
        rules.type(rule, value2, source, errors, options);
        rules.range(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function _boolean(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (value2 !== void 0) {
        rules.type(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function regexp2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (!isEmptyValue(value2)) {
        rules.type(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function integer2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (value2 !== void 0) {
        rules.type(rule, value2, source, errors, options);
        rules.range(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function floatFn(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (value2 !== void 0) {
        rules.type(rule, value2, source, errors, options);
        rules.range(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function array2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2, "array") && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options, "array");
      if (!isEmptyValue(value2, "array")) {
        rules.type(rule, value2, source, errors, options);
        rules.range(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function object2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (value2 !== void 0) {
        rules.type(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  const ENUM$1 = "enum";
  function enumerable$1(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (value2 !== void 0) {
        rules[ENUM$1](rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function pattern$2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (!isEmptyValue(value2, "string")) {
        rules.pattern(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function date2(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
      if (!isEmptyValue(value2)) {
        let dateObject;
        if (typeof value2 === "number") {
          dateObject = new Date(value2);
        } else {
          dateObject = value2;
        }
        rules.type(rule, dateObject, source, errors, options);
        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }
    callback(errors);
  }
  function required$1(rule, value2, callback, source, options) {
    const errors = [];
    const type2 = Array.isArray(value2) ? "array" : typeof value2;
    rules.required(rule, value2, source, errors, options, type2);
    callback(errors);
  }
  function type$1(rule, value2, callback, source, options) {
    const ruleType = rule.type;
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2, ruleType) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options, ruleType);
      if (!isEmptyValue(value2, ruleType)) {
        rules.type(rule, value2, source, errors, options);
      }
    }
    callback(errors);
  }
  function any(rule, value2, callback, source, options) {
    const errors = [];
    const validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate2) {
      if (isEmptyValue(value2) && !rule.required) {
        return callback();
      }
      rules.required(rule, value2, source, errors, options);
    }
    callback(errors);
  }
  const validators = {
    string,
    method: method2,
    number: number2,
    boolean: _boolean,
    regexp: regexp2,
    integer: integer2,
    float: floatFn,
    array: array2,
    object: object2,
    enum: enumerable$1,
    pattern: pattern$2,
    date: date2,
    url: type$1,
    hex: type$1,
    email: type$1,
    required: required$1,
    any
  };
  function newMessages() {
    return {
      default: "Validation error on field %s",
      required: "%s is required",
      enum: "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        format: "%s date %s is invalid for format %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (function)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        boolean: "%s is not a %s",
        integer: "%s is not an %s",
        float: "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s in length",
        min: "%s cannot be less than %s in length",
        max: "%s cannot be greater than %s in length",
        range: "%s must be between %s and %s in length"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: function clone() {
        const cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  const messages = newMessages();
  function Schema(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }
  Schema.prototype = {
    messages: function messages2(_messages) {
      if (_messages) {
        this._messages = deepMerge(newMessages(), _messages);
      }
      return this._messages;
    },
    define: function define(rules2) {
      if (!rules2) {
        throw new Error("Cannot configure a schema with no rules");
      }
      if (typeof rules2 !== "object" || Array.isArray(rules2)) {
        throw new Error("Rules must be an object");
      }
      this.rules = {};
      let z2;
      let item;
      for (z2 in rules2) {
        if (rules2.hasOwnProperty(z2)) {
          item = rules2[z2];
          this.rules[z2] = Array.isArray(item) ? item : [item];
        }
      }
    },
    validate: function validate(source_, o2, oc) {
      const _this = this;
      if (o2 === void 0) {
        o2 = {};
      }
      if (oc === void 0) {
        oc = function oc2() {
        };
      }
      let source = source_;
      let options = o2;
      let callback = oc;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback();
        }
        return Promise.resolve();
      }
      function complete(results) {
        let i2;
        let errors = [];
        let fields = {};
        function add(e2) {
          if (Array.isArray(e2)) {
            let _errors;
            errors = (_errors = errors).concat.apply(_errors, e2);
          } else {
            errors.push(e2);
          }
        }
        for (i2 = 0; i2 < results.length; i2++) {
          add(results[i2]);
        }
        if (!errors.length) {
          errors = null;
          fields = null;
        } else {
          fields = convertFieldsError(errors);
        }
        callback(errors, fields);
      }
      if (options.messages) {
        let messages$1 = this.messages();
        if (messages$1 === messages) {
          messages$1 = newMessages();
        }
        deepMerge(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }
      let arr;
      let value2;
      const series = {};
      const keys2 = options.keys || Object.keys(this.rules);
      keys2.forEach((z2) => {
        arr = _this.rules[z2];
        value2 = source[z2];
        arr.forEach((r2) => {
          let rule = r2;
          if (typeof rule.transform === "function") {
            if (source === source_) {
              source = { ...source };
            }
            value2 = source[z2] = rule.transform(value2);
          }
          if (typeof rule === "function") {
            rule = {
              validator: rule
            };
          } else {
            rule = { ...rule };
          }
          rule.validator = _this.getValidationMethod(rule);
          rule.field = z2;
          rule.fullField = rule.fullField || z2;
          rule.type = _this.getType(rule);
          if (!rule.validator) {
            return;
          }
          series[z2] = series[z2] || [];
          series[z2].push({
            rule,
            value: value2,
            source,
            field: z2
          });
        });
      });
      const errorFields = {};
      return asyncMap(series, options, (data, doIt) => {
        const { rule } = data;
        let deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;
        function addFullfield(key, schema) {
          return { ...schema, fullField: `${rule.fullField}.${key}` };
        }
        function cb(e2) {
          if (e2 === void 0) {
            e2 = [];
          }
          let errors = e2;
          if (!Array.isArray(errors)) {
            errors = [errors];
          }
          if (!options.suppressWarning && errors.length) {
            Schema.warning("async-validator:", errors);
          }
          if (errors.length && rule.message) {
            errors = [].concat(rule.message);
          }
          errors = errors.map(complementError(rule));
          if (options.first && errors.length) {
            errorFields[rule.field] = 1;
            return doIt(errors);
          }
          if (!deep) {
            doIt(errors);
          } else {
            if (rule.required && !data.value) {
              if (rule.message) {
                errors = [].concat(rule.message).map(complementError(rule));
              } else if (options.error) {
                errors = [options.error(rule, format(options.messages.required, rule.field))];
              } else {
                errors = [];
              }
              return doIt(errors);
            }
            let fieldsSchema = {};
            if (rule.defaultField) {
              for (const k in data.value) {
                if (data.value.hasOwnProperty(k)) {
                  fieldsSchema[k] = rule.defaultField;
                }
              }
            }
            fieldsSchema = { ...fieldsSchema, ...data.rule.fields };
            for (const f2 in fieldsSchema) {
              if (fieldsSchema.hasOwnProperty(f2)) {
                const fieldSchema = Array.isArray(fieldsSchema[f2]) ? fieldsSchema[f2] : [fieldsSchema[f2]];
                fieldsSchema[f2] = fieldSchema.map(addFullfield.bind(null, f2));
              }
            }
            const schema = new Schema(fieldsSchema);
            schema.messages(options.messages);
            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }
            schema.validate(data.value, data.rule.options || options, (errs) => {
              const finalErrors = [];
              if (errors && errors.length) {
                finalErrors.push.apply(finalErrors, errors);
              }
              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }
        let res;
        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          res = rule.validator(rule, data.value, cb, data.source, options);
          if (res === true) {
            cb();
          } else if (res === false) {
            cb(rule.message || `${rule.field} fails`);
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }
        if (res && res.then) {
          res.then(() => cb(), (e2) => cb(e2));
        }
      }, (results) => {
        complete(results);
      });
    },
    getType: function getType(rule) {
      if (rule.type === void 0 && rule.pattern instanceof RegExp) {
        rule.type = "pattern";
      }
      if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format("Unknown rule type %s", rule.type));
      }
      return rule.type || "string";
    },
    getValidationMethod: function getValidationMethod(rule) {
      if (typeof rule.validator === "function") {
        return rule.validator;
      }
      const keys2 = Object.keys(rule);
      const messageIndex = keys2.indexOf("message");
      if (messageIndex !== -1) {
        keys2.splice(messageIndex, 1);
      }
      if (keys2.length === 1 && keys2[0] === "required") {
        return validators.required;
      }
      return validators[this.getType(rule)] || false;
    }
  };
  Schema.register = function register(type2, validator) {
    if (typeof validator !== "function") {
      throw new Error("Cannot register a validator by type, validator is not a function");
    }
    validators[type2] = validator;
  };
  Schema.warning = warning;
  Schema.messages = messages;
  Schema.warning = function() {
  };
  const _sfc_main$8 = {
    name: "uv-form",
    mixins: [mpMixin, mixin, props$2],
    provide() {
      return {
        uForm: this
      };
    },
    data() {
      return {
        formRules: {},
        // 规则校验器
        validator: {},
        // 原始的model快照，用于resetFields方法重置表单时使用
        originalModel: null
      };
    },
    watch: {
      // 监听规则的变化
      rules: {
        immediate: true,
        handler(n2) {
          this.setRules(n2);
        }
      },
      // 监听属性的变化，通知子组件uv-form-item重新获取信息
      propsChange(n2) {
        var _a;
        if ((_a = this.children) == null ? void 0 : _a.length) {
          this.children.map((child) => {
            typeof child.updateParentData == "function" && child.updateParentData();
          });
        }
      },
      // 监听model的初始值作为重置表单的快照
      model: {
        immediate: true,
        handler(n2) {
          if (!this.originalModel) {
            this.originalModel = this.$uv.deepClone(n2);
          }
        }
      }
    },
    computed: {
      propsChange() {
        return [
          this.errorType,
          this.borderBottom,
          this.labelPosition,
          this.labelWidth,
          this.labelAlign,
          this.labelStyle
        ];
      }
    },
    created() {
      this.children = [];
    },
    methods: {
      // 手动设置校验的规则，如果规则中有函数的话，微信小程序中会过滤掉，所以只能手动调用设置规则
      setRules(rules2) {
        if (Object.keys(rules2).length === 0)
          return;
        if (Object.keys(this.model).length === 0) {
          this.$uv.error("设置rules，model必须设置！如果已经设置，请刷新页面。");
          return;
        }
        this.formRules = rules2;
        this.validator = new Schema(rules2);
      },
      // 清空所有uv-form-item组件的内容，本质上是调用了uv-form-item组件中的resetField()方法
      resetFields() {
        this.resetModel();
      },
      // 重置model为初始值的快照
      resetModel(obj) {
        this.children.map((child) => {
          const prop = child == null ? void 0 : child.prop;
          const value2 = this.$uv.getProperty(this.originalModel, prop);
          this.$uv.setProperty(this.model, prop, value2);
        });
      },
      // 清空校验结果
      clearValidate(props2) {
        props2 = [].concat(props2);
        this.children.map((child) => {
          if (props2[0] === void 0 || props2.includes(child.prop)) {
            child.message = null;
          }
        });
      },
      // 对部分表单字段进行校验
      async validateField(value2, callback, event = null) {
        this.$nextTick(() => {
          const errorsRes = [];
          value2 = [].concat(value2);
          this.children.map((child) => {
            const childErrors = [];
            if (value2.includes(child.prop)) {
              const propertyVal = this.$uv.getProperty(
                this.model,
                child.prop
              );
              const propertyChain = child.prop.split(".");
              const propertyName = propertyChain[propertyChain.length - 1];
              const rule = this.formRules[child.prop];
              if (!rule)
                return;
              const rules2 = [].concat(rule);
              for (let i2 = 0; i2 < rules2.length; i2++) {
                const ruleItem = rules2[i2];
                const trigger = [].concat(ruleItem == null ? void 0 : ruleItem.trigger);
                if (event && !trigger.includes(event))
                  continue;
                const validator = new Schema({
                  [propertyName]: ruleItem
                });
                validator.validate(
                  {
                    [propertyName]: propertyVal
                  },
                  (errors, fields) => {
                    if (this.$uv.test.array(errors)) {
                      errorsRes.push(...errors);
                      childErrors.push(...errors);
                    }
                    this.$nextTick(() => {
                      var _a, _b;
                      child.message = ((_a = childErrors[0]) == null ? void 0 : _a.message) ? (_b = childErrors[0]) == null ? void 0 : _b.message : null;
                    });
                  }
                );
              }
            }
          });
          typeof callback === "function" && callback(errorsRes);
        });
      },
      // 校验全部数据
      validate(callback) {
        return new Promise((resolve, reject) => {
          this.$nextTick(() => {
            const formItemProps = this.children.map(
              (item) => item.prop
            );
            this.validateField(formItemProps, (errors) => {
              if (errors.length) {
                this.errorType === "toast" && this.$uv.toast(errors[0].message);
                reject(errors);
              } else {
                resolve(true);
              }
            });
          });
        });
      }
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "uv-form" }, [
      vue.renderSlot(_ctx.$slots, "default")
    ]);
  }
  const __easycom_9 = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__file", "E:/code/app/WH-app/uni_modules/uv-form/components/uv-form/uv-form.vue"]]);
  var calendar = {
    /**
        * 农历1900-2100的润大小信息表
        * @Array Of Property
        * @return Hex
        */
    lunarInfo: [
      19416,
      19168,
      42352,
      21717,
      53856,
      55632,
      91476,
      22176,
      39632,
      21970,
      // 1900-1909
      19168,
      42422,
      42192,
      53840,
      119381,
      46400,
      54944,
      44450,
      38320,
      84343,
      // 1910-1919
      18800,
      42160,
      46261,
      27216,
      27968,
      109396,
      11104,
      38256,
      21234,
      18800,
      // 1920-1929
      25958,
      54432,
      59984,
      28309,
      23248,
      11104,
      100067,
      37600,
      116951,
      51536,
      // 1930-1939
      54432,
      120998,
      46416,
      22176,
      107956,
      9680,
      37584,
      53938,
      43344,
      46423,
      // 1940-1949
      27808,
      46416,
      86869,
      19872,
      42416,
      83315,
      21168,
      43432,
      59728,
      27296,
      // 1950-1959
      44710,
      43856,
      19296,
      43748,
      42352,
      21088,
      62051,
      55632,
      23383,
      22176,
      // 1960-1969
      38608,
      19925,
      19152,
      42192,
      54484,
      53840,
      54616,
      46400,
      46752,
      103846,
      // 1970-1979
      38320,
      18864,
      43380,
      42160,
      45690,
      27216,
      27968,
      44870,
      43872,
      38256,
      // 1980-1989
      19189,
      18800,
      25776,
      29859,
      59984,
      27480,
      23232,
      43872,
      38613,
      37600,
      // 1990-1999
      51552,
      55636,
      54432,
      55888,
      30034,
      22176,
      43959,
      9680,
      37584,
      51893,
      // 2000-2009
      43344,
      46240,
      47780,
      44368,
      21977,
      19360,
      42416,
      86390,
      21168,
      43312,
      // 2010-2019
      31060,
      27296,
      44368,
      23378,
      19296,
      42726,
      42208,
      53856,
      60005,
      54576,
      // 2020-2029
      23200,
      30371,
      38608,
      19195,
      19152,
      42192,
      118966,
      53840,
      54560,
      56645,
      // 2030-2039
      46496,
      22224,
      21938,
      18864,
      42359,
      42160,
      43600,
      111189,
      27936,
      44448,
      // 2040-2049
      /** Add By JJonline@JJonline.Cn**/
      84835,
      37744,
      18936,
      18800,
      25776,
      92326,
      59984,
      27424,
      108228,
      43744,
      // 2050-2059
      41696,
      53987,
      51552,
      54615,
      54432,
      55888,
      23893,
      22176,
      42704,
      21972,
      // 2060-2069
      21200,
      43448,
      43344,
      46240,
      46758,
      44368,
      21920,
      43940,
      42416,
      21168,
      // 2070-2079
      45683,
      26928,
      29495,
      27296,
      44368,
      84821,
      19296,
      42352,
      21732,
      53600,
      // 2080-2089
      59752,
      54560,
      55968,
      92838,
      22224,
      19168,
      43476,
      41680,
      53584,
      62034,
      // 2090-2099
      54560
    ],
    // 2100
    /**
        * 公历每个月份的天数普通表
        * @Array Of Property
        * @return Number
        */
    solarMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    /**
        * 天干地支之天干速查表
        * @Array Of Property trans["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"]
        * @return Cn string
        */
    Gan: ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"],
    /**
        * 天干地支之地支速查表
        * @Array Of Property
        * @trans["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"]
        * @return Cn string
        */
    Zhi: ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"],
    /**
        * 天干地支之地支速查表<=>生肖
        * @Array Of Property
        * @trans["鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"]
        * @return Cn string
        */
    Animals: ["鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"],
    /**
        * 24节气速查表
        * @Array Of Property
        * @trans["小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪","冬至"]
        * @return Cn string
        */
    solarTerm: ["小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至"],
    /**
        * 1900-2100各年的24节气日期速查表
        * @Array Of Property
        * @return 0x string For splice
        */
    sTermInfo: [
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd0b06bdb0722c965ce1cfcc920f",
      "b027097bd097c36b0b6fc9274c91aa",
      "9778397bd19801ec9210c965cc920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd09801d98082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd197c36c9210c9274c91aa",
      "97b6b97bd19801ec95f8c965cc920e",
      "97bd09801d98082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec95f8c965cc920e",
      "97bcf97c3598082c95f8e1cfcc920f",
      "97bd097bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c3598082c95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf97c359801ec95f8c965cc920f",
      "97bd097bd07f595b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "9778397bd19801ec9210c9274c920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd07f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c920e",
      "97b6b97bd19801ec95f8c965cc920f",
      "97bd07f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bd07f1487f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c965cc920e",
      "97bcf7f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b97bd19801ec9210c9274c920e",
      "97bcf7f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c91aa",
      "97b6b97bd197c36c9210c9274c920e",
      "97bcf7f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36c9210c9274c920e",
      "97b6b7f0e47f531b0723b0b6fb0722",
      "7f0e37f5307f595b0b0bc920fb0722",
      "7f0e397bd097c36b0b6fc9210c8dc2",
      "9778397bd097c36b0b70c9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9274c91aa",
      "97b6b7f0e47f531b0723b0787b0721",
      "7f0e27f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c91aa",
      "97b6b7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "9778397bd097c36b0b6fc9210c8dc2",
      "977837f0e37f149b0723b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f5307f595b0b0bc920fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "977837f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc9210c8dc2",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd097c35b0b6fc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0787b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0b0bb0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14998082b0723b06bd",
      "7f07e7f0e37f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e397bd07f595b0b0bc920fb0722",
      "977837f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f1487f595b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e37f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e37f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f1487f531b0b0bb0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0723b06bd",
      "7f07e7f0e47f149b0723b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14998082b0723b06bd",
      "7f07e7f0e37f14998083b0787b0721",
      "7f0e27f0e47f531b0723b0b6fb0722",
      "7f0e37f0e366aa89801eb072297c35",
      "7ec967f0e37f14898082b0723b02d5",
      "7f07e7f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e36665b66aa89801e9808297c35",
      "665f67f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b0721",
      "7f07e7f0e47f531b0723b0b6fb0722",
      "7f0e36665b66a449801e9808297c35",
      "665f67f0e37f14898082b0723b02d5",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e36665b66a449801e9808297c35",
      "665f67f0e37f14898082b072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e26665b66a449801e9808297c35",
      "665f67f0e37f1489801eb072297c35",
      "7ec967f0e37f14998082b0787b06bd",
      "7f07e7f0e47f531b0723b0b6fb0721",
      "7f0e27f1487f531b0b0bb0b6fb0722"
    ],
    /**
        * 数字转中文速查表
        * @Array Of Property
        * @trans ['日','一','二','三','四','五','六','七','八','九','十']
        * @return Cn string
        */
    nStr1: ["日", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十"],
    /**
        * 日期转农历称呼速查表
        * @Array Of Property
        * @trans ['初','十','廿','卅']
        * @return Cn string
        */
    nStr2: ["初", "十", "廿", "卅"],
    /**
        * 月份转农历称呼速查表
        * @Array Of Property
        * @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']
        * @return Cn string
        */
    nStr3: ["正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "冬", "腊"],
    /**
        * 返回农历y年一整年的总天数
        * @param lunar Year
        * @return Number
        * @eg:var count = calendar.lYearDays(1987) ;//count=387
        */
    lYearDays: function(y2) {
      var i2;
      var sum = 348;
      for (i2 = 32768; i2 > 8; i2 >>= 1) {
        sum += this.lunarInfo[y2 - 1900] & i2 ? 1 : 0;
      }
      return sum + this.leapDays(y2);
    },
    /**
        * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0
        * @param lunar Year
        * @return Number (0-12)
        * @eg:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6
        */
    leapMonth: function(y2) {
      return this.lunarInfo[y2 - 1900] & 15;
    },
    /**
        * 返回农历y年闰月的天数 若该年没有闰月则返回0
        * @param lunar Year
        * @return Number (0、29、30)
        * @eg:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29
        */
    leapDays: function(y2) {
      if (this.leapMonth(y2)) {
        return this.lunarInfo[y2 - 1900] & 65536 ? 30 : 29;
      }
      return 0;
    },
    /**
        * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法
        * @param lunar Year
        * @return Number (-1、29、30)
        * @eg:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29
        */
    monthDays: function(y2, m2) {
      if (m2 > 12 || m2 < 1) {
        return -1;
      }
      return this.lunarInfo[y2 - 1900] & 65536 >> m2 ? 30 : 29;
    },
    /**
        * 返回公历(!)y年m月的天数
        * @param solar Year
        * @return Number (-1、28、29、30、31)
        * @eg:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30
        */
    solarDays: function(y2, m2) {
      if (m2 > 12 || m2 < 1) {
        return -1;
      }
      var ms2 = m2 - 1;
      if (ms2 == 1) {
        return y2 % 4 == 0 && y2 % 100 != 0 || y2 % 400 == 0 ? 29 : 28;
      } else {
        return this.solarMonth[ms2];
      }
    },
    /**
       * 农历年份转换为干支纪年
       * @param  lYear 农历年的年份数
       * @return Cn string
       */
    toGanZhiYear: function(lYear) {
      var ganKey = (lYear - 3) % 10;
      var zhiKey = (lYear - 3) % 12;
      if (ganKey == 0)
        ganKey = 10;
      if (zhiKey == 0)
        zhiKey = 12;
      return this.Gan[ganKey - 1] + this.Zhi[zhiKey - 1];
    },
    /**
       * 公历月、日判断所属星座
       * @param  cMonth [description]
       * @param  cDay [description]
       * @return Cn string
       */
    toAstro: function(cMonth, cDay) {
      var s2 = "魔羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯";
      var arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22];
      return s2.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + "座";
    },
    /**
        * 传入offset偏移量返回干支
        * @param offset 相对甲子的偏移量
        * @return Cn string
        */
    toGanZhi: function(offset) {
      return this.Gan[offset % 10] + this.Zhi[offset % 12];
    },
    /**
        * 传入公历(!)y年获得该年第n个节气的公历日期
        * @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起
        * @return day Number
        * @eg:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春
        */
    getTerm: function(y2, n2) {
      if (y2 < 1900 || y2 > 2100) {
        return -1;
      }
      if (n2 < 1 || n2 > 24) {
        return -1;
      }
      var _table = this.sTermInfo[y2 - 1900];
      var _info = [
        parseInt("0x" + _table.substr(0, 5)).toString(),
        parseInt("0x" + _table.substr(5, 5)).toString(),
        parseInt("0x" + _table.substr(10, 5)).toString(),
        parseInt("0x" + _table.substr(15, 5)).toString(),
        parseInt("0x" + _table.substr(20, 5)).toString(),
        parseInt("0x" + _table.substr(25, 5)).toString()
      ];
      var _calday = [
        _info[0].substr(0, 1),
        _info[0].substr(1, 2),
        _info[0].substr(3, 1),
        _info[0].substr(4, 2),
        _info[1].substr(0, 1),
        _info[1].substr(1, 2),
        _info[1].substr(3, 1),
        _info[1].substr(4, 2),
        _info[2].substr(0, 1),
        _info[2].substr(1, 2),
        _info[2].substr(3, 1),
        _info[2].substr(4, 2),
        _info[3].substr(0, 1),
        _info[3].substr(1, 2),
        _info[3].substr(3, 1),
        _info[3].substr(4, 2),
        _info[4].substr(0, 1),
        _info[4].substr(1, 2),
        _info[4].substr(3, 1),
        _info[4].substr(4, 2),
        _info[5].substr(0, 1),
        _info[5].substr(1, 2),
        _info[5].substr(3, 1),
        _info[5].substr(4, 2)
      ];
      return parseInt(_calday[n2 - 1]);
    },
    /**
        * 传入农历数字月份返回汉语通俗表示法
        * @param lunar month
        * @return Cn string
        * @eg:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'
        */
    toChinaMonth: function(m2) {
      if (m2 > 12 || m2 < 1) {
        return -1;
      }
      var s2 = this.nStr3[m2 - 1];
      s2 += "月";
      return s2;
    },
    /**
        * 传入农历日期数字返回汉字表示法
        * @param lunar day
        * @return Cn string
        * @eg:var cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'
        */
    toChinaDay: function(d2) {
      var s2;
      switch (d2) {
        case 10:
          s2 = "初十";
          break;
        case 20:
          s2 = "二十";
          break;
        case 30:
          s2 = "三十";
          break;
        default:
          s2 = this.nStr2[Math.floor(d2 / 10)];
          s2 += this.nStr1[d2 % 10];
      }
      return s2;
    },
    /**
        * 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”
        * @param y year
        * @return Cn string
        * @eg:var animal = calendar.getAnimal(1987) ;//animal='兔'
        */
    getAnimal: function(y2) {
      return this.Animals[(y2 - 4) % 12];
    },
    /**
        * 传入阳历年月日获得详细的公历、农历object信息 <=>JSON
        * @param y  solar year
        * @param m  solar month
        * @param d  solar day
        * @return JSON object
        * @eg:__f__('log','at uni_modules/uni-calendar/components/uni-calendar/calendar.js:379',calendar.solar2lunar(1987,11,01));
        */
    solar2lunar: function(y2, m2, d2) {
      if (y2 < 1900 || y2 > 2100) {
        return -1;
      }
      if (y2 == 1900 && m2 == 1 && d2 < 31) {
        return -1;
      }
      if (!y2) {
        var objDate = /* @__PURE__ */ new Date();
      } else {
        var objDate = new Date(y2, parseInt(m2) - 1, d2);
      }
      var i2;
      var leap = 0;
      var temp = 0;
      var y2 = objDate.getFullYear();
      var m2 = objDate.getMonth() + 1;
      var d2 = objDate.getDate();
      var offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(1900, 0, 31)) / 864e5;
      for (i2 = 1900; i2 < 2101 && offset > 0; i2++) {
        temp = this.lYearDays(i2);
        offset -= temp;
      }
      if (offset < 0) {
        offset += temp;
        i2--;
      }
      var isTodayObj = /* @__PURE__ */ new Date();
      var isToday = false;
      if (isTodayObj.getFullYear() == y2 && isTodayObj.getMonth() + 1 == m2 && isTodayObj.getDate() == d2) {
        isToday = true;
      }
      var nWeek = objDate.getDay();
      var cWeek = this.nStr1[nWeek];
      if (nWeek == 0) {
        nWeek = 7;
      }
      var year = i2;
      var leap = this.leapMonth(i2);
      var isLeap = false;
      for (i2 = 1; i2 < 13 && offset > 0; i2++) {
        if (leap > 0 && i2 == leap + 1 && isLeap == false) {
          --i2;
          isLeap = true;
          temp = this.leapDays(year);
        } else {
          temp = this.monthDays(year, i2);
        }
        if (isLeap == true && i2 == leap + 1) {
          isLeap = false;
        }
        offset -= temp;
      }
      if (offset == 0 && leap > 0 && i2 == leap + 1) {
        if (isLeap) {
          isLeap = false;
        } else {
          isLeap = true;
          --i2;
        }
      }
      if (offset < 0) {
        offset += temp;
        --i2;
      }
      var month = i2;
      var day = offset + 1;
      var sm = m2 - 1;
      var gzY = this.toGanZhiYear(year);
      var firstNode = this.getTerm(y2, m2 * 2 - 1);
      var secondNode = this.getTerm(y2, m2 * 2);
      var gzM = this.toGanZhi((y2 - 1900) * 12 + m2 + 11);
      if (d2 >= firstNode) {
        gzM = this.toGanZhi((y2 - 1900) * 12 + m2 + 12);
      }
      var isTerm = false;
      var Term = null;
      if (firstNode == d2) {
        isTerm = true;
        Term = this.solarTerm[m2 * 2 - 2];
      }
      if (secondNode == d2) {
        isTerm = true;
        Term = this.solarTerm[m2 * 2 - 1];
      }
      var dayCyclical = Date.UTC(y2, sm, 1, 0, 0, 0, 0) / 864e5 + 25567 + 10;
      var gzD = this.toGanZhi(dayCyclical + d2 - 1);
      var astro = this.toAstro(m2, d2);
      return { "lYear": year, "lMonth": month, "lDay": day, "Animal": this.getAnimal(year), "IMonthCn": (isLeap ? "闰" : "") + this.toChinaMonth(month), "IDayCn": this.toChinaDay(day), "cYear": y2, "cMonth": m2, "cDay": d2, "gzYear": gzY, "gzMonth": gzM, "gzDay": gzD, "isToday": isToday, "isLeap": isLeap, "nWeek": nWeek, "ncWeek": "星期" + cWeek, "isTerm": isTerm, "Term": Term, "astro": astro };
    },
    /**
        * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON
        * @param y  lunar year
        * @param m  lunar month
        * @param d  lunar day
        * @param isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]
        * @return JSON object
        * @eg:__f__('log','at uni_modules/uni-calendar/components/uni-calendar/calendar.js:498',calendar.lunar2solar(1987,9,10));
        */
    lunar2solar: function(y2, m2, d2, isLeapMonth) {
      var isLeapMonth = !!isLeapMonth;
      var leapMonth = this.leapMonth(y2);
      this.leapDays(y2);
      if (isLeapMonth && leapMonth != m2) {
        return -1;
      }
      if (y2 == 2100 && m2 == 12 && d2 > 1 || y2 == 1900 && m2 == 1 && d2 < 31) {
        return -1;
      }
      var day = this.monthDays(y2, m2);
      var _day = day;
      if (isLeapMonth) {
        _day = this.leapDays(y2, m2);
      }
      if (y2 < 1900 || y2 > 2100 || d2 > _day) {
        return -1;
      }
      var offset = 0;
      for (var i2 = 1900; i2 < y2; i2++) {
        offset += this.lYearDays(i2);
      }
      var leap = 0;
      var isAdd = false;
      for (var i2 = 1; i2 < m2; i2++) {
        leap = this.leapMonth(y2);
        if (!isAdd) {
          if (leap <= i2 && leap > 0) {
            offset += this.leapDays(y2);
            isAdd = true;
          }
        }
        offset += this.monthDays(y2, i2);
      }
      if (isLeapMonth) {
        offset += day;
      }
      var stmap = Date.UTC(1900, 1, 30, 0, 0, 0);
      var calObj = new Date((offset + d2 - 31) * 864e5 + stmap);
      var cY = calObj.getUTCFullYear();
      var cM = calObj.getUTCMonth() + 1;
      var cD = calObj.getUTCDate();
      return this.solar2lunar(cY, cM, cD);
    }
  };
  class Calendar {
    constructor({
      date: date3,
      selected,
      startDate,
      endDate,
      range: range2
    } = {}) {
      this.date = this.getDate(/* @__PURE__ */ new Date());
      this.selected = selected || [];
      this.startDate = startDate;
      this.endDate = endDate;
      this.range = range2;
      this.cleanMultipleStatus();
      this.weeks = {};
    }
    /**
     * 设置日期
     * @param {Object} date
     */
    setDate(date3) {
      this.selectDate = this.getDate(date3);
      this._getWeek(this.selectDate.fullDate);
    }
    /**
     * 清理多选状态
     */
    cleanMultipleStatus() {
      this.multipleStatus = {
        before: "",
        after: "",
        data: []
      };
    }
    /**
     * 重置开始日期
     */
    resetSatrtDate(startDate) {
      this.startDate = startDate;
    }
    /**
     * 重置结束日期
     */
    resetEndDate(endDate) {
      this.endDate = endDate;
    }
    /**
     * 获取任意时间
     */
    getDate(date3, AddDayCount = 0, str = "day") {
      if (!date3) {
        date3 = /* @__PURE__ */ new Date();
      }
      if (typeof date3 !== "object") {
        date3 = date3.replace(/-/g, "/");
      }
      const dd = new Date(date3);
      switch (str) {
        case "day":
          dd.setDate(dd.getDate() + AddDayCount);
          break;
        case "month":
          if (dd.getDate() === 31 && AddDayCount > 0) {
            dd.setDate(dd.getDate() + AddDayCount);
          } else {
            const preMonth = dd.getMonth();
            dd.setMonth(preMonth + AddDayCount);
            const nextMonth = dd.getMonth();
            if (AddDayCount < 0 && preMonth !== 0 && nextMonth - preMonth > AddDayCount) {
              dd.setMonth(nextMonth + (nextMonth - preMonth + AddDayCount));
            }
            if (AddDayCount > 0 && nextMonth - preMonth > AddDayCount) {
              dd.setMonth(nextMonth - (nextMonth - preMonth - AddDayCount));
            }
          }
          break;
        case "year":
          dd.setFullYear(dd.getFullYear() + AddDayCount);
          break;
      }
      const y2 = dd.getFullYear();
      const m2 = dd.getMonth() + 1 < 10 ? "0" + (dd.getMonth() + 1) : dd.getMonth() + 1;
      const d2 = dd.getDate() < 10 ? "0" + dd.getDate() : dd.getDate();
      return {
        fullDate: y2 + "-" + m2 + "-" + d2,
        year: y2,
        month: m2,
        date: d2,
        day: dd.getDay()
      };
    }
    /**
     * 获取上月剩余天数
     */
    _getLastMonthDays(firstDay, full) {
      let dateArr = [];
      for (let i2 = firstDay; i2 > 0; i2--) {
        const beforeDate = new Date(full.year, full.month - 1, -i2 + 1).getDate();
        dateArr.push({
          date: beforeDate,
          month: full.month - 1,
          lunar: this.getlunar(full.year, full.month - 1, beforeDate),
          disable: true
        });
      }
      return dateArr;
    }
    /**
     * 获取本月天数
     */
    _currentMonthDys(dateData, full) {
      let dateArr = [];
      let fullDate = this.date.fullDate;
      for (let i2 = 1; i2 <= dateData; i2++) {
        let nowDate = full.year + "-" + (full.month < 10 ? full.month : full.month) + "-" + (i2 < 10 ? "0" + i2 : i2);
        let isDay = fullDate === nowDate;
        let info = this.selected && this.selected.find((item) => {
          if (this.dateEqual(nowDate, item.date)) {
            return item;
          }
        });
        let disableBefore = true;
        let disableAfter = true;
        if (this.startDate) {
          disableBefore = this.dateCompare(this.startDate, nowDate);
        }
        if (this.endDate) {
          disableAfter = this.dateCompare(nowDate, this.endDate);
        }
        let multiples = this.multipleStatus.data;
        let checked = false;
        let multiplesStatus = -1;
        if (this.range) {
          if (multiples) {
            multiplesStatus = multiples.findIndex((item) => {
              return this.dateEqual(item, nowDate);
            });
          }
          if (multiplesStatus !== -1) {
            checked = true;
          }
        }
        let data = {
          fullDate: nowDate,
          year: full.year,
          date: i2,
          multiple: this.range ? checked : false,
          beforeMultiple: this.dateEqual(this.multipleStatus.before, nowDate),
          afterMultiple: this.dateEqual(this.multipleStatus.after, nowDate),
          month: full.month,
          lunar: this.getlunar(full.year, full.month, i2),
          disable: !(disableBefore && disableAfter),
          isDay
        };
        if (info) {
          data.extraInfo = info;
        }
        dateArr.push(data);
      }
      return dateArr;
    }
    /**
     * 获取下月天数
     */
    _getNextMonthDays(surplus, full) {
      let dateArr = [];
      for (let i2 = 1; i2 < surplus + 1; i2++) {
        dateArr.push({
          date: i2,
          month: Number(full.month) + 1,
          lunar: this.getlunar(full.year, Number(full.month) + 1, i2),
          disable: true
        });
      }
      return dateArr;
    }
    /**
     * 获取当前日期详情
     * @param {Object} date
     */
    getInfo(date3) {
      if (!date3) {
        date3 = /* @__PURE__ */ new Date();
      }
      const dateInfo = this.canlender.find((item) => item.fullDate === this.getDate(date3).fullDate);
      return dateInfo;
    }
    /**
     * 比较时间大小
     */
    dateCompare(startDate, endDate) {
      startDate = new Date(startDate.replace("-", "/").replace("-", "/"));
      endDate = new Date(endDate.replace("-", "/").replace("-", "/"));
      if (startDate <= endDate) {
        return true;
      } else {
        return false;
      }
    }
    /**
     * 比较时间是否相等
     */
    dateEqual(before, after) {
      before = new Date(before.replace("-", "/").replace("-", "/"));
      after = new Date(after.replace("-", "/").replace("-", "/"));
      if (before.getTime() - after.getTime() === 0) {
        return true;
      } else {
        return false;
      }
    }
    /**
     * 获取日期范围内所有日期
     * @param {Object} begin
     * @param {Object} end
     */
    geDateAll(begin, end) {
      var arr = [];
      var ab = begin.split("-");
      var ae2 = end.split("-");
      var db = /* @__PURE__ */ new Date();
      db.setFullYear(ab[0], ab[1] - 1, ab[2]);
      var de2 = /* @__PURE__ */ new Date();
      de2.setFullYear(ae2[0], ae2[1] - 1, ae2[2]);
      var unixDb = db.getTime() - 24 * 60 * 60 * 1e3;
      var unixDe = de2.getTime() - 24 * 60 * 60 * 1e3;
      for (var k = unixDb; k <= unixDe; ) {
        k = k + 24 * 60 * 60 * 1e3;
        arr.push(this.getDate(new Date(parseInt(k))).fullDate);
      }
      return arr;
    }
    /**
     * 计算阴历日期显示
     */
    getlunar(year, month, date3) {
      return calendar.solar2lunar(year, month, date3);
    }
    /**
     * 设置打点
     */
    setSelectInfo(data, value2) {
      this.selected = value2;
      this._getWeek(data);
    }
    /**
     *  获取多选状态
     */
    setMultiple(fullDate) {
      let {
        before,
        after
      } = this.multipleStatus;
      if (!this.range)
        return;
      if (before && after) {
        this.multipleStatus.before = fullDate;
        this.multipleStatus.after = "";
        this.multipleStatus.data = [];
      } else {
        if (!before) {
          this.multipleStatus.before = fullDate;
        } else {
          this.multipleStatus.after = fullDate;
          if (this.dateCompare(this.multipleStatus.before, this.multipleStatus.after)) {
            this.multipleStatus.data = this.geDateAll(this.multipleStatus.before, this.multipleStatus.after);
          } else {
            this.multipleStatus.data = this.geDateAll(this.multipleStatus.after, this.multipleStatus.before);
          }
        }
      }
      this._getWeek(fullDate);
    }
    /**
     * 获取每周数据
     * @param {Object} dateData
     */
    _getWeek(dateData) {
      const {
        year,
        month
      } = this.getDate(dateData);
      let firstDay = new Date(year, month - 1, 1).getDay();
      let currentDay = new Date(year, month, 0).getDate();
      let dates = {
        lastMonthDays: this._getLastMonthDays(firstDay, this.getDate(dateData)),
        // 上个月末尾几天
        currentMonthDys: this._currentMonthDys(currentDay, this.getDate(dateData)),
        // 本月天数
        nextMonthDays: [],
        // 下个月开始几天
        weeks: []
      };
      let canlender = [];
      const surplus = 42 - (dates.lastMonthDays.length + dates.currentMonthDys.length);
      dates.nextMonthDays = this._getNextMonthDays(surplus, this.getDate(dateData));
      canlender = canlender.concat(dates.lastMonthDays, dates.currentMonthDys, dates.nextMonthDays);
      let weeks = {};
      for (let i2 = 0; i2 < canlender.length; i2++) {
        if (i2 % 7 === 0) {
          weeks[parseInt(i2 / 7)] = new Array(7);
        }
        weeks[parseInt(i2 / 7)][i2 % 7] = canlender[i2];
      }
      this.canlender = canlender;
      this.weeks = weeks;
    }
    //静态方法
    // static init(date) {
    // 	if (!this.instance) {
    // 		this.instance = new Calendar(date);
    // 	}
    // 	return this.instance;
    // }
  }
  const isObject = (val) => val !== null && typeof val === "object";
  const defaultDelimiters = ["{", "}"];
  class BaseFormatter {
    constructor() {
      this._caches = /* @__PURE__ */ Object.create(null);
    }
    interpolate(message, values, delimiters = defaultDelimiters) {
      if (!values) {
        return [message];
      }
      let tokens = this._caches[message];
      if (!tokens) {
        tokens = parse(message, delimiters);
        this._caches[message] = tokens;
      }
      return compile(tokens, values);
    }
  }
  const RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
  const RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
  function parse(format2, [startDelimiter, endDelimiter]) {
    const tokens = [];
    let position = 0;
    let text = "";
    while (position < format2.length) {
      let char = format2[position++];
      if (char === startDelimiter) {
        if (text) {
          tokens.push({ type: "text", value: text });
        }
        text = "";
        let sub = "";
        char = format2[position++];
        while (char !== void 0 && char !== endDelimiter) {
          sub += char;
          char = format2[position++];
        }
        const isClosed = char === endDelimiter;
        const type2 = RE_TOKEN_LIST_VALUE.test(sub) ? "list" : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? "named" : "unknown";
        tokens.push({ value: sub, type: type2 });
      } else {
        text += char;
      }
    }
    text && tokens.push({ type: "text", value: text });
    return tokens;
  }
  function compile(tokens, values) {
    const compiled = [];
    let index2 = 0;
    const mode = Array.isArray(values) ? "list" : isObject(values) ? "named" : "unknown";
    if (mode === "unknown") {
      return compiled;
    }
    while (index2 < tokens.length) {
      const token = tokens[index2];
      switch (token.type) {
        case "text":
          compiled.push(token.value);
          break;
        case "list":
          compiled.push(values[parseInt(token.value, 10)]);
          break;
        case "named":
          if (mode === "named") {
            compiled.push(values[token.value]);
          } else {
            {
              console.warn(`Type of token '${token.type}' and format of value '${mode}' don't match!`);
            }
          }
          break;
        case "unknown":
          {
            console.warn(`Detect 'unknown' type of token!`);
          }
          break;
      }
      index2++;
    }
    return compiled;
  }
  const LOCALE_ZH_HANS = "zh-Hans";
  const LOCALE_ZH_HANT = "zh-Hant";
  const LOCALE_EN = "en";
  const LOCALE_FR = "fr";
  const LOCALE_ES = "es";
  const hasOwnProperty = Object.prototype.hasOwnProperty;
  const hasOwn = (val, key) => hasOwnProperty.call(val, key);
  const defaultFormatter = new BaseFormatter();
  function include(str, parts) {
    return !!parts.find((part) => str.indexOf(part) !== -1);
  }
  function startsWith(str, parts) {
    return parts.find((part) => str.indexOf(part) === 0);
  }
  function normalizeLocale(locale, messages2) {
    if (!locale) {
      return;
    }
    locale = locale.trim().replace(/_/g, "-");
    if (messages2 && messages2[locale]) {
      return locale;
    }
    locale = locale.toLowerCase();
    if (locale === "chinese") {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf("zh") === 0) {
      if (locale.indexOf("-hans") > -1) {
        return LOCALE_ZH_HANS;
      }
      if (locale.indexOf("-hant") > -1) {
        return LOCALE_ZH_HANT;
      }
      if (include(locale, ["-tw", "-hk", "-mo", "-cht"])) {
        return LOCALE_ZH_HANT;
      }
      return LOCALE_ZH_HANS;
    }
    let locales = [LOCALE_EN, LOCALE_FR, LOCALE_ES];
    if (messages2 && Object.keys(messages2).length > 0) {
      locales = Object.keys(messages2);
    }
    const lang = startsWith(locale, locales);
    if (lang) {
      return lang;
    }
  }
  class I18n {
    constructor({ locale, fallbackLocale, messages: messages2, watcher, formater: formater2 }) {
      this.locale = LOCALE_EN;
      this.fallbackLocale = LOCALE_EN;
      this.message = {};
      this.messages = {};
      this.watchers = [];
      if (fallbackLocale) {
        this.fallbackLocale = fallbackLocale;
      }
      this.formater = formater2 || defaultFormatter;
      this.messages = messages2 || {};
      this.setLocale(locale || LOCALE_EN);
      if (watcher) {
        this.watchLocale(watcher);
      }
    }
    setLocale(locale) {
      const oldLocale = this.locale;
      this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      if (oldLocale !== this.locale) {
        this.watchers.forEach((watcher) => {
          watcher(this.locale, oldLocale);
        });
      }
    }
    getLocale() {
      return this.locale;
    }
    watchLocale(fn) {
      const index2 = this.watchers.push(fn) - 1;
      return () => {
        this.watchers.splice(index2, 1);
      };
    }
    add(locale, message, override = true) {
      const curMessages = this.messages[locale];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message);
        } else {
          Object.keys(message).forEach((key) => {
            if (!hasOwn(curMessages, key)) {
              curMessages[key] = message[key];
            }
          });
        }
      } else {
        this.messages[locale] = message;
      }
    }
    f(message, values, delimiters) {
      return this.formater.interpolate(message, values, delimiters).join("");
    }
    t(key, locale, values) {
      let message = this.message;
      if (typeof locale === "string") {
        locale = normalizeLocale(locale, this.messages);
        locale && (message = this.messages[locale]);
      } else {
        values = locale;
      }
      if (!hasOwn(message, key)) {
        console.warn(`Cannot translate the value of keypath ${key}. Use the value of keypath as default.`);
        return key;
      }
      return this.formater.interpolate(message[key], values).join("");
    }
  }
  function watchAppLocale(appVm, i18n) {
    if (appVm.$watchLocale) {
      appVm.$watchLocale((newLocale) => {
        i18n.setLocale(newLocale);
      });
    } else {
      appVm.$watch(() => appVm.$locale, (newLocale) => {
        i18n.setLocale(newLocale);
      });
    }
  }
  function getDefaultLocale() {
    if (typeof uni !== "undefined" && uni.getLocale) {
      return uni.getLocale();
    }
    if (typeof global !== "undefined" && global.getLocale) {
      return global.getLocale();
    }
    return LOCALE_EN;
  }
  function initVueI18n(locale, messages2 = {}, fallbackLocale, watcher) {
    if (typeof locale !== "string") {
      const options = [
        messages2,
        locale
      ];
      locale = options[0];
      messages2 = options[1];
    }
    if (typeof locale !== "string") {
      locale = getDefaultLocale();
    }
    if (typeof fallbackLocale !== "string") {
      fallbackLocale = typeof __uniConfig !== "undefined" && __uniConfig.fallbackLocale || LOCALE_EN;
    }
    const i18n = new I18n({
      locale,
      fallbackLocale,
      messages: messages2,
      watcher
    });
    let t2 = (key, values) => {
      if (typeof getApp !== "function") {
        t2 = function(key2, values2) {
          return i18n.t(key2, values2);
        };
      } else {
        let isWatchedAppLocale = false;
        t2 = function(key2, values2) {
          const appVm = getApp().$vm;
          if (appVm) {
            appVm.$locale;
            if (!isWatchedAppLocale) {
              isWatchedAppLocale = true;
              watchAppLocale(appVm, i18n);
            }
          }
          return i18n.t(key2, values2);
        };
      }
      return t2(key, values);
    };
    return {
      i18n,
      f(message, values, delimiters) {
        return i18n.f(message, values, delimiters);
      },
      t(key, values) {
        return t2(key, values);
      },
      add(locale2, message, override = true) {
        return i18n.add(locale2, message, override);
      },
      watch(fn) {
        return i18n.watchLocale(fn);
      },
      getLocale() {
        return i18n.getLocale();
      },
      setLocale(newLocale) {
        return i18n.setLocale(newLocale);
      }
    };
  }
  const en$1 = {
    "uni-calender.ok": "ok",
    "uni-calender.cancel": "cancel",
    "uni-calender.today": "today",
    "uni-calender.MON": "MON",
    "uni-calender.TUE": "TUE",
    "uni-calender.WED": "WED",
    "uni-calender.THU": "THU",
    "uni-calender.FRI": "FRI",
    "uni-calender.SAT": "SAT",
    "uni-calender.SUN": "SUN"
  };
  const zhHans = {
    "uni-calender.ok": "确定",
    "uni-calender.cancel": "取消",
    "uni-calender.today": "今日",
    "uni-calender.SUN": "日",
    "uni-calender.MON": "一",
    "uni-calender.TUE": "二",
    "uni-calender.WED": "三",
    "uni-calender.THU": "四",
    "uni-calender.FRI": "五",
    "uni-calender.SAT": "六"
  };
  const zhHant = {
    "uni-calender.ok": "確定",
    "uni-calender.cancel": "取消",
    "uni-calender.today": "今日",
    "uni-calender.SUN": "日",
    "uni-calender.MON": "一",
    "uni-calender.TUE": "二",
    "uni-calender.WED": "三",
    "uni-calender.THU": "四",
    "uni-calender.FRI": "五",
    "uni-calender.SAT": "六"
  };
  const i18nMessages = {
    en: en$1,
    "zh-Hans": zhHans,
    "zh-Hant": zhHant
  };
  const { t: t$2 } = initVueI18n(i18nMessages);
  const _sfc_main$7 = {
    emits: ["change"],
    props: {
      weeks: {
        type: Object,
        default() {
          return {};
        }
      },
      calendar: {
        type: Object,
        default: () => {
          return {};
        }
      },
      selected: {
        type: Array,
        default: () => {
          return [];
        }
      },
      lunar: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      todayText() {
        return t$2("uni-calender.today");
      }
    },
    methods: {
      choiceDate(weeks) {
        this.$emit("change", weeks);
      }
    }
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uni-calendar-item__weeks-box", {
          "uni-calendar-item--disable": $props.weeks.disable,
          "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
          "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
          "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
          "uni-calendar-item--multiple": $props.weeks.multiple,
          "uni-calendar-item--after-checked": $props.weeks.afterMultiple
        }]),
        onClick: _cache[0] || (_cache[0] = ($event) => $options.choiceDate($props.weeks))
      },
      [
        vue.createElementVNode("view", { class: "uni-calendar-item__weeks-box-item" }, [
          $props.selected && $props.weeks.extraInfo ? (vue.openBlock(), vue.createElementBlock("text", {
            key: 0,
            class: "uni-calendar-item__weeks-box-circle"
          })) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode(
            "text",
            {
              class: vue.normalizeClass(["uni-calendar-item__weeks-box-text", {
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple,
                "uni-calendar-item--disable": $props.weeks.disable
              }])
            },
            vue.toDisplayString($props.weeks.date),
            3
            /* TEXT, CLASS */
          ),
          !$props.lunar && !$props.weeks.extraInfo && $props.weeks.isDay ? (vue.openBlock(), vue.createElementBlock(
            "text",
            {
              key: 1,
              class: vue.normalizeClass(["uni-calendar-item__weeks-lunar-text", {
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple
              }])
            },
            vue.toDisplayString($options.todayText),
            3
            /* TEXT, CLASS */
          )) : vue.createCommentVNode("v-if", true),
          $props.lunar && !$props.weeks.extraInfo ? (vue.openBlock(), vue.createElementBlock(
            "text",
            {
              key: 2,
              class: vue.normalizeClass(["uni-calendar-item__weeks-lunar-text", {
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple,
                "uni-calendar-item--disable": $props.weeks.disable
              }])
            },
            vue.toDisplayString($props.weeks.isDay ? $options.todayText : $props.weeks.lunar.IDayCn === "初一" ? $props.weeks.lunar.IMonthCn : $props.weeks.lunar.IDayCn),
            3
            /* TEXT, CLASS */
          )) : vue.createCommentVNode("v-if", true),
          $props.weeks.extraInfo && $props.weeks.extraInfo.info ? (vue.openBlock(), vue.createElementBlock(
            "text",
            {
              key: 3,
              class: vue.normalizeClass(["uni-calendar-item__weeks-lunar-text", {
                "uni-calendar-item--extra": $props.weeks.extraInfo.info,
                "uni-calendar-item--isDay-text": $props.weeks.isDay,
                "uni-calendar-item--isDay": $props.calendar.fullDate === $props.weeks.fullDate && $props.weeks.isDay,
                "uni-calendar-item--checked": $props.calendar.fullDate === $props.weeks.fullDate && !$props.weeks.isDay,
                "uni-calendar-item--before-checked": $props.weeks.beforeMultiple,
                "uni-calendar-item--multiple": $props.weeks.multiple,
                "uni-calendar-item--after-checked": $props.weeks.afterMultiple,
                "uni-calendar-item--disable": $props.weeks.disable
              }])
            },
            vue.toDisplayString($props.weeks.extraInfo.info),
            3
            /* TEXT, CLASS */
          )) : vue.createCommentVNode("v-if", true)
        ])
      ],
      2
      /* CLASS */
    );
  }
  const CalendarItem = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__scopeId", "data-v-65626c58"], ["__file", "E:/code/app/WH-app/uni_modules/uni-calendar/components/uni-calendar/uni-calendar-item.vue"]]);
  const { t: t$1 } = initVueI18n(i18nMessages);
  const _sfc_main$6 = {
    components: {
      CalendarItem
    },
    emits: ["close", "confirm", "change", "monthSwitch"],
    props: {
      date: {
        type: String,
        default: ""
      },
      selected: {
        type: Array,
        default() {
          return [];
        }
      },
      lunar: {
        type: Boolean,
        default: false
      },
      startDate: {
        type: String,
        default: ""
      },
      endDate: {
        type: String,
        default: ""
      },
      range: {
        type: Boolean,
        default: false
      },
      insert: {
        type: Boolean,
        default: true
      },
      showMonth: {
        type: Boolean,
        default: true
      },
      clearDate: {
        type: Boolean,
        default: true
      }
    },
    data() {
      return {
        show: false,
        weeks: [],
        calendar: {},
        nowDate: "",
        aniMaskShow: false
      };
    },
    computed: {
      /**
       * for i18n
       */
      okText() {
        return t$1("uni-calender.ok");
      },
      cancelText() {
        return t$1("uni-calender.cancel");
      },
      todayText() {
        return t$1("uni-calender.today");
      },
      monText() {
        return t$1("uni-calender.MON");
      },
      TUEText() {
        return t$1("uni-calender.TUE");
      },
      WEDText() {
        return t$1("uni-calender.WED");
      },
      THUText() {
        return t$1("uni-calender.THU");
      },
      FRIText() {
        return t$1("uni-calender.FRI");
      },
      SATText() {
        return t$1("uni-calender.SAT");
      },
      SUNText() {
        return t$1("uni-calender.SUN");
      }
    },
    watch: {
      date(newVal) {
        this.init(newVal);
      },
      startDate(val) {
        this.cale.resetSatrtDate(val);
        this.cale.setDate(this.nowDate.fullDate);
        this.weeks = this.cale.weeks;
      },
      endDate(val) {
        this.cale.resetEndDate(val);
        this.cale.setDate(this.nowDate.fullDate);
        this.weeks = this.cale.weeks;
      },
      selected(newVal) {
        this.cale.setSelectInfo(this.nowDate.fullDate, newVal);
        this.weeks = this.cale.weeks;
      }
    },
    created() {
      this.cale = new Calendar({
        selected: this.selected,
        startDate: this.startDate,
        endDate: this.endDate,
        range: this.range
      });
      this.init(this.date);
    },
    methods: {
      // 取消穿透
      clean() {
      },
      bindDateChange(e2) {
        const value2 = e2.detail.value + "-1";
        this.setDate(value2);
        const { year, month } = this.cale.getDate(value2);
        this.$emit("monthSwitch", {
          year,
          month
        });
      },
      /**
       * 初始化日期显示
       * @param {Object} date
       */
      init(date3) {
        this.cale.setDate(date3);
        this.weeks = this.cale.weeks;
        this.nowDate = this.calendar = this.cale.getInfo(date3);
      },
      /**
       * 打开日历弹窗
       */
      open() {
        if (this.clearDate && !this.insert) {
          this.cale.cleanMultipleStatus();
          this.init(this.date);
        }
        this.show = true;
        this.$nextTick(() => {
          setTimeout(() => {
            this.aniMaskShow = true;
          }, 50);
        });
      },
      /**
       * 关闭日历弹窗
       */
      close() {
        this.aniMaskShow = false;
        this.$nextTick(() => {
          setTimeout(() => {
            this.show = false;
            this.$emit("close");
          }, 300);
        });
      },
      /**
       * 确认按钮
       */
      confirm() {
        this.setEmit("confirm");
        this.close();
      },
      /**
       * 变化触发
       */
      change() {
        if (!this.insert)
          return;
        this.setEmit("change");
      },
      /**
       * 选择月份触发
       */
      monthSwitch() {
        let {
          year,
          month
        } = this.nowDate;
        this.$emit("monthSwitch", {
          year,
          month: Number(month)
        });
      },
      /**
       * 派发事件
       * @param {Object} name
       */
      setEmit(name) {
        let {
          year,
          month,
          date: date3,
          fullDate,
          lunar,
          extraInfo
        } = this.calendar;
        this.$emit(name, {
          range: this.cale.multipleStatus,
          year,
          month,
          date: date3,
          fulldate: fullDate,
          lunar,
          extraInfo: extraInfo || {}
        });
      },
      /**
       * 选择天触发
       * @param {Object} weeks
       */
      choiceDate(weeks) {
        if (weeks.disable)
          return;
        this.calendar = weeks;
        this.cale.setMultiple(this.calendar.fullDate);
        this.weeks = this.cale.weeks;
        this.change();
      },
      /**
       * 回到今天
       */
      backToday() {
        const nowYearMonth = `${this.nowDate.year}-${this.nowDate.month}`;
        const date3 = this.cale.getDate(/* @__PURE__ */ new Date());
        const todayYearMonth = `${date3.year}-${date3.month}`;
        this.init(date3.fullDate);
        if (nowYearMonth !== todayYearMonth) {
          this.monthSwitch();
        }
        this.change();
      },
      /**
       * 上个月
       */
      pre() {
        const preDate = this.cale.getDate(this.nowDate.fullDate, -1, "month").fullDate;
        this.setDate(preDate);
        this.monthSwitch();
      },
      /**
       * 下个月
       */
      next() {
        const nextDate = this.cale.getDate(this.nowDate.fullDate, 1, "month").fullDate;
        this.setDate(nextDate);
        this.monthSwitch();
      },
      /**
       * 设置日期
       * @param {Object} date
       */
      setDate(date3) {
        this.cale.setDate(date3);
        this.weeks = this.cale.weeks;
        this.nowDate = this.cale.getInfo(date3);
      }
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_calendar_item = vue.resolveComponent("calendar-item");
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-calendar" }, [
      !$props.insert && $data.show ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass(["uni-calendar__mask", { "uni-calendar--mask-show": $data.aniMaskShow }]),
          onClick: _cache[0] || (_cache[0] = (...args) => $options.clean && $options.clean(...args))
        },
        null,
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true),
      $props.insert || $data.show ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 1,
          class: vue.normalizeClass(["uni-calendar__content", { "uni-calendar--fixed": !$props.insert, "uni-calendar--ani-show": $data.aniMaskShow }])
        },
        [
          !$props.insert ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "uni-calendar__header uni-calendar--fixed-top"
          }, [
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.close && $options.close(...args))
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__header-text uni-calendar--fixed-width" },
                vue.toDisplayString($options.cancelText),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.confirm && $options.confirm(...args))
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__header-text uni-calendar--fixed-width" },
                vue.toDisplayString($options.okText),
                1
                /* TEXT */
              )
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "uni-calendar__header" }, [
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[3] || (_cache[3] = vue.withModifiers((...args) => $options.pre && $options.pre(...args), ["stop"]))
            }, [
              vue.createElementVNode("view", { class: "uni-calendar__header-btn uni-calendar--left" })
            ]),
            vue.createElementVNode("picker", {
              mode: "date",
              value: $props.date,
              fields: "month",
              onChange: _cache[4] || (_cache[4] = (...args) => $options.bindDateChange && $options.bindDateChange(...args))
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__header-text" },
                vue.toDisplayString(($data.nowDate.year || "") + " / " + ($data.nowDate.month || "")),
                1
                /* TEXT */
              )
            ], 40, ["value"]),
            vue.createElementVNode("view", {
              class: "uni-calendar__header-btn-box",
              onClick: _cache[5] || (_cache[5] = vue.withModifiers((...args) => $options.next && $options.next(...args), ["stop"]))
            }, [
              vue.createElementVNode("view", { class: "uni-calendar__header-btn uni-calendar--right" })
            ]),
            vue.createElementVNode(
              "text",
              {
                class: "uni-calendar__backtoday",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.backToday && $options.backToday(...args))
              },
              vue.toDisplayString($options.todayText),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "uni-calendar__box" }, [
            $props.showMonth ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "uni-calendar__box-bg"
            }, [
              vue.createElementVNode(
                "text",
                { class: "uni-calendar__box-bg-text" },
                vue.toDisplayString($data.nowDate.month),
                1
                /* TEXT */
              )
            ])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "uni-calendar__weeks" }, [
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.SUNText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.monText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.TUEText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.WEDText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.THUText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.FRIText),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "uni-calendar__weeks-day" }, [
                vue.createElementVNode(
                  "text",
                  { class: "uni-calendar__weeks-day-text" },
                  vue.toDisplayString($options.SATText),
                  1
                  /* TEXT */
                )
              ])
            ]),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.weeks, (item, weekIndex) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "uni-calendar__weeks",
                  key: weekIndex
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(item, (weeks, weeksIndex) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: "uni-calendar__weeks-item",
                        key: weeksIndex
                      }, [
                        vue.createVNode(_component_calendar_item, {
                          class: "uni-calendar-item--hook",
                          weeks,
                          calendar: $data.calendar,
                          selected: $props.selected,
                          lunar: $props.lunar,
                          onChange: $options.choiceDate
                        }, null, 8, ["weeks", "calendar", "selected", "lunar", "onChange"])
                      ]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ],
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const __easycom_8 = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__scopeId", "data-v-b6ab2cfb"], ["__file", "E:/code/app/WH-app/uni_modules/uni-calendar/components/uni-calendar/uni-calendar.vue"]]);
  var current_ansi = 1252;
  var VALID_ANSI = [874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1e4];
  var CS2CP = {
    /*::[*/
    0: 1252,
    /* ANSI */
    /*::[*/
    1: 65001,
    /* DEFAULT */
    /*::[*/
    2: 65001,
    /* SYMBOL */
    /*::[*/
    77: 1e4,
    /* MAC */
    /*::[*/
    128: 932,
    /* SHIFTJIS */
    /*::[*/
    129: 949,
    /* HANGUL */
    /*::[*/
    130: 1361,
    /* JOHAB */
    /*::[*/
    134: 936,
    /* GB2312 */
    /*::[*/
    136: 950,
    /* CHINESEBIG5 */
    /*::[*/
    161: 1253,
    /* GREEK */
    /*::[*/
    162: 1254,
    /* TURKISH */
    /*::[*/
    163: 1258,
    /* VIETNAMESE */
    /*::[*/
    177: 1255,
    /* HEBREW */
    /*::[*/
    178: 1256,
    /* ARABIC */
    /*::[*/
    186: 1257,
    /* BALTIC */
    /*::[*/
    204: 1251,
    /* RUSSIAN */
    /*::[*/
    222: 874,
    /* THAI */
    /*::[*/
    238: 1250,
    /* EASTEUROPE */
    /*::[*/
    255: 1252,
    /* OEM */
    /*::[*/
    69: 6969
    /* MISC */
  };
  var set_ansi = function(cp) {
    if (VALID_ANSI.indexOf(cp) == -1)
      return;
    current_ansi = CS2CP[0] = cp;
  };
  function reset_ansi() {
    set_ansi(1252);
  }
  var set_cp = function(cp) {
    set_ansi(cp);
  };
  function reset_cp() {
    set_cp(1200);
    reset_ansi();
  }
  function char_codes(data) {
    var o2 = [];
    for (var i2 = 0, len = data.length; i2 < len; ++i2)
      o2[i2] = data.charCodeAt(i2);
    return o2;
  }
  function utf16leread(data) {
    var o2 = [];
    for (var i2 = 0; i2 < data.length >> 1; ++i2)
      o2[i2] = String.fromCharCode(data.charCodeAt(2 * i2) + (data.charCodeAt(2 * i2 + 1) << 8));
    return o2.join("");
  }
  function utf16beread(data) {
    var o2 = [];
    for (var i2 = 0; i2 < data.length >> 1; ++i2)
      o2[i2] = String.fromCharCode(data.charCodeAt(2 * i2 + 1) + (data.charCodeAt(2 * i2) << 8));
    return o2.join("");
  }
  var debom = function(data) {
    var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
    if (c1 == 255 && c2 == 254)
      return utf16leread(data.slice(2));
    if (c1 == 254 && c2 == 255)
      return utf16beread(data.slice(2));
    if (c1 == 65279)
      return data.slice(1);
    return data;
  };
  var _getchar = function _gc1(x) {
    return String.fromCharCode(x);
  };
  var _getansi = function _ga1(x) {
    return String.fromCharCode(x);
  };
  var $cptable;
  var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  function Base64_encode(input) {
    var o2 = "";
    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
    for (var i2 = 0; i2 < input.length; ) {
      c1 = input.charCodeAt(i2++);
      e1 = c1 >> 2;
      c2 = input.charCodeAt(i2++);
      e2 = (c1 & 3) << 4 | c2 >> 4;
      c3 = input.charCodeAt(i2++);
      e3 = (c2 & 15) << 2 | c3 >> 6;
      e4 = c3 & 63;
      if (isNaN(c2)) {
        e3 = e4 = 64;
      } else if (isNaN(c3)) {
        e4 = 64;
      }
      o2 += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
    }
    return o2;
  }
  function Base64_decode(input) {
    var o2 = "";
    var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
    input = input.replace(/[^\w\+\/\=]/g, "");
    for (var i2 = 0; i2 < input.length; ) {
      e1 = Base64_map.indexOf(input.charAt(i2++));
      e2 = Base64_map.indexOf(input.charAt(i2++));
      c1 = e1 << 2 | e2 >> 4;
      o2 += String.fromCharCode(c1);
      e3 = Base64_map.indexOf(input.charAt(i2++));
      c2 = (e2 & 15) << 4 | e3 >> 2;
      if (e3 !== 64) {
        o2 += String.fromCharCode(c2);
      }
      e4 = Base64_map.indexOf(input.charAt(i2++));
      c3 = (e3 & 3) << 6 | e4;
      if (e4 !== 64) {
        o2 += String.fromCharCode(c3);
      }
    }
    return o2;
  }
  var has_buf = /* @__PURE__ */ function() {
    return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
  }();
  var Buffer_from = /* @__PURE__ */ function() {
    if (typeof Buffer !== "undefined") {
      var nbfs = !Buffer.from;
      if (!nbfs)
        try {
          Buffer.from("foo", "utf8");
        } catch (e2) {
          nbfs = true;
        }
      return nbfs ? function(buf, enc) {
        return enc ? new Buffer(buf, enc) : new Buffer(buf);
      } : Buffer.from.bind(Buffer);
    }
    return function() {
    };
  }();
  function new_raw_buf(len) {
    if (has_buf)
      return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
    return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
  }
  function new_unsafe_buf(len) {
    if (has_buf)
      return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
    return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
  }
  var s2a = function s2a2(s2) {
    if (has_buf)
      return Buffer_from(s2, "binary");
    return s2.split("").map(function(x) {
      return x.charCodeAt(0) & 255;
    });
  };
  function a2s(data) {
    if (Array.isArray(data))
      return data.map(function(c2) {
        return String.fromCharCode(c2);
      }).join("");
    var o2 = [];
    for (var i2 = 0; i2 < data.length; ++i2)
      o2[i2] = String.fromCharCode(data[i2]);
    return o2.join("");
  }
  function ab2a(data) {
    if (typeof ArrayBuffer == "undefined")
      throw new Error("Unsupported");
    if (data instanceof ArrayBuffer)
      return ab2a(new Uint8Array(data));
    var o2 = new Array(data.length);
    for (var i2 = 0; i2 < data.length; ++i2)
      o2[i2] = data[i2];
    return o2;
  }
  var bconcat = has_buf ? function(bufs) {
    return Buffer.concat(bufs.map(function(buf) {
      return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
    }));
  } : function(bufs) {
    if (typeof Uint8Array !== "undefined") {
      var i2 = 0, maxlen = 0;
      for (i2 = 0; i2 < bufs.length; ++i2)
        maxlen += bufs[i2].length;
      var o2 = new Uint8Array(maxlen);
      var len = 0;
      for (i2 = 0, maxlen = 0; i2 < bufs.length; maxlen += len, ++i2) {
        len = bufs[i2].length;
        if (bufs[i2] instanceof Uint8Array)
          o2.set(bufs[i2], maxlen);
        else if (typeof bufs[i2] == "string") {
          throw "wtf";
        } else
          o2.set(new Uint8Array(bufs[i2]), maxlen);
      }
      return o2;
    }
    return [].concat.apply([], bufs.map(function(buf) {
      return Array.isArray(buf) ? buf : [].slice.call(buf);
    }));
  };
  function utf8decode(content) {
    var out = [], widx = 0, L2 = content.length + 250;
    var o2 = new_raw_buf(content.length + 255);
    for (var ridx = 0; ridx < content.length; ++ridx) {
      var c2 = content.charCodeAt(ridx);
      if (c2 < 128)
        o2[widx++] = c2;
      else if (c2 < 2048) {
        o2[widx++] = 192 | c2 >> 6 & 31;
        o2[widx++] = 128 | c2 & 63;
      } else if (c2 >= 55296 && c2 < 57344) {
        c2 = (c2 & 1023) + 64;
        var d2 = content.charCodeAt(++ridx) & 1023;
        o2[widx++] = 240 | c2 >> 8 & 7;
        o2[widx++] = 128 | c2 >> 2 & 63;
        o2[widx++] = 128 | d2 >> 6 & 15 | (c2 & 3) << 4;
        o2[widx++] = 128 | d2 & 63;
      } else {
        o2[widx++] = 224 | c2 >> 12 & 15;
        o2[widx++] = 128 | c2 >> 6 & 63;
        o2[widx++] = 128 | c2 & 63;
      }
      if (widx > L2) {
        out.push(o2.slice(0, widx));
        widx = 0;
        o2 = new_raw_buf(65535);
        L2 = 65530;
      }
    }
    out.push(o2.slice(0, widx));
    return bconcat(out);
  }
  var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
  function _strrev(x) {
    var o2 = "", i2 = x.length - 1;
    while (i2 >= 0)
      o2 += x.charAt(i2--);
    return o2;
  }
  function pad0(v2, d2) {
    var t2 = "" + v2;
    return t2.length >= d2 ? t2 : fill("0", d2 - t2.length) + t2;
  }
  function pad_(v2, d2) {
    var t2 = "" + v2;
    return t2.length >= d2 ? t2 : fill(" ", d2 - t2.length) + t2;
  }
  function rpad_(v2, d2) {
    var t2 = "" + v2;
    return t2.length >= d2 ? t2 : t2 + fill(" ", d2 - t2.length);
  }
  function pad0r1(v2, d2) {
    var t2 = "" + Math.round(v2);
    return t2.length >= d2 ? t2 : fill("0", d2 - t2.length) + t2;
  }
  function pad0r2(v2, d2) {
    var t2 = "" + v2;
    return t2.length >= d2 ? t2 : fill("0", d2 - t2.length) + t2;
  }
  var p2_32 = /* @__PURE__ */ Math.pow(2, 32);
  function pad0r(v2, d2) {
    if (v2 > p2_32 || v2 < -p2_32)
      return pad0r1(v2, d2);
    var i2 = Math.round(v2);
    return pad0r2(i2, d2);
  }
  function SSF_isgeneral(s2, i2) {
    i2 = i2 || 0;
    return s2.length >= 7 + i2 && (s2.charCodeAt(i2) | 32) === 103 && (s2.charCodeAt(i2 + 1) | 32) === 101 && (s2.charCodeAt(i2 + 2) | 32) === 110 && (s2.charCodeAt(i2 + 3) | 32) === 101 && (s2.charCodeAt(i2 + 4) | 32) === 114 && (s2.charCodeAt(i2 + 5) | 32) === 97 && (s2.charCodeAt(i2 + 6) | 32) === 108;
  }
  var days = [
    ["Sun", "Sunday"],
    ["Mon", "Monday"],
    ["Tue", "Tuesday"],
    ["Wed", "Wednesday"],
    ["Thu", "Thursday"],
    ["Fri", "Friday"],
    ["Sat", "Saturday"]
  ];
  var months = [
    ["J", "Jan", "January"],
    ["F", "Feb", "February"],
    ["M", "Mar", "March"],
    ["A", "Apr", "April"],
    ["M", "May", "May"],
    ["J", "Jun", "June"],
    ["J", "Jul", "July"],
    ["A", "Aug", "August"],
    ["S", "Sep", "September"],
    ["O", "Oct", "October"],
    ["N", "Nov", "November"],
    ["D", "Dec", "December"]
  ];
  function SSF_init_table(t2) {
    if (!t2)
      t2 = {};
    t2[0] = "General";
    t2[1] = "0";
    t2[2] = "0.00";
    t2[3] = "#,##0";
    t2[4] = "#,##0.00";
    t2[9] = "0%";
    t2[10] = "0.00%";
    t2[11] = "0.00E+00";
    t2[12] = "# ?/?";
    t2[13] = "# ??/??";
    t2[14] = "m/d/yy";
    t2[15] = "d-mmm-yy";
    t2[16] = "d-mmm";
    t2[17] = "mmm-yy";
    t2[18] = "h:mm AM/PM";
    t2[19] = "h:mm:ss AM/PM";
    t2[20] = "h:mm";
    t2[21] = "h:mm:ss";
    t2[22] = "m/d/yy h:mm";
    t2[37] = "#,##0 ;(#,##0)";
    t2[38] = "#,##0 ;[Red](#,##0)";
    t2[39] = "#,##0.00;(#,##0.00)";
    t2[40] = "#,##0.00;[Red](#,##0.00)";
    t2[45] = "mm:ss";
    t2[46] = "[h]:mm:ss";
    t2[47] = "mmss.0";
    t2[48] = "##0.0E+0";
    t2[49] = "@";
    t2[56] = '"上午/下午 "hh"時"mm"分"ss"秒 "';
    return t2;
  }
  var table_fmt = {
    0: "General",
    1: "0",
    2: "0.00",
    3: "#,##0",
    4: "#,##0.00",
    9: "0%",
    10: "0.00%",
    11: "0.00E+00",
    12: "# ?/?",
    13: "# ??/??",
    14: "m/d/yy",
    15: "d-mmm-yy",
    16: "d-mmm",
    17: "mmm-yy",
    18: "h:mm AM/PM",
    19: "h:mm:ss AM/PM",
    20: "h:mm",
    21: "h:mm:ss",
    22: "m/d/yy h:mm",
    37: "#,##0 ;(#,##0)",
    38: "#,##0 ;[Red](#,##0)",
    39: "#,##0.00;(#,##0.00)",
    40: "#,##0.00;[Red](#,##0.00)",
    45: "mm:ss",
    46: "[h]:mm:ss",
    47: "mmss.0",
    48: "##0.0E+0",
    49: "@",
    56: '"上午/下午 "hh"時"mm"分"ss"秒 "'
  };
  var SSF_default_map = {
    5: 37,
    6: 38,
    7: 39,
    8: 40,
    //  5 -> 37 ...  8 -> 40
    23: 0,
    24: 0,
    25: 0,
    26: 0,
    // 23 ->  0 ... 26 ->  0
    27: 14,
    28: 14,
    29: 14,
    30: 14,
    31: 14,
    // 27 -> 14 ... 31 -> 14
    50: 14,
    51: 14,
    52: 14,
    53: 14,
    54: 14,
    // 50 -> 14 ... 58 -> 14
    55: 14,
    56: 14,
    57: 14,
    58: 14,
    59: 1,
    60: 2,
    61: 3,
    62: 4,
    // 59 ->  1 ... 62 ->  4
    67: 9,
    68: 10,
    // 67 ->  9 ... 68 -> 10
    69: 12,
    70: 13,
    71: 14,
    // 69 -> 12 ... 71 -> 14
    72: 14,
    73: 15,
    74: 16,
    75: 17,
    // 72 -> 14 ... 75 -> 17
    76: 20,
    77: 21,
    78: 22,
    // 76 -> 20 ... 78 -> 22
    79: 45,
    80: 46,
    81: 47,
    // 79 -> 45 ... 81 -> 47
    82: 0
    // 82 ->  0 ... 65536 -> 0 (omitted)
  };
  var SSF_default_str = {
    //  5 -- Currency,   0 decimal, black negative
    5: '"$"#,##0_);\\("$"#,##0\\)',
    63: '"$"#,##0_);\\("$"#,##0\\)',
    //  6 -- Currency,   0 decimal, red   negative
    6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
    64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
    //  7 -- Currency,   2 decimal, black negative
    7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
    65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
    //  8 -- Currency,   2 decimal, red   negative
    8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    // 41 -- Accounting, 0 decimal, No Symbol
    41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
    // 42 -- Accounting, 0 decimal, $  Symbol
    42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
    // 43 -- Accounting, 2 decimal, No Symbol
    43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
    // 44 -- Accounting, 2 decimal, $  Symbol
    44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
  };
  function SSF_frac(x, D2, mixed) {
    var sgn = x < 0 ? -1 : 1;
    var B2 = x * sgn;
    var P_2 = 0, P_1 = 1, P2 = 0;
    var Q_2 = 1, Q_1 = 0, Q2 = 0;
    var A2 = Math.floor(B2);
    while (Q_1 < D2) {
      A2 = Math.floor(B2);
      P2 = A2 * P_1 + P_2;
      Q2 = A2 * Q_1 + Q_2;
      if (B2 - A2 < 5e-8)
        break;
      B2 = 1 / (B2 - A2);
      P_2 = P_1;
      P_1 = P2;
      Q_2 = Q_1;
      Q_1 = Q2;
    }
    if (Q2 > D2) {
      if (Q_1 > D2) {
        Q2 = Q_2;
        P2 = P_2;
      } else {
        Q2 = Q_1;
        P2 = P_1;
      }
    }
    if (!mixed)
      return [0, sgn * P2, Q2];
    var q2 = Math.floor(sgn * P2 / Q2);
    return [q2, sgn * P2 - q2 * Q2, Q2];
  }
  function SSF_parse_date_code(v2, opts, b2) {
    if (v2 > 2958465 || v2 < 0)
      return null;
    var date3 = v2 | 0, time = Math.floor(86400 * (v2 - date3)), dow = 0;
    var dout = [];
    var out = { D: date3, T: time, u: 86400 * (v2 - date3) - time, y: 0, m: 0, d: 0, H: 0, M: 0, S: 0, q: 0 };
    if (Math.abs(out.u) < 1e-6)
      out.u = 0;
    if (opts && opts.date1904)
      date3 += 1462;
    if (out.u > 0.9999) {
      out.u = 0;
      if (++time == 86400) {
        out.T = time = 0;
        ++date3;
        ++out.D;
      }
    }
    if (date3 === 60) {
      dout = b2 ? [1317, 10, 29] : [1900, 2, 29];
      dow = 3;
    } else if (date3 === 0) {
      dout = b2 ? [1317, 8, 29] : [1900, 1, 0];
      dow = 6;
    } else {
      if (date3 > 60)
        --date3;
      var d2 = new Date(1900, 0, 1);
      d2.setDate(d2.getDate() + date3 - 1);
      dout = [d2.getFullYear(), d2.getMonth() + 1, d2.getDate()];
      dow = d2.getDay();
      if (date3 < 60)
        dow = (dow + 6) % 7;
      if (b2)
        dow = SSF_fix_hijri(d2, dout);
    }
    out.y = dout[0];
    out.m = dout[1];
    out.d = dout[2];
    out.S = time % 60;
    time = Math.floor(time / 60);
    out.M = time % 60;
    time = Math.floor(time / 60);
    out.H = time;
    out.q = dow;
    return out;
  }
  var SSFbasedate = /* @__PURE__ */ new Date(1899, 11, 31, 0, 0, 0);
  var SSFdnthresh = /* @__PURE__ */ SSFbasedate.getTime();
  var SSFbase1904 = /* @__PURE__ */ new Date(1900, 2, 1, 0, 0, 0);
  function datenum_local(v2, date1904) {
    var epoch = /* @__PURE__ */ v2.getTime();
    if (date1904)
      epoch -= 1461 * 24 * 60 * 60 * 1e3;
    else if (v2 >= SSFbase1904)
      epoch += 24 * 60 * 60 * 1e3;
    return (epoch - (SSFdnthresh + (/* @__PURE__ */ v2.getTimezoneOffset() - /* @__PURE__ */ SSFbasedate.getTimezoneOffset()) * 6e4)) / (24 * 60 * 60 * 1e3);
  }
  function SSF_strip_decimal(o2) {
    return o2.indexOf(".") == -1 ? o2 : o2.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
  }
  function SSF_normalize_exp(o2) {
    if (o2.indexOf("E") == -1)
      return o2;
    return o2.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
  }
  function SSF_small_exp(v2) {
    var w2 = v2 < 0 ? 12 : 11;
    var o2 = SSF_strip_decimal(v2.toFixed(12));
    if (o2.length <= w2)
      return o2;
    o2 = v2.toPrecision(10);
    if (o2.length <= w2)
      return o2;
    return v2.toExponential(5);
  }
  function SSF_large_exp(v2) {
    var o2 = SSF_strip_decimal(v2.toFixed(11));
    return o2.length > (v2 < 0 ? 12 : 11) || o2 === "0" || o2 === "-0" ? v2.toPrecision(6) : o2;
  }
  function SSF_general_num(v2) {
    var V2 = Math.floor(Math.log(Math.abs(v2)) * Math.LOG10E), o2;
    if (V2 >= -4 && V2 <= -1)
      o2 = v2.toPrecision(10 + V2);
    else if (Math.abs(V2) <= 9)
      o2 = SSF_small_exp(v2);
    else if (V2 === 10)
      o2 = v2.toFixed(10).substr(0, 12);
    else
      o2 = SSF_large_exp(v2);
    return SSF_strip_decimal(SSF_normalize_exp(o2.toUpperCase()));
  }
  function SSF_general(v2, opts) {
    switch (typeof v2) {
      case "string":
        return v2;
      case "boolean":
        return v2 ? "TRUE" : "FALSE";
      case "number":
        return (v2 | 0) === v2 ? v2.toString(10) : SSF_general_num(v2);
      case "undefined":
        return "";
      case "object":
        if (v2 == null)
          return "";
        if (v2 instanceof Date)
          return SSF_format(14, datenum_local(v2, opts && opts.date1904), opts);
    }
    throw new Error("unsupported value in General format: " + v2);
  }
  function SSF_fix_hijri(date3, o2) {
    o2[0] -= 581;
    var dow = date3.getDay();
    if (date3 < 60)
      dow = (dow + 6) % 7;
    return dow;
  }
  function SSF_write_date(type2, fmt, val, ss0) {
    var o2 = "", ss2 = 0, tt2 = 0, y2 = val.y, out, outl = 0;
    switch (type2) {
      case 98:
        y2 = val.y + 543;
      case 121:
        switch (fmt.length) {
          case 1:
          case 2:
            out = y2 % 100;
            outl = 2;
            break;
          default:
            out = y2 % 1e4;
            outl = 4;
            break;
        }
        break;
      case 109:
        switch (fmt.length) {
          case 1:
          case 2:
            out = val.m;
            outl = fmt.length;
            break;
          case 3:
            return months[val.m - 1][1];
          case 5:
            return months[val.m - 1][0];
          default:
            return months[val.m - 1][2];
        }
        break;
      case 100:
        switch (fmt.length) {
          case 1:
          case 2:
            out = val.d;
            outl = fmt.length;
            break;
          case 3:
            return days[val.q][0];
          default:
            return days[val.q][1];
        }
        break;
      case 104:
        switch (fmt.length) {
          case 1:
          case 2:
            out = 1 + (val.H + 11) % 12;
            outl = fmt.length;
            break;
          default:
            throw "bad hour format: " + fmt;
        }
        break;
      case 72:
        switch (fmt.length) {
          case 1:
          case 2:
            out = val.H;
            outl = fmt.length;
            break;
          default:
            throw "bad hour format: " + fmt;
        }
        break;
      case 77:
        switch (fmt.length) {
          case 1:
          case 2:
            out = val.M;
            outl = fmt.length;
            break;
          default:
            throw "bad minute format: " + fmt;
        }
        break;
      case 115:
        if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000")
          throw "bad second format: " + fmt;
        if (val.u === 0 && (fmt == "s" || fmt == "ss"))
          return pad0(val.S, fmt.length);
        if (ss0 >= 2)
          tt2 = ss0 === 3 ? 1e3 : 100;
        else
          tt2 = ss0 === 1 ? 10 : 1;
        ss2 = Math.round(tt2 * (val.S + val.u));
        if (ss2 >= 60 * tt2)
          ss2 = 0;
        if (fmt === "s")
          return ss2 === 0 ? "0" : "" + ss2 / tt2;
        o2 = pad0(ss2, 2 + ss0);
        if (fmt === "ss")
          return o2.substr(0, 2);
        return "." + o2.substr(2, fmt.length - 1);
      case 90:
        switch (fmt) {
          case "[h]":
          case "[hh]":
            out = val.D * 24 + val.H;
            break;
          case "[m]":
          case "[mm]":
            out = (val.D * 24 + val.H) * 60 + val.M;
            break;
          case "[s]":
          case "[ss]":
            out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
            break;
          default:
            throw "bad abstime format: " + fmt;
        }
        outl = fmt.length === 3 ? 1 : 2;
        break;
      case 101:
        out = y2;
        outl = 1;
        break;
    }
    var outstr = outl > 0 ? pad0(out, outl) : "";
    return outstr;
  }
  function commaify(s2) {
    var w2 = 3;
    if (s2.length <= w2)
      return s2;
    var j2 = s2.length % w2, o2 = s2.substr(0, j2);
    for (; j2 != s2.length; j2 += w2)
      o2 += (o2.length > 0 ? "," : "") + s2.substr(j2, w2);
    return o2;
  }
  var pct1 = /%/g;
  function write_num_pct(type2, fmt, val) {
    var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
    return write_num(type2, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
  }
  function write_num_cm(type2, fmt, val) {
    var idx = fmt.length - 1;
    while (fmt.charCodeAt(idx - 1) === 44)
      --idx;
    return write_num(type2, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
  }
  function write_num_exp(fmt, val) {
    var o2;
    var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    if (fmt.match(/^#+0.0E\+0$/)) {
      if (val == 0)
        return "0.0E+0";
      else if (val < 0)
        return "-" + write_num_exp(fmt, -val);
      var period = fmt.indexOf(".");
      if (period === -1)
        period = fmt.indexOf("E");
      var ee2 = Math.floor(Math.log(val) * Math.LOG10E) % period;
      if (ee2 < 0)
        ee2 += period;
      o2 = (val / Math.pow(10, ee2)).toPrecision(idx + 1 + (period + ee2) % period);
      if (o2.indexOf("e") === -1) {
        var fakee = Math.floor(Math.log(val) * Math.LOG10E);
        if (o2.indexOf(".") === -1)
          o2 = o2.charAt(0) + "." + o2.substr(1) + "E+" + (fakee - o2.length + ee2);
        else
          o2 += "E+" + (fakee - ee2);
        while (o2.substr(0, 2) === "0.") {
          o2 = o2.charAt(0) + o2.substr(2, period) + "." + o2.substr(2 + period);
          o2 = o2.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
        }
        o2 = o2.replace(/\+-/, "-");
      }
      o2 = o2.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
        return $1 + $2 + $3.substr(0, (period + ee2) % period) + "." + $3.substr(ee2) + "E";
      });
    } else
      o2 = val.toExponential(idx);
    if (fmt.match(/E\+00$/) && o2.match(/e[+-]\d$/))
      o2 = o2.substr(0, o2.length - 1) + "0" + o2.charAt(o2.length - 1);
    if (fmt.match(/E\-/) && o2.match(/e\+/))
      o2 = o2.replace(/e\+/, "e");
    return o2.replace("e", "E");
  }
  var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
  function write_num_f1(r2, aval, sign) {
    var den = parseInt(r2[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
    var myn = rr - base * den, myd = den;
    return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r2[1].length + 1 + r2[4].length) : pad_(myn, r2[1].length) + r2[2] + "/" + r2[3] + pad0(myd, r2[4].length));
  }
  function write_num_f2(r2, aval, sign) {
    return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r2[1].length + 2 + r2[4].length);
  }
  var dec1 = /^#*0*\.([0#]+)/;
  var closeparen = /\).*[0#]/;
  var phone = /\(###\) ###\\?-####/;
  function hashq(str) {
    var o2 = "", cc;
    for (var i2 = 0; i2 != str.length; ++i2)
      switch (cc = str.charCodeAt(i2)) {
        case 35:
          break;
        case 63:
          o2 += " ";
          break;
        case 48:
          o2 += "0";
          break;
        default:
          o2 += String.fromCharCode(cc);
      }
    return o2;
  }
  function rnd(val, d2) {
    var dd = Math.pow(10, d2);
    return "" + Math.round(val * dd) / dd;
  }
  function dec(val, d2) {
    var _frac = val - Math.floor(val), dd = Math.pow(10, d2);
    if (d2 < ("" + Math.round(_frac * dd)).length)
      return 0;
    return Math.round(_frac * dd);
  }
  function carry(val, d2) {
    if (d2 < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d2))).length) {
      return 1;
    }
    return 0;
  }
  function flr(val) {
    if (val < 2147483647 && val > -2147483648)
      return "" + (val >= 0 ? val | 0 : val - 1 | 0);
    return "" + Math.floor(val);
  }
  function write_num_flt(type2, fmt, val) {
    if (type2.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
      var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
      if (val >= 0)
        return write_num_flt("n", ffmt, val);
      return "(" + write_num_flt("n", ffmt, -val) + ")";
    }
    if (fmt.charCodeAt(fmt.length - 1) === 44)
      return write_num_cm(type2, fmt, val);
    if (fmt.indexOf("%") !== -1)
      return write_num_pct(type2, fmt, val);
    if (fmt.indexOf("E") !== -1)
      return write_num_exp(fmt, val);
    if (fmt.charCodeAt(0) === 36)
      return "$" + write_num_flt(type2, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
    var o2;
    var r2, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    if (fmt.match(/^00+$/))
      return sign + pad0r(aval, fmt.length);
    if (fmt.match(/^[#?]+$/)) {
      o2 = pad0r(val, 0);
      if (o2 === "0")
        o2 = "";
      return o2.length > fmt.length ? o2 : hashq(fmt.substr(0, fmt.length - o2.length)) + o2;
    }
    if (r2 = fmt.match(frac1))
      return write_num_f1(r2, aval, sign);
    if (fmt.match(/^#+0+$/))
      return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
    if (r2 = fmt.match(dec1)) {
      o2 = rnd(val, r2[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r2[1])).replace(/\.$/, "." + hashq(r2[1])).replace(/\.(\d*)$/, function($$, $1) {
        return "." + $1 + fill("0", hashq(
          /*::(*/
          r2[1]
        ).length - $1.length);
      });
      return fmt.indexOf("0.") !== -1 ? o2 : o2.replace(/^0\./, ".");
    }
    fmt = fmt.replace(/^#+([0.])/, "$1");
    if (r2 = fmt.match(/^(0*)\.(#*)$/)) {
      return sign + rnd(aval, r2[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r2[1].length ? "0." : ".");
    }
    if (r2 = fmt.match(/^#{1,3},##0(\.?)$/))
      return sign + commaify(pad0r(aval, 0));
    if (r2 = fmt.match(/^#,##0\.([#0]*0)$/)) {
      return val < 0 ? "-" + write_num_flt(type2, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r2[1].length))) + "." + pad0(dec(val, r2[1].length), r2[1].length);
    }
    if (r2 = fmt.match(/^#,#*,#0/))
      return write_num_flt(type2, fmt.replace(/^#,#*,/, ""), val);
    if (r2 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
      o2 = _strrev(write_num_flt(type2, fmt.replace(/[\\-]/g, ""), val));
      ri = 0;
      return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
        return ri < o2.length ? o2.charAt(ri++) : x2 === "0" ? "0" : "";
      }));
    }
    if (fmt.match(phone)) {
      o2 = write_num_flt(type2, "##########", val);
      return "(" + o2.substr(0, 3) + ") " + o2.substr(3, 3) + "-" + o2.substr(6);
    }
    var oa = "";
    if (r2 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
      ri = Math.min(
        /*::String(*/
        r2[4].length,
        7
      );
      ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
      o2 = "" + sign;
      oa = write_num(
        "n",
        /*::String(*/
        r2[1],
        ff[1]
      );
      if (oa.charAt(oa.length - 1) == " ")
        oa = oa.substr(0, oa.length - 1) + "0";
      o2 += oa + /*::String(*/
      r2[2] + "/" + /*::String(*/
      r2[3];
      oa = rpad_(ff[2], ri);
      if (oa.length < r2[4].length)
        oa = hashq(r2[4].substr(r2[4].length - oa.length)) + oa;
      o2 += oa;
      return o2;
    }
    if (r2 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
      ri = Math.min(Math.max(r2[1].length, r2[4].length), 7);
      ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
      return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r2[2] + "/" + r2[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r2[2].length + r2[3].length));
    }
    if (r2 = fmt.match(/^[#0?]+$/)) {
      o2 = pad0r(val, 0);
      if (fmt.length <= o2.length)
        return o2;
      return hashq(fmt.substr(0, fmt.length - o2.length)) + o2;
    }
    if (r2 = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
      o2 = "" + val.toFixed(Math.min(r2[2].length, 10)).replace(/([^0])0+$/, "$1");
      ri = o2.indexOf(".");
      var lres = fmt.indexOf(".") - ri, rres = fmt.length - o2.length - lres;
      return hashq(fmt.substr(0, lres) + o2 + fmt.substr(fmt.length - rres));
    }
    if (r2 = fmt.match(/^00,000\.([#0]*0)$/)) {
      ri = dec(val, r2[1].length);
      return val < 0 ? "-" + write_num_flt(type2, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
        return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
      }) + "." + pad0(ri, r2[1].length);
    }
    switch (fmt) {
      case "###,##0.00":
        return write_num_flt(type2, "#,##0.00", val);
      case "###,###":
      case "##,###":
      case "#,###":
        var x = commaify(pad0r(aval, 0));
        return x !== "0" ? sign + x : "";
      case "###,###.00":
        return write_num_flt(type2, "###,##0.00", val).replace(/^0\./, ".");
      case "#,###.00":
        return write_num_flt(type2, "#,##0.00", val).replace(/^0\./, ".");
    }
    throw new Error("unsupported format |" + fmt + "|");
  }
  function write_num_cm2(type2, fmt, val) {
    var idx = fmt.length - 1;
    while (fmt.charCodeAt(idx - 1) === 44)
      --idx;
    return write_num(type2, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
  }
  function write_num_pct2(type2, fmt, val) {
    var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
    return write_num(type2, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
  }
  function write_num_exp2(fmt, val) {
    var o2;
    var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    if (fmt.match(/^#+0.0E\+0$/)) {
      if (val == 0)
        return "0.0E+0";
      else if (val < 0)
        return "-" + write_num_exp2(fmt, -val);
      var period = fmt.indexOf(".");
      if (period === -1)
        period = fmt.indexOf("E");
      var ee2 = Math.floor(Math.log(val) * Math.LOG10E) % period;
      if (ee2 < 0)
        ee2 += period;
      o2 = (val / Math.pow(10, ee2)).toPrecision(idx + 1 + (period + ee2) % period);
      if (!o2.match(/[Ee]/)) {
        var fakee = Math.floor(Math.log(val) * Math.LOG10E);
        if (o2.indexOf(".") === -1)
          o2 = o2.charAt(0) + "." + o2.substr(1) + "E+" + (fakee - o2.length + ee2);
        else
          o2 += "E+" + (fakee - ee2);
        o2 = o2.replace(/\+-/, "-");
      }
      o2 = o2.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
        return $1 + $2 + $3.substr(0, (period + ee2) % period) + "." + $3.substr(ee2) + "E";
      });
    } else
      o2 = val.toExponential(idx);
    if (fmt.match(/E\+00$/) && o2.match(/e[+-]\d$/))
      o2 = o2.substr(0, o2.length - 1) + "0" + o2.charAt(o2.length - 1);
    if (fmt.match(/E\-/) && o2.match(/e\+/))
      o2 = o2.replace(/e\+/, "e");
    return o2.replace("e", "E");
  }
  function write_num_int(type2, fmt, val) {
    if (type2.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
      var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
      if (val >= 0)
        return write_num_int("n", ffmt, val);
      return "(" + write_num_int("n", ffmt, -val) + ")";
    }
    if (fmt.charCodeAt(fmt.length - 1) === 44)
      return write_num_cm2(type2, fmt, val);
    if (fmt.indexOf("%") !== -1)
      return write_num_pct2(type2, fmt, val);
    if (fmt.indexOf("E") !== -1)
      return write_num_exp2(fmt, val);
    if (fmt.charCodeAt(0) === 36)
      return "$" + write_num_int(type2, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
    var o2;
    var r2, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    if (fmt.match(/^00+$/))
      return sign + pad0(aval, fmt.length);
    if (fmt.match(/^[#?]+$/)) {
      o2 = "" + val;
      if (val === 0)
        o2 = "";
      return o2.length > fmt.length ? o2 : hashq(fmt.substr(0, fmt.length - o2.length)) + o2;
    }
    if (r2 = fmt.match(frac1))
      return write_num_f2(r2, aval, sign);
    if (fmt.match(/^#+0+$/))
      return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
    if (r2 = fmt.match(dec1)) {
      o2 = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r2[1])).replace(/\.$/, "." + hashq(r2[1]));
      o2 = o2.replace(/\.(\d*)$/, function($$, $1) {
        return "." + $1 + fill("0", hashq(r2[1]).length - $1.length);
      });
      return fmt.indexOf("0.") !== -1 ? o2 : o2.replace(/^0\./, ".");
    }
    fmt = fmt.replace(/^#+([0.])/, "$1");
    if (r2 = fmt.match(/^(0*)\.(#*)$/)) {
      return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r2[1].length ? "0." : ".");
    }
    if (r2 = fmt.match(/^#{1,3},##0(\.?)$/))
      return sign + commaify("" + aval);
    if (r2 = fmt.match(/^#,##0\.([#0]*0)$/)) {
      return val < 0 ? "-" + write_num_int(type2, fmt, -val) : commaify("" + val) + "." + fill("0", r2[1].length);
    }
    if (r2 = fmt.match(/^#,#*,#0/))
      return write_num_int(type2, fmt.replace(/^#,#*,/, ""), val);
    if (r2 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
      o2 = _strrev(write_num_int(type2, fmt.replace(/[\\-]/g, ""), val));
      ri = 0;
      return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
        return ri < o2.length ? o2.charAt(ri++) : x2 === "0" ? "0" : "";
      }));
    }
    if (fmt.match(phone)) {
      o2 = write_num_int(type2, "##########", val);
      return "(" + o2.substr(0, 3) + ") " + o2.substr(3, 3) + "-" + o2.substr(6);
    }
    var oa = "";
    if (r2 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
      ri = Math.min(
        /*::String(*/
        r2[4].length,
        7
      );
      ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
      o2 = "" + sign;
      oa = write_num(
        "n",
        /*::String(*/
        r2[1],
        ff[1]
      );
      if (oa.charAt(oa.length - 1) == " ")
        oa = oa.substr(0, oa.length - 1) + "0";
      o2 += oa + /*::String(*/
      r2[2] + "/" + /*::String(*/
      r2[3];
      oa = rpad_(ff[2], ri);
      if (oa.length < r2[4].length)
        oa = hashq(r2[4].substr(r2[4].length - oa.length)) + oa;
      o2 += oa;
      return o2;
    }
    if (r2 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
      ri = Math.min(Math.max(r2[1].length, r2[4].length), 7);
      ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
      return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r2[2] + "/" + r2[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r2[2].length + r2[3].length));
    }
    if (r2 = fmt.match(/^[#0?]+$/)) {
      o2 = "" + val;
      if (fmt.length <= o2.length)
        return o2;
      return hashq(fmt.substr(0, fmt.length - o2.length)) + o2;
    }
    if (r2 = fmt.match(/^([#0]+)\.([#0]+)$/)) {
      o2 = "" + val.toFixed(Math.min(r2[2].length, 10)).replace(/([^0])0+$/, "$1");
      ri = o2.indexOf(".");
      var lres = fmt.indexOf(".") - ri, rres = fmt.length - o2.length - lres;
      return hashq(fmt.substr(0, lres) + o2 + fmt.substr(fmt.length - rres));
    }
    if (r2 = fmt.match(/^00,000\.([#0]*0)$/)) {
      return val < 0 ? "-" + write_num_int(type2, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
        return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
      }) + "." + pad0(0, r2[1].length);
    }
    switch (fmt) {
      case "###,###":
      case "##,###":
      case "#,###":
        var x = commaify("" + aval);
        return x !== "0" ? sign + x : "";
      default:
        if (fmt.match(/\.[0#?]*$/))
          return write_num_int(type2, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
    }
    throw new Error("unsupported format |" + fmt + "|");
  }
  function write_num(type2, fmt, val) {
    return (val | 0) === val ? write_num_int(type2, fmt, val) : write_num_flt(type2, fmt, val);
  }
  function SSF_split_fmt(fmt) {
    var out = [];
    var in_str = false;
    for (var i2 = 0, j2 = 0; i2 < fmt.length; ++i2)
      switch (
        /*cc=*/
        fmt.charCodeAt(i2)
      ) {
        case 34:
          in_str = !in_str;
          break;
        case 95:
        case 42:
        case 92:
          ++i2;
          break;
        case 59:
          out[out.length] = fmt.substr(j2, i2 - j2);
          j2 = i2 + 1;
      }
    out[out.length] = fmt.substr(j2);
    if (in_str === true)
      throw new Error("Format |" + fmt + "| unterminated string ");
    return out;
  }
  var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
  function fmt_is_date(fmt) {
    var i2 = 0, c2 = "", o2 = "";
    while (i2 < fmt.length) {
      switch (c2 = fmt.charAt(i2)) {
        case "G":
          if (SSF_isgeneral(fmt, i2))
            i2 += 6;
          i2++;
          break;
        case '"':
          for (
            ;
            /*cc=*/
            fmt.charCodeAt(++i2) !== 34 && i2 < fmt.length;
          ) {
          }
          ++i2;
          break;
        case "\\":
          i2 += 2;
          break;
        case "_":
          i2 += 2;
          break;
        case "@":
          ++i2;
          break;
        case "B":
        case "b":
          if (fmt.charAt(i2 + 1) === "1" || fmt.charAt(i2 + 1) === "2")
            return true;
        case "M":
        case "D":
        case "Y":
        case "H":
        case "S":
        case "E":
        case "m":
        case "d":
        case "y":
        case "h":
        case "s":
        case "e":
        case "g":
          return true;
        case "A":
        case "a":
        case "上":
          if (fmt.substr(i2, 3).toUpperCase() === "A/P")
            return true;
          if (fmt.substr(i2, 5).toUpperCase() === "AM/PM")
            return true;
          if (fmt.substr(i2, 5).toUpperCase() === "上午/下午")
            return true;
          ++i2;
          break;
        case "[":
          o2 = c2;
          while (fmt.charAt(i2++) !== "]" && i2 < fmt.length)
            o2 += fmt.charAt(i2);
          if (o2.match(SSF_abstime))
            return true;
          break;
        case ".":
        case "0":
        case "#":
          while (i2 < fmt.length && ("0#?.,E+-%".indexOf(c2 = fmt.charAt(++i2)) > -1 || c2 == "\\" && fmt.charAt(i2 + 1) == "-" && "0#".indexOf(fmt.charAt(i2 + 2)) > -1)) {
          }
          break;
        case "?":
          while (fmt.charAt(++i2) === c2) {
          }
          break;
        case "*":
          ++i2;
          if (fmt.charAt(i2) == " " || fmt.charAt(i2) == "*")
            ++i2;
          break;
        case "(":
        case ")":
          ++i2;
          break;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          while (i2 < fmt.length && "0123456789".indexOf(fmt.charAt(++i2)) > -1) {
          }
          break;
        case " ":
          ++i2;
          break;
        default:
          ++i2;
          break;
      }
    }
    return false;
  }
  function eval_fmt(fmt, v2, opts, flen) {
    var out = [], o2 = "", i2 = 0, c2 = "", lst = "t", dt2, j2, cc;
    var hr = "H";
    while (i2 < fmt.length) {
      switch (c2 = fmt.charAt(i2)) {
        case "G":
          if (!SSF_isgeneral(fmt, i2))
            throw new Error("unrecognized character " + c2 + " in " + fmt);
          out[out.length] = { t: "G", v: "General" };
          i2 += 7;
          break;
        case '"':
          for (o2 = ""; (cc = fmt.charCodeAt(++i2)) !== 34 && i2 < fmt.length; )
            o2 += String.fromCharCode(cc);
          out[out.length] = { t: "t", v: o2 };
          ++i2;
          break;
        case "\\":
          var w2 = fmt.charAt(++i2), t2 = w2 === "(" || w2 === ")" ? w2 : "t";
          out[out.length] = { t: t2, v: w2 };
          ++i2;
          break;
        case "_":
          out[out.length] = { t: "t", v: " " };
          i2 += 2;
          break;
        case "@":
          out[out.length] = { t: "T", v: v2 };
          ++i2;
          break;
        case "B":
        case "b":
          if (fmt.charAt(i2 + 1) === "1" || fmt.charAt(i2 + 1) === "2") {
            if (dt2 == null) {
              dt2 = SSF_parse_date_code(v2, opts, fmt.charAt(i2 + 1) === "2");
              if (dt2 == null)
                return "";
            }
            out[out.length] = { t: "X", v: fmt.substr(i2, 2) };
            lst = c2;
            i2 += 2;
            break;
          }
        case "M":
        case "D":
        case "Y":
        case "H":
        case "S":
        case "E":
          c2 = c2.toLowerCase();
        case "m":
        case "d":
        case "y":
        case "h":
        case "s":
        case "e":
        case "g":
          if (v2 < 0)
            return "";
          if (dt2 == null) {
            dt2 = SSF_parse_date_code(v2, opts);
            if (dt2 == null)
              return "";
          }
          o2 = c2;
          while (++i2 < fmt.length && fmt.charAt(i2).toLowerCase() === c2)
            o2 += c2;
          if (c2 === "m" && lst.toLowerCase() === "h")
            c2 = "M";
          if (c2 === "h")
            c2 = hr;
          out[out.length] = { t: c2, v: o2 };
          lst = c2;
          break;
        case "A":
        case "a":
        case "上":
          var q2 = { t: c2, v: c2 };
          if (dt2 == null)
            dt2 = SSF_parse_date_code(v2, opts);
          if (fmt.substr(i2, 3).toUpperCase() === "A/P") {
            if (dt2 != null)
              q2.v = dt2.H >= 12 ? "P" : "A";
            q2.t = "T";
            hr = "h";
            i2 += 3;
          } else if (fmt.substr(i2, 5).toUpperCase() === "AM/PM") {
            if (dt2 != null)
              q2.v = dt2.H >= 12 ? "PM" : "AM";
            q2.t = "T";
            i2 += 5;
            hr = "h";
          } else if (fmt.substr(i2, 5).toUpperCase() === "上午/下午") {
            if (dt2 != null)
              q2.v = dt2.H >= 12 ? "下午" : "上午";
            q2.t = "T";
            i2 += 5;
            hr = "h";
          } else {
            q2.t = "t";
            ++i2;
          }
          if (dt2 == null && q2.t === "T")
            return "";
          out[out.length] = q2;
          lst = c2;
          break;
        case "[":
          o2 = c2;
          while (fmt.charAt(i2++) !== "]" && i2 < fmt.length)
            o2 += fmt.charAt(i2);
          if (o2.slice(-1) !== "]")
            throw 'unterminated "[" block: |' + o2 + "|";
          if (o2.match(SSF_abstime)) {
            if (dt2 == null) {
              dt2 = SSF_parse_date_code(v2, opts);
              if (dt2 == null)
                return "";
            }
            out[out.length] = { t: "Z", v: o2.toLowerCase() };
            lst = o2.charAt(1);
          } else if (o2.indexOf("$") > -1) {
            o2 = (o2.match(/\$([^-\[\]]*)/) || [])[1] || "$";
            if (!fmt_is_date(fmt))
              out[out.length] = { t: "t", v: o2 };
          }
          break;
        case ".":
          if (dt2 != null) {
            o2 = c2;
            while (++i2 < fmt.length && (c2 = fmt.charAt(i2)) === "0")
              o2 += c2;
            out[out.length] = { t: "s", v: o2 };
            break;
          }
        case "0":
        case "#":
          o2 = c2;
          while (++i2 < fmt.length && "0#?.,E+-%".indexOf(c2 = fmt.charAt(i2)) > -1)
            o2 += c2;
          out[out.length] = { t: "n", v: o2 };
          break;
        case "?":
          o2 = c2;
          while (fmt.charAt(++i2) === c2)
            o2 += c2;
          out[out.length] = { t: c2, v: o2 };
          lst = c2;
          break;
        case "*":
          ++i2;
          if (fmt.charAt(i2) == " " || fmt.charAt(i2) == "*")
            ++i2;
          break;
        case "(":
        case ")":
          out[out.length] = { t: flen === 1 ? "t" : c2, v: c2 };
          ++i2;
          break;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          o2 = c2;
          while (i2 < fmt.length && "0123456789".indexOf(fmt.charAt(++i2)) > -1)
            o2 += fmt.charAt(i2);
          out[out.length] = { t: "D", v: o2 };
          break;
        case " ":
          out[out.length] = { t: c2, v: c2 };
          ++i2;
          break;
        case "$":
          out[out.length] = { t: "t", v: "$" };
          ++i2;
          break;
        default:
          if (",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c2) === -1)
            throw new Error("unrecognized character " + c2 + " in " + fmt);
          out[out.length] = { t: "t", v: c2 };
          ++i2;
          break;
      }
    }
    var bt2 = 0, ss0 = 0, ssm;
    for (i2 = out.length - 1, lst = "t"; i2 >= 0; --i2) {
      switch (out[i2].t) {
        case "h":
        case "H":
          out[i2].t = hr;
          lst = "h";
          if (bt2 < 1)
            bt2 = 1;
          break;
        case "s":
          if (ssm = out[i2].v.match(/\.0+$/))
            ss0 = Math.max(ss0, ssm[0].length - 1);
          if (bt2 < 3)
            bt2 = 3;
        case "d":
        case "y":
        case "M":
        case "e":
          lst = out[i2].t;
          break;
        case "m":
          if (lst === "s") {
            out[i2].t = "M";
            if (bt2 < 2)
              bt2 = 2;
          }
          break;
        case "X":
          break;
        case "Z":
          if (bt2 < 1 && out[i2].v.match(/[Hh]/))
            bt2 = 1;
          if (bt2 < 2 && out[i2].v.match(/[Mm]/))
            bt2 = 2;
          if (bt2 < 3 && out[i2].v.match(/[Ss]/))
            bt2 = 3;
      }
    }
    switch (bt2) {
      case 0:
        break;
      case 1:
        if (dt2.u >= 0.5) {
          dt2.u = 0;
          ++dt2.S;
        }
        if (dt2.S >= 60) {
          dt2.S = 0;
          ++dt2.M;
        }
        if (dt2.M >= 60) {
          dt2.M = 0;
          ++dt2.H;
        }
        break;
      case 2:
        if (dt2.u >= 0.5) {
          dt2.u = 0;
          ++dt2.S;
        }
        if (dt2.S >= 60) {
          dt2.S = 0;
          ++dt2.M;
        }
        break;
    }
    var nstr = "", jj;
    for (i2 = 0; i2 < out.length; ++i2) {
      switch (out[i2].t) {
        case "t":
        case "T":
        case " ":
        case "D":
          break;
        case "X":
          out[i2].v = "";
          out[i2].t = ";";
          break;
        case "d":
        case "m":
        case "y":
        case "h":
        case "H":
        case "M":
        case "s":
        case "e":
        case "b":
        case "Z":
          out[i2].v = SSF_write_date(out[i2].t.charCodeAt(0), out[i2].v, dt2, ss0);
          out[i2].t = "t";
          break;
        case "n":
        case "?":
          jj = i2 + 1;
          while (out[jj] != null && ((c2 = out[jj].t) === "?" || c2 === "D" || (c2 === " " || c2 === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i2].t === "(" && (c2 === " " || c2 === "n" || c2 === ")") || c2 === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) {
            out[i2].v += out[jj].v;
            out[jj] = { v: "", t: ";" };
            ++jj;
          }
          nstr += out[i2].v;
          i2 = jj - 1;
          break;
        case "G":
          out[i2].t = "t";
          out[i2].v = SSF_general(v2, opts);
          break;
      }
    }
    var vv = "", myv, ostr;
    if (nstr.length > 0) {
      if (nstr.charCodeAt(0) == 40) {
        myv = v2 < 0 && nstr.charCodeAt(0) === 45 ? -v2 : v2;
        ostr = write_num("n", nstr, myv);
      } else {
        myv = v2 < 0 && flen > 1 ? -v2 : v2;
        ostr = write_num("n", nstr, myv);
        if (myv < 0 && out[0] && out[0].t == "t") {
          ostr = ostr.substr(1);
          out[0].v = "-" + out[0].v;
        }
      }
      jj = ostr.length - 1;
      var decpt = out.length;
      for (i2 = 0; i2 < out.length; ++i2)
        if (out[i2] != null && out[i2].t != "t" && out[i2].v.indexOf(".") > -1) {
          decpt = i2;
          break;
        }
      var lasti = out.length;
      if (decpt === out.length && ostr.indexOf("E") === -1) {
        for (i2 = out.length - 1; i2 >= 0; --i2) {
          if (out[i2] == null || "n?".indexOf(out[i2].t) === -1)
            continue;
          if (jj >= out[i2].v.length - 1) {
            jj -= out[i2].v.length;
            out[i2].v = ostr.substr(jj + 1, out[i2].v.length);
          } else if (jj < 0)
            out[i2].v = "";
          else {
            out[i2].v = ostr.substr(0, jj + 1);
            jj = -1;
          }
          out[i2].t = "t";
          lasti = i2;
        }
        if (jj >= 0 && lasti < out.length)
          out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
      } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
        jj = ostr.indexOf(".") - 1;
        for (i2 = decpt; i2 >= 0; --i2) {
          if (out[i2] == null || "n?".indexOf(out[i2].t) === -1)
            continue;
          j2 = out[i2].v.indexOf(".") > -1 && i2 === decpt ? out[i2].v.indexOf(".") - 1 : out[i2].v.length - 1;
          vv = out[i2].v.substr(j2 + 1);
          for (; j2 >= 0; --j2) {
            if (jj >= 0 && (out[i2].v.charAt(j2) === "0" || out[i2].v.charAt(j2) === "#"))
              vv = ostr.charAt(jj--) + vv;
          }
          out[i2].v = vv;
          out[i2].t = "t";
          lasti = i2;
        }
        if (jj >= 0 && lasti < out.length)
          out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
        jj = ostr.indexOf(".") + 1;
        for (i2 = decpt; i2 < out.length; ++i2) {
          if (out[i2] == null || "n?(".indexOf(out[i2].t) === -1 && i2 !== decpt)
            continue;
          j2 = out[i2].v.indexOf(".") > -1 && i2 === decpt ? out[i2].v.indexOf(".") + 1 : 0;
          vv = out[i2].v.substr(0, j2);
          for (; j2 < out[i2].v.length; ++j2) {
            if (jj < ostr.length)
              vv += ostr.charAt(jj++);
          }
          out[i2].v = vv;
          out[i2].t = "t";
          lasti = i2;
        }
      }
    }
    for (i2 = 0; i2 < out.length; ++i2)
      if (out[i2] != null && "n?".indexOf(out[i2].t) > -1) {
        myv = flen > 1 && v2 < 0 && i2 > 0 && out[i2 - 1].v === "-" ? -v2 : v2;
        out[i2].v = write_num(out[i2].t, out[i2].v, myv);
        out[i2].t = "t";
      }
    var retval = "";
    for (i2 = 0; i2 !== out.length; ++i2)
      if (out[i2] != null)
        retval += out[i2].v;
    return retval;
  }
  var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
  function chkcond(v2, rr) {
    if (rr == null)
      return false;
    var thresh = parseFloat(rr[2]);
    switch (rr[1]) {
      case "=":
        if (v2 == thresh)
          return true;
        break;
      case ">":
        if (v2 > thresh)
          return true;
        break;
      case "<":
        if (v2 < thresh)
          return true;
        break;
      case "<>":
        if (v2 != thresh)
          return true;
        break;
      case ">=":
        if (v2 >= thresh)
          return true;
        break;
      case "<=":
        if (v2 <= thresh)
          return true;
        break;
    }
    return false;
  }
  function choose_fmt(f2, v2) {
    var fmt = SSF_split_fmt(f2);
    var l2 = fmt.length, lat = fmt[l2 - 1].indexOf("@");
    if (l2 < 4 && lat > -1)
      --l2;
    if (fmt.length > 4)
      throw new Error("cannot find right format for |" + fmt.join("|") + "|");
    if (typeof v2 !== "number")
      return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];
    switch (fmt.length) {
      case 1:
        fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
        break;
      case 2:
        fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
        break;
      case 3:
        fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
        break;
    }
    var ff = v2 > 0 ? fmt[0] : v2 < 0 ? fmt[1] : fmt[2];
    if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1)
      return [l2, ff];
    if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
      var m1 = fmt[0].match(cfregex2);
      var m2 = fmt[1].match(cfregex2);
      return chkcond(v2, m1) ? [l2, fmt[0]] : chkcond(v2, m2) ? [l2, fmt[1]] : [l2, fmt[m1 != null && m2 != null ? 2 : 1]];
    }
    return [l2, ff];
  }
  function SSF_format(fmt, v2, o2) {
    if (o2 == null)
      o2 = {};
    var sfmt = "";
    switch (typeof fmt) {
      case "string":
        if (fmt == "m/d/yy" && o2.dateNF)
          sfmt = o2.dateNF;
        else
          sfmt = fmt;
        break;
      case "number":
        if (fmt == 14 && o2.dateNF)
          sfmt = o2.dateNF;
        else
          sfmt = (o2.table != null ? o2.table : table_fmt)[fmt];
        if (sfmt == null)
          sfmt = o2.table && o2.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
        if (sfmt == null)
          sfmt = SSF_default_str[fmt] || "General";
        break;
    }
    if (SSF_isgeneral(sfmt, 0))
      return SSF_general(v2, o2);
    if (v2 instanceof Date)
      v2 = datenum_local(v2, o2.date1904);
    var f2 = choose_fmt(sfmt, v2);
    if (SSF_isgeneral(f2[1]))
      return SSF_general(v2, o2);
    if (v2 === true)
      v2 = "TRUE";
    else if (v2 === false)
      v2 = "FALSE";
    else if (v2 === "" || v2 == null)
      return "";
    return eval_fmt(f2[1], v2, o2, f2[0]);
  }
  function SSF_load(fmt, idx) {
    if (typeof idx != "number") {
      idx = +idx || -1;
      for (var i2 = 0; i2 < 392; ++i2) {
        if (table_fmt[i2] == void 0) {
          if (idx < 0)
            idx = i2;
          continue;
        }
        if (table_fmt[i2] == fmt) {
          idx = i2;
          break;
        }
      }
      if (idx < 0)
        idx = 391;
    }
    table_fmt[idx] = fmt;
    return idx;
  }
  function make_ssf() {
    table_fmt = SSF_init_table();
  }
  var SSFImplicit = {
    "5": '"$"#,##0_);\\("$"#,##0\\)',
    "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "23": "General",
    "24": "General",
    "25": "General",
    "26": "General",
    "27": "m/d/yy",
    "28": "m/d/yy",
    "29": "m/d/yy",
    "30": "m/d/yy",
    "31": "m/d/yy",
    "32": "h:mm:ss",
    "33": "h:mm:ss",
    "34": "h:mm:ss",
    "35": "h:mm:ss",
    "36": "m/d/yy",
    "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
    "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
    "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
    "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
    "50": "m/d/yy",
    "51": "m/d/yy",
    "52": "m/d/yy",
    "53": "m/d/yy",
    "54": "m/d/yy",
    "55": "m/d/yy",
    "56": "m/d/yy",
    "57": "m/d/yy",
    "58": "m/d/yy",
    "59": "0",
    "60": "0.00",
    "61": "#,##0",
    "62": "#,##0.00",
    "63": '"$"#,##0_);\\("$"#,##0\\)',
    "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "67": "0%",
    "68": "0.00%",
    "69": "# ?/?",
    "70": "# ??/??",
    "71": "m/d/yy",
    "72": "m/d/yy",
    "73": "d-mmm-yy",
    "74": "d-mmm",
    "75": "mmm-yy",
    "76": "h:mm",
    "77": "h:mm:ss",
    "78": "m/d/yy h:mm",
    "79": "mm:ss",
    "80": "[h]:mm:ss",
    "81": "mmss.0"
  };
  var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
  function dateNF_regex(dateNF) {
    var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
    fmt = fmt.replace(dateNFregex, "(\\d+)");
    return new RegExp("^" + fmt + "$");
  }
  function dateNF_fix(str, dateNF, match) {
    var Y2 = -1, m2 = -1, d2 = -1, H2 = -1, M2 = -1, S2 = -1;
    (dateNF.match(dateNFregex) || []).forEach(function(n2, i2) {
      var v2 = parseInt(match[i2 + 1], 10);
      switch (n2.toLowerCase().charAt(0)) {
        case "y":
          Y2 = v2;
          break;
        case "d":
          d2 = v2;
          break;
        case "h":
          H2 = v2;
          break;
        case "s":
          S2 = v2;
          break;
        case "m":
          if (H2 >= 0)
            M2 = v2;
          else
            m2 = v2;
          break;
      }
    });
    if (S2 >= 0 && M2 == -1 && m2 >= 0) {
      M2 = m2;
      m2 = -1;
    }
    var datestr = ("" + (Y2 >= 0 ? Y2 : (/* @__PURE__ */ new Date()).getFullYear())).slice(-4) + "-" + ("00" + (m2 >= 1 ? m2 : 1)).slice(-2) + "-" + ("00" + (d2 >= 1 ? d2 : 1)).slice(-2);
    if (datestr.length == 7)
      datestr = "0" + datestr;
    if (datestr.length == 8)
      datestr = "20" + datestr;
    var timestr = ("00" + (H2 >= 0 ? H2 : 0)).slice(-2) + ":" + ("00" + (M2 >= 0 ? M2 : 0)).slice(-2) + ":" + ("00" + (S2 >= 0 ? S2 : 0)).slice(-2);
    if (H2 == -1 && M2 == -1 && S2 == -1)
      return datestr;
    if (Y2 == -1 && m2 == -1 && d2 == -1)
      return timestr;
    return datestr + "T" + timestr;
  }
  var CRC32 = /* @__PURE__ */ function() {
    var CRC322 = {};
    CRC322.version = "1.2.0";
    function signed_crc_table() {
      var c2 = 0, table = new Array(256);
      for (var n2 = 0; n2 != 256; ++n2) {
        c2 = n2;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        c2 = c2 & 1 ? -306674912 ^ c2 >>> 1 : c2 >>> 1;
        table[n2] = c2;
      }
      return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
    }
    var T0 = signed_crc_table();
    function slice_by_16_tables(T10) {
      var c2 = 0, v2 = 0, n2 = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
      for (n2 = 0; n2 != 256; ++n2)
        table[n2] = T10[n2];
      for (n2 = 0; n2 != 256; ++n2) {
        v2 = T10[n2];
        for (c2 = 256 + n2; c2 < 4096; c2 += 256)
          v2 = table[c2] = v2 >>> 8 ^ T10[v2 & 255];
      }
      var out = [];
      for (n2 = 1; n2 != 16; ++n2)
        out[n2 - 1] = typeof Int32Array !== "undefined" ? table.subarray(n2 * 256, n2 * 256 + 256) : table.slice(n2 * 256, n2 * 256 + 256);
      return out;
    }
    var TT = slice_by_16_tables(T0);
    var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
    var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te2 = TT[13], Tf = TT[14];
    function crc32_bstr(bstr, seed) {
      var C2 = seed ^ -1;
      for (var i2 = 0, L2 = bstr.length; i2 < L2; )
        C2 = C2 >>> 8 ^ T0[(C2 ^ bstr.charCodeAt(i2++)) & 255];
      return ~C2;
    }
    function crc32_buf(B2, seed) {
      var C2 = seed ^ -1, L2 = B2.length - 15, i2 = 0;
      for (; i2 < L2; )
        C2 = Tf[B2[i2++] ^ C2 & 255] ^ Te2[B2[i2++] ^ C2 >> 8 & 255] ^ Td[B2[i2++] ^ C2 >> 16 & 255] ^ Tc[B2[i2++] ^ C2 >>> 24] ^ Tb[B2[i2++]] ^ Ta[B2[i2++]] ^ T9[B2[i2++]] ^ T8[B2[i2++]] ^ T7[B2[i2++]] ^ T6[B2[i2++]] ^ T5[B2[i2++]] ^ T4[B2[i2++]] ^ T3[B2[i2++]] ^ T2[B2[i2++]] ^ T1[B2[i2++]] ^ T0[B2[i2++]];
      L2 += 15;
      while (i2 < L2)
        C2 = C2 >>> 8 ^ T0[(C2 ^ B2[i2++]) & 255];
      return ~C2;
    }
    function crc32_str(str, seed) {
      var C2 = seed ^ -1;
      for (var i2 = 0, L2 = str.length, c2 = 0, d2 = 0; i2 < L2; ) {
        c2 = str.charCodeAt(i2++);
        if (c2 < 128) {
          C2 = C2 >>> 8 ^ T0[(C2 ^ c2) & 255];
        } else if (c2 < 2048) {
          C2 = C2 >>> 8 ^ T0[(C2 ^ (192 | c2 >> 6 & 31)) & 255];
          C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c2 & 63)) & 255];
        } else if (c2 >= 55296 && c2 < 57344) {
          c2 = (c2 & 1023) + 64;
          d2 = str.charCodeAt(i2++) & 1023;
          C2 = C2 >>> 8 ^ T0[(C2 ^ (240 | c2 >> 8 & 7)) & 255];
          C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c2 >> 2 & 63)) & 255];
          C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | d2 >> 6 & 15 | (c2 & 3) << 4)) & 255];
          C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | d2 & 63)) & 255];
        } else {
          C2 = C2 >>> 8 ^ T0[(C2 ^ (224 | c2 >> 12 & 15)) & 255];
          C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c2 >> 6 & 63)) & 255];
          C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c2 & 63)) & 255];
        }
      }
      return ~C2;
    }
    CRC322.table = T0;
    CRC322.bstr = crc32_bstr;
    CRC322.buf = crc32_buf;
    CRC322.str = crc32_str;
    return CRC322;
  }();
  var CFB = /* @__PURE__ */ function _CFB() {
    var exports = {};
    exports.version = "1.2.1";
    function namecmp(l2, r2) {
      var L2 = l2.split("/"), R2 = r2.split("/");
      for (var i3 = 0, c2 = 0, Z2 = Math.min(L2.length, R2.length); i3 < Z2; ++i3) {
        if (c2 = L2[i3].length - R2[i3].length)
          return c2;
        if (L2[i3] != R2[i3])
          return L2[i3] < R2[i3] ? -1 : 1;
      }
      return L2.length - R2.length;
    }
    function dirname(p2) {
      if (p2.charAt(p2.length - 1) == "/")
        return p2.slice(0, -1).indexOf("/") === -1 ? p2 : dirname(p2.slice(0, -1));
      var c2 = p2.lastIndexOf("/");
      return c2 === -1 ? p2 : p2.slice(0, c2 + 1);
    }
    function filename(p2) {
      if (p2.charAt(p2.length - 1) == "/")
        return filename(p2.slice(0, -1));
      var c2 = p2.lastIndexOf("/");
      return c2 === -1 ? p2 : p2.slice(c2 + 1);
    }
    function write_dos_date(buf, date3) {
      if (typeof date3 === "string")
        date3 = new Date(date3);
      var hms = date3.getHours();
      hms = hms << 6 | date3.getMinutes();
      hms = hms << 5 | date3.getSeconds() >>> 1;
      buf.write_shift(2, hms);
      var ymd = date3.getFullYear() - 1980;
      ymd = ymd << 4 | date3.getMonth() + 1;
      ymd = ymd << 5 | date3.getDate();
      buf.write_shift(2, ymd);
    }
    function parse_dos_date(buf) {
      var hms = buf.read_shift(2) & 65535;
      var ymd = buf.read_shift(2) & 65535;
      var val = /* @__PURE__ */ new Date();
      var d2 = ymd & 31;
      ymd >>>= 5;
      var m2 = ymd & 15;
      ymd >>>= 4;
      val.setMilliseconds(0);
      val.setFullYear(ymd + 1980);
      val.setMonth(m2 - 1);
      val.setDate(d2);
      var S2 = hms & 31;
      hms >>>= 5;
      var M2 = hms & 63;
      hms >>>= 6;
      val.setHours(hms);
      val.setMinutes(M2);
      val.setSeconds(S2 << 1);
      return val;
    }
    function parse_extra_field(blob) {
      prep_blob(blob, 0);
      var o2 = (
        /*::(*/
        {}
      );
      var flags = 0;
      while (blob.l <= blob.length - 4) {
        var type2 = blob.read_shift(2);
        var sz = blob.read_shift(2), tgt = blob.l + sz;
        var p2 = {};
        switch (type2) {
          case 21589:
            {
              flags = blob.read_shift(1);
              if (flags & 1)
                p2.mtime = blob.read_shift(4);
              if (sz > 5) {
                if (flags & 2)
                  p2.atime = blob.read_shift(4);
                if (flags & 4)
                  p2.ctime = blob.read_shift(4);
              }
              if (p2.mtime)
                p2.mt = new Date(p2.mtime * 1e3);
            }
            break;
        }
        blob.l = tgt;
        o2[type2] = p2;
      }
      return o2;
    }
    var fs2;
    function get_fs() {
      return fs2 || (fs2 = {});
    }
    function parse2(file, options) {
      if (file[0] == 80 && file[1] == 75)
        return parse_zip2(file, options);
      if ((file[0] | 32) == 109 && (file[1] | 32) == 105)
        return parse_mad(file, options);
      if (file.length < 512)
        throw new Error("CFB file size " + file.length + " < 512");
      var mver = 3;
      var ssz = 512;
      var nmfs = 0;
      var difat_sec_cnt = 0;
      var dir_start = 0;
      var minifat_start = 0;
      var difat_start = 0;
      var fat_addrs = [];
      var blob = (
        /*::(*/
        file.slice(0, 512)
      );
      prep_blob(blob, 0);
      var mv = check_get_mver(blob);
      mver = mv[0];
      switch (mver) {
        case 3:
          ssz = 512;
          break;
        case 4:
          ssz = 4096;
          break;
        case 0:
          if (mv[1] == 0)
            return parse_zip2(file, options);
        default:
          throw new Error("Major Version: Expected 3 or 4 saw " + mver);
      }
      if (ssz !== 512) {
        blob = /*::(*/
        file.slice(0, ssz);
        prep_blob(
          blob,
          28
          /* blob.l */
        );
      }
      var header = file.slice(0, ssz);
      check_shifts(blob, mver);
      var dir_cnt = blob.read_shift(4, "i");
      if (mver === 3 && dir_cnt !== 0)
        throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
      blob.l += 4;
      dir_start = blob.read_shift(4, "i");
      blob.l += 4;
      blob.chk("00100000", "Mini Stream Cutoff Size: ");
      minifat_start = blob.read_shift(4, "i");
      nmfs = blob.read_shift(4, "i");
      difat_start = blob.read_shift(4, "i");
      difat_sec_cnt = blob.read_shift(4, "i");
      for (var q3 = -1, j2 = 0; j2 < 109; ++j2) {
        q3 = blob.read_shift(4, "i");
        if (q3 < 0)
          break;
        fat_addrs[j2] = q3;
      }
      var sectors = sectorify(file, ssz);
      sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
      var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
      sector_list[dir_start].name = "!Directory";
      if (nmfs > 0 && minifat_start !== ENDOFCHAIN)
        sector_list[minifat_start].name = "!MiniFAT";
      sector_list[fat_addrs[0]].name = "!FAT";
      sector_list.fat_addrs = fat_addrs;
      sector_list.ssz = ssz;
      var files = {}, Paths = [], FileIndex = [], FullPaths = [];
      read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
      build_full_paths(FileIndex, FullPaths, Paths);
      Paths.shift();
      var o2 = {
        FileIndex,
        FullPaths
      };
      if (options && options.raw)
        o2.raw = { header, sectors };
      return o2;
    }
    function check_get_mver(blob) {
      if (blob[blob.l] == 80 && blob[blob.l + 1] == 75)
        return [0, 0];
      blob.chk(HEADER_SIGNATURE, "Header Signature: ");
      blob.l += 16;
      var mver = blob.read_shift(2, "u");
      return [blob.read_shift(2, "u"), mver];
    }
    function check_shifts(blob, mver) {
      var shift = 9;
      blob.l += 2;
      switch (shift = blob.read_shift(2)) {
        case 9:
          if (mver != 3)
            throw new Error("Sector Shift: Expected 9 saw " + shift);
          break;
        case 12:
          if (mver != 4)
            throw new Error("Sector Shift: Expected 12 saw " + shift);
          break;
        default:
          throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
      }
      blob.chk("0600", "Mini Sector Shift: ");
      blob.chk("000000000000", "Reserved: ");
    }
    function sectorify(file, ssz) {
      var nsectors = Math.ceil(file.length / ssz) - 1;
      var sectors = [];
      for (var i3 = 1; i3 < nsectors; ++i3)
        sectors[i3 - 1] = file.slice(i3 * ssz, (i3 + 1) * ssz);
      sectors[nsectors - 1] = file.slice(nsectors * ssz);
      return sectors;
    }
    function build_full_paths(FI, FP, Paths) {
      var i3 = 0, L2 = 0, R2 = 0, C2 = 0, j2 = 0, pl = Paths.length;
      var dad = [], q3 = [];
      for (; i3 < pl; ++i3) {
        dad[i3] = q3[i3] = i3;
        FP[i3] = Paths[i3];
      }
      for (; j2 < q3.length; ++j2) {
        i3 = q3[j2];
        L2 = FI[i3].L;
        R2 = FI[i3].R;
        C2 = FI[i3].C;
        if (dad[i3] === i3) {
          if (L2 !== -1 && dad[L2] !== L2)
            dad[i3] = dad[L2];
          if (R2 !== -1 && dad[R2] !== R2)
            dad[i3] = dad[R2];
        }
        if (C2 !== -1)
          dad[C2] = i3;
        if (L2 !== -1 && i3 != dad[i3]) {
          dad[L2] = dad[i3];
          if (q3.lastIndexOf(L2) < j2)
            q3.push(L2);
        }
        if (R2 !== -1 && i3 != dad[i3]) {
          dad[R2] = dad[i3];
          if (q3.lastIndexOf(R2) < j2)
            q3.push(R2);
        }
      }
      for (i3 = 1; i3 < pl; ++i3)
        if (dad[i3] === i3) {
          if (R2 !== -1 && dad[R2] !== R2)
            dad[i3] = dad[R2];
          else if (L2 !== -1 && dad[L2] !== L2)
            dad[i3] = dad[L2];
        }
      for (i3 = 1; i3 < pl; ++i3) {
        if (FI[i3].type === 0)
          continue;
        j2 = i3;
        if (j2 != dad[j2])
          do {
            j2 = dad[j2];
            FP[i3] = FP[j2] + "/" + FP[i3];
          } while (j2 !== 0 && -1 !== dad[j2] && j2 != dad[j2]);
        dad[i3] = -1;
      }
      FP[0] += "/";
      for (i3 = 1; i3 < pl; ++i3) {
        if (FI[i3].type !== 2)
          FP[i3] += "/";
      }
    }
    function get_mfat_entry(entry, payload, mini) {
      var start = entry.start, size = entry.size;
      var o2 = [];
      var idx = start;
      while (mini && size > 0 && idx >= 0) {
        o2.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
        size -= MSSZ;
        idx = __readInt32LE(mini, idx * 4);
      }
      if (o2.length === 0)
        return new_buf(0);
      return bconcat(o2).slice(0, entry.size);
    }
    function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
      var q3 = ENDOFCHAIN;
      if (idx === ENDOFCHAIN) {
        if (cnt !== 0)
          throw new Error("DIFAT chain shorter than expected");
      } else if (idx !== -1) {
        var sector = sectors[idx], m2 = (ssz >>> 2) - 1;
        if (!sector)
          return;
        for (var i3 = 0; i3 < m2; ++i3) {
          if ((q3 = __readInt32LE(sector, i3 * 4)) === ENDOFCHAIN)
            break;
          fat_addrs.push(q3);
        }
        sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
      }
    }
    function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
      var buf = [], buf_chain = [];
      if (!chkd)
        chkd = [];
      var modulus = ssz - 1, j2 = 0, jj = 0;
      for (j2 = start; j2 >= 0; ) {
        chkd[j2] = true;
        buf[buf.length] = j2;
        buf_chain.push(sectors[j2]);
        var addr = fat_addrs[Math.floor(j2 * 4 / ssz)];
        jj = j2 * 4 & modulus;
        if (ssz < 4 + jj)
          throw new Error("FAT boundary crossed: " + j2 + " 4 " + ssz);
        if (!sectors[addr])
          break;
        j2 = __readInt32LE(sectors[addr], jj);
      }
      return { nodes: buf, data: __toBuffer([buf_chain]) };
    }
    function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
      var sl = sectors.length, sector_list = [];
      var chkd = [], buf = [], buf_chain = [];
      var modulus = ssz - 1, i3 = 0, j2 = 0, k = 0, jj = 0;
      for (i3 = 0; i3 < sl; ++i3) {
        buf = [];
        k = i3 + dir_start;
        if (k >= sl)
          k -= sl;
        if (chkd[k])
          continue;
        buf_chain = [];
        var seen = [];
        for (j2 = k; j2 >= 0; ) {
          seen[j2] = true;
          chkd[j2] = true;
          buf[buf.length] = j2;
          buf_chain.push(sectors[j2]);
          var addr = fat_addrs[Math.floor(j2 * 4 / ssz)];
          jj = j2 * 4 & modulus;
          if (ssz < 4 + jj)
            throw new Error("FAT boundary crossed: " + j2 + " 4 " + ssz);
          if (!sectors[addr])
            break;
          j2 = __readInt32LE(sectors[addr], jj);
          if (seen[j2])
            break;
        }
        sector_list[k] = { nodes: buf, data: __toBuffer([buf_chain]) };
      }
      return sector_list;
    }
    function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
      var minifat_store = 0, pl = Paths.length ? 2 : 0;
      var sector = sector_list[dir_start].data;
      var i3 = 0, namelen = 0, name;
      for (; i3 < sector.length; i3 += 128) {
        var blob = (
          /*::(*/
          sector.slice(i3, i3 + 128)
        );
        prep_blob(blob, 64);
        namelen = blob.read_shift(2);
        name = __utf16le(blob, 0, namelen - pl);
        Paths.push(name);
        var o2 = {
          name,
          type: blob.read_shift(1),
          color: blob.read_shift(1),
          L: blob.read_shift(4, "i"),
          R: blob.read_shift(4, "i"),
          C: blob.read_shift(4, "i"),
          clsid: blob.read_shift(16),
          state: blob.read_shift(4, "i"),
          start: 0,
          size: 0
        };
        var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
        if (ctime !== 0)
          o2.ct = read_date(blob, blob.l - 8);
        var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
        if (mtime !== 0)
          o2.mt = read_date(blob, blob.l - 8);
        o2.start = blob.read_shift(4, "i");
        o2.size = blob.read_shift(4, "i");
        if (o2.size < 0 && o2.start < 0) {
          o2.size = o2.type = 0;
          o2.start = ENDOFCHAIN;
          o2.name = "";
        }
        if (o2.type === 5) {
          minifat_store = o2.start;
          if (nmfs > 0 && minifat_store !== ENDOFCHAIN)
            sector_list[minifat_store].name = "!StreamData";
        } else if (o2.size >= 4096) {
          o2.storage = "fat";
          if (sector_list[o2.start] === void 0)
            sector_list[o2.start] = get_sector_list(sectors, o2.start, sector_list.fat_addrs, sector_list.ssz);
          sector_list[o2.start].name = o2.name;
          o2.content = sector_list[o2.start].data.slice(0, o2.size);
        } else {
          o2.storage = "minifat";
          if (o2.size < 0)
            o2.size = 0;
          else if (minifat_store !== ENDOFCHAIN && o2.start !== ENDOFCHAIN && sector_list[minifat_store]) {
            o2.content = get_mfat_entry(o2, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
          }
        }
        if (o2.content)
          prep_blob(o2.content, 0);
        files[name] = o2;
        FileIndex.push(o2);
      }
    }
    function read_date(blob, offset) {
      return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1e3);
    }
    function read_file(filename2, options) {
      get_fs();
      return parse2(fs2.readFileSync(filename2), options);
    }
    function read(blob, options) {
      var type2 = options && options.type;
      if (!type2) {
        if (has_buf && Buffer.isBuffer(blob))
          type2 = "buffer";
      }
      switch (type2 || "base64") {
        case "file":
          return read_file(blob, options);
        case "base64":
          return parse2(s2a(Base64_decode(blob)), options);
        case "binary":
          return parse2(s2a(blob), options);
      }
      return parse2(
        /*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */
        blob,
        options
      );
    }
    function init_cfb(cfb, opts) {
      var o2 = opts || {}, root = o2.root || "Root Entry";
      if (!cfb.FullPaths)
        cfb.FullPaths = [];
      if (!cfb.FileIndex)
        cfb.FileIndex = [];
      if (cfb.FullPaths.length !== cfb.FileIndex.length)
        throw new Error("inconsistent CFB structure");
      if (cfb.FullPaths.length === 0) {
        cfb.FullPaths[0] = root + "/";
        cfb.FileIndex[0] = { name: root, type: 5 };
      }
      if (o2.CLSID)
        cfb.FileIndex[0].clsid = o2.CLSID;
      seed_cfb(cfb);
    }
    function seed_cfb(cfb) {
      var nm = "Sh33tJ5";
      if (CFB.find(cfb, "/" + nm))
        return;
      var p2 = new_buf(4);
      p2[0] = 55;
      p2[1] = p2[3] = 50;
      p2[2] = 54;
      cfb.FileIndex.push({ name: nm, type: 2, content: p2, size: 4, L: 69, R: 69, C: 69 });
      cfb.FullPaths.push(cfb.FullPaths[0] + nm);
      rebuild_cfb(cfb);
    }
    function rebuild_cfb(cfb, f2) {
      init_cfb(cfb);
      var gc = false, s2 = false;
      for (var i3 = cfb.FullPaths.length - 1; i3 >= 0; --i3) {
        var _file = cfb.FileIndex[i3];
        switch (_file.type) {
          case 0:
            if (s2)
              gc = true;
            else {
              cfb.FileIndex.pop();
              cfb.FullPaths.pop();
            }
            break;
          case 1:
          case 2:
          case 5:
            s2 = true;
            if (isNaN(_file.R * _file.L * _file.C))
              gc = true;
            if (_file.R > -1 && _file.L > -1 && _file.R == _file.L)
              gc = true;
            break;
          default:
            gc = true;
            break;
        }
      }
      if (!gc && !f2)
        return;
      var now = new Date(1987, 1, 19), j2 = 0;
      var fullPaths = Object.create ? /* @__PURE__ */ Object.create(null) : {};
      var data = [];
      for (i3 = 0; i3 < cfb.FullPaths.length; ++i3) {
        fullPaths[cfb.FullPaths[i3]] = true;
        if (cfb.FileIndex[i3].type === 0)
          continue;
        data.push([cfb.FullPaths[i3], cfb.FileIndex[i3]]);
      }
      for (i3 = 0; i3 < data.length; ++i3) {
        var dad = dirname(data[i3][0]);
        s2 = fullPaths[dad];
        if (!s2) {
          data.push([dad, {
            name: filename(dad).replace("/", ""),
            type: 1,
            clsid: HEADER_CLSID,
            ct: now,
            mt: now,
            content: null
          }]);
          fullPaths[dad] = true;
        }
      }
      data.sort(function(x, y2) {
        return namecmp(x[0], y2[0]);
      });
      cfb.FullPaths = [];
      cfb.FileIndex = [];
      for (i3 = 0; i3 < data.length; ++i3) {
        cfb.FullPaths[i3] = data[i3][0];
        cfb.FileIndex[i3] = data[i3][1];
      }
      for (i3 = 0; i3 < data.length; ++i3) {
        var elt = cfb.FileIndex[i3];
        var nm = cfb.FullPaths[i3];
        elt.name = filename(nm).replace("/", "");
        elt.L = elt.R = elt.C = -(elt.color = 1);
        elt.size = elt.content ? elt.content.length : 0;
        elt.start = 0;
        elt.clsid = elt.clsid || HEADER_CLSID;
        if (i3 === 0) {
          elt.C = data.length > 1 ? 1 : -1;
          elt.size = 0;
          elt.type = 5;
        } else if (nm.slice(-1) == "/") {
          for (j2 = i3 + 1; j2 < data.length; ++j2)
            if (dirname(cfb.FullPaths[j2]) == nm)
              break;
          elt.C = j2 >= data.length ? -1 : j2;
          for (j2 = i3 + 1; j2 < data.length; ++j2)
            if (dirname(cfb.FullPaths[j2]) == dirname(nm))
              break;
          elt.R = j2 >= data.length ? -1 : j2;
          elt.type = 1;
        } else {
          if (dirname(cfb.FullPaths[i3 + 1] || "") == dirname(nm))
            elt.R = i3 + 1;
          elt.type = 2;
        }
      }
    }
    function _write(cfb, options) {
      var _opts = options || {};
      if (_opts.fileType == "mad")
        return write_mad(cfb, _opts);
      rebuild_cfb(cfb);
      switch (_opts.fileType) {
        case "zip":
          return write_zip(cfb, _opts);
      }
      var L2 = function(cfb2) {
        var mini_size = 0, fat_size = 0;
        for (var i4 = 0; i4 < cfb2.FileIndex.length; ++i4) {
          var file2 = cfb2.FileIndex[i4];
          if (!file2.content)
            continue;
          var flen2 = file2.content.length;
          if (flen2 > 0) {
            if (flen2 < 4096)
              mini_size += flen2 + 63 >> 6;
            else
              fat_size += flen2 + 511 >> 9;
          }
        }
        var dir_cnt = cfb2.FullPaths.length + 3 >> 2;
        var mini_cnt = mini_size + 7 >> 3;
        var mfat_cnt = mini_size + 127 >> 7;
        var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
        var fat_cnt = fat_base + 127 >> 7;
        var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
        while (fat_base + fat_cnt + difat_cnt + 127 >> 7 > fat_cnt)
          difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
        var L3 = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
        cfb2.FileIndex[0].size = mini_size << 6;
        L3[7] = (cfb2.FileIndex[0].start = L3[0] + L3[1] + L3[2] + L3[3] + L3[4] + L3[5]) + (L3[6] + 7 >> 3);
        return L3;
      }(cfb);
      var o2 = new_buf(L2[7] << 9);
      var i3 = 0, T2 = 0;
      {
        for (i3 = 0; i3 < 8; ++i3)
          o2.write_shift(1, HEADER_SIG[i3]);
        for (i3 = 0; i3 < 8; ++i3)
          o2.write_shift(2, 0);
        o2.write_shift(2, 62);
        o2.write_shift(2, 3);
        o2.write_shift(2, 65534);
        o2.write_shift(2, 9);
        o2.write_shift(2, 6);
        for (i3 = 0; i3 < 3; ++i3)
          o2.write_shift(2, 0);
        o2.write_shift(4, 0);
        o2.write_shift(4, L2[2]);
        o2.write_shift(4, L2[0] + L2[1] + L2[2] + L2[3] - 1);
        o2.write_shift(4, 0);
        o2.write_shift(4, 1 << 12);
        o2.write_shift(4, L2[3] ? L2[0] + L2[1] + L2[2] - 1 : ENDOFCHAIN);
        o2.write_shift(4, L2[3]);
        o2.write_shift(-4, L2[1] ? L2[0] - 1 : ENDOFCHAIN);
        o2.write_shift(4, L2[1]);
        for (i3 = 0; i3 < 109; ++i3)
          o2.write_shift(-4, i3 < L2[2] ? L2[1] + i3 : -1);
      }
      if (L2[1]) {
        for (T2 = 0; T2 < L2[1]; ++T2) {
          for (; i3 < 236 + T2 * 127; ++i3)
            o2.write_shift(-4, i3 < L2[2] ? L2[1] + i3 : -1);
          o2.write_shift(-4, T2 === L2[1] - 1 ? ENDOFCHAIN : T2 + 1);
        }
      }
      var chainit = function(w2) {
        for (T2 += w2; i3 < T2 - 1; ++i3)
          o2.write_shift(-4, i3 + 1);
        if (w2) {
          ++i3;
          o2.write_shift(-4, ENDOFCHAIN);
        }
      };
      T2 = i3 = 0;
      for (T2 += L2[1]; i3 < T2; ++i3)
        o2.write_shift(-4, consts.DIFSECT);
      for (T2 += L2[2]; i3 < T2; ++i3)
        o2.write_shift(-4, consts.FATSECT);
      chainit(L2[3]);
      chainit(L2[4]);
      var j2 = 0, flen = 0;
      var file = cfb.FileIndex[0];
      for (; j2 < cfb.FileIndex.length; ++j2) {
        file = cfb.FileIndex[j2];
        if (!file.content)
          continue;
        flen = file.content.length;
        if (flen < 4096)
          continue;
        file.start = T2;
        chainit(flen + 511 >> 9);
      }
      chainit(L2[6] + 7 >> 3);
      while (o2.l & 511)
        o2.write_shift(-4, consts.ENDOFCHAIN);
      T2 = i3 = 0;
      for (j2 = 0; j2 < cfb.FileIndex.length; ++j2) {
        file = cfb.FileIndex[j2];
        if (!file.content)
          continue;
        flen = file.content.length;
        if (!flen || flen >= 4096)
          continue;
        file.start = T2;
        chainit(flen + 63 >> 6);
      }
      while (o2.l & 511)
        o2.write_shift(-4, consts.ENDOFCHAIN);
      for (i3 = 0; i3 < L2[4] << 2; ++i3) {
        var nm = cfb.FullPaths[i3];
        if (!nm || nm.length === 0) {
          for (j2 = 0; j2 < 17; ++j2)
            o2.write_shift(4, 0);
          for (j2 = 0; j2 < 3; ++j2)
            o2.write_shift(4, -1);
          for (j2 = 0; j2 < 12; ++j2)
            o2.write_shift(4, 0);
          continue;
        }
        file = cfb.FileIndex[i3];
        if (i3 === 0)
          file.start = file.size ? file.start - 1 : ENDOFCHAIN;
        var _nm = i3 === 0 && _opts.root || file.name;
        flen = 2 * (_nm.length + 1);
        o2.write_shift(64, _nm, "utf16le");
        o2.write_shift(2, flen);
        o2.write_shift(1, file.type);
        o2.write_shift(1, file.color);
        o2.write_shift(-4, file.L);
        o2.write_shift(-4, file.R);
        o2.write_shift(-4, file.C);
        if (!file.clsid)
          for (j2 = 0; j2 < 4; ++j2)
            o2.write_shift(4, 0);
        else
          o2.write_shift(16, file.clsid, "hex");
        o2.write_shift(4, file.state || 0);
        o2.write_shift(4, 0);
        o2.write_shift(4, 0);
        o2.write_shift(4, 0);
        o2.write_shift(4, 0);
        o2.write_shift(4, file.start);
        o2.write_shift(4, file.size);
        o2.write_shift(4, 0);
      }
      for (i3 = 1; i3 < cfb.FileIndex.length; ++i3) {
        file = cfb.FileIndex[i3];
        if (file.size >= 4096) {
          o2.l = file.start + 1 << 9;
          if (has_buf && Buffer.isBuffer(file.content)) {
            file.content.copy(o2, o2.l, 0, file.size);
            o2.l += file.size + 511 & -512;
          } else {
            for (j2 = 0; j2 < file.size; ++j2)
              o2.write_shift(1, file.content[j2]);
            for (; j2 & 511; ++j2)
              o2.write_shift(1, 0);
          }
        }
      }
      for (i3 = 1; i3 < cfb.FileIndex.length; ++i3) {
        file = cfb.FileIndex[i3];
        if (file.size > 0 && file.size < 4096) {
          if (has_buf && Buffer.isBuffer(file.content)) {
            file.content.copy(o2, o2.l, 0, file.size);
            o2.l += file.size + 63 & -64;
          } else {
            for (j2 = 0; j2 < file.size; ++j2)
              o2.write_shift(1, file.content[j2]);
            for (; j2 & 63; ++j2)
              o2.write_shift(1, 0);
          }
        }
      }
      if (has_buf) {
        o2.l = o2.length;
      } else {
        while (o2.l < o2.length)
          o2.write_shift(1, 0);
      }
      return o2;
    }
    function find(cfb, path) {
      var UCFullPaths = cfb.FullPaths.map(function(x) {
        return x.toUpperCase();
      });
      var UCPaths = UCFullPaths.map(function(x) {
        var y2 = x.split("/");
        return y2[y2.length - (x.slice(-1) == "/" ? 2 : 1)];
      });
      var k = false;
      if (path.charCodeAt(0) === 47) {
        k = true;
        path = UCFullPaths[0].slice(0, -1) + path;
      } else
        k = path.indexOf("/") !== -1;
      var UCPath = path.toUpperCase();
      var w2 = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
      if (w2 !== -1)
        return cfb.FileIndex[w2];
      var m2 = !UCPath.match(chr1);
      UCPath = UCPath.replace(chr0, "");
      if (m2)
        UCPath = UCPath.replace(chr1, "!");
      for (w2 = 0; w2 < UCFullPaths.length; ++w2) {
        if ((m2 ? UCFullPaths[w2].replace(chr1, "!") : UCFullPaths[w2]).replace(chr0, "") == UCPath)
          return cfb.FileIndex[w2];
        if ((m2 ? UCPaths[w2].replace(chr1, "!") : UCPaths[w2]).replace(chr0, "") == UCPath)
          return cfb.FileIndex[w2];
      }
      return null;
    }
    var MSSZ = 64;
    var ENDOFCHAIN = -2;
    var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
    var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
    var HEADER_CLSID = "00000000000000000000000000000000";
    var consts = {
      /* 2.1 Compund File Sector Numbers and Types */
      MAXREGSECT: -6,
      DIFSECT: -4,
      FATSECT: -3,
      ENDOFCHAIN,
      FREESECT: -1,
      /* 2.2 Compound File Header */
      HEADER_SIGNATURE,
      HEADER_MINOR_VERSION: "3e00",
      MAXREGSID: -6,
      NOSTREAM: -1,
      HEADER_CLSID,
      /* 2.6.1 Compound File Directory Entry */
      EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"]
    };
    function write_file(cfb, filename2, options) {
      get_fs();
      var o2 = _write(cfb, options);
      fs2.writeFileSync(filename2, o2);
    }
    function a2s2(o2) {
      var out = new Array(o2.length);
      for (var i3 = 0; i3 < o2.length; ++i3)
        out[i3] = String.fromCharCode(o2[i3]);
      return out.join("");
    }
    function write(cfb, options) {
      var o2 = _write(cfb, options);
      switch (options && options.type || "buffer") {
        case "file":
          get_fs();
          fs2.writeFileSync(options.filename, o2);
          return o2;
        case "binary":
          return typeof o2 == "string" ? o2 : a2s2(o2);
        case "base64":
          return Base64_encode(typeof o2 == "string" ? o2 : a2s2(o2));
        case "buffer":
          if (has_buf)
            return Buffer.isBuffer(o2) ? o2 : Buffer_from(o2);
        case "array":
          return typeof o2 == "string" ? s2a(o2) : o2;
      }
      return o2;
    }
    var _zlib;
    function use_zlib(zlib) {
      try {
        var InflateRaw = zlib.InflateRaw;
        var InflRaw = new InflateRaw();
        InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
        if (InflRaw.bytesRead)
          _zlib = zlib;
        else
          throw new Error("zlib does not expose bytesRead");
      } catch (e2) {
        formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:2211", "cannot use native zlib: " + (e2.message || e2));
      }
    }
    function _inflateRawSync(payload, usz) {
      if (!_zlib)
        return _inflate(payload, usz);
      var InflateRaw = _zlib.InflateRaw;
      var InflRaw = new InflateRaw();
      var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
      payload.l += InflRaw.bytesRead;
      return out;
    }
    function _deflateRawSync(payload) {
      return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
    }
    var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
    var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
    function bit_swap_8(n2) {
      var t2 = (n2 << 1 | n2 << 11) & 139536 | (n2 << 5 | n2 << 15) & 558144;
      return (t2 >> 16 | t2 >> 8 | t2) & 255;
    }
    var use_typed_arrays = typeof Uint8Array !== "undefined";
    var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
    for (var q2 = 0; q2 < 1 << 8; ++q2)
      bitswap8[q2] = bit_swap_8(q2);
    function bit_swap_n(n2, b2) {
      var rev = bitswap8[n2 & 255];
      if (b2 <= 8)
        return rev >>> 8 - b2;
      rev = rev << 8 | bitswap8[n2 >> 8 & 255];
      if (b2 <= 16)
        return rev >>> 16 - b2;
      rev = rev << 8 | bitswap8[n2 >> 16 & 255];
      return rev >>> 24 - b2;
    }
    function read_bits_2(buf, bl) {
      var w2 = bl & 7, h2 = bl >>> 3;
      return (buf[h2] | (w2 <= 6 ? 0 : buf[h2 + 1] << 8)) >>> w2 & 3;
    }
    function read_bits_3(buf, bl) {
      var w2 = bl & 7, h2 = bl >>> 3;
      return (buf[h2] | (w2 <= 5 ? 0 : buf[h2 + 1] << 8)) >>> w2 & 7;
    }
    function read_bits_4(buf, bl) {
      var w2 = bl & 7, h2 = bl >>> 3;
      return (buf[h2] | (w2 <= 4 ? 0 : buf[h2 + 1] << 8)) >>> w2 & 15;
    }
    function read_bits_5(buf, bl) {
      var w2 = bl & 7, h2 = bl >>> 3;
      return (buf[h2] | (w2 <= 3 ? 0 : buf[h2 + 1] << 8)) >>> w2 & 31;
    }
    function read_bits_7(buf, bl) {
      var w2 = bl & 7, h2 = bl >>> 3;
      return (buf[h2] | (w2 <= 1 ? 0 : buf[h2 + 1] << 8)) >>> w2 & 127;
    }
    function read_bits_n(buf, bl, n2) {
      var w2 = bl & 7, h2 = bl >>> 3, f2 = (1 << n2) - 1;
      var v2 = buf[h2] >>> w2;
      if (n2 < 8 - w2)
        return v2 & f2;
      v2 |= buf[h2 + 1] << 8 - w2;
      if (n2 < 16 - w2)
        return v2 & f2;
      v2 |= buf[h2 + 2] << 16 - w2;
      if (n2 < 24 - w2)
        return v2 & f2;
      v2 |= buf[h2 + 3] << 24 - w2;
      return v2 & f2;
    }
    function write_bits_3(buf, bl, v2) {
      var w2 = bl & 7, h2 = bl >>> 3;
      if (w2 <= 5)
        buf[h2] |= (v2 & 7) << w2;
      else {
        buf[h2] |= v2 << w2 & 255;
        buf[h2 + 1] = (v2 & 7) >> 8 - w2;
      }
      return bl + 3;
    }
    function write_bits_1(buf, bl, v2) {
      var w2 = bl & 7, h2 = bl >>> 3;
      v2 = (v2 & 1) << w2;
      buf[h2] |= v2;
      return bl + 1;
    }
    function write_bits_8(buf, bl, v2) {
      var w2 = bl & 7, h2 = bl >>> 3;
      v2 <<= w2;
      buf[h2] |= v2 & 255;
      v2 >>>= 8;
      buf[h2 + 1] = v2;
      return bl + 8;
    }
    function write_bits_16(buf, bl, v2) {
      var w2 = bl & 7, h2 = bl >>> 3;
      v2 <<= w2;
      buf[h2] |= v2 & 255;
      v2 >>>= 8;
      buf[h2 + 1] = v2 & 255;
      buf[h2 + 2] = v2 >>> 8;
      return bl + 16;
    }
    function realloc(b2, sz) {
      var L2 = b2.length, M2 = 2 * L2 > sz ? 2 * L2 : sz + 5, i3 = 0;
      if (L2 >= sz)
        return b2;
      if (has_buf) {
        var o2 = new_unsafe_buf(M2);
        if (b2.copy)
          b2.copy(o2);
        else
          for (; i3 < b2.length; ++i3)
            o2[i3] = b2[i3];
        return o2;
      } else if (use_typed_arrays) {
        var a2 = new Uint8Array(M2);
        if (a2.set)
          a2.set(b2);
        else
          for (; i3 < L2; ++i3)
            a2[i3] = b2[i3];
        return a2;
      }
      b2.length = M2;
      return b2;
    }
    function zero_fill_array(n2) {
      var o2 = new Array(n2);
      for (var i3 = 0; i3 < n2; ++i3)
        o2[i3] = 0;
      return o2;
    }
    function build_tree(clens, cmap, MAX) {
      var maxlen = 1, w2 = 0, i3 = 0, j2 = 0, ccode = 0, L2 = clens.length;
      var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
      for (i3 = 0; i3 < 32; ++i3)
        bl_count[i3] = 0;
      for (i3 = L2; i3 < MAX; ++i3)
        clens[i3] = 0;
      L2 = clens.length;
      var ctree = use_typed_arrays ? new Uint16Array(L2) : zero_fill_array(L2);
      for (i3 = 0; i3 < L2; ++i3) {
        bl_count[w2 = clens[i3]]++;
        if (maxlen < w2)
          maxlen = w2;
        ctree[i3] = 0;
      }
      bl_count[0] = 0;
      for (i3 = 1; i3 <= maxlen; ++i3)
        bl_count[i3 + 16] = ccode = ccode + bl_count[i3 - 1] << 1;
      for (i3 = 0; i3 < L2; ++i3) {
        ccode = clens[i3];
        if (ccode != 0)
          ctree[i3] = bl_count[ccode + 16]++;
      }
      var cleni = 0;
      for (i3 = 0; i3 < L2; ++i3) {
        cleni = clens[i3];
        if (cleni != 0) {
          ccode = bit_swap_n(ctree[i3], maxlen) >> maxlen - cleni;
          for (j2 = (1 << maxlen + 4 - cleni) - 1; j2 >= 0; --j2)
            cmap[ccode | j2 << cleni] = cleni & 15 | i3 << 4;
        }
      }
      return maxlen;
    }
    var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
    var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
    if (!use_typed_arrays) {
      for (var i2 = 0; i2 < 512; ++i2)
        fix_lmap[i2] = 0;
      for (i2 = 0; i2 < 32; ++i2)
        fix_dmap[i2] = 0;
    }
    (function() {
      var dlens = [];
      var i3 = 0;
      for (; i3 < 32; i3++)
        dlens.push(5);
      build_tree(dlens, fix_dmap, 32);
      var clens = [];
      i3 = 0;
      for (; i3 <= 143; i3++)
        clens.push(8);
      for (; i3 <= 255; i3++)
        clens.push(9);
      for (; i3 <= 279; i3++)
        clens.push(7);
      for (; i3 <= 287; i3++)
        clens.push(8);
      build_tree(clens, fix_lmap, 288);
    })();
    var _deflateRaw = /* @__PURE__ */ function _deflateRawIIFE() {
      var DST_LN_RE = use_typed_arrays ? new Uint8Array(32768) : [];
      var j2 = 0, k = 0;
      for (; j2 < DST_LN.length - 1; ++j2) {
        for (; k < DST_LN[j2 + 1]; ++k)
          DST_LN_RE[k] = j2;
      }
      for (; k < 32768; ++k)
        DST_LN_RE[k] = 29;
      var LEN_LN_RE = use_typed_arrays ? new Uint8Array(259) : [];
      for (j2 = 0, k = 0; j2 < LEN_LN.length - 1; ++j2) {
        for (; k < LEN_LN[j2 + 1]; ++k)
          LEN_LN_RE[k] = j2;
      }
      function write_stored(data, out) {
        var boff = 0;
        while (boff < data.length) {
          var L2 = Math.min(65535, data.length - boff);
          var h2 = boff + L2 == data.length;
          out.write_shift(1, +h2);
          out.write_shift(2, L2);
          out.write_shift(2, ~L2 & 65535);
          while (L2-- > 0)
            out[out.l++] = data[boff++];
        }
        return out.l;
      }
      function write_huff_fixed(data, out) {
        var bl = 0;
        var boff = 0;
        var addrs = use_typed_arrays ? new Uint16Array(32768) : [];
        while (boff < data.length) {
          var L2 = (
            /* data.length - boff; */
            Math.min(65535, data.length - boff)
          );
          if (L2 < 10) {
            bl = write_bits_3(out, bl, +!!(boff + L2 == data.length));
            if (bl & 7)
              bl += 8 - (bl & 7);
            out.l = bl / 8 | 0;
            out.write_shift(2, L2);
            out.write_shift(2, ~L2 & 65535);
            while (L2-- > 0)
              out[out.l++] = data[boff++];
            bl = out.l * 8;
            continue;
          }
          bl = write_bits_3(out, bl, +!!(boff + L2 == data.length) + 2);
          var hash = 0;
          while (L2-- > 0) {
            var d2 = data[boff];
            hash = (hash << 5 ^ d2) & 32767;
            var match = -1, mlen = 0;
            if (match = addrs[hash]) {
              match |= boff & ~32767;
              if (match > boff)
                match -= 32768;
              if (match < boff)
                while (data[match + mlen] == data[boff + mlen] && mlen < 250)
                  ++mlen;
            }
            if (mlen > 2) {
              d2 = LEN_LN_RE[mlen];
              if (d2 <= 22)
                bl = write_bits_8(out, bl, bitswap8[d2 + 1] >> 1) - 1;
              else {
                write_bits_8(out, bl, 3);
                bl += 5;
                write_bits_8(out, bl, bitswap8[d2 - 23] >> 5);
                bl += 3;
              }
              var len_eb = d2 < 8 ? 0 : d2 - 4 >> 2;
              if (len_eb > 0) {
                write_bits_16(out, bl, mlen - LEN_LN[d2]);
                bl += len_eb;
              }
              d2 = DST_LN_RE[boff - match];
              bl = write_bits_8(out, bl, bitswap8[d2] >> 3);
              bl -= 3;
              var dst_eb = d2 < 4 ? 0 : d2 - 2 >> 1;
              if (dst_eb > 0) {
                write_bits_16(out, bl, boff - match - DST_LN[d2]);
                bl += dst_eb;
              }
              for (var q3 = 0; q3 < mlen; ++q3) {
                addrs[hash] = boff & 32767;
                hash = (hash << 5 ^ data[boff]) & 32767;
                ++boff;
              }
              L2 -= mlen - 1;
            } else {
              if (d2 <= 143)
                d2 = d2 + 48;
              else
                bl = write_bits_1(out, bl, 1);
              bl = write_bits_8(out, bl, bitswap8[d2]);
              addrs[hash] = boff & 32767;
              ++boff;
            }
          }
          bl = write_bits_8(out, bl, 0) - 1;
        }
        out.l = (bl + 7) / 8 | 0;
        return out.l;
      }
      return function _deflateRaw2(data, out) {
        if (data.length < 8)
          return write_stored(data, out);
        return write_huff_fixed(data, out);
      };
    }();
    function _deflate(data) {
      var buf = new_buf(50 + Math.floor(data.length * 1.1));
      var off = _deflateRaw(data, buf);
      return buf.slice(0, off);
    }
    var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
    var dyn_len_1 = 1, dyn_len_2 = 1;
    function dyn(data, boff) {
      var _HLIT = read_bits_5(data, boff) + 257;
      boff += 5;
      var _HDIST = read_bits_5(data, boff) + 1;
      boff += 5;
      var _HCLEN = read_bits_4(data, boff) + 4;
      boff += 4;
      var w2 = 0;
      var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
      var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      var maxlen = 1;
      var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
      var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
      var L2 = clens.length;
      for (var i3 = 0; i3 < _HCLEN; ++i3) {
        clens[CLEN_ORDER[i3]] = w2 = read_bits_3(data, boff);
        if (maxlen < w2)
          maxlen = w2;
        bl_count[w2]++;
        boff += 3;
      }
      var ccode = 0;
      bl_count[0] = 0;
      for (i3 = 1; i3 <= maxlen; ++i3)
        next_code[i3] = ccode = ccode + bl_count[i3 - 1] << 1;
      for (i3 = 0; i3 < L2; ++i3)
        if ((ccode = clens[i3]) != 0)
          ctree[i3] = next_code[ccode]++;
      var cleni = 0;
      for (i3 = 0; i3 < L2; ++i3) {
        cleni = clens[i3];
        if (cleni != 0) {
          ccode = bitswap8[ctree[i3]] >> 8 - cleni;
          for (var j2 = (1 << 7 - cleni) - 1; j2 >= 0; --j2)
            dyn_cmap[ccode | j2 << cleni] = cleni & 7 | i3 << 3;
        }
      }
      var hcodes = [];
      maxlen = 1;
      for (; hcodes.length < _HLIT + _HDIST; ) {
        ccode = dyn_cmap[read_bits_7(data, boff)];
        boff += ccode & 7;
        switch (ccode >>>= 3) {
          case 16:
            w2 = 3 + read_bits_2(data, boff);
            boff += 2;
            ccode = hcodes[hcodes.length - 1];
            while (w2-- > 0)
              hcodes.push(ccode);
            break;
          case 17:
            w2 = 3 + read_bits_3(data, boff);
            boff += 3;
            while (w2-- > 0)
              hcodes.push(0);
            break;
          case 18:
            w2 = 11 + read_bits_7(data, boff);
            boff += 7;
            while (w2-- > 0)
              hcodes.push(0);
            break;
          default:
            hcodes.push(ccode);
            if (maxlen < ccode)
              maxlen = ccode;
            break;
        }
      }
      var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
      for (i3 = _HLIT; i3 < 286; ++i3)
        h1[i3] = 0;
      for (i3 = _HDIST; i3 < 30; ++i3)
        h2[i3] = 0;
      dyn_len_1 = build_tree(h1, dyn_lmap, 286);
      dyn_len_2 = build_tree(h2, dyn_dmap, 30);
      return boff;
    }
    function inflate(data, usz) {
      if (data[0] == 3 && !(data[1] & 3)) {
        return [new_raw_buf(usz), 2];
      }
      var boff = 0;
      var header = 0;
      var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
      var woff = 0;
      var OL = outbuf.length >>> 0;
      var max_len_1 = 0, max_len_2 = 0;
      while ((header & 1) == 0) {
        header = read_bits_3(data, boff);
        boff += 3;
        if (header >>> 1 == 0) {
          if (boff & 7)
            boff += 8 - (boff & 7);
          var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
          boff += 32;
          if (sz > 0) {
            if (!usz && OL < woff + sz) {
              outbuf = realloc(outbuf, woff + sz);
              OL = outbuf.length;
            }
            while (sz-- > 0) {
              outbuf[woff++] = data[boff >>> 3];
              boff += 8;
            }
          }
          continue;
        } else if (header >> 1 == 1) {
          max_len_1 = 9;
          max_len_2 = 5;
        } else {
          boff = dyn(data, boff);
          max_len_1 = dyn_len_1;
          max_len_2 = dyn_len_2;
        }
        for (; ; ) {
          if (!usz && OL < woff + 32767) {
            outbuf = realloc(outbuf, woff + 32767);
            OL = outbuf.length;
          }
          var bits = read_bits_n(data, boff, max_len_1);
          var code2 = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
          boff += code2 & 15;
          code2 >>>= 4;
          if ((code2 >>> 8 & 255) === 0)
            outbuf[woff++] = code2;
          else if (code2 == 256)
            break;
          else {
            code2 -= 257;
            var len_eb = code2 < 8 ? 0 : code2 - 4 >> 2;
            if (len_eb > 5)
              len_eb = 0;
            var tgt = woff + LEN_LN[code2];
            if (len_eb > 0) {
              tgt += read_bits_n(data, boff, len_eb);
              boff += len_eb;
            }
            bits = read_bits_n(data, boff, max_len_2);
            code2 = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
            boff += code2 & 15;
            code2 >>>= 4;
            var dst_eb = code2 < 4 ? 0 : code2 - 2 >> 1;
            var dst = DST_LN[code2];
            if (dst_eb > 0) {
              dst += read_bits_n(data, boff, dst_eb);
              boff += dst_eb;
            }
            if (!usz && OL < tgt) {
              outbuf = realloc(outbuf, tgt + 100);
              OL = outbuf.length;
            }
            while (woff < tgt) {
              outbuf[woff] = outbuf[woff - dst];
              ++woff;
            }
          }
        }
      }
      if (usz)
        return [outbuf, boff + 7 >>> 3];
      return [outbuf.slice(0, woff), boff + 7 >>> 3];
    }
    function _inflate(payload, usz) {
      var data = payload.slice(payload.l || 0);
      var out = inflate(data, usz);
      payload.l += out[1];
      return out[0];
    }
    function warn_or_throw(wrn, msg) {
      if (wrn) {
        if (typeof console !== "undefined")
          formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:2670", msg);
      } else
        throw new Error(msg);
    }
    function parse_zip2(file, options) {
      var blob = (
        /*::(*/
        file
      );
      prep_blob(blob, 0);
      var FileIndex = [], FullPaths = [];
      var o2 = {
        FileIndex,
        FullPaths
      };
      init_cfb(o2, { root: options.root });
      var i3 = blob.length - 4;
      while ((blob[i3] != 80 || blob[i3 + 1] != 75 || blob[i3 + 2] != 5 || blob[i3 + 3] != 6) && i3 >= 0)
        --i3;
      blob.l = i3 + 4;
      blob.l += 4;
      var fcnt = blob.read_shift(2);
      blob.l += 6;
      var start_cd = blob.read_shift(4);
      blob.l = start_cd;
      for (i3 = 0; i3 < fcnt; ++i3) {
        blob.l += 20;
        var csz = blob.read_shift(4);
        var usz = blob.read_shift(4);
        var namelen = blob.read_shift(2);
        var efsz = blob.read_shift(2);
        var fcsz = blob.read_shift(2);
        blob.l += 8;
        var offset = blob.read_shift(4);
        var EF = parse_extra_field(
          /*::(*/
          blob.slice(blob.l + namelen, blob.l + namelen + efsz)
          /*:: :any)*/
        );
        blob.l += namelen + efsz + fcsz;
        var L2 = blob.l;
        blob.l = offset + 4;
        parse_local_file(blob, csz, usz, o2, EF);
        blob.l = L2;
      }
      return o2;
    }
    function parse_local_file(blob, csz, usz, o2, EF) {
      blob.l += 2;
      var flags = blob.read_shift(2);
      var meth = blob.read_shift(2);
      var date3 = parse_dos_date(blob);
      if (flags & 8257)
        throw new Error("Unsupported ZIP encryption");
      var crc32 = blob.read_shift(4);
      var _csz = blob.read_shift(4);
      var _usz = blob.read_shift(4);
      var namelen = blob.read_shift(2);
      var efsz = blob.read_shift(2);
      var name = "";
      for (var i3 = 0; i3 < namelen; ++i3)
        name += String.fromCharCode(blob[blob.l++]);
      if (efsz) {
        var ef = parse_extra_field(
          /*::(*/
          blob.slice(blob.l, blob.l + efsz)
          /*:: :any)*/
        );
        if ((ef[21589] || {}).mt)
          date3 = ef[21589].mt;
        if (((EF || {})[21589] || {}).mt)
          date3 = EF[21589].mt;
      }
      blob.l += efsz;
      var data = blob.slice(blob.l, blob.l + _csz);
      switch (meth) {
        case 8:
          data = _inflateRawSync(blob, _usz);
          break;
        case 0:
          break;
        default:
          throw new Error("Unsupported ZIP Compression method " + meth);
      }
      var wrn = false;
      if (flags & 8) {
        crc32 = blob.read_shift(4);
        if (crc32 == 134695760) {
          crc32 = blob.read_shift(4);
          wrn = true;
        }
        _csz = blob.read_shift(4);
        _usz = blob.read_shift(4);
      }
      if (_csz != csz)
        warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
      if (_usz != usz)
        warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
      cfb_add(o2, name, data, { unsafe: true, mt: date3 });
    }
    function write_zip(cfb, options) {
      var _opts = options || {};
      var out = [], cdirs = [];
      var o2 = new_buf(1);
      var method = _opts.compression ? 8 : 0, flags = 0;
      var i3 = 0, j2 = 0;
      var start_cd = 0, fcnt = 0;
      var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
      var crcs = [];
      var sz_cd = 0;
      for (i3 = 1; i3 < cfb.FullPaths.length; ++i3) {
        fp = cfb.FullPaths[i3].slice(root.length);
        fi = cfb.FileIndex[i3];
        if (!fi.size || !fi.content || fp == "Sh33tJ5")
          continue;
        var start = start_cd;
        var namebuf = new_buf(fp.length);
        for (j2 = 0; j2 < fp.length; ++j2)
          namebuf.write_shift(1, fp.charCodeAt(j2) & 127);
        namebuf = namebuf.slice(0, namebuf.l);
        crcs[fcnt] = CRC32.buf(
          /*::((*/
          fi.content,
          0
        );
        var outbuf = fi.content;
        if (method == 8)
          outbuf = _deflateRawSync(outbuf);
        o2 = new_buf(30);
        o2.write_shift(4, 67324752);
        o2.write_shift(2, 20);
        o2.write_shift(2, flags);
        o2.write_shift(2, method);
        if (fi.mt)
          write_dos_date(o2, fi.mt);
        else
          o2.write_shift(4, 0);
        o2.write_shift(-4, crcs[fcnt]);
        o2.write_shift(4, outbuf.length);
        o2.write_shift(
          4,
          /*::(*/
          fi.content.length
        );
        o2.write_shift(2, namebuf.length);
        o2.write_shift(2, 0);
        start_cd += o2.length;
        out.push(o2);
        start_cd += namebuf.length;
        out.push(namebuf);
        start_cd += outbuf.length;
        out.push(outbuf);
        o2 = new_buf(46);
        o2.write_shift(4, 33639248);
        o2.write_shift(2, 0);
        o2.write_shift(2, 20);
        o2.write_shift(2, flags);
        o2.write_shift(2, method);
        o2.write_shift(4, 0);
        o2.write_shift(-4, crcs[fcnt]);
        o2.write_shift(4, outbuf.length);
        o2.write_shift(
          4,
          /*::(*/
          fi.content.length
        );
        o2.write_shift(2, namebuf.length);
        o2.write_shift(2, 0);
        o2.write_shift(2, 0);
        o2.write_shift(2, 0);
        o2.write_shift(2, 0);
        o2.write_shift(4, 0);
        o2.write_shift(4, start);
        sz_cd += o2.l;
        cdirs.push(o2);
        sz_cd += namebuf.length;
        cdirs.push(namebuf);
        ++fcnt;
      }
      o2 = new_buf(22);
      o2.write_shift(4, 101010256);
      o2.write_shift(2, 0);
      o2.write_shift(2, 0);
      o2.write_shift(2, fcnt);
      o2.write_shift(2, fcnt);
      o2.write_shift(4, sz_cd);
      o2.write_shift(4, start_cd);
      o2.write_shift(2, 0);
      return bconcat([bconcat(out), bconcat(cdirs), o2]);
    }
    var ContentTypeMap = {
      "htm": "text/html",
      "xml": "text/xml",
      "gif": "image/gif",
      "jpg": "image/jpeg",
      "png": "image/png",
      "mso": "application/x-mso",
      "thmx": "application/vnd.ms-officetheme",
      "sh33tj5": "application/octet-stream"
    };
    function get_content_type(fi, fp) {
      if (fi.ctype)
        return fi.ctype;
      var ext = fi.name || "", m2 = ext.match(/\.([^\.]+)$/);
      if (m2 && ContentTypeMap[m2[1]])
        return ContentTypeMap[m2[1]];
      if (fp) {
        m2 = (ext = fp).match(/[\.\\]([^\.\\])+$/);
        if (m2 && ContentTypeMap[m2[1]])
          return ContentTypeMap[m2[1]];
      }
      return "application/octet-stream";
    }
    function write_base64_76(bstr) {
      var data = Base64_encode(bstr);
      var o2 = [];
      for (var i3 = 0; i3 < data.length; i3 += 76)
        o2.push(data.slice(i3, i3 + 76));
      return o2.join("\r\n") + "\r\n";
    }
    function write_quoted_printable(text) {
      var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c2) {
        var w2 = c2.charCodeAt(0).toString(16).toUpperCase();
        return "=" + (w2.length == 1 ? "0" + w2 : w2);
      });
      encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
      if (encoded.charAt(0) == "\n")
        encoded = "=0D" + encoded.slice(1);
      encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
      var o2 = [], split = encoded.split("\r\n");
      for (var si = 0; si < split.length; ++si) {
        var str = split[si];
        if (str.length == 0) {
          o2.push("");
          continue;
        }
        for (var i3 = 0; i3 < str.length; ) {
          var end = 76;
          var tmp = str.slice(i3, i3 + end);
          if (tmp.charAt(end - 1) == "=")
            end--;
          else if (tmp.charAt(end - 2) == "=")
            end -= 2;
          else if (tmp.charAt(end - 3) == "=")
            end -= 3;
          tmp = str.slice(i3, i3 + end);
          i3 += end;
          if (i3 < str.length)
            tmp += "=";
          o2.push(tmp);
        }
      }
      return o2.join("\r\n");
    }
    function parse_quoted_printable(data) {
      var o2 = [];
      for (var di = 0; di < data.length; ++di) {
        var line = data[di];
        while (di <= data.length && line.charAt(line.length - 1) == "=")
          line = line.slice(0, line.length - 1) + data[++di];
        o2.push(line);
      }
      for (var oi = 0; oi < o2.length; ++oi)
        o2[oi] = o2[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {
          return String.fromCharCode(parseInt($$.slice(1), 16));
        });
      return s2a(o2.join("\r\n"));
    }
    function parse_mime(cfb, data, root) {
      var fname = "", cte = "", ctype = "", fdata;
      var di = 0;
      for (; di < 10; ++di) {
        var line = data[di];
        if (!line || line.match(/^\s*$/))
          break;
        var m2 = line.match(/^(.*?):\s*([^\s].*)$/);
        if (m2)
          switch (m2[1].toLowerCase()) {
            case "content-location":
              fname = m2[2].trim();
              break;
            case "content-type":
              ctype = m2[2].trim();
              break;
            case "content-transfer-encoding":
              cte = m2[2].trim();
              break;
          }
      }
      ++di;
      switch (cte.toLowerCase()) {
        case "base64":
          fdata = s2a(Base64_decode(data.slice(di).join("")));
          break;
        case "quoted-printable":
          fdata = parse_quoted_printable(data.slice(di));
          break;
        default:
          throw new Error("Unsupported Content-Transfer-Encoding " + cte);
      }
      var file = cfb_add(cfb, fname.slice(root.length), fdata, { unsafe: true });
      if (ctype)
        file.ctype = ctype;
    }
    function parse_mad(file, options) {
      if (a2s2(file.slice(0, 13)).toLowerCase() != "mime-version:")
        throw new Error("Unsupported MAD header");
      var root = options && options.root || "";
      var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s2(file)).split("\r\n");
      var di = 0, row = "";
      for (di = 0; di < data.length; ++di) {
        row = data[di];
        if (!/^Content-Location:/i.test(row))
          continue;
        row = row.slice(row.indexOf("file"));
        if (!root)
          root = row.slice(0, row.lastIndexOf("/") + 1);
        if (row.slice(0, root.length) == root)
          continue;
        while (root.length > 0) {
          root = root.slice(0, root.length - 1);
          root = root.slice(0, root.lastIndexOf("/") + 1);
          if (row.slice(0, root.length) == root)
            break;
        }
      }
      var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
      if (!mboundary)
        throw new Error("MAD cannot find boundary");
      var boundary = "--" + (mboundary[1] || "");
      var FileIndex = [], FullPaths = [];
      var o2 = {
        FileIndex,
        FullPaths
      };
      init_cfb(o2);
      var start_di, fcnt = 0;
      for (di = 0; di < data.length; ++di) {
        var line = data[di];
        if (line !== boundary && line !== boundary + "--")
          continue;
        if (fcnt++)
          parse_mime(o2, data.slice(start_di, di), root);
        start_di = di;
      }
      return o2;
    }
    function write_mad(cfb, options) {
      var opts = options || {};
      var boundary = opts.boundary || "SheetJS";
      boundary = "------=" + boundary;
      var out = [
        "MIME-Version: 1.0",
        'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
        "",
        "",
        ""
      ];
      var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
      for (var i3 = 1; i3 < cfb.FullPaths.length; ++i3) {
        fp = cfb.FullPaths[i3].slice(root.length);
        fi = cfb.FileIndex[i3];
        if (!fi.size || !fi.content || fp == "Sh33tJ5")
          continue;
        fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c2) {
          return "_x" + c2.charCodeAt(0).toString(16) + "_";
        }).replace(/[\u0080-\uFFFF]/g, function(u2) {
          return "_u" + u2.charCodeAt(0).toString(16) + "_";
        });
        var ca = fi.content;
        var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s2(ca);
        var dispcnt = 0, L2 = Math.min(1024, cstr.length), cc = 0;
        for (var csl = 0; csl <= L2; ++csl)
          if ((cc = cstr.charCodeAt(csl)) >= 32 && cc < 128)
            ++dispcnt;
        var qp = dispcnt >= L2 * 4 / 5;
        out.push(boundary);
        out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
        out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
        out.push("Content-Type: " + get_content_type(fi, fp));
        out.push("");
        out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
      }
      out.push(boundary + "--\r\n");
      return out.join("\r\n");
    }
    function cfb_new(opts) {
      var o2 = {};
      init_cfb(o2, opts);
      return o2;
    }
    function cfb_add(cfb, name, content, opts) {
      var unsafe = opts && opts.unsafe;
      if (!unsafe)
        init_cfb(cfb);
      var file = !unsafe && CFB.find(cfb, name);
      if (!file) {
        var fpath = cfb.FullPaths[0];
        if (name.slice(0, fpath.length) == fpath)
          fpath = name;
        else {
          if (fpath.slice(-1) != "/")
            fpath += "/";
          fpath = (fpath + name).replace("//", "/");
        }
        file = { name: filename(name), type: 2 };
        cfb.FileIndex.push(file);
        cfb.FullPaths.push(fpath);
        if (!unsafe)
          CFB.utils.cfb_gc(cfb);
      }
      file.content = content;
      file.size = content ? content.length : 0;
      if (opts) {
        if (opts.CLSID)
          file.clsid = opts.CLSID;
        if (opts.mt)
          file.mt = opts.mt;
        if (opts.ct)
          file.ct = opts.ct;
      }
      return file;
    }
    function cfb_del(cfb, name) {
      init_cfb(cfb);
      var file = CFB.find(cfb, name);
      if (file) {
        for (var j2 = 0; j2 < cfb.FileIndex.length; ++j2)
          if (cfb.FileIndex[j2] == file) {
            cfb.FileIndex.splice(j2, 1);
            cfb.FullPaths.splice(j2, 1);
            return true;
          }
      }
      return false;
    }
    function cfb_mov(cfb, old_name, new_name) {
      init_cfb(cfb);
      var file = CFB.find(cfb, old_name);
      if (file) {
        for (var j2 = 0; j2 < cfb.FileIndex.length; ++j2)
          if (cfb.FileIndex[j2] == file) {
            cfb.FileIndex[j2].name = filename(new_name);
            cfb.FullPaths[j2] = new_name;
            return true;
          }
      }
      return false;
    }
    function cfb_gc(cfb) {
      rebuild_cfb(cfb, true);
    }
    exports.find = find;
    exports.read = read;
    exports.parse = parse2;
    exports.write = write;
    exports.writeFile = write_file;
    exports.utils = {
      cfb_new,
      cfb_add,
      cfb_del,
      cfb_mov,
      cfb_gc,
      ReadShift,
      CheckField,
      prep_blob,
      bconcat,
      use_zlib,
      _deflateRaw: _deflate,
      _inflateRaw: _inflate,
      consts
    };
    return exports;
  }();
  function read_binary(path) {
    if (typeof Deno !== "undefined")
      return Deno.readFileSync(path);
    if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined")
      try {
        var infile = File(path);
        infile.open("r");
        infile.encoding = "binary";
        var data = infile.read();
        infile.close();
        return data;
      } catch (e2) {
        if (!e2.message || !e2.message.match(/onstruct/))
          throw e2;
      }
    throw new Error("Cannot access file " + path);
  }
  function keys(o2) {
    var ks2 = Object.keys(o2), o22 = [];
    for (var i2 = 0; i2 < ks2.length; ++i2)
      if (Object.prototype.hasOwnProperty.call(o2, ks2[i2]))
        o22.push(ks2[i2]);
    return o22;
  }
  function evert(obj) {
    var o2 = [], K2 = keys(obj);
    for (var i2 = 0; i2 !== K2.length; ++i2)
      o2[obj[K2[i2]]] = K2[i2];
    return o2;
  }
  var basedate = /* @__PURE__ */ new Date(1899, 11, 30, 0, 0, 0);
  function datenum(v2, date1904) {
    var epoch = /* @__PURE__ */ v2.getTime();
    if (date1904)
      epoch -= 1462 * 24 * 60 * 60 * 1e3;
    var dnthresh2 = /* @__PURE__ */ basedate.getTime() + (/* @__PURE__ */ v2.getTimezoneOffset() - /* @__PURE__ */ basedate.getTimezoneOffset()) * 6e4;
    return (epoch - dnthresh2) / (24 * 60 * 60 * 1e3);
  }
  var refdate = /* @__PURE__ */ new Date();
  var dnthresh = /* @__PURE__ */ basedate.getTime() + (/* @__PURE__ */ refdate.getTimezoneOffset() - /* @__PURE__ */ basedate.getTimezoneOffset()) * 6e4;
  var refoffset = /* @__PURE__ */ refdate.getTimezoneOffset();
  function numdate(v2) {
    var out = /* @__PURE__ */ new Date();
    out.setTime(v2 * 24 * 60 * 60 * 1e3 + dnthresh);
    if (out.getTimezoneOffset() !== refoffset) {
      out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 6e4);
    }
    return out;
  }
  function parse_isodur(s2) {
    var sec = 0, mt2 = 0, time = false;
    var m2 = s2.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
    if (!m2)
      throw new Error("|" + s2 + "| is not an ISO8601 Duration");
    for (var i2 = 1; i2 != m2.length; ++i2) {
      if (!m2[i2])
        continue;
      mt2 = 1;
      if (i2 > 3)
        time = true;
      switch (m2[i2].slice(m2[i2].length - 1)) {
        case "Y":
          throw new Error("Unsupported ISO Duration Field: " + m2[i2].slice(m2[i2].length - 1));
        case "D":
          mt2 *= 24;
        case "H":
          mt2 *= 60;
        case "M":
          if (!time)
            throw new Error("Unsupported ISO Duration Field: M");
          else
            mt2 *= 60;
      }
      sec += mt2 * parseInt(m2[i2], 10);
    }
    return sec;
  }
  var good_pd_date_1 = /* @__PURE__ */ new Date("2017-02-19T19:06:09.000Z");
  var good_pd_date = /* @__PURE__ */ isNaN(/* @__PURE__ */ good_pd_date_1.getFullYear()) ? /* @__PURE__ */ new Date("2/19/17") : good_pd_date_1;
  var good_pd = /* @__PURE__ */ good_pd_date.getFullYear() == 2017;
  function parseDate(str, fixdate) {
    var d2 = new Date(str);
    if (good_pd) {
      if (fixdate > 0)
        d2.setTime(d2.getTime() + d2.getTimezoneOffset() * 60 * 1e3);
      else if (fixdate < 0)
        d2.setTime(d2.getTime() - d2.getTimezoneOffset() * 60 * 1e3);
      return d2;
    }
    if (str instanceof Date)
      return str;
    if (good_pd_date.getFullYear() == 1917 && !isNaN(d2.getFullYear())) {
      var s2 = d2.getFullYear();
      if (str.indexOf("" + s2) > -1)
        return d2;
      d2.setFullYear(d2.getFullYear() + 100);
      return d2;
    }
    var n2 = str.match(/\d+/g) || ["2017", "2", "19", "0", "0", "0"];
    var out = new Date(+n2[0], +n2[1] - 1, +n2[2], +n2[3] || 0, +n2[4] || 0, +n2[5] || 0);
    if (str.indexOf("Z") > -1)
      out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1e3);
    return out;
  }
  function cc2str(arr, debomit) {
    if (has_buf && Buffer.isBuffer(arr)) {
      if (debomit) {
        if (arr[0] == 255 && arr[1] == 254)
          return utf8write(arr.slice(2).toString("utf16le"));
        if (arr[1] == 254 && arr[2] == 255)
          return utf8write(utf16beread(arr.slice(2).toString("binary")));
      }
      return arr.toString("binary");
    }
    if (typeof TextDecoder !== "undefined")
      try {
        if (debomit) {
          if (arr[0] == 255 && arr[1] == 254)
            return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
          if (arr[0] == 254 && arr[1] == 255)
            return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
        }
        var rev = {
          "€": "",
          "‚": "",
          "ƒ": "",
          "„": "",
          "…": "",
          "†": "",
          "‡": "",
          "ˆ": "",
          "‰": "",
          "Š": "",
          "‹": "",
          "Œ": "",
          "Ž": "",
          "‘": "",
          "’": "",
          "“": "",
          "”": "",
          "•": "",
          "–": "",
          "—": "",
          "˜": "",
          "™": "",
          "š": "",
          "›": "",
          "œ": "",
          "ž": "",
          "Ÿ": ""
        };
        if (Array.isArray(arr))
          arr = new Uint8Array(arr);
        return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c2) {
          return rev[c2] || c2;
        });
      } catch (e2) {
      }
    var o2 = [];
    for (var i2 = 0; i2 != arr.length; ++i2)
      o2.push(String.fromCharCode(arr[i2]));
    return o2.join("");
  }
  function dup(o2) {
    if (typeof JSON != "undefined" && !Array.isArray(o2))
      return JSON.parse(JSON.stringify(o2));
    if (typeof o2 != "object" || o2 == null)
      return o2;
    if (o2 instanceof Date)
      return new Date(o2.getTime());
    var out = {};
    for (var k in o2)
      if (Object.prototype.hasOwnProperty.call(o2, k))
        out[k] = dup(o2[k]);
    return out;
  }
  function fill(c2, l2) {
    var o2 = "";
    while (o2.length < l2)
      o2 += c2;
    return o2;
  }
  function fuzzynum(s2) {
    var v2 = Number(s2);
    if (!isNaN(v2))
      return isFinite(v2) ? v2 : NaN;
    if (!/\d/.test(s2))
      return v2;
    var wt2 = 1;
    var ss2 = s2.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
      wt2 *= 100;
      return "";
    });
    if (!isNaN(v2 = Number(ss2)))
      return v2 / wt2;
    ss2 = ss2.replace(/[(](.*)[)]/, function($$, $1) {
      wt2 = -wt2;
      return $1;
    });
    if (!isNaN(v2 = Number(ss2)))
      return v2 / wt2;
    return v2;
  }
  var lower_months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
  function fuzzydate(s2) {
    var o2 = new Date(s2), n2 = /* @__PURE__ */ new Date(NaN);
    var y2 = o2.getYear(), m2 = o2.getMonth(), d2 = o2.getDate();
    if (isNaN(d2))
      return n2;
    var lower = s2.toLowerCase();
    if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
      lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
      if (lower.length > 3 && lower_months.indexOf(lower) == -1)
        return n2;
    } else if (lower.match(/[a-z]/))
      return n2;
    if (y2 < 0 || y2 > 8099)
      return n2;
    if ((m2 > 0 || d2 > 1) && y2 != 101)
      return o2;
    if (s2.match(/[^-0-9:,\/\\]/))
      return n2;
    return o2;
  }
  var split_regex = /* @__PURE__ */ function() {
    var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
    return function split_regex2(str, re2, def) {
      if (safe_split_regex || typeof re2 == "string")
        return str.split(re2);
      var p2 = str.split(re2), o2 = [p2[0]];
      for (var i2 = 1; i2 < p2.length; ++i2) {
        o2.push(def);
        o2.push(p2[i2]);
      }
      return o2;
    };
  }();
  function getdatastr(data) {
    if (!data)
      return null;
    if (data.content && data.type)
      return cc2str(data.content, true);
    if (data.data)
      return debom(data.data);
    if (data.asNodeBuffer && has_buf)
      return debom(data.asNodeBuffer().toString("binary"));
    if (data.asBinary)
      return debom(data.asBinary());
    if (data._data && data._data.getContent)
      return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
    return null;
  }
  function getdatabin(data) {
    if (!data)
      return null;
    if (data.data)
      return char_codes(data.data);
    if (data.asNodeBuffer && has_buf)
      return data.asNodeBuffer();
    if (data._data && data._data.getContent) {
      var o2 = data._data.getContent();
      if (typeof o2 == "string")
        return char_codes(o2);
      return Array.prototype.slice.call(o2);
    }
    if (data.content && data.type)
      return data.content;
    return null;
  }
  function getdata(data) {
    return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
  }
  function safegetzipfile(zip, file) {
    var k = zip.FullPaths || keys(zip.files);
    var f2 = file.toLowerCase().replace(/[\/]/g, "\\"), g2 = f2.replace(/\\/g, "/");
    for (var i2 = 0; i2 < k.length; ++i2) {
      var n2 = k[i2].replace(/^Root Entry[\/]/, "").toLowerCase();
      if (f2 == n2 || g2 == n2)
        return zip.files ? zip.files[k[i2]] : zip.FileIndex[i2];
    }
    return null;
  }
  function getzipfile(zip, file) {
    var o2 = safegetzipfile(zip, file);
    if (o2 == null)
      throw new Error("Cannot find file " + file + " in zip");
    return o2;
  }
  function getzipdata(zip, file, safe) {
    if (!safe)
      return getdata(getzipfile(zip, file));
    if (!file)
      return null;
    try {
      return getzipdata(zip, file);
    } catch (e2) {
      return null;
    }
  }
  function getzipstr(zip, file, safe) {
    if (!safe)
      return getdatastr(getzipfile(zip, file));
    if (!file)
      return null;
    try {
      return getzipstr(zip, file);
    } catch (e2) {
      return null;
    }
  }
  function getzipbin(zip, file, safe) {
    if (!safe)
      return getdatabin(getzipfile(zip, file));
    if (!file)
      return null;
    try {
      return getzipbin(zip, file);
    } catch (e2) {
      return null;
    }
  }
  function zipentries(zip) {
    var k = zip.FullPaths || keys(zip.files), o2 = [];
    for (var i2 = 0; i2 < k.length; ++i2)
      if (k[i2].slice(-1) != "/")
        o2.push(k[i2].replace(/^Root Entry[\/]/, ""));
    return o2.sort();
  }
  function zip_add_file(zip, path, content) {
    if (zip.FullPaths) {
      if (typeof content == "string") {
        var res;
        if (has_buf)
          res = Buffer_from(content);
        else
          res = utf8decode(content);
        return CFB.utils.cfb_add(zip, path, res);
      }
      CFB.utils.cfb_add(zip, path, content);
    } else
      zip.file(path, content);
  }
  function zip_read(d2, o2) {
    switch (o2.type) {
      case "base64":
        return CFB.read(d2, { type: "base64" });
      case "binary":
        return CFB.read(d2, { type: "binary" });
      case "buffer":
      case "array":
        return CFB.read(d2, { type: "buffer" });
    }
    throw new Error("Unrecognized type " + o2.type);
  }
  function resolve_path(path, base) {
    if (path.charAt(0) == "/")
      return path.slice(1);
    var result = base.split("/");
    if (base.slice(-1) != "/")
      result.pop();
    var target = path.split("/");
    while (target.length !== 0) {
      var step = target.shift();
      if (step === "..")
        result.pop();
      else if (step !== ".")
        result.push(step);
    }
    return result.join("/");
  }
  var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
  var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
  var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
  var tagregex = /* @__PURE__ */ XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
  var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
  function parsexmltag(tag, skip_root, skip_LC) {
    var z2 = {};
    var eq = 0, c2 = 0;
    for (; eq !== tag.length; ++eq)
      if ((c2 = tag.charCodeAt(eq)) === 32 || c2 === 10 || c2 === 13)
        break;
    if (!skip_root)
      z2[0] = tag.slice(0, eq);
    if (eq === tag.length)
      return z2;
    var m2 = tag.match(attregexg), j2 = 0, v2 = "", i2 = 0, q2 = "", cc = "", quot = 1;
    if (m2)
      for (i2 = 0; i2 != m2.length; ++i2) {
        cc = m2[i2];
        for (c2 = 0; c2 != cc.length; ++c2)
          if (cc.charCodeAt(c2) === 61)
            break;
        q2 = cc.slice(0, c2).trim();
        while (cc.charCodeAt(c2 + 1) == 32)
          ++c2;
        quot = (eq = cc.charCodeAt(c2 + 1)) == 34 || eq == 39 ? 1 : 0;
        v2 = cc.slice(c2 + 1 + quot, cc.length - quot);
        for (j2 = 0; j2 != q2.length; ++j2)
          if (q2.charCodeAt(j2) === 58)
            break;
        if (j2 === q2.length) {
          if (q2.indexOf("_") > 0)
            q2 = q2.slice(0, q2.indexOf("_"));
          z2[q2] = v2;
          if (!skip_LC)
            z2[q2.toLowerCase()] = v2;
        } else {
          var k = (j2 === 5 && q2.slice(0, 5) === "xmlns" ? "xmlns" : "") + q2.slice(j2 + 1);
          if (z2[k] && q2.slice(j2 - 3, j2) == "ext")
            continue;
          z2[k] = v2;
          if (!skip_LC)
            z2[k.toLowerCase()] = v2;
        }
      }
    return z2;
  }
  function strip_ns(x) {
    return x.replace(nsregex2, "<$1");
  }
  var encodings = {
    "&quot;": '"',
    "&apos;": "'",
    "&gt;": ">",
    "&lt;": "<",
    "&amp;": "&"
  };
  var rencoding = /* @__PURE__ */ evert(encodings);
  var unescapexml = /* @__PURE__ */ function() {
    var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
    return function unescapexml2(text) {
      var s2 = text + "", i2 = s2.indexOf("<![CDATA[");
      if (i2 == -1)
        return s2.replace(encregex, function($$, $1) {
          return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
        }).replace(coderegex, function(m2, c2) {
          return String.fromCharCode(parseInt(c2, 16));
        });
      var j2 = s2.indexOf("]]>");
      return unescapexml2(s2.slice(0, i2)) + s2.slice(i2 + 9, j2) + unescapexml2(s2.slice(j2 + 3));
    };
  }();
  var decregex = /[&<>'"]/g;
  var htmlcharegex = /[\u0000-\u001f]/g;
  function escapehtml(text) {
    var s2 = text + "";
    return s2.replace(decregex, function(y2) {
      return rencoding[y2];
    }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s3) {
      return "&#x" + ("000" + s3.charCodeAt(0).toString(16)).slice(-4) + ";";
    });
  }
  var xlml_fixstr = /* @__PURE__ */ function() {
    var entregex = /&#(\d+);/g;
    function entrepl($$, $1) {
      return String.fromCharCode(parseInt($1, 10));
    }
    return function xlml_fixstr2(str) {
      return str.replace(entregex, entrepl);
    };
  }();
  function parsexmlbool(value2) {
    switch (value2) {
      case 1:
      case true:
      case "1":
      case "true":
      case "TRUE":
        return true;
      default:
        return false;
    }
  }
  function utf8reada(orig) {
    var out = "", i2 = 0, c2 = 0, d2 = 0, e2 = 0, f2 = 0, w2 = 0;
    while (i2 < orig.length) {
      c2 = orig.charCodeAt(i2++);
      if (c2 < 128) {
        out += String.fromCharCode(c2);
        continue;
      }
      d2 = orig.charCodeAt(i2++);
      if (c2 > 191 && c2 < 224) {
        f2 = (c2 & 31) << 6;
        f2 |= d2 & 63;
        out += String.fromCharCode(f2);
        continue;
      }
      e2 = orig.charCodeAt(i2++);
      if (c2 < 240) {
        out += String.fromCharCode((c2 & 15) << 12 | (d2 & 63) << 6 | e2 & 63);
        continue;
      }
      f2 = orig.charCodeAt(i2++);
      w2 = ((c2 & 7) << 18 | (d2 & 63) << 12 | (e2 & 63) << 6 | f2 & 63) - 65536;
      out += String.fromCharCode(55296 + (w2 >>> 10 & 1023));
      out += String.fromCharCode(56320 + (w2 & 1023));
    }
    return out;
  }
  function utf8readb(data) {
    var out = new_raw_buf(2 * data.length), w2, i2, j2 = 1, k = 0, ww = 0, c2;
    for (i2 = 0; i2 < data.length; i2 += j2) {
      j2 = 1;
      if ((c2 = data.charCodeAt(i2)) < 128)
        w2 = c2;
      else if (c2 < 224) {
        w2 = (c2 & 31) * 64 + (data.charCodeAt(i2 + 1) & 63);
        j2 = 2;
      } else if (c2 < 240) {
        w2 = (c2 & 15) * 4096 + (data.charCodeAt(i2 + 1) & 63) * 64 + (data.charCodeAt(i2 + 2) & 63);
        j2 = 3;
      } else {
        j2 = 4;
        w2 = (c2 & 7) * 262144 + (data.charCodeAt(i2 + 1) & 63) * 4096 + (data.charCodeAt(i2 + 2) & 63) * 64 + (data.charCodeAt(i2 + 3) & 63);
        w2 -= 65536;
        ww = 55296 + (w2 >>> 10 & 1023);
        w2 = 56320 + (w2 & 1023);
      }
      if (ww !== 0) {
        out[k++] = ww & 255;
        out[k++] = ww >>> 8;
        ww = 0;
      }
      out[k++] = w2 % 256;
      out[k++] = w2 >>> 8;
    }
    return out.slice(0, k).toString("ucs2");
  }
  function utf8readc(data) {
    return Buffer_from(data, "binary").toString("utf8");
  }
  var utf8corpus = "foo bar bazâð£";
  var utf8read = has_buf && (/* @__PURE__ */ utf8readc(utf8corpus) == /* @__PURE__ */ utf8reada(utf8corpus) && utf8readc || /* @__PURE__ */ utf8readb(utf8corpus) == /* @__PURE__ */ utf8reada(utf8corpus) && utf8readb) || utf8reada;
  var utf8write = has_buf ? function(data) {
    return Buffer_from(data, "utf8").toString("binary");
  } : function(orig) {
    var out = [], i2 = 0, c2 = 0, d2 = 0;
    while (i2 < orig.length) {
      c2 = orig.charCodeAt(i2++);
      switch (true) {
        case c2 < 128:
          out.push(String.fromCharCode(c2));
          break;
        case c2 < 2048:
          out.push(String.fromCharCode(192 + (c2 >> 6)));
          out.push(String.fromCharCode(128 + (c2 & 63)));
          break;
        case (c2 >= 55296 && c2 < 57344):
          c2 -= 55296;
          d2 = orig.charCodeAt(i2++) - 56320 + (c2 << 10);
          out.push(String.fromCharCode(240 + (d2 >> 18 & 7)));
          out.push(String.fromCharCode(144 + (d2 >> 12 & 63)));
          out.push(String.fromCharCode(128 + (d2 >> 6 & 63)));
          out.push(String.fromCharCode(128 + (d2 & 63)));
          break;
        default:
          out.push(String.fromCharCode(224 + (c2 >> 12)));
          out.push(String.fromCharCode(128 + (c2 >> 6 & 63)));
          out.push(String.fromCharCode(128 + (c2 & 63)));
      }
    }
    return out.join("");
  };
  var matchtag = /* @__PURE__ */ function() {
    var mtcache = {};
    return function matchtag2(f2, g2) {
      var t2 = f2 + "|" + (g2 || "");
      if (mtcache[t2])
        return mtcache[t2];
      return mtcache[t2] = new RegExp("<(?:\\w+:)?" + f2 + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f2 + ">", g2 || "");
    };
  }();
  var htmldecode = /* @__PURE__ */ function() {
    var entities = [
      ["nbsp", " "],
      ["middot", "·"],
      ["quot", '"'],
      ["apos", "'"],
      ["gt", ">"],
      ["lt", "<"],
      ["amp", "&"]
    ].map(function(x) {
      return [new RegExp("&" + x[0] + ";", "ig"), x[1]];
    });
    return function htmldecode2(str) {
      var o2 = str.replace(/^[\t\n\r ]+/, "").replace(/[\t\n\r ]+$/, "").replace(/>\s+/g, ">").replace(/\s+</g, "<").replace(/[\t\n\r ]+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g, "\n").replace(/<[^>]*>/g, "");
      for (var i2 = 0; i2 < entities.length; ++i2)
        o2 = o2.replace(entities[i2][0], entities[i2][1]);
      return o2;
    };
  }();
  var vtregex = /* @__PURE__ */ function() {
    var vt_cache = {};
    return function vt_regex(bt2) {
      if (vt_cache[bt2] !== void 0)
        return vt_cache[bt2];
      return vt_cache[bt2] = new RegExp("<(?:vt:)?" + bt2 + ">([\\s\\S]*?)</(?:vt:)?" + bt2 + ">", "g");
    };
  }();
  var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
  function parseVector(data, opts) {
    var h2 = parsexmltag(data);
    var matches = data.match(vtregex(h2.baseType)) || [];
    var res = [];
    if (matches.length != h2.size) {
      if (opts.WTF)
        throw new Error("unexpected vector length " + matches.length + " != " + h2.size);
      return res;
    }
    matches.forEach(function(x) {
      var v2 = x.replace(vtvregex, "").match(vtmregex);
      if (v2)
        res.push({ v: utf8read(v2[2]), t: v2[1] });
    });
    return res;
  }
  var wtregex = /(^\s|\s$|\n)/;
  function wxt_helper(h2) {
    return keys(h2).map(function(k) {
      return " " + k + '="' + h2[k] + '"';
    }).join("");
  }
  function writextag(f2, g2, h2) {
    return "<" + f2 + (h2 != null ? wxt_helper(h2) : "") + (g2 != null ? (g2.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g2 + "</" + f2 : "/") + ">";
  }
  function xlml_normalize(d2) {
    if (has_buf && /*::typeof Buffer !== "undefined" && d != null && d instanceof Buffer &&*/
    Buffer.isBuffer(d2))
      return d2.toString("utf8");
    if (typeof d2 === "string")
      return d2;
    if (typeof Uint8Array !== "undefined" && d2 instanceof Uint8Array)
      return utf8read(a2s(ab2a(d2)));
    throw new Error("Bad input format: expected Buffer or string");
  }
  var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
  var XMLNS = {
    CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
    CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
    EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
    CT: "http://schemas.openxmlformats.org/package/2006/content-types",
    RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
    TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
    "dc": "http://purl.org/dc/elements/1.1/",
    "dcterms": "http://purl.org/dc/terms/",
    "dcmitype": "http://purl.org/dc/dcmitype/",
    "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
    "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
    "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
    "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
    "xsi": "http://www.w3.org/2001/XMLSchema-instance",
    "xsd": "http://www.w3.org/2001/XMLSchema"
  };
  var XMLNS_main = [
    "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
    "http://purl.oclc.org/ooxml/spreadsheetml/main",
    "http://schemas.microsoft.com/office/excel/2006/main",
    "http://schemas.microsoft.com/office/excel/2006/2"
  ];
  function read_double_le(b2, idx) {
    var s2 = 1 - 2 * (b2[idx + 7] >>> 7);
    var e2 = ((b2[idx + 7] & 127) << 4) + (b2[idx + 6] >>> 4 & 15);
    var m2 = b2[idx + 6] & 15;
    for (var i2 = 5; i2 >= 0; --i2)
      m2 = m2 * 256 + b2[idx + i2];
    if (e2 == 2047)
      return m2 == 0 ? s2 * Infinity : NaN;
    if (e2 == 0)
      e2 = -1022;
    else {
      e2 -= 1023;
      m2 += Math.pow(2, 52);
    }
    return s2 * Math.pow(2, e2 - 52) * m2;
  }
  function write_double_le(b2, v2, idx) {
    var bs2 = (v2 < 0 || 1 / v2 == -Infinity ? 1 : 0) << 7, e2 = 0, m2 = 0;
    var av = bs2 ? -v2 : v2;
    if (!isFinite(av)) {
      e2 = 2047;
      m2 = isNaN(v2) ? 26985 : 0;
    } else if (av == 0)
      e2 = m2 = 0;
    else {
      e2 = Math.floor(Math.log(av) / Math.LN2);
      m2 = av * Math.pow(2, 52 - e2);
      if (e2 <= -1023 && (!isFinite(m2) || m2 < Math.pow(2, 52))) {
        e2 = -1022;
      } else {
        m2 -= Math.pow(2, 52);
        e2 += 1023;
      }
    }
    for (var i2 = 0; i2 <= 5; ++i2, m2 /= 256)
      b2[idx + i2] = m2 & 255;
    b2[idx + 6] = (e2 & 15) << 4 | m2 & 15;
    b2[idx + 7] = e2 >> 4 | bs2;
  }
  var ___toBuffer = function(bufs) {
    var x = [], w2 = 10240;
    for (var i2 = 0; i2 < bufs[0].length; ++i2)
      if (bufs[0][i2])
        for (var j2 = 0, L2 = bufs[0][i2].length; j2 < L2; j2 += w2)
          x.push.apply(x, bufs[0][i2].slice(j2, j2 + w2));
    return x;
  };
  var __toBuffer = has_buf ? function(bufs) {
    return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x) {
      return Buffer.isBuffer(x) ? x : Buffer_from(x);
    })) : ___toBuffer(bufs);
  } : ___toBuffer;
  var ___utf16le = function(b2, s2, e2) {
    var ss2 = [];
    for (var i2 = s2; i2 < e2; i2 += 2)
      ss2.push(String.fromCharCode(__readUInt16LE(b2, i2)));
    return ss2.join("").replace(chr0, "");
  };
  var __utf16le = has_buf ? function(b2, s2, e2) {
    if (!Buffer.isBuffer(b2))
      return ___utf16le(b2, s2, e2);
    return b2.toString("utf16le", s2, e2).replace(chr0, "");
  } : ___utf16le;
  var ___hexlify = function(b2, s2, l2) {
    var ss2 = [];
    for (var i2 = s2; i2 < s2 + l2; ++i2)
      ss2.push(("0" + b2[i2].toString(16)).slice(-2));
    return ss2.join("");
  };
  var __hexlify = has_buf ? function(b2, s2, l2) {
    return Buffer.isBuffer(b2) ? b2.toString("hex", s2, s2 + l2) : ___hexlify(b2, s2, l2);
  } : ___hexlify;
  var ___utf8 = function(b2, s2, e2) {
    var ss2 = [];
    for (var i2 = s2; i2 < e2; i2++)
      ss2.push(String.fromCharCode(__readUInt8(b2, i2)));
    return ss2.join("");
  };
  var __utf8 = has_buf ? function utf8_b(b2, s2, e2) {
    return Buffer.isBuffer(b2) ? b2.toString("utf8", s2, e2) : ___utf8(b2, s2, e2);
  } : ___utf8;
  var ___lpstr = function(b2, i2) {
    var len = __readUInt32LE(b2, i2);
    return len > 0 ? __utf8(b2, i2 + 4, i2 + 4 + len - 1) : "";
  };
  var __lpstr = ___lpstr;
  var ___cpstr = function(b2, i2) {
    var len = __readUInt32LE(b2, i2);
    return len > 0 ? __utf8(b2, i2 + 4, i2 + 4 + len - 1) : "";
  };
  var __cpstr = ___cpstr;
  var ___lpwstr = function(b2, i2) {
    var len = 2 * __readUInt32LE(b2, i2);
    return len > 0 ? __utf8(b2, i2 + 4, i2 + 4 + len - 1) : "";
  };
  var __lpwstr = ___lpwstr;
  var ___lpp4 = function lpp4_(b2, i2) {
    var len = __readUInt32LE(b2, i2);
    return len > 0 ? __utf16le(b2, i2 + 4, i2 + 4 + len) : "";
  };
  var __lpp4 = ___lpp4;
  var ___8lpp4 = function(b2, i2) {
    var len = __readUInt32LE(b2, i2);
    return len > 0 ? __utf8(b2, i2 + 4, i2 + 4 + len) : "";
  };
  var __8lpp4 = ___8lpp4;
  var ___double = function(b2, idx) {
    return read_double_le(b2, idx);
  };
  var __double = ___double;
  var is_buf = function is_buf_a(a2) {
    return Array.isArray(a2) || typeof Uint8Array !== "undefined" && a2 instanceof Uint8Array;
  };
  if (has_buf) {
    __lpstr = function lpstr_b(b2, i2) {
      if (!Buffer.isBuffer(b2))
        return ___lpstr(b2, i2);
      var len = b2.readUInt32LE(i2);
      return len > 0 ? b2.toString("utf8", i2 + 4, i2 + 4 + len - 1) : "";
    };
    __cpstr = function cpstr_b(b2, i2) {
      if (!Buffer.isBuffer(b2))
        return ___cpstr(b2, i2);
      var len = b2.readUInt32LE(i2);
      return len > 0 ? b2.toString("utf8", i2 + 4, i2 + 4 + len - 1) : "";
    };
    __lpwstr = function lpwstr_b(b2, i2) {
      if (!Buffer.isBuffer(b2))
        return ___lpwstr(b2, i2);
      var len = 2 * b2.readUInt32LE(i2);
      return b2.toString("utf16le", i2 + 4, i2 + 4 + len - 1);
    };
    __lpp4 = function lpp4_b(b2, i2) {
      if (!Buffer.isBuffer(b2))
        return ___lpp4(b2, i2);
      var len = b2.readUInt32LE(i2);
      return b2.toString("utf16le", i2 + 4, i2 + 4 + len);
    };
    __8lpp4 = function lpp4_8b(b2, i2) {
      if (!Buffer.isBuffer(b2))
        return ___8lpp4(b2, i2);
      var len = b2.readUInt32LE(i2);
      return b2.toString("utf8", i2 + 4, i2 + 4 + len);
    };
    __double = function double_(b2, i2) {
      if (Buffer.isBuffer(b2))
        return b2.readDoubleLE(i2);
      return ___double(b2, i2);
    };
    is_buf = function is_buf_b(a2) {
      return Buffer.isBuffer(a2) || Array.isArray(a2) || typeof Uint8Array !== "undefined" && a2 instanceof Uint8Array;
    };
  }
  var __readUInt8 = function(b2, idx) {
    return b2[idx];
  };
  var __readUInt16LE = function(b2, idx) {
    return b2[idx + 1] * (1 << 8) + b2[idx];
  };
  var __readInt16LE = function(b2, idx) {
    var u2 = b2[idx + 1] * (1 << 8) + b2[idx];
    return u2 < 32768 ? u2 : (65535 - u2 + 1) * -1;
  };
  var __readUInt32LE = function(b2, idx) {
    return b2[idx + 3] * (1 << 24) + (b2[idx + 2] << 16) + (b2[idx + 1] << 8) + b2[idx];
  };
  var __readInt32LE = function(b2, idx) {
    return b2[idx + 3] << 24 | b2[idx + 2] << 16 | b2[idx + 1] << 8 | b2[idx];
  };
  var __readInt32BE = function(b2, idx) {
    return b2[idx] << 24 | b2[idx + 1] << 16 | b2[idx + 2] << 8 | b2[idx + 3];
  };
  function ReadShift(size, t2) {
    var o2 = "", oI, oR, oo = [], w2, vv, i2, loc;
    switch (t2) {
      case "dbcs":
        loc = this.l;
        if (has_buf && Buffer.isBuffer(this))
          o2 = this.slice(this.l, this.l + 2 * size).toString("utf16le");
        else
          for (i2 = 0; i2 < size; ++i2) {
            o2 += String.fromCharCode(__readUInt16LE(this, loc));
            loc += 2;
          }
        size *= 2;
        break;
      case "utf8":
        o2 = __utf8(this, this.l, this.l + size);
        break;
      case "utf16le":
        size *= 2;
        o2 = __utf16le(this, this.l, this.l + size);
        break;
      case "wstr":
        return ReadShift.call(this, size, "dbcs");
      case "lpstr-ansi":
        o2 = __lpstr(this, this.l);
        size = 4 + __readUInt32LE(this, this.l);
        break;
      case "lpstr-cp":
        o2 = __cpstr(this, this.l);
        size = 4 + __readUInt32LE(this, this.l);
        break;
      case "lpwstr":
        o2 = __lpwstr(this, this.l);
        size = 4 + 2 * __readUInt32LE(this, this.l);
        break;
      case "lpp4":
        size = 4 + __readUInt32LE(this, this.l);
        o2 = __lpp4(this, this.l);
        if (size & 2)
          size += 2;
        break;
      case "8lpp4":
        size = 4 + __readUInt32LE(this, this.l);
        o2 = __8lpp4(this, this.l);
        if (size & 3)
          size += 4 - (size & 3);
        break;
      case "cstr":
        size = 0;
        o2 = "";
        while ((w2 = __readUInt8(this, this.l + size++)) !== 0)
          oo.push(_getchar(w2));
        o2 = oo.join("");
        break;
      case "_wstr":
        size = 0;
        o2 = "";
        while ((w2 = __readUInt16LE(this, this.l + size)) !== 0) {
          oo.push(_getchar(w2));
          size += 2;
        }
        size += 2;
        o2 = oo.join("");
        break;
      case "dbcs-cont":
        o2 = "";
        loc = this.l;
        for (i2 = 0; i2 < size; ++i2) {
          if (this.lens && this.lens.indexOf(loc) !== -1) {
            w2 = __readUInt8(this, loc);
            this.l = loc + 1;
            vv = ReadShift.call(this, size - i2, w2 ? "dbcs-cont" : "sbcs-cont");
            return oo.join("") + vv;
          }
          oo.push(_getchar(__readUInt16LE(this, loc)));
          loc += 2;
        }
        o2 = oo.join("");
        size *= 2;
        break;
      case "cpstr":
      case "sbcs-cont":
        o2 = "";
        loc = this.l;
        for (i2 = 0; i2 != size; ++i2) {
          if (this.lens && this.lens.indexOf(loc) !== -1) {
            w2 = __readUInt8(this, loc);
            this.l = loc + 1;
            vv = ReadShift.call(this, size - i2, w2 ? "dbcs-cont" : "sbcs-cont");
            return oo.join("") + vv;
          }
          oo.push(_getchar(__readUInt8(this, loc)));
          loc += 1;
        }
        o2 = oo.join("");
        break;
      default:
        switch (size) {
          case 1:
            oI = __readUInt8(this, this.l);
            this.l++;
            return oI;
          case 2:
            oI = (t2 === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
            this.l += 2;
            return oI;
          case 4:
          case -4:
            if (t2 === "i" || (this[this.l + 3] & 128) === 0) {
              oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
              this.l += 4;
              return oI;
            } else {
              oR = __readUInt32LE(this, this.l);
              this.l += 4;
            }
            return oR;
          case 8:
          case -8:
            if (t2 === "f") {
              if (size == 8)
                oR = __double(this, this.l);
              else
                oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
              this.l += 8;
              return oR;
            } else
              size = 8;
          case 16:
            o2 = __hexlify(this, this.l, size);
            break;
        }
    }
    this.l += size;
    return o2;
  }
  var __writeUInt32LE = function(b2, val, idx) {
    b2[idx] = val & 255;
    b2[idx + 1] = val >>> 8 & 255;
    b2[idx + 2] = val >>> 16 & 255;
    b2[idx + 3] = val >>> 24 & 255;
  };
  var __writeInt32LE = function(b2, val, idx) {
    b2[idx] = val & 255;
    b2[idx + 1] = val >> 8 & 255;
    b2[idx + 2] = val >> 16 & 255;
    b2[idx + 3] = val >> 24 & 255;
  };
  var __writeUInt16LE = function(b2, val, idx) {
    b2[idx] = val & 255;
    b2[idx + 1] = val >>> 8 & 255;
  };
  function WriteShift(t2, val, f2) {
    var size = 0, i2 = 0;
    if (f2 === "dbcs") {
      for (i2 = 0; i2 != val.length; ++i2)
        __writeUInt16LE(this, val.charCodeAt(i2), this.l + 2 * i2);
      size = 2 * val.length;
    } else if (f2 === "sbcs") {
      {
        val = val.replace(/[^\x00-\x7F]/g, "_");
        for (i2 = 0; i2 != val.length; ++i2)
          this[this.l + i2] = val.charCodeAt(i2) & 255;
      }
      size = val.length;
    } else if (f2 === "hex") {
      for (; i2 < t2; ++i2) {
        this[this.l++] = parseInt(val.slice(2 * i2, 2 * i2 + 2), 16) || 0;
      }
      return this;
    } else if (f2 === "utf16le") {
      var end = Math.min(this.l + t2, this.length);
      for (i2 = 0; i2 < Math.min(val.length, t2); ++i2) {
        var cc = val.charCodeAt(i2);
        this[this.l++] = cc & 255;
        this[this.l++] = cc >> 8;
      }
      while (this.l < end)
        this[this.l++] = 0;
      return this;
    } else
      switch (t2) {
        case 1:
          size = 1;
          this[this.l] = val & 255;
          break;
        case 2:
          size = 2;
          this[this.l] = val & 255;
          val >>>= 8;
          this[this.l + 1] = val & 255;
          break;
        case 3:
          size = 3;
          this[this.l] = val & 255;
          val >>>= 8;
          this[this.l + 1] = val & 255;
          val >>>= 8;
          this[this.l + 2] = val & 255;
          break;
        case 4:
          size = 4;
          __writeUInt32LE(this, val, this.l);
          break;
        case 8:
          size = 8;
          if (f2 === "f") {
            write_double_le(this, val, this.l);
            break;
          }
        case 16:
          break;
        case -4:
          size = 4;
          __writeInt32LE(this, val, this.l);
          break;
      }
    this.l += size;
    return this;
  }
  function CheckField(hexstr, fld) {
    var m2 = __hexlify(this, this.l, hexstr.length >> 1);
    if (m2 !== hexstr)
      throw new Error(fld + "Expected " + hexstr + " saw " + m2);
    this.l += hexstr.length >> 1;
  }
  function prep_blob(blob, pos) {
    blob.l = pos;
    blob.read_shift = /*::(*/
    ReadShift;
    blob.chk = CheckField;
    blob.write_shift = WriteShift;
  }
  function parsenoop(blob, length) {
    blob.l += length;
  }
  function new_buf(sz) {
    var o2 = new_raw_buf(sz);
    prep_blob(o2, 0);
    return o2;
  }
  function recordhopper(data, cb, opts) {
    if (!data)
      return;
    var tmpbyte, cntbyte, length;
    prep_blob(data, data.l || 0);
    var L2 = data.length, RT = 0, tgt = 0;
    while (data.l < L2) {
      RT = data.read_shift(1);
      if (RT & 128)
        RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
      var R2 = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
      tmpbyte = data.read_shift(1);
      length = tmpbyte & 127;
      for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte)
        length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte;
      tgt = data.l + length;
      var d2 = R2.f && R2.f(data, length, opts);
      data.l = tgt;
      if (cb(d2, R2, RT))
        return;
    }
  }
  function buf_array() {
    var bufs = [], blksz = has_buf ? 256 : 2048;
    var newblk = function ba_newblk(sz) {
      var o2 = new_buf(sz);
      prep_blob(o2, 0);
      return o2;
    };
    var curbuf = newblk(blksz);
    var endbuf = function ba_endbuf() {
      if (!curbuf)
        return;
      if (curbuf.length > curbuf.l) {
        curbuf = curbuf.slice(0, curbuf.l);
        curbuf.l = curbuf.length;
      }
      if (curbuf.length > 0)
        bufs.push(curbuf);
      curbuf = null;
    };
    var next = function ba_next(sz) {
      if (curbuf && sz < curbuf.length - curbuf.l)
        return curbuf;
      endbuf();
      return curbuf = newblk(Math.max(sz + 1, blksz));
    };
    var end = function ba_end() {
      endbuf();
      return bconcat(bufs);
    };
    var push = function ba_push(buf) {
      endbuf();
      curbuf = buf;
      if (curbuf.l == null)
        curbuf.l = curbuf.length;
      next(blksz);
    };
    return { next, push, end, _bufs: bufs };
  }
  function shift_cell_xls(cell, tgt, opts) {
    var out = dup(cell);
    if (tgt.s) {
      if (out.cRel)
        out.c += tgt.s.c;
      if (out.rRel)
        out.r += tgt.s.r;
    } else {
      if (out.cRel)
        out.c += tgt.c;
      if (out.rRel)
        out.r += tgt.r;
    }
    if (!opts || opts.biff < 12) {
      while (out.c >= 256)
        out.c -= 256;
      while (out.r >= 65536)
        out.r -= 65536;
    }
    return out;
  }
  function shift_range_xls(cell, range2, opts) {
    var out = dup(cell);
    out.s = shift_cell_xls(out.s, range2.s, opts);
    out.e = shift_cell_xls(out.e, range2.s, opts);
    return out;
  }
  function encode_cell_xls(c2, biff) {
    if (c2.cRel && c2.c < 0) {
      c2 = dup(c2);
      while (c2.c < 0)
        c2.c += biff > 8 ? 16384 : 256;
    }
    if (c2.rRel && c2.r < 0) {
      c2 = dup(c2);
      while (c2.r < 0)
        c2.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
    }
    var s2 = encode_cell(c2);
    if (!c2.cRel && c2.cRel != null)
      s2 = fix_col(s2);
    if (!c2.rRel && c2.rRel != null)
      s2 = fix_row(s2);
    return s2;
  }
  function encode_range_xls(r2, opts) {
    if (r2.s.r == 0 && !r2.s.rRel) {
      if (r2.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) && !r2.e.rRel) {
        return (r2.s.cRel ? "" : "$") + encode_col(r2.s.c) + ":" + (r2.e.cRel ? "" : "$") + encode_col(r2.e.c);
      }
    }
    if (r2.s.c == 0 && !r2.s.cRel) {
      if (r2.e.c == (opts.biff >= 12 ? 16383 : 255) && !r2.e.cRel) {
        return (r2.s.rRel ? "" : "$") + encode_row(r2.s.r) + ":" + (r2.e.rRel ? "" : "$") + encode_row(r2.e.r);
      }
    }
    return encode_cell_xls(r2.s, opts.biff) + ":" + encode_cell_xls(r2.e, opts.biff);
  }
  function decode_row(rowstr) {
    return parseInt(unfix_row(rowstr), 10) - 1;
  }
  function encode_row(row) {
    return "" + (row + 1);
  }
  function fix_row(cstr) {
    return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
  }
  function unfix_row(cstr) {
    return cstr.replace(/\$(\d+)$/, "$1");
  }
  function decode_col(colstr) {
    var c2 = unfix_col(colstr), d2 = 0, i2 = 0;
    for (; i2 !== c2.length; ++i2)
      d2 = 26 * d2 + c2.charCodeAt(i2) - 64;
    return d2 - 1;
  }
  function encode_col(col) {
    if (col < 0)
      throw new Error("invalid column " + col);
    var s2 = "";
    for (++col; col; col = Math.floor((col - 1) / 26))
      s2 = String.fromCharCode((col - 1) % 26 + 65) + s2;
    return s2;
  }
  function fix_col(cstr) {
    return cstr.replace(/^([A-Z])/, "$$$1");
  }
  function unfix_col(cstr) {
    return cstr.replace(/^\$([A-Z])/, "$1");
  }
  function split_cell(cstr) {
    return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
  }
  function decode_cell(cstr) {
    var R2 = 0, C2 = 0;
    for (var i2 = 0; i2 < cstr.length; ++i2) {
      var cc = cstr.charCodeAt(i2);
      if (cc >= 48 && cc <= 57)
        R2 = 10 * R2 + (cc - 48);
      else if (cc >= 65 && cc <= 90)
        C2 = 26 * C2 + (cc - 64);
    }
    return { c: C2 - 1, r: R2 - 1 };
  }
  function encode_cell(cell) {
    var col = cell.c + 1;
    var s2 = "";
    for (; col; col = (col - 1) / 26 | 0)
      s2 = String.fromCharCode((col - 1) % 26 + 65) + s2;
    return s2 + (cell.r + 1);
  }
  function decode_range(range2) {
    var idx = range2.indexOf(":");
    if (idx == -1)
      return { s: decode_cell(range2), e: decode_cell(range2) };
    return { s: decode_cell(range2.slice(0, idx)), e: decode_cell(range2.slice(idx + 1)) };
  }
  function encode_range(cs2, ce2) {
    if (typeof ce2 === "undefined" || typeof ce2 === "number") {
      return encode_range(cs2.s, cs2.e);
    }
    if (typeof cs2 !== "string")
      cs2 = encode_cell(cs2);
    if (typeof ce2 !== "string")
      ce2 = encode_cell(ce2);
    return cs2 == ce2 ? cs2 : cs2 + ":" + ce2;
  }
  function safe_decode_range(range2) {
    var o2 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
    var idx = 0, i2 = 0, cc = 0;
    var len = range2.length;
    for (idx = 0; i2 < len; ++i2) {
      if ((cc = range2.charCodeAt(i2) - 64) < 1 || cc > 26)
        break;
      idx = 26 * idx + cc;
    }
    o2.s.c = --idx;
    for (idx = 0; i2 < len; ++i2) {
      if ((cc = range2.charCodeAt(i2) - 48) < 0 || cc > 9)
        break;
      idx = 10 * idx + cc;
    }
    o2.s.r = --idx;
    if (i2 === len || cc != 10) {
      o2.e.c = o2.s.c;
      o2.e.r = o2.s.r;
      return o2;
    }
    ++i2;
    for (idx = 0; i2 != len; ++i2) {
      if ((cc = range2.charCodeAt(i2) - 64) < 1 || cc > 26)
        break;
      idx = 26 * idx + cc;
    }
    o2.e.c = --idx;
    for (idx = 0; i2 != len; ++i2) {
      if ((cc = range2.charCodeAt(i2) - 48) < 0 || cc > 9)
        break;
      idx = 10 * idx + cc;
    }
    o2.e.r = --idx;
    return o2;
  }
  function safe_format_cell(cell, v2) {
    var q2 = cell.t == "d" && v2 instanceof Date;
    if (cell.z != null)
      try {
        return cell.w = SSF_format(cell.z, q2 ? datenum(v2) : v2);
      } catch (e2) {
      }
    try {
      return cell.w = SSF_format((cell.XF || {}).numFmtId || (q2 ? 14 : 0), q2 ? datenum(v2) : v2);
    } catch (e2) {
      return "" + v2;
    }
  }
  function format_cell(cell, v2, o2) {
    if (cell == null || cell.t == null || cell.t == "z")
      return "";
    if (cell.w !== void 0)
      return cell.w;
    if (cell.t == "d" && !cell.z && o2 && o2.dateNF)
      cell.z = o2.dateNF;
    if (cell.t == "e")
      return BErr[cell.v] || cell.v;
    if (v2 == void 0)
      return safe_format_cell(cell, cell.v);
    return safe_format_cell(cell, v2);
  }
  function sheet_to_workbook(sheet, opts) {
    var n2 = opts && opts.sheet ? opts.sheet : "Sheet1";
    var sheets = {};
    sheets[n2] = sheet;
    return { SheetNames: [n2], Sheets: sheets };
  }
  function sheet_add_aoa(_ws, data, opts) {
    var o2 = opts || {};
    var dense = _ws ? Array.isArray(_ws) : o2.dense;
    var ws2 = _ws || (dense ? [] : {});
    var _R2 = 0, _C2 = 0;
    if (ws2 && o2.origin != null) {
      if (typeof o2.origin == "number")
        _R2 = o2.origin;
      else {
        var _origin = typeof o2.origin == "string" ? decode_cell(o2.origin) : o2.origin;
        _R2 = _origin.r;
        _C2 = _origin.c;
      }
      if (!ws2["!ref"])
        ws2["!ref"] = "A1:A1";
    }
    var range2 = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } };
    if (ws2["!ref"]) {
      var _range = safe_decode_range(ws2["!ref"]);
      range2.s.c = _range.s.c;
      range2.s.r = _range.s.r;
      range2.e.c = Math.max(range2.e.c, _range.e.c);
      range2.e.r = Math.max(range2.e.r, _range.e.r);
      if (_R2 == -1)
        range2.e.r = _R2 = _range.e.r + 1;
    }
    for (var R2 = 0; R2 != data.length; ++R2) {
      if (!data[R2])
        continue;
      if (!Array.isArray(data[R2]))
        throw new Error("aoa_to_sheet expects an array of arrays");
      for (var C2 = 0; C2 != data[R2].length; ++C2) {
        if (typeof data[R2][C2] === "undefined")
          continue;
        var cell = { v: data[R2][C2] };
        var __R = _R2 + R2, __C = _C2 + C2;
        if (range2.s.r > __R)
          range2.s.r = __R;
        if (range2.s.c > __C)
          range2.s.c = __C;
        if (range2.e.r < __R)
          range2.e.r = __R;
        if (range2.e.c < __C)
          range2.e.c = __C;
        if (data[R2][C2] && typeof data[R2][C2] === "object" && !Array.isArray(data[R2][C2]) && !(data[R2][C2] instanceof Date))
          cell = data[R2][C2];
        else {
          if (Array.isArray(cell.v)) {
            cell.f = data[R2][C2][1];
            cell.v = cell.v[0];
          }
          if (cell.v === null) {
            if (cell.f)
              cell.t = "n";
            else if (o2.nullError) {
              cell.t = "e";
              cell.v = 0;
            } else if (!o2.sheetStubs)
              continue;
            else
              cell.t = "z";
          } else if (typeof cell.v === "number")
            cell.t = "n";
          else if (typeof cell.v === "boolean")
            cell.t = "b";
          else if (cell.v instanceof Date) {
            cell.z = o2.dateNF || table_fmt[14];
            if (o2.cellDates) {
              cell.t = "d";
              cell.w = SSF_format(cell.z, datenum(cell.v));
            } else {
              cell.t = "n";
              cell.v = datenum(cell.v);
              cell.w = SSF_format(cell.z, cell.v);
            }
          } else
            cell.t = "s";
        }
        if (dense) {
          if (!ws2[__R])
            ws2[__R] = [];
          if (ws2[__R][__C] && ws2[__R][__C].z)
            cell.z = ws2[__R][__C].z;
          ws2[__R][__C] = cell;
        } else {
          var cell_ref = encode_cell({ c: __C, r: __R });
          if (ws2[cell_ref] && ws2[cell_ref].z)
            cell.z = ws2[cell_ref].z;
          ws2[cell_ref] = cell;
        }
      }
    }
    if (range2.s.c < 1e7)
      ws2["!ref"] = encode_range(range2);
    return ws2;
  }
  function aoa_to_sheet(data, opts) {
    return sheet_add_aoa(null, data, opts);
  }
  function parse_Int32LE(data) {
    return data.read_shift(4, "i");
  }
  function parse_XLWideString(data) {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
  }
  function parse_StrRun(data) {
    return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
  }
  function parse_RichStr(data, length) {
    var start = data.l;
    var flags = data.read_shift(1);
    var str = parse_XLWideString(data);
    var rgsStrRun = [];
    var z2 = { t: str, h: str };
    if ((flags & 1) !== 0) {
      var dwSizeStrRun = data.read_shift(4);
      for (var i2 = 0; i2 != dwSizeStrRun; ++i2)
        rgsStrRun.push(parse_StrRun(data));
      z2.r = rgsStrRun;
    } else
      z2.r = [{ ich: 0, ifnt: 0 }];
    data.l = start + length;
    return z2;
  }
  var parse_BrtCommentText = parse_RichStr;
  function parse_XLSBCell(data) {
    var col = data.read_shift(4);
    var iStyleRef = data.read_shift(2);
    iStyleRef += data.read_shift(1) << 16;
    data.l++;
    return { c: col, iStyleRef };
  }
  function parse_XLSBShortCell(data) {
    var iStyleRef = data.read_shift(2);
    iStyleRef += data.read_shift(1) << 16;
    data.l++;
    return { c: -1, iStyleRef };
  }
  var parse_XLSBCodeName = parse_XLWideString;
  function parse_XLNullableWideString(data) {
    var cchCharacters = data.read_shift(4);
    return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs");
  }
  var parse_XLNameWideString = parse_XLWideString;
  var parse_RelID = parse_XLNullableWideString;
  function parse_RkNumber(data) {
    var b2 = data.slice(data.l, data.l + 4);
    var fX100 = b2[0] & 1, fInt = b2[0] & 2;
    data.l += 4;
    var RK = fInt === 0 ? __double([0, 0, 0, 0, b2[0] & 252, b2[1], b2[2], b2[3]], 0) : __readInt32LE(b2, 0) >> 2;
    return fX100 ? RK / 100 : RK;
  }
  function parse_RfX(data) {
    var cell = { s: {}, e: {} };
    cell.s.r = data.read_shift(4);
    cell.e.r = data.read_shift(4);
    cell.s.c = data.read_shift(4);
    cell.e.c = data.read_shift(4);
    return cell;
  }
  var parse_UncheckedRfX = parse_RfX;
  function parse_Xnum(data) {
    if (data.length - data.l < 8)
      throw "XLS Xnum Buffer underflow";
    return data.read_shift(8, "f");
  }
  function parse_BrtColor(data) {
    var out = {};
    var d2 = data.read_shift(1);
    var xColorType = d2 >>> 1;
    var index2 = data.read_shift(1);
    var nTS = data.read_shift(2, "i");
    var bR = data.read_shift(1);
    var bG = data.read_shift(1);
    var bB = data.read_shift(1);
    data.l++;
    switch (xColorType) {
      case 0:
        out.auto = 1;
        break;
      case 1:
        out.index = index2;
        var icv = XLSIcv[index2];
        if (icv)
          out.rgb = rgb2Hex(icv);
        break;
      case 2:
        out.rgb = rgb2Hex([bR, bG, bB]);
        break;
      case 3:
        out.theme = index2;
        break;
    }
    if (nTS != 0)
      out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
    return out;
  }
  function parse_FontFlags(data) {
    var d2 = data.read_shift(1);
    data.l++;
    var out = {
      fBold: d2 & 1,
      fItalic: d2 & 2,
      fUnderline: d2 & 4,
      fStrikeout: d2 & 8,
      fOutline: d2 & 16,
      fShadow: d2 & 32,
      fCondense: d2 & 64,
      fExtend: d2 & 128
    };
    return out;
  }
  function parse_ClipboardFormatOrString(o2, w2) {
    var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
    var m2 = o2.read_shift(4);
    switch (m2) {
      case 0:
        return "";
      case 4294967295:
      case 4294967294:
        return ClipFmt[o2.read_shift(4)] || "";
    }
    if (m2 > 400)
      throw new Error("Unsupported Clipboard: " + m2.toString(16));
    o2.l -= 4;
    return o2.read_shift(0, w2 == 1 ? "lpstr" : "lpwstr");
  }
  function parse_ClipboardFormatOrAnsiString(o2) {
    return parse_ClipboardFormatOrString(o2, 1);
  }
  function parse_ClipboardFormatOrUnicodeString(o2) {
    return parse_ClipboardFormatOrString(o2, 2);
  }
  var VT_I2 = 2;
  var VT_I4 = 3;
  var VT_BOOL = 11;
  var VT_VARIANT = 12;
  var VT_UI4 = 19;
  var VT_FILETIME = 64;
  var VT_BLOB = 65;
  var VT_CF = 71;
  var VT_VECTOR_VARIANT = 4108;
  var VT_VECTOR_LPSTR = 4126;
  var VT_STRING = 80;
  var VT_USTR = 81;
  var VT_CUSTOM = [VT_STRING, VT_USTR];
  var DocSummaryPIDDSI = {
    /*::[*/
    1: { n: "CodePage", t: VT_I2 },
    /*::[*/
    2: { n: "Category", t: VT_STRING },
    /*::[*/
    3: { n: "PresentationFormat", t: VT_STRING },
    /*::[*/
    4: { n: "ByteCount", t: VT_I4 },
    /*::[*/
    5: { n: "LineCount", t: VT_I4 },
    /*::[*/
    6: { n: "ParagraphCount", t: VT_I4 },
    /*::[*/
    7: { n: "SlideCount", t: VT_I4 },
    /*::[*/
    8: { n: "NoteCount", t: VT_I4 },
    /*::[*/
    9: { n: "HiddenCount", t: VT_I4 },
    /*::[*/
    10: { n: "MultimediaClipCount", t: VT_I4 },
    /*::[*/
    11: { n: "ScaleCrop", t: VT_BOOL },
    /*::[*/
    12: {
      n: "HeadingPairs",
      t: VT_VECTOR_VARIANT
      /* VT_VECTOR | VT_VARIANT */
    },
    /*::[*/
    13: {
      n: "TitlesOfParts",
      t: VT_VECTOR_LPSTR
      /* VT_VECTOR | VT_LPSTR */
    },
    /*::[*/
    14: { n: "Manager", t: VT_STRING },
    /*::[*/
    15: { n: "Company", t: VT_STRING },
    /*::[*/
    16: { n: "LinksUpToDate", t: VT_BOOL },
    /*::[*/
    17: { n: "CharacterCount", t: VT_I4 },
    /*::[*/
    19: { n: "SharedDoc", t: VT_BOOL },
    /*::[*/
    22: { n: "HyperlinksChanged", t: VT_BOOL },
    /*::[*/
    23: { n: "AppVersion", t: VT_I4, p: "version" },
    /*::[*/
    24: { n: "DigSig", t: VT_BLOB },
    /*::[*/
    26: { n: "ContentType", t: VT_STRING },
    /*::[*/
    27: { n: "ContentStatus", t: VT_STRING },
    /*::[*/
    28: { n: "Language", t: VT_STRING },
    /*::[*/
    29: { n: "Version", t: VT_STRING },
    /*::[*/
    255: {},
    /* [MS-OLEPS] 2.18 */
    /*::[*/
    2147483648: { n: "Locale", t: VT_UI4 },
    /*::[*/
    2147483651: { n: "Behavior", t: VT_UI4 },
    /*::[*/
    1919054434: {}
  };
  var SummaryPIDSI = {
    /*::[*/
    1: { n: "CodePage", t: VT_I2 },
    /*::[*/
    2: { n: "Title", t: VT_STRING },
    /*::[*/
    3: { n: "Subject", t: VT_STRING },
    /*::[*/
    4: { n: "Author", t: VT_STRING },
    /*::[*/
    5: { n: "Keywords", t: VT_STRING },
    /*::[*/
    6: { n: "Comments", t: VT_STRING },
    /*::[*/
    7: { n: "Template", t: VT_STRING },
    /*::[*/
    8: { n: "LastAuthor", t: VT_STRING },
    /*::[*/
    9: { n: "RevNumber", t: VT_STRING },
    /*::[*/
    10: { n: "EditTime", t: VT_FILETIME },
    /*::[*/
    11: { n: "LastPrinted", t: VT_FILETIME },
    /*::[*/
    12: { n: "CreatedDate", t: VT_FILETIME },
    /*::[*/
    13: { n: "ModifiedDate", t: VT_FILETIME },
    /*::[*/
    14: { n: "PageCount", t: VT_I4 },
    /*::[*/
    15: { n: "WordCount", t: VT_I4 },
    /*::[*/
    16: { n: "CharCount", t: VT_I4 },
    /*::[*/
    17: { n: "Thumbnail", t: VT_CF },
    /*::[*/
    18: { n: "Application", t: VT_STRING },
    /*::[*/
    19: { n: "DocSecurity", t: VT_I4 },
    /*::[*/
    255: {},
    /* [MS-OLEPS] 2.18 */
    /*::[*/
    2147483648: { n: "Locale", t: VT_UI4 },
    /*::[*/
    2147483651: { n: "Behavior", t: VT_UI4 },
    /*::[*/
    1919054434: {}
  };
  var CountryEnum = {
    /*::[*/
    1: "US",
    // United States
    /*::[*/
    2: "CA",
    // Canada
    /*::[*/
    3: "",
    // Latin America (except Brazil)
    /*::[*/
    7: "RU",
    // Russia
    /*::[*/
    20: "EG",
    // Egypt
    /*::[*/
    30: "GR",
    // Greece
    /*::[*/
    31: "NL",
    // Netherlands
    /*::[*/
    32: "BE",
    // Belgium
    /*::[*/
    33: "FR",
    // France
    /*::[*/
    34: "ES",
    // Spain
    /*::[*/
    36: "HU",
    // Hungary
    /*::[*/
    39: "IT",
    // Italy
    /*::[*/
    41: "CH",
    // Switzerland
    /*::[*/
    43: "AT",
    // Austria
    /*::[*/
    44: "GB",
    // United Kingdom
    /*::[*/
    45: "DK",
    // Denmark
    /*::[*/
    46: "SE",
    // Sweden
    /*::[*/
    47: "NO",
    // Norway
    /*::[*/
    48: "PL",
    // Poland
    /*::[*/
    49: "DE",
    // Germany
    /*::[*/
    52: "MX",
    // Mexico
    /*::[*/
    55: "BR",
    // Brazil
    /*::[*/
    61: "AU",
    // Australia
    /*::[*/
    64: "NZ",
    // New Zealand
    /*::[*/
    66: "TH",
    // Thailand
    /*::[*/
    81: "JP",
    // Japan
    /*::[*/
    82: "KR",
    // Korea
    /*::[*/
    84: "VN",
    // Viet Nam
    /*::[*/
    86: "CN",
    // China
    /*::[*/
    90: "TR",
    // Turkey
    /*::[*/
    105: "JS",
    // Ramastan
    /*::[*/
    213: "DZ",
    // Algeria
    /*::[*/
    216: "MA",
    // Morocco
    /*::[*/
    218: "LY",
    // Libya
    /*::[*/
    351: "PT",
    // Portugal
    /*::[*/
    354: "IS",
    // Iceland
    /*::[*/
    358: "FI",
    // Finland
    /*::[*/
    420: "CZ",
    // Czech Republic
    /*::[*/
    886: "TW",
    // Taiwan
    /*::[*/
    961: "LB",
    // Lebanon
    /*::[*/
    962: "JO",
    // Jordan
    /*::[*/
    963: "SY",
    // Syria
    /*::[*/
    964: "IQ",
    // Iraq
    /*::[*/
    965: "KW",
    // Kuwait
    /*::[*/
    966: "SA",
    // Saudi Arabia
    /*::[*/
    971: "AE",
    // United Arab Emirates
    /*::[*/
    972: "IL",
    // Israel
    /*::[*/
    974: "QA",
    // Qatar
    /*::[*/
    981: "IR",
    // Iran
    /*::[*/
    65535: "US"
    // United States
  };
  var XLSFillPattern = [
    null,
    "solid",
    "mediumGray",
    "darkGray",
    "lightGray",
    "darkHorizontal",
    "darkVertical",
    "darkDown",
    "darkUp",
    "darkGrid",
    "darkTrellis",
    "lightHorizontal",
    "lightVertical",
    "lightDown",
    "lightUp",
    "lightGrid",
    "lightTrellis",
    "gray125",
    "gray0625"
  ];
  function rgbify(arr) {
    return arr.map(function(x) {
      return [x >> 16 & 255, x >> 8 & 255, x & 255];
    });
  }
  var _XLSIcv = /* @__PURE__ */ rgbify([
    /* Color Constants */
    0,
    16777215,
    16711680,
    65280,
    255,
    16776960,
    16711935,
    65535,
    /* Overridable Defaults */
    0,
    16777215,
    16711680,
    65280,
    255,
    16776960,
    16711935,
    65535,
    8388608,
    32768,
    128,
    8421376,
    8388736,
    32896,
    12632256,
    8421504,
    10066431,
    10040166,
    16777164,
    13434879,
    6684774,
    16744576,
    26316,
    13421823,
    128,
    16711935,
    16776960,
    65535,
    8388736,
    8388608,
    32896,
    255,
    52479,
    13434879,
    13434828,
    16777113,
    10079487,
    16751052,
    13408767,
    16764057,
    3368703,
    3394764,
    10079232,
    16763904,
    16750848,
    16737792,
    6710937,
    9868950,
    13158,
    3381606,
    13056,
    3355392,
    10040064,
    10040166,
    3355545,
    3355443,
    /* Other entries to appease BIFF8/12 */
    16777215,
    /* 0x40 icvForeground ?? */
    0,
    /* 0x41 icvBackground ?? */
    0,
    /* 0x42 icvFrame ?? */
    0,
    /* 0x43 icv3D ?? */
    0,
    /* 0x44 icv3DText ?? */
    0,
    /* 0x45 icv3DHilite ?? */
    0,
    /* 0x46 icv3DShadow ?? */
    0,
    /* 0x47 icvHilite ?? */
    0,
    /* 0x48 icvCtlText ?? */
    0,
    /* 0x49 icvCtlScrl ?? */
    0,
    /* 0x4A icvCtlInv ?? */
    0,
    /* 0x4B icvCtlBody ?? */
    0,
    /* 0x4C icvCtlFrame ?? */
    0,
    /* 0x4D icvCtlFore ?? */
    0,
    /* 0x4E icvCtlBack ?? */
    0,
    /* 0x4F icvCtlNeutral */
    0,
    /* 0x50 icvInfoBk ?? */
    0
    /* 0x51 icvInfoText ?? */
  ]);
  var XLSIcv = /* @__PURE__ */ dup(_XLSIcv);
  var BErr = {
    /*::[*/
    0: "#NULL!",
    /*::[*/
    7: "#DIV/0!",
    /*::[*/
    15: "#VALUE!",
    /*::[*/
    23: "#REF!",
    /*::[*/
    29: "#NAME?",
    /*::[*/
    36: "#NUM!",
    /*::[*/
    42: "#N/A",
    /*::[*/
    43: "#GETTING_DATA",
    /*::[*/
    255: "#WTF?"
  };
  var RBErr = {
    "#NULL!": 0,
    "#DIV/0!": 7,
    "#VALUE!": 15,
    "#REF!": 23,
    "#NAME?": 29,
    "#NUM!": 36,
    "#N/A": 42,
    "#GETTING_DATA": 43,
    "#WTF?": 255
  };
  var ct2type = {
    /* Workbook */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
    "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
    "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
    "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
    /* Worksheet */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
    "application/vnd.ms-excel.worksheet": "sheets",
    "application/vnd.ms-excel.binIndexWs": "TODO",
    /* Binary Index */
    /* Chartsheet */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
    "application/vnd.ms-excel.chartsheet": "charts",
    /* Macrosheet */
    "application/vnd.ms-excel.macrosheet+xml": "macros",
    "application/vnd.ms-excel.macrosheet": "macros",
    "application/vnd.ms-excel.intlmacrosheet": "TODO",
    "application/vnd.ms-excel.binIndexMs": "TODO",
    /* Binary Index */
    /* Dialogsheet */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
    "application/vnd.ms-excel.dialogsheet": "dialogs",
    /* Shared Strings */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
    "application/vnd.ms-excel.sharedStrings": "strs",
    /* Styles */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
    "application/vnd.ms-excel.styles": "styles",
    /* File Properties */
    "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
    /* Custom Data Properties */
    "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
    /* Comments */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
    "application/vnd.ms-excel.comments": "comments",
    "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
    "application/vnd.ms-excel.person+xml": "people",
    /* Metadata (Stock/Geography and Dynamic Array) */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
    "application/vnd.ms-excel.sheetMetadata": "metadata",
    /* PivotTable */
    "application/vnd.ms-excel.pivotTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
    /* Chart Objects */
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
    /* Chart Colors */
    "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
    /* Chart Style */
    "application/vnd.ms-office.chartstyle+xml": "TODO",
    /* Chart Advanced */
    "application/vnd.ms-office.chartex+xml": "TODO",
    /* Calculation Chain */
    "application/vnd.ms-excel.calcChain": "calcchains",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
    /* Printer Settings */
    "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
    /* ActiveX */
    "application/vnd.ms-office.activeX": "TODO",
    "application/vnd.ms-office.activeX+xml": "TODO",
    /* Custom Toolbars */
    "application/vnd.ms-excel.attachedToolbars": "TODO",
    /* External Data Connections */
    "application/vnd.ms-excel.connections": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
    /* External Links */
    "application/vnd.ms-excel.externalLink": "links",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
    /* PivotCache */
    "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
    "application/vnd.ms-excel.pivotCacheRecords": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
    /* Query Table */
    "application/vnd.ms-excel.queryTable": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
    /* Shared Workbook */
    "application/vnd.ms-excel.userNames": "TODO",
    "application/vnd.ms-excel.revisionHeaders": "TODO",
    "application/vnd.ms-excel.revisionLog": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
    /* Single Cell Table */
    "application/vnd.ms-excel.tableSingleCells": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
    /* Slicer */
    "application/vnd.ms-excel.slicer": "TODO",
    "application/vnd.ms-excel.slicerCache": "TODO",
    "application/vnd.ms-excel.slicer+xml": "TODO",
    "application/vnd.ms-excel.slicerCache+xml": "TODO",
    /* Sort Map */
    "application/vnd.ms-excel.wsSortMap": "TODO",
    /* Table */
    "application/vnd.ms-excel.table": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
    /* Themes */
    "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
    /* Theme Override */
    "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
    /* Timeline */
    "application/vnd.ms-excel.Timeline+xml": "TODO",
    /* verify */
    "application/vnd.ms-excel.TimelineCache+xml": "TODO",
    /* verify */
    /* VBA */
    "application/vnd.ms-office.vbaProject": "vba",
    "application/vnd.ms-office.vbaProjectSignature": "TODO",
    /* Volatile Dependencies */
    "application/vnd.ms-office.volatileDependencies": "TODO",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
    /* Control Properties */
    "application/vnd.ms-excel.controlproperties+xml": "TODO",
    /* Data Model */
    "application/vnd.openxmlformats-officedocument.model+data": "TODO",
    /* Survey */
    "application/vnd.ms-excel.Survey+xml": "TODO",
    /* Drawing */
    "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
    "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
    /* VML */
    "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
    "application/vnd.openxmlformats-package.relationships+xml": "rels",
    "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
    /* Image */
    "image/png": "TODO",
    "sheet": "js"
  };
  function new_ct() {
    return {
      workbooks: [],
      sheets: [],
      charts: [],
      dialogs: [],
      macros: [],
      rels: [],
      strs: [],
      comments: [],
      threadedcomments: [],
      links: [],
      coreprops: [],
      extprops: [],
      custprops: [],
      themes: [],
      styles: [],
      calcchains: [],
      vba: [],
      drawings: [],
      metadata: [],
      people: [],
      TODO: [],
      xmlns: ""
    };
  }
  function parse_ct(data) {
    var ct2 = new_ct();
    if (!data || !data.match)
      return ct2;
    var ctext = {};
    (data.match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x);
      switch (y2[0].replace(nsregex, "<")) {
        case "<?xml":
          break;
        case "<Types":
          ct2.xmlns = y2["xmlns" + (y2[0].match(/<(\w+):/) || ["", ""])[1]];
          break;
        case "<Default":
          ctext[y2.Extension] = y2.ContentType;
          break;
        case "<Override":
          if (ct2[ct2type[y2.ContentType]] !== void 0)
            ct2[ct2type[y2.ContentType]].push(y2.PartName);
          break;
      }
    });
    if (ct2.xmlns !== XMLNS.CT)
      throw new Error("Unknown Namespace: " + ct2.xmlns);
    ct2.calcchain = ct2.calcchains.length > 0 ? ct2.calcchains[0] : "";
    ct2.sst = ct2.strs.length > 0 ? ct2.strs[0] : "";
    ct2.style = ct2.styles.length > 0 ? ct2.styles[0] : "";
    ct2.defaults = ctext;
    delete ct2.calcchains;
    return ct2;
  }
  var RELS = {
    WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
    VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
    XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
    XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
    XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
    CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
    CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
    CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
    CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
    EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
    CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
    SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
    STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
    THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
    CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
    CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
    CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
    WS: [
      "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
      "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
    ],
    DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
    MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
    IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
    DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
    XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
    TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
    PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
    VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
  };
  function get_rels_path(file) {
    var n2 = file.lastIndexOf("/");
    return file.slice(0, n2 + 1) + "_rels/" + file.slice(n2 + 1) + ".rels";
  }
  function parse_rels(data, currentFilePath) {
    var rels = { "!id": {} };
    if (!data)
      return rels;
    if (currentFilePath.charAt(0) !== "/") {
      currentFilePath = "/" + currentFilePath;
    }
    var hash = {};
    (data.match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x);
      if (y2[0] === "<Relationship") {
        var rel = {};
        rel.Type = y2.Type;
        rel.Target = y2.Target;
        rel.Id = y2.Id;
        if (y2.TargetMode)
          rel.TargetMode = y2.TargetMode;
        var canonictarget = y2.TargetMode === "External" ? y2.Target : resolve_path(y2.Target, currentFilePath);
        rels[canonictarget] = rel;
        hash[y2.Id] = rel;
      }
    });
    rels["!id"] = hash;
    return rels;
  }
  var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
  function parse_manifest(d2, opts) {
    var str = xlml_normalize(d2);
    var Rn;
    var FEtag;
    while (Rn = xlmlregex.exec(str))
      switch (Rn[3]) {
        case "manifest":
          break;
        case "file-entry":
          FEtag = parsexmltag(Rn[0], false);
          if (FEtag.path == "/" && FEtag.type !== CT_ODS)
            throw new Error("This OpenDocument is not a spreadsheet");
          break;
        case "encryption-data":
        case "algorithm":
        case "start-key-generation":
        case "key-derivation":
          throw new Error("Unsupported ODS Encryption");
        default:
          if (opts && opts.WTF)
            throw Rn;
      }
  }
  var CORE_PROPS = [
    ["cp:category", "Category"],
    ["cp:contentStatus", "ContentStatus"],
    ["cp:keywords", "Keywords"],
    ["cp:lastModifiedBy", "LastAuthor"],
    ["cp:lastPrinted", "LastPrinted"],
    ["cp:revision", "RevNumber"],
    ["cp:version", "Version"],
    ["dc:creator", "Author"],
    ["dc:description", "Comments"],
    ["dc:identifier", "Identifier"],
    ["dc:language", "Language"],
    ["dc:subject", "Subject"],
    ["dc:title", "Title"],
    ["dcterms:created", "CreatedDate", "date"],
    ["dcterms:modified", "ModifiedDate", "date"]
  ];
  var CORE_PROPS_REGEX = /* @__PURE__ */ function() {
    var r2 = new Array(CORE_PROPS.length);
    for (var i2 = 0; i2 < CORE_PROPS.length; ++i2) {
      var f2 = CORE_PROPS[i2];
      var g2 = "(?:" + f2[0].slice(0, f2[0].indexOf(":")) + ":)" + f2[0].slice(f2[0].indexOf(":") + 1);
      r2[i2] = new RegExp("<" + g2 + "[^>]*>([\\s\\S]*?)</" + g2 + ">");
    }
    return r2;
  }();
  function parse_core_props(data) {
    var p2 = {};
    data = utf8read(data);
    for (var i2 = 0; i2 < CORE_PROPS.length; ++i2) {
      var f2 = CORE_PROPS[i2], cur = data.match(CORE_PROPS_REGEX[i2]);
      if (cur != null && cur.length > 0)
        p2[f2[1]] = unescapexml(cur[1]);
      if (f2[2] === "date" && p2[f2[1]])
        p2[f2[1]] = parseDate(p2[f2[1]]);
    }
    return p2;
  }
  var EXT_PROPS = [
    ["Application", "Application", "string"],
    ["AppVersion", "AppVersion", "string"],
    ["Company", "Company", "string"],
    ["DocSecurity", "DocSecurity", "string"],
    ["Manager", "Manager", "string"],
    ["HyperlinksChanged", "HyperlinksChanged", "bool"],
    ["SharedDoc", "SharedDoc", "bool"],
    ["LinksUpToDate", "LinksUpToDate", "bool"],
    ["ScaleCrop", "ScaleCrop", "bool"],
    ["HeadingPairs", "HeadingPairs", "raw"],
    ["TitlesOfParts", "TitlesOfParts", "raw"]
  ];
  function load_props_pairs(HP, TOP, props2, opts) {
    var v2 = [];
    if (typeof HP == "string")
      v2 = parseVector(HP, opts);
    else
      for (var j2 = 0; j2 < HP.length; ++j2)
        v2 = v2.concat(HP[j2].map(function(hp) {
          return { v: hp };
        }));
    var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x) {
      return x.v;
    }) : TOP;
    var idx = 0, len = 0;
    if (parts.length > 0)
      for (var i2 = 0; i2 !== v2.length; i2 += 2) {
        len = +v2[i2 + 1].v;
        switch (v2[i2].v) {
          case "Worksheets":
          case "工作表":
          case "Листы":
          case "أوراق العمل":
          case "ワークシート":
          case "גליונות עבודה":
          case "Arbeitsblätter":
          case "Çalışma Sayfaları":
          case "Feuilles de calcul":
          case "Fogli di lavoro":
          case "Folhas de cálculo":
          case "Planilhas":
          case "Regneark":
          case "Hojas de cálculo":
          case "Werkbladen":
            props2.Worksheets = len;
            props2.SheetNames = parts.slice(idx, idx + len);
            break;
          case "Named Ranges":
          case "Rangos con nombre":
          case "名前付き一覧":
          case "Benannte Bereiche":
          case "Navngivne områder":
            props2.NamedRanges = len;
            props2.DefinedNames = parts.slice(idx, idx + len);
            break;
          case "Charts":
          case "Diagramme":
            props2.Chartsheets = len;
            props2.ChartNames = parts.slice(idx, idx + len);
            break;
        }
        idx += len;
      }
  }
  function parse_ext_props(data, p2, opts) {
    var q2 = {};
    if (!p2)
      p2 = {};
    data = utf8read(data);
    EXT_PROPS.forEach(function(f2) {
      var xml = (data.match(matchtag(f2[0])) || [])[1];
      switch (f2[2]) {
        case "string":
          if (xml)
            p2[f2[1]] = unescapexml(xml);
          break;
        case "bool":
          p2[f2[1]] = xml === "true";
          break;
        case "raw":
          var cur = data.match(new RegExp("<" + f2[0] + "[^>]*>([\\s\\S]*?)</" + f2[0] + ">"));
          if (cur && cur.length > 0)
            q2[f2[1]] = cur[1];
          break;
      }
    });
    if (q2.HeadingPairs && q2.TitlesOfParts)
      load_props_pairs(q2.HeadingPairs, q2.TitlesOfParts, p2, opts);
    return p2;
  }
  var custregex = /<[^>]+>[^<]*/g;
  function parse_cust_props(data, opts) {
    var p2 = {}, name = "";
    var m2 = data.match(custregex);
    if (m2)
      for (var i2 = 0; i2 != m2.length; ++i2) {
        var x = m2[i2], y2 = parsexmltag(x);
        switch (y2[0]) {
          case "<?xml":
            break;
          case "<Properties":
            break;
          case "<property":
            name = unescapexml(y2.name);
            break;
          case "</property>":
            name = null;
            break;
          default:
            if (x.indexOf("<vt:") === 0) {
              var toks = x.split(">");
              var type2 = toks[0].slice(4), text = toks[1];
              switch (type2) {
                case "lpstr":
                case "bstr":
                case "lpwstr":
                  p2[name] = unescapexml(text);
                  break;
                case "bool":
                  p2[name] = parsexmlbool(text);
                  break;
                case "i1":
                case "i2":
                case "i4":
                case "i8":
                case "int":
                case "uint":
                  p2[name] = parseInt(text, 10);
                  break;
                case "r4":
                case "r8":
                case "decimal":
                  p2[name] = parseFloat(text);
                  break;
                case "filetime":
                case "date":
                  p2[name] = parseDate(text);
                  break;
                case "cy":
                case "error":
                  p2[name] = unescapexml(text);
                  break;
                default:
                  if (type2.slice(-1) == "/")
                    break;
                  if (opts.WTF && typeof console !== "undefined")
                    formatAppLog("warn", "at node_modules/xlsx/xlsx.mjs:5669", "Unexpected", x, type2, toks);
              }
            } else if (x.slice(0, 2) === "</")
              ;
            else if (opts.WTF)
              throw new Error(x);
        }
      }
    return p2;
  }
  var XLMLDocPropsMap = {
    Title: "Title",
    Subject: "Subject",
    Author: "Author",
    Keywords: "Keywords",
    Comments: "Description",
    LastAuthor: "LastAuthor",
    RevNumber: "Revision",
    Application: "AppName",
    /* TotalTime: 'TotalTime', */
    LastPrinted: "LastPrinted",
    CreatedDate: "Created",
    ModifiedDate: "LastSaved",
    /* Pages */
    /* Words */
    /* Characters */
    Category: "Category",
    /* PresentationFormat */
    Manager: "Manager",
    Company: "Company",
    /* Guid */
    /* HyperlinkBase */
    /* Bytes */
    /* Lines */
    /* Paragraphs */
    /* CharactersWithSpaces */
    AppVersion: "Version",
    ContentStatus: "ContentStatus",
    /* NOTE: missing from schema */
    Identifier: "Identifier",
    /* NOTE: missing from schema */
    Language: "Language"
    /* NOTE: missing from schema */
  };
  var evert_XLMLDPM;
  function xlml_set_prop(Props, tag, val) {
    if (!evert_XLMLDPM)
      evert_XLMLDPM = evert(XLMLDocPropsMap);
    tag = evert_XLMLDPM[tag] || tag;
    Props[tag] = val;
  }
  function parse_FILETIME(blob) {
    var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
    return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1e3).toISOString().replace(/\.000/, "");
  }
  function parse_lpstr(blob, type2, pad) {
    var start = blob.l;
    var str = blob.read_shift(0, "lpstr-cp");
    if (pad)
      while (blob.l - start & 3)
        ++blob.l;
    return str;
  }
  function parse_lpwstr(blob, type2, pad) {
    var str = blob.read_shift(0, "lpwstr");
    if (pad)
      blob.l += 4 - (str.length + 1 & 3) & 3;
    return str;
  }
  function parse_VtStringBase(blob, stringType, pad) {
    if (stringType === 31)
      return parse_lpwstr(blob);
    return parse_lpstr(blob, stringType, pad);
  }
  function parse_VtString(blob, t2, pad) {
    return parse_VtStringBase(blob, t2, pad === false ? 0 : 4);
  }
  function parse_VtUnalignedString(blob, t2) {
    if (!t2)
      throw new Error("VtUnalignedString must have positive length");
    return parse_VtStringBase(blob, t2, 0);
  }
  function parse_VtVecLpwstrValue(blob) {
    var length = blob.read_shift(4);
    var ret = [];
    for (var i2 = 0; i2 != length; ++i2) {
      var start = blob.l;
      ret[i2] = blob.read_shift(0, "lpwstr").replace(chr0, "");
      if (blob.l - start & 2)
        blob.l += 2;
    }
    return ret;
  }
  function parse_VtVecUnalignedLpstrValue(blob) {
    var length = blob.read_shift(4);
    var ret = [];
    for (var i2 = 0; i2 != length; ++i2)
      ret[i2] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
    return ret;
  }
  function parse_VtHeadingPair(blob) {
    var start = blob.l;
    var headingString = parse_TypedPropertyValue(blob, VT_USTR);
    if (blob[blob.l] == 0 && blob[blob.l + 1] == 0 && blob.l - start & 2)
      blob.l += 2;
    var headerParts = parse_TypedPropertyValue(blob, VT_I4);
    return [headingString, headerParts];
  }
  function parse_VtVecHeadingPairValue(blob) {
    var cElements = blob.read_shift(4);
    var out = [];
    for (var i2 = 0; i2 < cElements / 2; ++i2)
      out.push(parse_VtHeadingPair(blob));
    return out;
  }
  function parse_dictionary(blob, CodePage) {
    var cnt = blob.read_shift(4);
    var dict = {};
    for (var j2 = 0; j2 != cnt; ++j2) {
      var pid = blob.read_shift(4);
      var len = blob.read_shift(4);
      dict[pid] = blob.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
      if (CodePage === 1200 && len % 2)
        blob.l += 2;
    }
    if (blob.l & 3)
      blob.l = blob.l >> 2 + 1 << 2;
    return dict;
  }
  function parse_BLOB(blob) {
    var size = blob.read_shift(4);
    var bytes = blob.slice(blob.l, blob.l + size);
    blob.l += size;
    if ((size & 3) > 0)
      blob.l += 4 - (size & 3) & 3;
    return bytes;
  }
  function parse_ClipboardData(blob) {
    var o2 = {};
    o2.Size = blob.read_shift(4);
    blob.l += o2.Size + 3 - (o2.Size - 1) % 4;
    return o2;
  }
  function parse_TypedPropertyValue(blob, type2, _opts) {
    var t2 = blob.read_shift(2), ret, opts = _opts || {};
    blob.l += 2;
    if (type2 !== VT_VARIANT) {
      if (t2 !== type2 && VT_CUSTOM.indexOf(type2) === -1 && !((type2 & 65534) == 4126 && (t2 & 65534) == 4126))
        throw new Error("Expected type " + type2 + " saw " + t2);
    }
    switch (type2 === VT_VARIANT ? t2 : type2) {
      case 2:
        ret = blob.read_shift(2, "i");
        if (!opts.raw)
          blob.l += 2;
        return ret;
      case 3:
        ret = blob.read_shift(4, "i");
        return ret;
      case 11:
        return blob.read_shift(4) !== 0;
      case 19:
        ret = blob.read_shift(4);
        return ret;
      case 30:
        return parse_lpstr(blob, t2, 4).replace(chr0, "");
      case 31:
        return parse_lpwstr(blob);
      case 64:
        return parse_FILETIME(blob);
      case 65:
        return parse_BLOB(blob);
      case 71:
        return parse_ClipboardData(blob);
      case 80:
        return parse_VtString(blob, t2, !opts.raw).replace(chr0, "");
      case 81:
        return parse_VtUnalignedString(
          blob,
          t2
          /*, 4*/
        ).replace(chr0, "");
      case 4108:
        return parse_VtVecHeadingPairValue(blob);
      case 4126:
      case 4127:
        return t2 == 4127 ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
      default:
        throw new Error("TypedPropertyValue unrecognized type " + type2 + " " + t2);
    }
  }
  function parse_PropertySet(blob, PIDSI) {
    var start_addr = blob.l;
    var size = blob.read_shift(4);
    var NumProps = blob.read_shift(4);
    var Props = [], i2 = 0;
    var CodePage = 0;
    var Dictionary = -1, DictObj = {};
    for (i2 = 0; i2 != NumProps; ++i2) {
      var PropID = blob.read_shift(4);
      var Offset = blob.read_shift(4);
      Props[i2] = [PropID, Offset + start_addr];
    }
    Props.sort(function(x, y2) {
      return x[1] - y2[1];
    });
    var PropH = {};
    for (i2 = 0; i2 != NumProps; ++i2) {
      if (blob.l !== Props[i2][1]) {
        var fail = true;
        if (i2 > 0 && PIDSI)
          switch (PIDSI[Props[i2 - 1][0]].t) {
            case 2:
              if (blob.l + 2 === Props[i2][1]) {
                blob.l += 2;
                fail = false;
              }
              break;
            case 80:
              if (blob.l <= Props[i2][1]) {
                blob.l = Props[i2][1];
                fail = false;
              }
              break;
            case 4108:
              if (blob.l <= Props[i2][1]) {
                blob.l = Props[i2][1];
                fail = false;
              }
              break;
          }
        if ((!PIDSI || i2 == 0) && blob.l <= Props[i2][1]) {
          fail = false;
          blob.l = Props[i2][1];
        }
        if (fail)
          throw new Error("Read Error: Expected address " + Props[i2][1] + " at " + blob.l + " :" + i2);
      }
      if (PIDSI) {
        var piddsi = PIDSI[Props[i2][0]];
        PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, { raw: true });
        if (piddsi.p === "version")
          PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 65535)).slice(-4);
        if (piddsi.n == "CodePage")
          switch (PropH[piddsi.n]) {
            case 0:
              PropH[piddsi.n] = 1252;
            case 874:
            case 932:
            case 936:
            case 949:
            case 950:
            case 1250:
            case 1251:
            case 1253:
            case 1254:
            case 1255:
            case 1256:
            case 1257:
            case 1258:
            case 1e4:
            case 1200:
            case 1201:
            case 1252:
            case 65e3:
            case -536:
            case 65001:
            case -535:
              set_cp(CodePage = PropH[piddsi.n] >>> 0 & 65535);
              break;
            default:
              throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
          }
      } else {
        if (Props[i2][0] === 1) {
          CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
          set_cp(CodePage);
          if (Dictionary !== -1) {
            var oldpos = blob.l;
            blob.l = Props[Dictionary][1];
            DictObj = parse_dictionary(blob, CodePage);
            blob.l = oldpos;
          }
        } else if (Props[i2][0] === 0) {
          if (CodePage === 0) {
            Dictionary = i2;
            blob.l = Props[i2 + 1][1];
            continue;
          }
          DictObj = parse_dictionary(blob, CodePage);
        } else {
          var name = DictObj[Props[i2][0]];
          var val;
          switch (blob[blob.l]) {
            case 65:
              blob.l += 4;
              val = parse_BLOB(blob);
              break;
            case 30:
              blob.l += 4;
              val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
              break;
            case 31:
              blob.l += 4;
              val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
              break;
            case 3:
              blob.l += 4;
              val = blob.read_shift(4, "i");
              break;
            case 19:
              blob.l += 4;
              val = blob.read_shift(4);
              break;
            case 5:
              blob.l += 4;
              val = blob.read_shift(8, "f");
              break;
            case 11:
              blob.l += 4;
              val = parsebool(blob, 4);
              break;
            case 64:
              blob.l += 4;
              val = parseDate(parse_FILETIME(blob));
              break;
            default:
              throw new Error("unparsed value: " + blob[blob.l]);
          }
          PropH[name] = val;
        }
      }
    }
    blob.l = start_addr + size;
    return PropH;
  }
  function parse_PropertySetStream(file, PIDSI, clsid) {
    var blob = file.content;
    if (!blob)
      return {};
    prep_blob(blob, 0);
    var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
    blob.chk("feff", "Byte Order: ");
    blob.read_shift(2);
    var SystemIdentifier = blob.read_shift(4);
    var CLSID = blob.read_shift(16);
    if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid)
      throw new Error("Bad PropertySet CLSID " + CLSID);
    NumSets = blob.read_shift(4);
    if (NumSets !== 1 && NumSets !== 2)
      throw new Error("Unrecognized #Sets: " + NumSets);
    FMTID0 = blob.read_shift(16);
    Offset0 = blob.read_shift(4);
    if (NumSets === 1 && Offset0 !== blob.l)
      throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
    else if (NumSets === 2) {
      FMTID1 = blob.read_shift(16);
      Offset1 = blob.read_shift(4);
    }
    var PSet0 = parse_PropertySet(blob, PIDSI);
    var rval = { SystemIdentifier };
    for (var y2 in PSet0)
      rval[y2] = PSet0[y2];
    rval.FMTID = FMTID0;
    if (NumSets === 1)
      return rval;
    if (Offset1 - blob.l == 2)
      blob.l += 2;
    if (blob.l !== Offset1)
      throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
    var PSet1;
    try {
      PSet1 = parse_PropertySet(blob, null);
    } catch (e2) {
    }
    for (y2 in PSet1)
      rval[y2] = PSet1[y2];
    rval.FMTID = [FMTID0, FMTID1];
    return rval;
  }
  function parsenoop2(blob, length) {
    blob.read_shift(length);
    return null;
  }
  function parslurp(blob, length, cb) {
    var arr = [], target = blob.l + length;
    while (blob.l < target)
      arr.push(cb(blob, target - blob.l));
    if (target !== blob.l)
      throw new Error("Slurp error");
    return arr;
  }
  function parsebool(blob, length) {
    return blob.read_shift(length) === 1;
  }
  function parseuint16(blob) {
    return blob.read_shift(2, "u");
  }
  function parseuint16a(blob, length) {
    return parslurp(blob, length, parseuint16);
  }
  function parse_Bes(blob) {
    var v2 = blob.read_shift(1), t2 = blob.read_shift(1);
    return t2 === 1 ? v2 : v2 === 1;
  }
  function parse_ShortXLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
    var encoding = "sbcs-cont";
    if (opts && opts.biff >= 8)
      ;
    if (!opts || opts.biff == 8) {
      var fHighByte = blob.read_shift(1);
      if (fHighByte) {
        encoding = "dbcs-cont";
      }
    } else if (opts.biff == 12) {
      encoding = "wstr";
    }
    if (opts.biff >= 2 && opts.biff <= 5)
      encoding = "cpstr";
    var o2 = cch ? blob.read_shift(cch, encoding) : "";
    return o2;
  }
  function parse_XLUnicodeRichExtendedString(blob) {
    var cch = blob.read_shift(2), flags = blob.read_shift(1);
    var fExtSt = flags & 4, fRichSt = flags & 8;
    var width = 1 + (flags & 1);
    var cRun = 0, cbExtRst;
    var z2 = {};
    if (fRichSt)
      cRun = blob.read_shift(2);
    if (fExtSt)
      cbExtRst = blob.read_shift(4);
    var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
    var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
    if (fRichSt)
      blob.l += 4 * cRun;
    if (fExtSt)
      blob.l += cbExtRst;
    z2.t = msg;
    if (!fRichSt) {
      z2.raw = "<t>" + z2.t + "</t>";
      z2.r = z2.t;
    }
    return z2;
  }
  function parse_XLUnicodeStringNoCch(blob, cch, opts) {
    var retval;
    if (opts) {
      if (opts.biff >= 2 && opts.biff <= 5)
        return blob.read_shift(cch, "cpstr");
      if (opts.biff >= 12)
        return blob.read_shift(cch, "dbcs-cont");
    }
    var fHighByte = blob.read_shift(1);
    if (fHighByte === 0) {
      retval = blob.read_shift(cch, "sbcs-cont");
    } else {
      retval = blob.read_shift(cch, "dbcs-cont");
    }
    return retval;
  }
  function parse_XLUnicodeString(blob, length, opts) {
    var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    if (cch === 0) {
      blob.l++;
      return "";
    }
    return parse_XLUnicodeStringNoCch(blob, cch, opts);
  }
  function parse_XLUnicodeString2(blob, length, opts) {
    if (opts.biff > 5)
      return parse_XLUnicodeString(blob, length, opts);
    var cch = blob.read_shift(1);
    if (cch === 0) {
      blob.l++;
      return "";
    }
    return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
  }
  function parse_ControlInfo(blob) {
    var flags = blob.read_shift(1);
    blob.l++;
    var accel = blob.read_shift(2);
    blob.l += 2;
    return [flags, accel];
  }
  function parse_URLMoniker(blob) {
    var len = blob.read_shift(4), start = blob.l;
    var extra = false;
    if (len > 24) {
      blob.l += len - 24;
      if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763")
        extra = true;
      blob.l = start;
    }
    var url2 = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
    if (extra)
      blob.l += 24;
    return url2;
  }
  function parse_FileMoniker(blob) {
    var cAnti = blob.read_shift(2);
    var preamble = "";
    while (cAnti-- > 0)
      preamble += "../";
    var ansiPath = blob.read_shift(0, "lpstr-ansi");
    blob.l += 2;
    if (blob.read_shift(2) != 57005)
      throw new Error("Bad FileMoniker");
    var sz = blob.read_shift(4);
    if (sz === 0)
      return preamble + ansiPath.replace(/\\/g, "/");
    var bytes = blob.read_shift(4);
    if (blob.read_shift(2) != 3)
      throw new Error("Bad FileMoniker");
    var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
    return preamble + unicodePath;
  }
  function parse_HyperlinkMoniker(blob, length) {
    var clsid = blob.read_shift(16);
    switch (clsid) {
      case "e0c9ea79f9bace118c8200aa004ba90b":
        return parse_URLMoniker(blob);
      case "0303000000000000c000000000000046":
        return parse_FileMoniker(blob);
      default:
        throw new Error("Unsupported Moniker " + clsid);
    }
  }
  function parse_HyperlinkString(blob) {
    var len = blob.read_shift(4);
    var o2 = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
    return o2;
  }
  function parse_Hyperlink(blob, length) {
    var end = blob.l + length;
    var sVer = blob.read_shift(4);
    if (sVer !== 2)
      throw new Error("Unrecognized streamVersion: " + sVer);
    var flags = blob.read_shift(2);
    blob.l += 2;
    var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid2, fileTime;
    if (flags & 16)
      displayName = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 128)
      targetFrameName = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 257) === 257)
      moniker = parse_HyperlinkString(blob, end - blob.l);
    if ((flags & 257) === 1)
      oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
    if (flags & 8)
      Loc = parse_HyperlinkString(blob, end - blob.l);
    if (flags & 32)
      guid2 = blob.read_shift(16);
    if (flags & 64)
      fileTime = parse_FILETIME(
        blob
        /*, 8*/
      );
    blob.l = end;
    var target = targetFrameName || moniker || oleMoniker || "";
    if (target && Loc)
      target += "#" + Loc;
    if (!target)
      target = "#" + Loc;
    if (flags & 2 && target.charAt(0) == "/" && target.charAt(1) != "/")
      target = "file://" + target;
    var out = { Target: target };
    if (guid2)
      out.guid = guid2;
    if (fileTime)
      out.time = fileTime;
    if (displayName)
      out.Tooltip = displayName;
    return out;
  }
  function parse_LongRGBA(blob) {
    var r2 = blob.read_shift(1), g2 = blob.read_shift(1), b2 = blob.read_shift(1), a2 = blob.read_shift(1);
    return [r2, g2, b2, a2];
  }
  function parse_LongRGB(blob, length) {
    var x = parse_LongRGBA(blob);
    x[3] = 0;
    return x;
  }
  function parse_XLSCell(blob) {
    var rw = blob.read_shift(2);
    var col = blob.read_shift(2);
    var ixfe = blob.read_shift(2);
    return { r: rw, c: col, ixfe };
  }
  function parse_frtHeader(blob) {
    var rt2 = blob.read_shift(2);
    var flags = blob.read_shift(2);
    blob.l += 8;
    return { type: rt2, flags };
  }
  function parse_OptXLUnicodeString(blob, length, opts) {
    return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
  }
  function parse_XTI(blob, length, opts) {
    var w2 = opts.biff > 8 ? 4 : 2;
    var iSupBook = blob.read_shift(w2), itabFirst = blob.read_shift(w2, "i"), itabLast = blob.read_shift(w2, "i");
    return [iSupBook, itabFirst, itabLast];
  }
  function parse_RkRec(blob) {
    var ixfe = blob.read_shift(2);
    var RK = parse_RkNumber(blob);
    return [ixfe, RK];
  }
  function parse_AddinUdf(blob, length, opts) {
    blob.l += 4;
    length -= 4;
    var l2 = blob.l + length;
    var udfName = parse_ShortXLUnicodeString(blob, length, opts);
    var cb = blob.read_shift(2);
    l2 -= blob.l;
    if (cb !== l2)
      throw new Error("Malformed AddinUdf: padding = " + l2 + " != " + cb);
    blob.l += cb;
    return udfName;
  }
  function parse_Ref8U(blob) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(2);
    var colLast = blob.read_shift(2);
    return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
  }
  function parse_RefU(blob) {
    var rwFirst = blob.read_shift(2);
    var rwLast = blob.read_shift(2);
    var colFirst = blob.read_shift(1);
    var colLast = blob.read_shift(1);
    return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
  }
  var parse_Ref = parse_RefU;
  function parse_FtCmo(blob) {
    blob.l += 4;
    var ot2 = blob.read_shift(2);
    var id = blob.read_shift(2);
    var flags = blob.read_shift(2);
    blob.l += 12;
    return [id, ot2, flags];
  }
  function parse_FtNts(blob) {
    var out = {};
    blob.l += 4;
    blob.l += 16;
    out.fSharedNote = blob.read_shift(2);
    blob.l += 4;
    return out;
  }
  function parse_FtCf(blob) {
    var out = {};
    blob.l += 4;
    blob.cf = blob.read_shift(2);
    return out;
  }
  function parse_FtSkip(blob) {
    blob.l += 2;
    blob.l += blob.read_shift(2);
  }
  var FtTab = {
    /*::[*/
    0: parse_FtSkip,
    /* FtEnd */
    /*::[*/
    4: parse_FtSkip,
    /* FtMacro */
    /*::[*/
    5: parse_FtSkip,
    /* FtButton */
    /*::[*/
    6: parse_FtSkip,
    /* FtGmo */
    /*::[*/
    7: parse_FtCf,
    /* FtCf */
    /*::[*/
    8: parse_FtSkip,
    /* FtPioGrbit */
    /*::[*/
    9: parse_FtSkip,
    /* FtPictFmla */
    /*::[*/
    10: parse_FtSkip,
    /* FtCbls */
    /*::[*/
    11: parse_FtSkip,
    /* FtRbo */
    /*::[*/
    12: parse_FtSkip,
    /* FtSbs */
    /*::[*/
    13: parse_FtNts,
    /* FtNts */
    /*::[*/
    14: parse_FtSkip,
    /* FtSbsFmla */
    /*::[*/
    15: parse_FtSkip,
    /* FtGboData */
    /*::[*/
    16: parse_FtSkip,
    /* FtEdoData */
    /*::[*/
    17: parse_FtSkip,
    /* FtRboData */
    /*::[*/
    18: parse_FtSkip,
    /* FtCblsData */
    /*::[*/
    19: parse_FtSkip,
    /* FtLbsData */
    /*::[*/
    20: parse_FtSkip,
    /* FtCblsFmla */
    /*::[*/
    21: parse_FtCmo
  };
  function parse_FtArray(blob, length) {
    var tgt = blob.l + length;
    var fts = [];
    while (blob.l < tgt) {
      var ft2 = blob.read_shift(2);
      blob.l -= 2;
      try {
        fts.push(FtTab[ft2](blob, tgt - blob.l));
      } catch (e2) {
        blob.l = tgt;
        return fts;
      }
    }
    if (blob.l != tgt)
      blob.l = tgt;
    return fts;
  }
  function parse_BOF(blob, length) {
    var o2 = { BIFFVer: 0, dt: 0 };
    o2.BIFFVer = blob.read_shift(2);
    length -= 2;
    if (length >= 2) {
      o2.dt = blob.read_shift(2);
      blob.l -= 2;
    }
    switch (o2.BIFFVer) {
      case 1536:
      case 1280:
      case 1024:
      case 768:
      case 512:
      case 2:
      case 7:
        break;
      default:
        if (length > 6)
          throw new Error("Unexpected BIFF Ver " + o2.BIFFVer);
    }
    blob.read_shift(length);
    return o2;
  }
  function parse_InterfaceHdr(blob, length) {
    if (length === 0)
      return 1200;
    if (blob.read_shift(2) !== 1200)
      ;
    return 1200;
  }
  function parse_WriteAccess(blob, length, opts) {
    if (opts.enc) {
      blob.l += length;
      return "";
    }
    var l2 = blob.l;
    var UserName = parse_XLUnicodeString2(blob, 0, opts);
    blob.read_shift(length + l2 - blob.l);
    return UserName;
  }
  function parse_WsBool(blob, length, opts) {
    var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
    return { fDialog: flags & 16, fBelow: flags & 64, fRight: flags & 128 };
  }
  function parse_BoundSheet8(blob, length, opts) {
    var pos = blob.read_shift(4);
    var hidden = blob.read_shift(1) & 3;
    var dt2 = blob.read_shift(1);
    switch (dt2) {
      case 0:
        dt2 = "Worksheet";
        break;
      case 1:
        dt2 = "Macrosheet";
        break;
      case 2:
        dt2 = "Chartsheet";
        break;
      case 6:
        dt2 = "VBAModule";
        break;
    }
    var name = parse_ShortXLUnicodeString(blob, 0, opts);
    if (name.length === 0)
      name = "Sheet1";
    return { pos, hs: hidden, dt: dt2, name };
  }
  function parse_SST(blob, length) {
    var end = blob.l + length;
    var cnt = blob.read_shift(4);
    var ucnt = blob.read_shift(4);
    var strs2 = [];
    for (var i2 = 0; i2 != ucnt && blob.l < end; ++i2) {
      strs2.push(parse_XLUnicodeRichExtendedString(blob));
    }
    strs2.Count = cnt;
    strs2.Unique = ucnt;
    return strs2;
  }
  function parse_ExtSST(blob, length) {
    var extsst = {};
    extsst.dsst = blob.read_shift(2);
    blob.l += length - 2;
    return extsst;
  }
  function parse_Row(blob) {
    var z2 = {};
    z2.r = blob.read_shift(2);
    z2.c = blob.read_shift(2);
    z2.cnt = blob.read_shift(2) - z2.c;
    var miyRw = blob.read_shift(2);
    blob.l += 4;
    var flags = blob.read_shift(1);
    blob.l += 3;
    if (flags & 7)
      z2.level = flags & 7;
    if (flags & 32)
      z2.hidden = true;
    if (flags & 64)
      z2.hpt = miyRw / 20;
    return z2;
  }
  function parse_ForceFullCalculation(blob) {
    var header = parse_frtHeader(blob);
    if (header.type != 2211)
      throw new Error("Invalid Future Record " + header.type);
    var fullcalc = blob.read_shift(4);
    return fullcalc !== 0;
  }
  function parse_RecalcId(blob) {
    blob.read_shift(2);
    return blob.read_shift(4);
  }
  function parse_DefaultRowHeight(blob, length, opts) {
    var f2 = 0;
    if (!(opts && opts.biff == 2)) {
      f2 = blob.read_shift(2);
    }
    var miyRw = blob.read_shift(2);
    if (opts && opts.biff == 2) {
      f2 = 1 - (miyRw >> 15);
      miyRw &= 32767;
    }
    var fl = { Unsynced: f2 & 1, DyZero: (f2 & 2) >> 1, ExAsc: (f2 & 4) >> 2, ExDsc: (f2 & 8) >> 3 };
    return [fl, miyRw];
  }
  function parse_Window1(blob) {
    var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
    var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
    var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
    return {
      Pos: [xWn, yWn],
      Dim: [dxWn, dyWn],
      Flags: flags,
      CurTab: iTabCur,
      FirstTab: iTabFirst,
      Selected: ctabSel,
      TabRatio: wTabRatio
    };
  }
  function parse_Window2(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff < 5)
      return {};
    var f2 = blob.read_shift(2);
    return { RTL: f2 & 64 };
  }
  function parse_Pane() {
  }
  function parse_Font(blob, length, opts) {
    var o2 = {
      dyHeight: blob.read_shift(2),
      fl: blob.read_shift(2)
    };
    switch (opts && opts.biff || 8) {
      case 2:
        break;
      case 3:
      case 4:
        blob.l += 2;
        break;
      default:
        blob.l += 10;
        break;
    }
    o2.name = parse_ShortXLUnicodeString(blob, 0, opts);
    return o2;
  }
  function parse_LabelSst(blob) {
    var cell = parse_XLSCell(blob);
    cell.isst = blob.read_shift(4);
    return cell;
  }
  function parse_Label(blob, length, opts) {
    if (opts.biffguess && opts.biff == 2)
      opts.biff = 5;
    var target = blob.l + length;
    var cell = parse_XLSCell(blob);
    if (opts.biff == 2)
      blob.l++;
    var str = parse_XLUnicodeString(blob, target - blob.l, opts);
    cell.val = str;
    return cell;
  }
  function parse_Format(blob, length, opts) {
    var numFmtId = blob.read_shift(2);
    var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
    return [numFmtId, fmtstr];
  }
  var parse_BIFF2Format = parse_XLUnicodeString2;
  function parse_Dimensions(blob, length, opts) {
    var end = blob.l + length;
    var w2 = opts.biff == 8 || !opts.biff ? 4 : 2;
    var r2 = blob.read_shift(w2), R2 = blob.read_shift(w2);
    var c2 = blob.read_shift(2), C2 = blob.read_shift(2);
    blob.l = end;
    return { s: { r: r2, c: c2 }, e: { r: R2, c: C2 } };
  }
  function parse_RK(blob) {
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var rkrec = parse_RkRec(blob);
    return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] };
  }
  function parse_MulRk(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var rkrecs = [];
    while (blob.l < target)
      rkrecs.push(parse_RkRec(blob));
    if (blob.l !== target)
      throw new Error("MulRK read error");
    var lastcol = blob.read_shift(2);
    if (rkrecs.length != lastcol - col + 1)
      throw new Error("MulRK length mismatch");
    return { r: rw, c: col, C: lastcol, rkrec: rkrecs };
  }
  function parse_MulBlank(blob, length) {
    var target = blob.l + length - 2;
    var rw = blob.read_shift(2), col = blob.read_shift(2);
    var ixfes = [];
    while (blob.l < target)
      ixfes.push(blob.read_shift(2));
    if (blob.l !== target)
      throw new Error("MulBlank read error");
    var lastcol = blob.read_shift(2);
    if (ixfes.length != lastcol - col + 1)
      throw new Error("MulBlank length mismatch");
    return { r: rw, c: col, C: lastcol, ixfe: ixfes };
  }
  function parse_CellStyleXF(blob, length, style, opts) {
    var o2 = {};
    var a2 = blob.read_shift(4), b2 = blob.read_shift(4);
    var c2 = blob.read_shift(4), d2 = blob.read_shift(2);
    o2.patternType = XLSFillPattern[c2 >> 26];
    if (!opts.cellStyles)
      return o2;
    o2.alc = a2 & 7;
    o2.fWrap = a2 >> 3 & 1;
    o2.alcV = a2 >> 4 & 7;
    o2.fJustLast = a2 >> 7 & 1;
    o2.trot = a2 >> 8 & 255;
    o2.cIndent = a2 >> 16 & 15;
    o2.fShrinkToFit = a2 >> 20 & 1;
    o2.iReadOrder = a2 >> 22 & 2;
    o2.fAtrNum = a2 >> 26 & 1;
    o2.fAtrFnt = a2 >> 27 & 1;
    o2.fAtrAlc = a2 >> 28 & 1;
    o2.fAtrBdr = a2 >> 29 & 1;
    o2.fAtrPat = a2 >> 30 & 1;
    o2.fAtrProt = a2 >> 31 & 1;
    o2.dgLeft = b2 & 15;
    o2.dgRight = b2 >> 4 & 15;
    o2.dgTop = b2 >> 8 & 15;
    o2.dgBottom = b2 >> 12 & 15;
    o2.icvLeft = b2 >> 16 & 127;
    o2.icvRight = b2 >> 23 & 127;
    o2.grbitDiag = b2 >> 30 & 3;
    o2.icvTop = c2 & 127;
    o2.icvBottom = c2 >> 7 & 127;
    o2.icvDiag = c2 >> 14 & 127;
    o2.dgDiag = c2 >> 21 & 15;
    o2.icvFore = d2 & 127;
    o2.icvBack = d2 >> 7 & 127;
    o2.fsxButton = d2 >> 14 & 1;
    return o2;
  }
  function parse_XF(blob, length, opts) {
    var o2 = {};
    o2.ifnt = blob.read_shift(2);
    o2.numFmtId = blob.read_shift(2);
    o2.flags = blob.read_shift(2);
    o2.fStyle = o2.flags >> 2 & 1;
    length -= 6;
    o2.data = parse_CellStyleXF(blob, length, o2.fStyle, opts);
    return o2;
  }
  function parse_Guts(blob) {
    blob.l += 4;
    var out = [blob.read_shift(2), blob.read_shift(2)];
    if (out[0] !== 0)
      out[0]--;
    if (out[1] !== 0)
      out[1]--;
    if (out[0] > 7 || out[1] > 7)
      throw new Error("Bad Gutters: " + out.join("|"));
    return out;
  }
  function parse_BoolErr(blob, length, opts) {
    var cell = parse_XLSCell(blob);
    if (opts.biff == 2 || length == 9)
      ++blob.l;
    var val = parse_Bes(blob);
    cell.val = val;
    cell.t = val === true || val === false ? "b" : "e";
    return cell;
  }
  function parse_Number(blob, length, opts) {
    if (opts.biffguess && opts.biff == 2)
      opts.biff = 5;
    var cell = parse_XLSCell(blob);
    var xnum = parse_Xnum(blob);
    cell.val = xnum;
    return cell;
  }
  var parse_XLHeaderFooter = parse_OptXLUnicodeString;
  function parse_SupBook(blob, length, opts) {
    var end = blob.l + length;
    var ctab = blob.read_shift(2);
    var cch = blob.read_shift(2);
    opts.sbcch = cch;
    if (cch == 1025 || cch == 14849)
      return [cch, ctab];
    if (cch < 1 || cch > 255)
      throw new Error("Unexpected SupBook type: " + cch);
    var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
    var rgst = [];
    while (end > blob.l)
      rgst.push(parse_XLUnicodeString(blob));
    return [cch, ctab, virtPath, rgst];
  }
  function parse_ExternName(blob, length, opts) {
    var flags = blob.read_shift(2);
    var body;
    var o2 = {
      fBuiltIn: flags & 1,
      fWantAdvise: flags >>> 1 & 1,
      fWantPict: flags >>> 2 & 1,
      fOle: flags >>> 3 & 1,
      fOleLink: flags >>> 4 & 1,
      cf: flags >>> 5 & 1023,
      fIcon: flags >>> 15 & 1
    };
    if (opts.sbcch === 14849)
      body = parse_AddinUdf(blob, length - 2, opts);
    o2.body = body || blob.read_shift(length - 2);
    if (typeof body === "string")
      o2.Name = body;
    return o2;
  }
  var XLSLblBuiltIn = [
    "_xlnm.Consolidate_Area",
    "_xlnm.Auto_Open",
    "_xlnm.Auto_Close",
    "_xlnm.Extract",
    "_xlnm.Database",
    "_xlnm.Criteria",
    "_xlnm.Print_Area",
    "_xlnm.Print_Titles",
    "_xlnm.Recorder",
    "_xlnm.Data_Form",
    "_xlnm.Auto_Activate",
    "_xlnm.Auto_Deactivate",
    "_xlnm.Sheet_Title",
    "_xlnm._FilterDatabase"
  ];
  function parse_Lbl(blob, length, opts) {
    var target = blob.l + length;
    var flags = blob.read_shift(2);
    var chKey = blob.read_shift(1);
    var cch = blob.read_shift(1);
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var itab = 0;
    if (!opts || opts.biff >= 5) {
      if (opts.biff != 5)
        blob.l += 2;
      itab = blob.read_shift(2);
      if (opts.biff == 5)
        blob.l += 2;
      blob.l += 4;
    }
    var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
    if (flags & 32)
      name = XLSLblBuiltIn[name.charCodeAt(0)];
    var npflen = target - blob.l;
    if (opts && opts.biff == 2)
      --npflen;
    var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
    return {
      chKey,
      Name: name,
      itab,
      rgce
    };
  }
  function parse_ExternSheet(blob, length, opts) {
    if (opts.biff < 8)
      return parse_BIFF5ExternSheet(blob, length, opts);
    var o2 = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
    while (len-- !== 0)
      o2.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
    if (blob.l != target)
      throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
    return o2;
  }
  function parse_BIFF5ExternSheet(blob, length, opts) {
    if (blob[blob.l + 1] == 3)
      blob[blob.l]++;
    var o2 = parse_ShortXLUnicodeString(blob, length, opts);
    return o2.charCodeAt(0) == 3 ? o2.slice(1) : o2;
  }
  function parse_NameCmt(blob, length, opts) {
    if (opts.biff < 8) {
      blob.l += length;
      return;
    }
    var cchName = blob.read_shift(2);
    var cchComment = blob.read_shift(2);
    var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
    var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
    return [name, comment];
  }
  function parse_ShrFmla(blob, length, opts) {
    var ref = parse_RefU(blob);
    blob.l++;
    var cUse = blob.read_shift(1);
    length -= 8;
    return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
  }
  function parse_Array(blob, length, opts) {
    var ref = parse_Ref(blob);
    switch (opts.biff) {
      case 2:
        blob.l++;
        length -= 7;
        break;
      case 3:
      case 4:
        blob.l += 2;
        length -= 8;
        break;
      default:
        blob.l += 6;
        length -= 12;
    }
    return [ref, parse_ArrayParsedFormula(blob, length, opts)];
  }
  function parse_MTRSettings(blob) {
    var fMTREnabled = blob.read_shift(4) !== 0;
    var fUserSetThreadCount = blob.read_shift(4) !== 0;
    var cUserThreadCount = blob.read_shift(4);
    return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
  }
  function parse_NoteSh(blob, length, opts) {
    if (opts.biff < 8)
      return;
    var row = blob.read_shift(2), col = blob.read_shift(2);
    var flags = blob.read_shift(2), idObj = blob.read_shift(2);
    var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
    if (opts.biff < 8)
      blob.read_shift(1);
    return [{ r: row, c: col }, stAuthor, idObj, flags];
  }
  function parse_Note(blob, length, opts) {
    return parse_NoteSh(blob, length, opts);
  }
  function parse_MergeCells(blob, length) {
    var merges = [];
    var cmcs = blob.read_shift(2);
    while (cmcs--)
      merges.push(parse_Ref8U(blob));
    return merges;
  }
  function parse_Obj(blob, length, opts) {
    if (opts && opts.biff < 8)
      return parse_BIFF5Obj(blob, length, opts);
    var cmo = parse_FtCmo(blob);
    var fts = parse_FtArray(blob, length - 22, cmo[1]);
    return { cmo, ft: fts };
  }
  var parse_BIFF5OT = {
    8: function(blob, length) {
      var tgt = blob.l + length;
      blob.l += 10;
      var cf = blob.read_shift(2);
      blob.l += 4;
      blob.l += 2;
      blob.l += 2;
      blob.l += 2;
      blob.l += 4;
      var cchName = blob.read_shift(1);
      blob.l += cchName;
      blob.l = tgt;
      return { fmt: cf };
    }
  };
  function parse_BIFF5Obj(blob, length, opts) {
    blob.l += 4;
    var ot2 = blob.read_shift(2);
    var id = blob.read_shift(2);
    var grbit = blob.read_shift(2);
    blob.l += 2;
    blob.l += 2;
    blob.l += 2;
    blob.l += 2;
    blob.l += 2;
    blob.l += 2;
    blob.l += 2;
    blob.l += 2;
    blob.l += 2;
    blob.l += 6;
    length -= 36;
    var fts = [];
    fts.push((parse_BIFF5OT[ot2] || parsenoop)(blob, length, opts));
    return { cmo: [id, ot2, grbit], ft: fts };
  }
  function parse_TxO(blob, length, opts) {
    var s2 = blob.l;
    var texts = "";
    try {
      blob.l += 4;
      var ot2 = (opts.lastobj || { cmo: [0, 0] }).cmo[1];
      var controlInfo;
      if ([0, 5, 7, 11, 12, 14].indexOf(ot2) == -1)
        blob.l += 6;
      else
        controlInfo = parse_ControlInfo(blob, 6, opts);
      var cchText = blob.read_shift(2);
      blob.read_shift(2);
      parseuint16(blob, 2);
      var len = blob.read_shift(2);
      blob.l += len;
      for (var i2 = 1; i2 < blob.lens.length - 1; ++i2) {
        if (blob.l - s2 != blob.lens[i2])
          throw new Error("TxO: bad continue record");
        var hdr = blob[blob.l];
        var t2 = parse_XLUnicodeStringNoCch(blob, blob.lens[i2 + 1] - blob.lens[i2] - 1);
        texts += t2;
        if (texts.length >= (hdr ? cchText : 2 * cchText))
          break;
      }
      if (texts.length !== cchText && texts.length !== cchText * 2) {
        throw new Error("cchText: " + cchText + " != " + texts.length);
      }
      blob.l = s2 + length;
      return { t: texts };
    } catch (e2) {
      blob.l = s2 + length;
      return { t: texts };
    }
  }
  function parse_HLink(blob, length) {
    var ref = parse_Ref8U(blob);
    blob.l += 16;
    var hlink = parse_Hyperlink(blob, length - 24);
    return [ref, hlink];
  }
  function parse_HLinkTooltip(blob, length) {
    blob.read_shift(2);
    var ref = parse_Ref8U(blob);
    var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
    wzTooltip = wzTooltip.replace(chr0, "");
    return [ref, wzTooltip];
  }
  function parse_Country(blob) {
    var o2 = [0, 0], d2;
    d2 = blob.read_shift(2);
    o2[0] = CountryEnum[d2] || d2;
    d2 = blob.read_shift(2);
    o2[1] = CountryEnum[d2] || d2;
    return o2;
  }
  function parse_ClrtClient(blob) {
    var ccv = blob.read_shift(2);
    var o2 = [];
    while (ccv-- > 0)
      o2.push(parse_LongRGB(blob));
    return o2;
  }
  function parse_Palette(blob) {
    var ccv = blob.read_shift(2);
    var o2 = [];
    while (ccv-- > 0)
      o2.push(parse_LongRGB(blob));
    return o2;
  }
  function parse_XFCRC(blob) {
    blob.l += 2;
    var o2 = { cxfs: 0, crc: 0 };
    o2.cxfs = blob.read_shift(2);
    o2.crc = blob.read_shift(4);
    return o2;
  }
  function parse_ColInfo(blob, length, opts) {
    if (!opts.cellStyles)
      return parsenoop(blob, length);
    var w2 = opts && opts.biff >= 12 ? 4 : 2;
    var colFirst = blob.read_shift(w2);
    var colLast = blob.read_shift(w2);
    var coldx = blob.read_shift(w2);
    var ixfe = blob.read_shift(w2);
    var flags = blob.read_shift(2);
    if (w2 == 2)
      blob.l += 2;
    var o2 = { s: colFirst, e: colLast, w: coldx, ixfe, flags };
    if (opts.biff >= 5 || !opts.biff)
      o2.level = flags >> 8 & 7;
    return o2;
  }
  function parse_Setup(blob, length) {
    var o2 = {};
    if (length < 32)
      return o2;
    blob.l += 16;
    o2.header = parse_Xnum(blob);
    o2.footer = parse_Xnum(blob);
    blob.l += 2;
    return o2;
  }
  function parse_ShtProps(blob, length, opts) {
    var def = { area: false };
    if (opts.biff != 5) {
      blob.l += length;
      return def;
    }
    var d2 = blob.read_shift(1);
    blob.l += 3;
    if (d2 & 16)
      def.area = true;
    return def;
  }
  var parse_Blank = parse_XLSCell;
  var parse_Scl = parseuint16a;
  var parse_String = parse_XLUnicodeString;
  function parse_ImData(blob) {
    var cf = blob.read_shift(2);
    var env = blob.read_shift(2);
    var lcb = blob.read_shift(4);
    var o2 = { fmt: cf, env, len: lcb, data: blob.slice(blob.l, blob.l + lcb) };
    blob.l += lcb;
    return o2;
  }
  function parse_BIFF2STR(blob, length, opts) {
    if (opts.biffguess && opts.biff == 5)
      opts.biff = 2;
    var cell = parse_XLSCell(blob);
    ++blob.l;
    var str = parse_XLUnicodeString2(blob, length - 7, opts);
    cell.t = "str";
    cell.val = str;
    return cell;
  }
  function parse_BIFF2NUM(blob) {
    var cell = parse_XLSCell(blob);
    ++blob.l;
    var num = parse_Xnum(blob);
    cell.t = "n";
    cell.val = num;
    return cell;
  }
  function parse_BIFF2INT(blob) {
    var cell = parse_XLSCell(blob);
    ++blob.l;
    var num = blob.read_shift(2);
    cell.t = "n";
    cell.val = num;
    return cell;
  }
  function parse_BIFF2STRING(blob) {
    var cch = blob.read_shift(1);
    if (cch === 0) {
      blob.l++;
      return "";
    }
    return blob.read_shift(cch, "sbcs-cont");
  }
  function parse_BIFF2FONTXTRA(blob, length) {
    blob.l += 6;
    blob.l += 2;
    blob.l += 1;
    blob.l += 3;
    blob.l += 1;
    blob.l += length - 13;
  }
  function parse_RString(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob);
    var cch = blob.read_shift(2);
    var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
    blob.l = end;
    cell.t = "str";
    cell.val = str;
    return cell;
  }
  var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
  var DBF = /* @__PURE__ */ function() {
    var dbf_codepage_map = {
      /* Code Pages Supported by Visual FoxPro */
      /*::[*/
      1: 437,
      /*::[*/
      2: 850,
      /*::[*/
      3: 1252,
      /*::[*/
      4: 1e4,
      /*::[*/
      100: 852,
      /*::[*/
      101: 866,
      /*::[*/
      102: 865,
      /*::[*/
      103: 861,
      /*::[*/
      104: 895,
      /*::[*/
      105: 620,
      /*::[*/
      106: 737,
      /*::[*/
      107: 857,
      /*::[*/
      120: 950,
      /*::[*/
      121: 949,
      /*::[*/
      122: 936,
      /*::[*/
      123: 932,
      /*::[*/
      124: 874,
      /*::[*/
      125: 1255,
      /*::[*/
      126: 1256,
      /*::[*/
      150: 10007,
      /*::[*/
      151: 10029,
      /*::[*/
      152: 10006,
      /*::[*/
      200: 1250,
      /*::[*/
      201: 1251,
      /*::[*/
      202: 1254,
      /*::[*/
      203: 1253,
      /* shapefile DBF extension */
      /*::[*/
      0: 20127,
      /*::[*/
      8: 865,
      /*::[*/
      9: 437,
      /*::[*/
      10: 850,
      /*::[*/
      11: 437,
      /*::[*/
      13: 437,
      /*::[*/
      14: 850,
      /*::[*/
      15: 437,
      /*::[*/
      16: 850,
      /*::[*/
      17: 437,
      /*::[*/
      18: 850,
      /*::[*/
      19: 932,
      /*::[*/
      20: 850,
      /*::[*/
      21: 437,
      /*::[*/
      22: 850,
      /*::[*/
      23: 865,
      /*::[*/
      24: 437,
      /*::[*/
      25: 437,
      /*::[*/
      26: 850,
      /*::[*/
      27: 437,
      /*::[*/
      28: 863,
      /*::[*/
      29: 850,
      /*::[*/
      31: 852,
      /*::[*/
      34: 852,
      /*::[*/
      35: 852,
      /*::[*/
      36: 860,
      /*::[*/
      37: 850,
      /*::[*/
      38: 866,
      /*::[*/
      55: 850,
      /*::[*/
      64: 852,
      /*::[*/
      77: 936,
      /*::[*/
      78: 949,
      /*::[*/
      79: 950,
      /*::[*/
      80: 874,
      /*::[*/
      87: 1252,
      /*::[*/
      88: 1252,
      /*::[*/
      89: 1252,
      /*::[*/
      108: 863,
      /*::[*/
      134: 737,
      /*::[*/
      135: 852,
      /*::[*/
      136: 857,
      /*::[*/
      204: 1257,
      /*::[*/
      255: 16969
    };
    var dbf_reverse_map = evert({
      /*::[*/
      1: 437,
      /*::[*/
      2: 850,
      /*::[*/
      3: 1252,
      /*::[*/
      4: 1e4,
      /*::[*/
      100: 852,
      /*::[*/
      101: 866,
      /*::[*/
      102: 865,
      /*::[*/
      103: 861,
      /*::[*/
      104: 895,
      /*::[*/
      105: 620,
      /*::[*/
      106: 737,
      /*::[*/
      107: 857,
      /*::[*/
      120: 950,
      /*::[*/
      121: 949,
      /*::[*/
      122: 936,
      /*::[*/
      123: 932,
      /*::[*/
      124: 874,
      /*::[*/
      125: 1255,
      /*::[*/
      126: 1256,
      /*::[*/
      150: 10007,
      /*::[*/
      151: 10029,
      /*::[*/
      152: 10006,
      /*::[*/
      200: 1250,
      /*::[*/
      201: 1251,
      /*::[*/
      202: 1254,
      /*::[*/
      203: 1253,
      /*::[*/
      0: 20127
    });
    function dbf_to_aoa(buf, opts) {
      var out = [];
      var d2 = new_raw_buf(1);
      switch (opts.type) {
        case "base64":
          d2 = s2a(Base64_decode(buf));
          break;
        case "binary":
          d2 = s2a(buf);
          break;
        case "buffer":
        case "array":
          d2 = buf;
          break;
      }
      prep_blob(d2, 0);
      var ft2 = d2.read_shift(1);
      var memo = !!(ft2 & 136);
      var vfp = false, l7 = false;
      switch (ft2) {
        case 2:
          break;
        case 3:
          break;
        case 48:
          vfp = true;
          memo = true;
          break;
        case 49:
          vfp = true;
          memo = true;
          break;
        case 131:
          break;
        case 139:
          break;
        case 140:
          l7 = true;
          break;
        case 245:
          break;
        default:
          throw new Error("DBF Unsupported Version: " + ft2.toString(16));
      }
      var nrow = 0, fpos = 521;
      if (ft2 == 2)
        nrow = d2.read_shift(2);
      d2.l += 3;
      if (ft2 != 2)
        nrow = d2.read_shift(4);
      if (nrow > 1048576)
        nrow = 1e6;
      if (ft2 != 2)
        fpos = d2.read_shift(2);
      var rlen = d2.read_shift(2);
      var current_cp = opts.codepage || 1252;
      if (ft2 != 2) {
        d2.l += 16;
        d2.read_shift(1);
        if (d2[d2.l] !== 0)
          current_cp = dbf_codepage_map[d2[d2.l]];
        d2.l += 1;
        d2.l += 2;
      }
      if (l7)
        d2.l += 36;
      var fields = [], field = {};
      var hend = Math.min(d2.length, ft2 == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
      var ww = l7 ? 32 : 11;
      while (d2.l < hend && d2[d2.l] != 13) {
        field = {};
        field.name = $cptable.utils.decode(current_cp, d2.slice(d2.l, d2.l + ww)).replace(/[\u0000\r\n].*$/g, "");
        d2.l += ww;
        field.type = String.fromCharCode(d2.read_shift(1));
        if (ft2 != 2 && !l7)
          field.offset = d2.read_shift(4);
        field.len = d2.read_shift(1);
        if (ft2 == 2)
          field.offset = d2.read_shift(2);
        field.dec = d2.read_shift(1);
        if (field.name.length)
          fields.push(field);
        if (ft2 != 2)
          d2.l += l7 ? 13 : 14;
        switch (field.type) {
          case "B":
            if ((!vfp || field.len != 8) && opts.WTF)
              formatAppLog("log", "at node_modules/xlsx/xlsx.mjs:7656", "Skipping " + field.name + ":" + field.type);
            break;
          case "G":
          case "P":
            if (opts.WTF)
              formatAppLog("log", "at node_modules/xlsx/xlsx.mjs:7660", "Skipping " + field.name + ":" + field.type);
            break;
          case "+":
          case "0":
          case "@":
          case "C":
          case "D":
          case "F":
          case "I":
          case "L":
          case "M":
          case "N":
          case "O":
          case "T":
          case "Y":
            break;
          default:
            throw new Error("Unknown Field Type: " + field.type);
        }
      }
      if (d2[d2.l] !== 13)
        d2.l = fpos - 1;
      if (d2.read_shift(1) !== 13)
        throw new Error("DBF Terminator not found " + d2.l + " " + d2[d2.l]);
      d2.l = fpos;
      var R2 = 0, C2 = 0;
      out[0] = [];
      for (C2 = 0; C2 != fields.length; ++C2)
        out[0][C2] = fields[C2].name;
      while (nrow-- > 0) {
        if (d2[d2.l] === 42) {
          d2.l += rlen;
          continue;
        }
        ++d2.l;
        out[++R2] = [];
        C2 = 0;
        for (C2 = 0; C2 != fields.length; ++C2) {
          var dd = d2.slice(d2.l, d2.l + fields[C2].len);
          d2.l += fields[C2].len;
          prep_blob(dd, 0);
          var s2 = $cptable.utils.decode(current_cp, dd);
          switch (fields[C2].type) {
            case "C":
              if (s2.trim().length)
                out[R2][C2] = s2.replace(/\s+$/, "");
              break;
            case "D":
              if (s2.length === 8)
                out[R2][C2] = new Date(+s2.slice(0, 4), +s2.slice(4, 6) - 1, +s2.slice(6, 8));
              else
                out[R2][C2] = s2;
              break;
            case "F":
              out[R2][C2] = parseFloat(s2.trim());
              break;
            case "+":
            case "I":
              out[R2][C2] = l7 ? dd.read_shift(-4, "i") ^ 2147483648 : dd.read_shift(4, "i");
              break;
            case "L":
              switch (s2.trim().toUpperCase()) {
                case "Y":
                case "T":
                  out[R2][C2] = true;
                  break;
                case "N":
                case "F":
                  out[R2][C2] = false;
                  break;
                case "":
                case "?":
                  break;
                default:
                  throw new Error("DBF Unrecognized L:|" + s2 + "|");
              }
              break;
            case "M":
              if (!memo)
                throw new Error("DBF Unexpected MEMO for type " + ft2.toString(16));
              out[R2][C2] = "##MEMO##" + (l7 ? parseInt(s2.trim(), 10) : dd.read_shift(4));
              break;
            case "N":
              s2 = s2.replace(/\u0000/g, "").trim();
              if (s2 && s2 != ".")
                out[R2][C2] = +s2 || 0;
              break;
            case "@":
              out[R2][C2] = new Date(dd.read_shift(-8, "f") - 621356832e5);
              break;
            case "T":
              out[R2][C2] = new Date((dd.read_shift(4) - 2440588) * 864e5 + dd.read_shift(4));
              break;
            case "Y":
              out[R2][C2] = dd.read_shift(4, "i") / 1e4 + dd.read_shift(4, "i") / 1e4 * Math.pow(2, 32);
              break;
            case "O":
              out[R2][C2] = -dd.read_shift(-8, "f");
              break;
            case "B":
              if (vfp && fields[C2].len == 8) {
                out[R2][C2] = dd.read_shift(8, "f");
                break;
              }
            case "G":
            case "P":
              dd.l += fields[C2].len;
              break;
            case "0":
              if (fields[C2].name === "_NullFlags")
                break;
            default:
              throw new Error("DBF Unsupported data type " + fields[C2].type);
          }
        }
      }
      if (ft2 != 2) {
        if (d2.l < d2.length && d2[d2.l++] != 26)
          throw new Error("DBF EOF Marker missing " + (d2.l - 1) + " of " + d2.length + " " + d2[d2.l - 1].toString(16));
      }
      if (opts && opts.sheetRows)
        out = out.slice(0, opts.sheetRows);
      opts.DBF = fields;
      return out;
    }
    function dbf_to_sheet(buf, opts) {
      var o2 = opts || {};
      if (!o2.dateNF)
        o2.dateNF = "yyyymmdd";
      var ws2 = aoa_to_sheet(dbf_to_aoa(buf, o2), o2);
      ws2["!cols"] = o2.DBF.map(function(field) {
        return {
          wch: field.len,
          DBF: field
        };
      });
      delete o2.DBF;
      return ws2;
    }
    function dbf_to_workbook(buf, opts) {
      try {
        return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
      } catch (e2) {
        if (opts && opts.WTF)
          throw e2;
      }
      return { SheetNames: [], Sheets: {} };
    }
    var _RLEN = { "B": 8, "C": 250, "L": 1, "D": 8, "?": 0, "": 0 };
    function sheet_to_dbf(ws2, opts) {
      var o2 = opts || {};
      if (+o2.codepage >= 0)
        set_cp(+o2.codepage);
      if (o2.type == "string")
        throw new Error("Cannot write DBF to JS string");
      var ba = buf_array();
      var aoa = sheet_to_json(ws2, { header: 1, raw: true, cellDates: true });
      var headers = aoa[0], data = aoa.slice(1), cols = ws2["!cols"] || [];
      var i2 = 0, j2 = 0, hcnt = 0, rlen = 1;
      for (i2 = 0; i2 < headers.length; ++i2) {
        if (((cols[i2] || {}).DBF || {}).name) {
          headers[i2] = cols[i2].DBF.name;
          ++hcnt;
          continue;
        }
        if (headers[i2] == null)
          continue;
        ++hcnt;
        if (typeof headers[i2] === "number")
          headers[i2] = headers[i2].toString(10);
        if (typeof headers[i2] !== "string")
          throw new Error("DBF Invalid column name " + headers[i2] + " |" + typeof headers[i2] + "|");
        if (headers.indexOf(headers[i2]) !== i2) {
          for (j2 = 0; j2 < 1024; ++j2)
            if (headers.indexOf(headers[i2] + "_" + j2) == -1) {
              headers[i2] += "_" + j2;
              break;
            }
        }
      }
      var range2 = safe_decode_range(ws2["!ref"]);
      var coltypes = [];
      var colwidths = [];
      var coldecimals = [];
      for (i2 = 0; i2 <= range2.e.c - range2.s.c; ++i2) {
        var guess = "", _guess = "", maxlen = 0;
        var col = [];
        for (j2 = 0; j2 < data.length; ++j2) {
          if (data[j2][i2] != null)
            col.push(data[j2][i2]);
        }
        if (col.length == 0 || headers[i2] == null) {
          coltypes[i2] = "?";
          continue;
        }
        for (j2 = 0; j2 < col.length; ++j2) {
          switch (typeof col[j2]) {
            case "number":
              _guess = "B";
              break;
            case "string":
              _guess = "C";
              break;
            case "boolean":
              _guess = "L";
              break;
            case "object":
              _guess = col[j2] instanceof Date ? "D" : "C";
              break;
            default:
              _guess = "C";
          }
          maxlen = Math.max(maxlen, String(col[j2]).length);
          guess = guess && guess != _guess ? "C" : _guess;
        }
        if (maxlen > 250)
          maxlen = 250;
        _guess = ((cols[i2] || {}).DBF || {}).type;
        if (_guess == "C") {
          if (cols[i2].DBF.len > maxlen)
            maxlen = cols[i2].DBF.len;
        }
        if (guess == "B" && _guess == "N") {
          guess = "N";
          coldecimals[i2] = cols[i2].DBF.dec;
          maxlen = cols[i2].DBF.len;
        }
        colwidths[i2] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
        rlen += colwidths[i2];
        coltypes[i2] = guess;
      }
      var h2 = ba.next(32);
      h2.write_shift(4, 318902576);
      h2.write_shift(4, data.length);
      h2.write_shift(2, 296 + 32 * hcnt);
      h2.write_shift(2, rlen);
      for (i2 = 0; i2 < 4; ++i2)
        h2.write_shift(4, 0);
      h2.write_shift(4, 0 | (+dbf_reverse_map[
        /*::String(*/
        current_ansi
        /*::)*/
      ] || 3) << 8);
      for (i2 = 0, j2 = 0; i2 < headers.length; ++i2) {
        if (headers[i2] == null)
          continue;
        var hf = ba.next(32);
        var _f2 = (headers[i2].slice(-10) + "\0\0\0\0\0\0\0\0\0\0\0").slice(0, 11);
        hf.write_shift(1, _f2, "sbcs");
        hf.write_shift(1, coltypes[i2] == "?" ? "C" : coltypes[i2], "sbcs");
        hf.write_shift(4, j2);
        hf.write_shift(1, colwidths[i2] || _RLEN[coltypes[i2]] || 0);
        hf.write_shift(1, coldecimals[i2] || 0);
        hf.write_shift(1, 2);
        hf.write_shift(4, 0);
        hf.write_shift(1, 0);
        hf.write_shift(4, 0);
        hf.write_shift(4, 0);
        j2 += colwidths[i2] || _RLEN[coltypes[i2]] || 0;
      }
      var hb = ba.next(264);
      hb.write_shift(4, 13);
      for (i2 = 0; i2 < 65; ++i2)
        hb.write_shift(4, 0);
      for (i2 = 0; i2 < data.length; ++i2) {
        var rout = ba.next(rlen);
        rout.write_shift(1, 0);
        for (j2 = 0; j2 < headers.length; ++j2) {
          if (headers[j2] == null)
            continue;
          switch (coltypes[j2]) {
            case "L":
              rout.write_shift(1, data[i2][j2] == null ? 63 : data[i2][j2] ? 84 : 70);
              break;
            case "B":
              rout.write_shift(8, data[i2][j2] || 0, "f");
              break;
            case "N":
              var _n2 = "0";
              if (typeof data[i2][j2] == "number")
                _n2 = data[i2][j2].toFixed(coldecimals[j2] || 0);
              for (hcnt = 0; hcnt < colwidths[j2] - _n2.length; ++hcnt)
                rout.write_shift(1, 32);
              rout.write_shift(1, _n2, "sbcs");
              break;
            case "D":
              if (!data[i2][j2])
                rout.write_shift(8, "00000000", "sbcs");
              else {
                rout.write_shift(4, ("0000" + data[i2][j2].getFullYear()).slice(-4), "sbcs");
                rout.write_shift(2, ("00" + (data[i2][j2].getMonth() + 1)).slice(-2), "sbcs");
                rout.write_shift(2, ("00" + data[i2][j2].getDate()).slice(-2), "sbcs");
              }
              break;
            case "C":
              var _s3 = String(data[i2][j2] != null ? data[i2][j2] : "").slice(0, colwidths[j2]);
              rout.write_shift(1, _s3, "sbcs");
              for (hcnt = 0; hcnt < colwidths[j2] - _s3.length; ++hcnt)
                rout.write_shift(1, 32);
              break;
          }
        }
      }
      ba.next(1).write_shift(1, 26);
      return ba.end();
    }
    return {
      to_workbook: dbf_to_workbook,
      to_sheet: dbf_to_sheet,
      from_sheet: sheet_to_dbf
    };
  }();
  var SYLK = /* @__PURE__ */ function() {
    var sylk_escapes = {
      AA: "À",
      BA: "Á",
      CA: "Â",
      DA: 195,
      HA: "Ä",
      JA: 197,
      AE: "È",
      BE: "É",
      CE: "Ê",
      HE: "Ë",
      AI: "Ì",
      BI: "Í",
      CI: "Î",
      HI: "Ï",
      AO: "Ò",
      BO: "Ó",
      CO: "Ô",
      DO: 213,
      HO: "Ö",
      AU: "Ù",
      BU: "Ú",
      CU: "Û",
      HU: "Ü",
      Aa: "à",
      Ba: "á",
      Ca: "â",
      Da: 227,
      Ha: "ä",
      Ja: 229,
      Ae: "è",
      Be: "é",
      Ce: "ê",
      He: "ë",
      Ai: "ì",
      Bi: "í",
      Ci: "î",
      Hi: "ï",
      Ao: "ò",
      Bo: "ó",
      Co: "ô",
      Do: 245,
      Ho: "ö",
      Au: "ù",
      Bu: "ú",
      Cu: "û",
      Hu: "ü",
      KC: "Ç",
      Kc: "ç",
      q: "æ",
      z: "œ",
      a: "Æ",
      j: "Œ",
      DN: 209,
      Dn: 241,
      Hy: 255,
      S: 169,
      c: 170,
      R: 174,
      "B ": 180,
      /*::[*/
      0: 176,
      /*::[*/
      1: 177,
      /*::[*/
      2: 178,
      /*::[*/
      3: 179,
      /*::[*/
      5: 181,
      /*::[*/
      6: 182,
      /*::[*/
      7: 183,
      Q: 185,
      k: 186,
      b: 208,
      i: 216,
      l: 222,
      s: 240,
      y: 248,
      "!": 161,
      '"': 162,
      "#": 163,
      "(": 164,
      "%": 165,
      "'": 167,
      "H ": 168,
      "+": 171,
      ";": 187,
      "<": 188,
      "=": 189,
      ">": 190,
      "?": 191,
      "{": 223
    };
    var sylk_char_regex = new RegExp("\x1BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
    var sylk_char_fn = function(_2, $1) {
      var o2 = sylk_escapes[$1];
      return typeof o2 == "number" ? _getansi(o2) : o2;
    };
    var decode_sylk_char = function($$, $1, $2) {
      var newcc = $1.charCodeAt(0) - 32 << 4 | $2.charCodeAt(0) - 48;
      return newcc == 59 ? $$ : _getansi(newcc);
    };
    sylk_escapes["|"] = 254;
    function sylk_to_aoa(d2, opts) {
      switch (opts.type) {
        case "base64":
          return sylk_to_aoa_str(Base64_decode(d2), opts);
        case "binary":
          return sylk_to_aoa_str(d2, opts);
        case "buffer":
          return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2), opts);
        case "array":
          return sylk_to_aoa_str(cc2str(d2), opts);
      }
      throw new Error("Unrecognized type " + opts.type);
    }
    function sylk_to_aoa_str(str, opts) {
      var records = str.split(/[\n\r]+/), R2 = -1, C2 = -1, ri = 0, rj = 0, arr = [];
      var formats = [];
      var next_cell_format = null;
      var sht = {}, rowinfo = [], colinfo = [], cw = [];
      var Mval = 0, j2;
      if (+opts.codepage >= 0)
        set_cp(+opts.codepage);
      for (; ri !== records.length; ++ri) {
        Mval = 0;
        var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
        var record = rstr.replace(/;;/g, "\0").split(";").map(function(x) {
          return x.replace(/\u0000/g, ";");
        });
        var RT = record[0], val;
        if (rstr.length > 0)
          switch (RT) {
            case "ID":
              break;
            case "E":
              break;
            case "B":
              break;
            case "O":
              break;
            case "W":
              break;
            case "P":
              if (record[1].charAt(0) == "P")
                formats.push(rstr.slice(3).replace(/;;/g, ";"));
              break;
            case "C":
              var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R2 = -1, _C2 = -1;
              for (rj = 1; rj < record.length; ++rj)
                switch (record[rj].charAt(0)) {
                  case "A":
                    break;
                  case "X":
                    C2 = parseInt(record[rj].slice(1)) - 1;
                    C_seen_X = true;
                    break;
                  case "Y":
                    R2 = parseInt(record[rj].slice(1)) - 1;
                    if (!C_seen_X)
                      C2 = 0;
                    for (j2 = arr.length; j2 <= R2; ++j2)
                      arr[j2] = [];
                    break;
                  case "K":
                    val = record[rj].slice(1);
                    if (val.charAt(0) === '"')
                      val = val.slice(1, val.length - 1);
                    else if (val === "TRUE")
                      val = true;
                    else if (val === "FALSE")
                      val = false;
                    else if (!isNaN(fuzzynum(val))) {
                      val = fuzzynum(val);
                      if (next_cell_format !== null && fmt_is_date(next_cell_format))
                        val = numdate(val);
                    } else if (!isNaN(fuzzydate(val).getDate())) {
                      val = parseDate(val);
                    }
                    C_seen_K = true;
                    break;
                  case "E":
                    C_seen_E = true;
                    var formula = rc_to_a1(record[rj].slice(1), { r: R2, c: C2 });
                    arr[R2][C2] = [arr[R2][C2], formula];
                    break;
                  case "S":
                    C_seen_S = true;
                    arr[R2][C2] = [arr[R2][C2], "S5S"];
                    break;
                  case "G":
                    break;
                  case "R":
                    _R2 = parseInt(record[rj].slice(1)) - 1;
                    break;
                  case "C":
                    _C2 = parseInt(record[rj].slice(1)) - 1;
                    break;
                  default:
                    if (opts && opts.WTF)
                      throw new Error("SYLK bad record " + rstr);
                }
              if (C_seen_K) {
                if (arr[R2][C2] && arr[R2][C2].length == 2)
                  arr[R2][C2][0] = val;
                else
                  arr[R2][C2] = val;
                next_cell_format = null;
              }
              if (C_seen_S) {
                if (C_seen_E)
                  throw new Error("SYLK shared formula cannot have own formula");
                var shrbase = _R2 > -1 && arr[_R2][_C2];
                if (!shrbase || !shrbase[1])
                  throw new Error("SYLK shared formula cannot find base");
                arr[R2][C2][1] = shift_formula_str(shrbase[1], { r: R2 - _R2, c: C2 - _C2 });
              }
              break;
            case "F":
              var F_seen = 0;
              for (rj = 1; rj < record.length; ++rj)
                switch (record[rj].charAt(0)) {
                  case "X":
                    C2 = parseInt(record[rj].slice(1)) - 1;
                    ++F_seen;
                    break;
                  case "Y":
                    R2 = parseInt(record[rj].slice(1)) - 1;
                    for (j2 = arr.length; j2 <= R2; ++j2)
                      arr[j2] = [];
                    break;
                  case "M":
                    Mval = parseInt(record[rj].slice(1)) / 20;
                    break;
                  case "F":
                    break;
                  case "G":
                    break;
                  case "P":
                    next_cell_format = formats[parseInt(record[rj].slice(1))];
                    break;
                  case "S":
                    break;
                  case "D":
                    break;
                  case "N":
                    break;
                  case "W":
                    cw = record[rj].slice(1).split(" ");
                    for (j2 = parseInt(cw[0], 10); j2 <= parseInt(cw[1], 10); ++j2) {
                      Mval = parseInt(cw[2], 10);
                      colinfo[j2 - 1] = Mval === 0 ? { hidden: true } : { wch: Mval };
                      process_col(colinfo[j2 - 1]);
                    }
                    break;
                  case "C":
                    C2 = parseInt(record[rj].slice(1)) - 1;
                    if (!colinfo[C2])
                      colinfo[C2] = {};
                    break;
                  case "R":
                    R2 = parseInt(record[rj].slice(1)) - 1;
                    if (!rowinfo[R2])
                      rowinfo[R2] = {};
                    if (Mval > 0) {
                      rowinfo[R2].hpt = Mval;
                      rowinfo[R2].hpx = pt2px(Mval);
                    } else if (Mval === 0)
                      rowinfo[R2].hidden = true;
                    break;
                  default:
                    if (opts && opts.WTF)
                      throw new Error("SYLK bad record " + rstr);
                }
              if (F_seen < 1)
                next_cell_format = null;
              break;
            default:
              if (opts && opts.WTF)
                throw new Error("SYLK bad record " + rstr);
          }
      }
      if (rowinfo.length > 0)
        sht["!rows"] = rowinfo;
      if (colinfo.length > 0)
        sht["!cols"] = colinfo;
      if (opts && opts.sheetRows)
        arr = arr.slice(0, opts.sheetRows);
      return [arr, sht];
    }
    function sylk_to_sheet(d2, opts) {
      var aoasht = sylk_to_aoa(d2, opts);
      var aoa = aoasht[0], ws2 = aoasht[1];
      var o2 = aoa_to_sheet(aoa, opts);
      keys(ws2).forEach(function(k) {
        o2[k] = ws2[k];
      });
      return o2;
    }
    function sylk_to_workbook(d2, opts) {
      return sheet_to_workbook(sylk_to_sheet(d2, opts), opts);
    }
    function write_ws_cell_sylk(cell, ws2, R2, C2) {
      var o2 = "C;Y" + (R2 + 1) + ";X" + (C2 + 1) + ";K";
      switch (cell.t) {
        case "n":
          o2 += cell.v || 0;
          if (cell.f && !cell.F)
            o2 += ";E" + a1_to_rc(cell.f, { r: R2, c: C2 });
          break;
        case "b":
          o2 += cell.v ? "TRUE" : "FALSE";
          break;
        case "e":
          o2 += cell.w || cell.v;
          break;
        case "d":
          o2 += '"' + (cell.w || cell.v) + '"';
          break;
        case "s":
          o2 += '"' + cell.v.replace(/"/g, "").replace(/;/g, ";;") + '"';
          break;
      }
      return o2;
    }
    function write_ws_cols_sylk(out, cols) {
      cols.forEach(function(col, i2) {
        var rec = "F;W" + (i2 + 1) + " " + (i2 + 1) + " ";
        if (col.hidden)
          rec += "0";
        else {
          if (typeof col.width == "number" && !col.wpx)
            col.wpx = width2px(col.width);
          if (typeof col.wpx == "number" && !col.wch)
            col.wch = px2char(col.wpx);
          if (typeof col.wch == "number")
            rec += Math.round(col.wch);
        }
        if (rec.charAt(rec.length - 1) != " ")
          out.push(rec);
      });
    }
    function write_ws_rows_sylk(out, rows) {
      rows.forEach(function(row, i2) {
        var rec = "F;";
        if (row.hidden)
          rec += "M0;";
        else if (row.hpt)
          rec += "M" + 20 * row.hpt + ";";
        else if (row.hpx)
          rec += "M" + 20 * px2pt(row.hpx) + ";";
        if (rec.length > 2)
          out.push(rec + "R" + (i2 + 1));
      });
    }
    function sheet_to_sylk(ws2, opts) {
      var preamble = ["ID;PWXL;N;E"], o2 = [];
      var r2 = safe_decode_range(ws2["!ref"]), cell;
      var dense = Array.isArray(ws2);
      var RS = "\r\n";
      preamble.push("P;PGeneral");
      preamble.push("F;P0;DG0G8;M255");
      if (ws2["!cols"])
        write_ws_cols_sylk(preamble, ws2["!cols"]);
      if (ws2["!rows"])
        write_ws_rows_sylk(preamble, ws2["!rows"]);
      preamble.push("B;Y" + (r2.e.r - r2.s.r + 1) + ";X" + (r2.e.c - r2.s.c + 1) + ";D" + [r2.s.c, r2.s.r, r2.e.c, r2.e.r].join(" "));
      for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2) {
        for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
          var coord = encode_cell({ r: R2, c: C2 });
          cell = dense ? (ws2[R2] || [])[C2] : ws2[coord];
          if (!cell || cell.v == null && (!cell.f || cell.F))
            continue;
          o2.push(write_ws_cell_sylk(cell, ws2, R2, C2));
        }
      }
      return preamble.join(RS) + RS + o2.join(RS) + RS + "E" + RS;
    }
    return {
      to_workbook: sylk_to_workbook,
      to_sheet: sylk_to_sheet,
      from_sheet: sheet_to_sylk
    };
  }();
  var DIF = /* @__PURE__ */ function() {
    function dif_to_aoa(d2, opts) {
      switch (opts.type) {
        case "base64":
          return dif_to_aoa_str(Base64_decode(d2), opts);
        case "binary":
          return dif_to_aoa_str(d2, opts);
        case "buffer":
          return dif_to_aoa_str(has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2), opts);
        case "array":
          return dif_to_aoa_str(cc2str(d2), opts);
      }
      throw new Error("Unrecognized type " + opts.type);
    }
    function dif_to_aoa_str(str, opts) {
      var records = str.split("\n"), R2 = -1, C2 = -1, ri = 0, arr = [];
      for (; ri !== records.length; ++ri) {
        if (records[ri].trim() === "BOT") {
          arr[++R2] = [];
          C2 = 0;
          continue;
        }
        if (R2 < 0)
          continue;
        var metadata = records[ri].trim().split(",");
        var type2 = metadata[0], value2 = metadata[1];
        ++ri;
        var data = records[ri] || "";
        while ((data.match(/["]/g) || []).length & 1 && ri < records.length - 1)
          data += "\n" + records[++ri];
        data = data.trim();
        switch (+type2) {
          case -1:
            if (data === "BOT") {
              arr[++R2] = [];
              C2 = 0;
              continue;
            } else if (data !== "EOD")
              throw new Error("Unrecognized DIF special command " + data);
            break;
          case 0:
            if (data === "TRUE")
              arr[R2][C2] = true;
            else if (data === "FALSE")
              arr[R2][C2] = false;
            else if (!isNaN(fuzzynum(value2)))
              arr[R2][C2] = fuzzynum(value2);
            else if (!isNaN(fuzzydate(value2).getDate()))
              arr[R2][C2] = parseDate(value2);
            else
              arr[R2][C2] = value2;
            ++C2;
            break;
          case 1:
            data = data.slice(1, data.length - 1);
            data = data.replace(/""/g, '"');
            if (data && data.match(/^=".*"$/))
              data = data.slice(2, -1);
            arr[R2][C2++] = data !== "" ? data : null;
            break;
        }
        if (data === "EOD")
          break;
      }
      if (opts && opts.sheetRows)
        arr = arr.slice(0, opts.sheetRows);
      return arr;
    }
    function dif_to_sheet(str, opts) {
      return aoa_to_sheet(dif_to_aoa(str, opts), opts);
    }
    function dif_to_workbook(str, opts) {
      return sheet_to_workbook(dif_to_sheet(str, opts), opts);
    }
    var sheet_to_dif = /* @__PURE__ */ function() {
      var push_field = function pf(o2, topic, v2, n2, s2) {
        o2.push(topic);
        o2.push(v2 + "," + n2);
        o2.push('"' + s2.replace(/"/g, '""') + '"');
      };
      var push_value = function po(o2, type2, v2, s2) {
        o2.push(type2 + "," + v2);
        o2.push(type2 == 1 ? '"' + s2.replace(/"/g, '""') + '"' : s2);
      };
      return function sheet_to_dif2(ws2) {
        var o2 = [];
        var r2 = safe_decode_range(ws2["!ref"]), cell;
        var dense = Array.isArray(ws2);
        push_field(o2, "TABLE", 0, 1, "sheetjs");
        push_field(o2, "VECTORS", 0, r2.e.r - r2.s.r + 1, "");
        push_field(o2, "TUPLES", 0, r2.e.c - r2.s.c + 1, "");
        push_field(o2, "DATA", 0, 0, "");
        for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2) {
          push_value(o2, -1, 0, "BOT");
          for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
            var coord = encode_cell({ r: R2, c: C2 });
            cell = dense ? (ws2[R2] || [])[C2] : ws2[coord];
            if (!cell) {
              push_value(o2, 1, 0, "");
              continue;
            }
            switch (cell.t) {
              case "n":
                var val = cell.w;
                if (!val && cell.v != null)
                  val = cell.v;
                if (val == null) {
                  if (cell.f && !cell.F)
                    push_value(o2, 1, 0, "=" + cell.f);
                  else
                    push_value(o2, 1, 0, "");
                } else
                  push_value(o2, 0, val, "V");
                break;
              case "b":
                push_value(o2, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                break;
              case "s":
                push_value(o2, 1, 0, isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
                break;
              case "d":
                if (!cell.w)
                  cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
                push_value(o2, 0, cell.w, "V");
                break;
              default:
                push_value(o2, 1, 0, "");
            }
          }
        }
        push_value(o2, -1, 0, "EOD");
        var RS = "\r\n";
        var oo = o2.join(RS);
        return oo;
      };
    }();
    return {
      to_workbook: dif_to_workbook,
      to_sheet: dif_to_sheet,
      from_sheet: sheet_to_dif
    };
  }();
  var ETH = /* @__PURE__ */ function() {
    function decode(s2) {
      return s2.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
    }
    function encode(s2) {
      return s2.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
    }
    function eth_to_aoa(str, opts) {
      var records = str.split("\n"), R2 = -1, C2 = -1, ri = 0, arr = [];
      for (; ri !== records.length; ++ri) {
        var record = records[ri].trim().split(":");
        if (record[0] !== "cell")
          continue;
        var addr = decode_cell(record[1]);
        if (arr.length <= addr.r) {
          for (R2 = arr.length; R2 <= addr.r; ++R2)
            if (!arr[R2])
              arr[R2] = [];
        }
        R2 = addr.r;
        C2 = addr.c;
        switch (record[2]) {
          case "t":
            arr[R2][C2] = decode(record[3]);
            break;
          case "v":
            arr[R2][C2] = +record[3];
            break;
          case "vtf":
            var _f2 = record[record.length - 1];
          case "vtc":
            switch (record[3]) {
              case "nl":
                arr[R2][C2] = +record[4] ? true : false;
                break;
              default:
                arr[R2][C2] = +record[4];
                break;
            }
            if (record[2] == "vtf")
              arr[R2][C2] = [arr[R2][C2], _f2];
        }
      }
      if (opts && opts.sheetRows)
        arr = arr.slice(0, opts.sheetRows);
      return arr;
    }
    function eth_to_sheet(d2, opts) {
      return aoa_to_sheet(eth_to_aoa(d2, opts), opts);
    }
    function eth_to_workbook(d2, opts) {
      return sheet_to_workbook(eth_to_sheet(d2, opts), opts);
    }
    var header = [
      "socialcalc:version:1.5",
      "MIME-Version: 1.0",
      "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
    ].join("\n");
    var sep = [
      "--SocialCalcSpreadsheetControlSave",
      "Content-type: text/plain; charset=UTF-8"
    ].join("\n") + "\n";
    var meta = [
      "# SocialCalc Spreadsheet Control Save",
      "part:sheet"
    ].join("\n");
    var end = "--SocialCalcSpreadsheetControlSave--";
    function sheet_to_eth_data(ws2) {
      if (!ws2 || !ws2["!ref"])
        return "";
      var o2 = [], oo = [], cell, coord = "";
      var r2 = decode_range(ws2["!ref"]);
      var dense = Array.isArray(ws2);
      for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2) {
        for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
          coord = encode_cell({ r: R2, c: C2 });
          cell = dense ? (ws2[R2] || [])[C2] : ws2[coord];
          if (!cell || cell.v == null || cell.t === "z")
            continue;
          oo = ["cell", coord, "t"];
          switch (cell.t) {
            case "s":
            case "str":
              oo.push(encode(cell.v));
              break;
            case "n":
              if (!cell.f) {
                oo[2] = "v";
                oo[3] = cell.v;
              } else {
                oo[2] = "vtf";
                oo[3] = "n";
                oo[4] = cell.v;
                oo[5] = encode(cell.f);
              }
              break;
            case "b":
              oo[2] = "vt" + (cell.f ? "f" : "c");
              oo[3] = "nl";
              oo[4] = cell.v ? "1" : "0";
              oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
              break;
            case "d":
              var t2 = datenum(parseDate(cell.v));
              oo[2] = "vtc";
              oo[3] = "nd";
              oo[4] = "" + t2;
              oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t2);
              break;
            case "e":
              continue;
          }
          o2.push(oo.join(":"));
        }
      }
      o2.push("sheet:c:" + (r2.e.c - r2.s.c + 1) + ":r:" + (r2.e.r - r2.s.r + 1) + ":tvf:1");
      o2.push("valueformat:1:text-wiki");
      return o2.join("\n");
    }
    function sheet_to_eth(ws2) {
      return [header, sep, meta, sep, sheet_to_eth_data(ws2), end].join("\n");
    }
    return {
      to_workbook: eth_to_workbook,
      to_sheet: eth_to_sheet,
      from_sheet: sheet_to_eth
    };
  }();
  var PRN = /* @__PURE__ */ function() {
    function set_text_arr(data, arr, R2, C2, o2) {
      if (o2.raw)
        arr[R2][C2] = data;
      else if (data === "")
        ;
      else if (data === "TRUE")
        arr[R2][C2] = true;
      else if (data === "FALSE")
        arr[R2][C2] = false;
      else if (!isNaN(fuzzynum(data)))
        arr[R2][C2] = fuzzynum(data);
      else if (!isNaN(fuzzydate(data).getDate()))
        arr[R2][C2] = parseDate(data);
      else
        arr[R2][C2] = data;
    }
    function prn_to_aoa_str(f2, opts) {
      var o2 = opts || {};
      var arr = [];
      if (!f2 || f2.length === 0)
        return arr;
      var lines = f2.split(/[\r\n]/);
      var L2 = lines.length - 1;
      while (L2 >= 0 && lines[L2].length === 0)
        --L2;
      var start = 10, idx = 0;
      var R2 = 0;
      for (; R2 <= L2; ++R2) {
        idx = lines[R2].indexOf(" ");
        if (idx == -1)
          idx = lines[R2].length;
        else
          idx++;
        start = Math.max(start, idx);
      }
      for (R2 = 0; R2 <= L2; ++R2) {
        arr[R2] = [];
        var C2 = 0;
        set_text_arr(lines[R2].slice(0, start).trim(), arr, R2, C2, o2);
        for (C2 = 1; C2 <= (lines[R2].length - start) / 10 + 1; ++C2)
          set_text_arr(lines[R2].slice(start + (C2 - 1) * 10, start + C2 * 10).trim(), arr, R2, C2, o2);
      }
      if (o2.sheetRows)
        arr = arr.slice(0, o2.sheetRows);
      return arr;
    }
    var guess_seps = {
      /*::[*/
      44: ",",
      /*::[*/
      9: "	",
      /*::[*/
      59: ";",
      /*::[*/
      124: "|"
    };
    var guess_sep_weights = {
      /*::[*/
      44: 3,
      /*::[*/
      9: 2,
      /*::[*/
      59: 1,
      /*::[*/
      124: 0
    };
    function guess_sep(str) {
      var cnt = {}, instr = false, end = 0, cc = 0;
      for (; end < str.length; ++end) {
        if ((cc = str.charCodeAt(end)) == 34)
          instr = !instr;
        else if (!instr && cc in guess_seps)
          cnt[cc] = (cnt[cc] || 0) + 1;
      }
      cc = [];
      for (end in cnt)
        if (Object.prototype.hasOwnProperty.call(cnt, end)) {
          cc.push([cnt[end], end]);
        }
      if (!cc.length) {
        cnt = guess_sep_weights;
        for (end in cnt)
          if (Object.prototype.hasOwnProperty.call(cnt, end)) {
            cc.push([cnt[end], end]);
          }
      }
      cc.sort(function(a2, b2) {
        return a2[0] - b2[0] || guess_sep_weights[a2[1]] - guess_sep_weights[b2[1]];
      });
      return guess_seps[cc.pop()[1]] || 44;
    }
    function dsv_to_sheet_str(str, opts) {
      var o2 = opts || {};
      var sep = "";
      var ws2 = o2.dense ? [] : {};
      var range2 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
      if (str.slice(0, 4) == "sep=") {
        if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
          sep = str.charAt(4);
          str = str.slice(7);
        } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
          sep = str.charAt(4);
          str = str.slice(6);
        } else
          sep = guess_sep(str.slice(0, 1024));
      } else if (o2 && o2.FS)
        sep = o2.FS;
      else
        sep = guess_sep(str.slice(0, 1024));
      var R2 = 0, C2 = 0, v2 = 0;
      var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
      str = str.replace(/\r\n/mg, "\n");
      var _re = o2.dateNF != null ? dateNF_regex(o2.dateNF) : null;
      function finish_cell() {
        var s2 = str.slice(start, end);
        var cell = {};
        if (s2.charAt(0) == '"' && s2.charAt(s2.length - 1) == '"')
          s2 = s2.slice(1, -1).replace(/""/g, '"');
        if (s2.length === 0)
          cell.t = "z";
        else if (o2.raw) {
          cell.t = "s";
          cell.v = s2;
        } else if (s2.trim().length === 0) {
          cell.t = "s";
          cell.v = s2;
        } else if (s2.charCodeAt(0) == 61) {
          if (s2.charCodeAt(1) == 34 && s2.charCodeAt(s2.length - 1) == 34) {
            cell.t = "s";
            cell.v = s2.slice(2, -1).replace(/""/g, '"');
          } else if (fuzzyfmla(s2)) {
            cell.t = "n";
            cell.f = s2.slice(1);
          } else {
            cell.t = "s";
            cell.v = s2;
          }
        } else if (s2 == "TRUE") {
          cell.t = "b";
          cell.v = true;
        } else if (s2 == "FALSE") {
          cell.t = "b";
          cell.v = false;
        } else if (!isNaN(v2 = fuzzynum(s2))) {
          cell.t = "n";
          if (o2.cellText !== false)
            cell.w = s2;
          cell.v = v2;
        } else if (!isNaN(fuzzydate(s2).getDate()) || _re && s2.match(_re)) {
          cell.z = o2.dateNF || table_fmt[14];
          var k = 0;
          if (_re && s2.match(_re)) {
            s2 = dateNF_fix(s2, o2.dateNF, s2.match(_re) || []);
            k = 1;
          }
          if (o2.cellDates) {
            cell.t = "d";
            cell.v = parseDate(s2, k);
          } else {
            cell.t = "n";
            cell.v = datenum(parseDate(s2, k));
          }
          if (o2.cellText !== false)
            cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
          if (!o2.cellNF)
            delete cell.z;
        } else {
          cell.t = "s";
          cell.v = s2;
        }
        if (cell.t == "z")
          ;
        else if (o2.dense) {
          if (!ws2[R2])
            ws2[R2] = [];
          ws2[R2][C2] = cell;
        } else
          ws2[encode_cell({ c: C2, r: R2 })] = cell;
        start = end + 1;
        startcc = str.charCodeAt(start);
        if (range2.e.c < C2)
          range2.e.c = C2;
        if (range2.e.r < R2)
          range2.e.r = R2;
        if (cc == sepcc)
          ++C2;
        else {
          C2 = 0;
          ++R2;
          if (o2.sheetRows && o2.sheetRows <= R2)
            return true;
        }
      }
      outer:
        for (; end < str.length; ++end)
          switch (cc = str.charCodeAt(end)) {
            case 34:
              if (startcc === 34)
                instr = !instr;
              break;
            case sepcc:
            case 10:
            case 13:
              if (!instr && finish_cell())
                break outer;
              break;
          }
      if (end - start > 0)
        finish_cell();
      ws2["!ref"] = encode_range(range2);
      return ws2;
    }
    function prn_to_sheet_str(str, opts) {
      if (!(opts && opts.PRN))
        return dsv_to_sheet_str(str, opts);
      if (opts.FS)
        return dsv_to_sheet_str(str, opts);
      if (str.slice(0, 4) == "sep=")
        return dsv_to_sheet_str(str, opts);
      if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0)
        return dsv_to_sheet_str(str, opts);
      return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
    }
    function prn_to_sheet(d2, opts) {
      var str = "", bytes = opts.type == "string" ? [0, 0, 0, 0] : firstbyte(d2, opts);
      switch (opts.type) {
        case "base64":
          str = Base64_decode(d2);
          break;
        case "binary":
          str = d2;
          break;
        case "buffer":
          if (opts.codepage == 65001)
            str = d2.toString("utf8");
          else if (opts.codepage && typeof $cptable !== "undefined")
            str = $cptable.utils.decode(opts.codepage, d2);
          else
            str = has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2);
          break;
        case "array":
          str = cc2str(d2);
          break;
        case "string":
          str = d2;
          break;
        default:
          throw new Error("Unrecognized type " + opts.type);
      }
      if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
        str = utf8read(str.slice(3));
      else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001)
        str = utf8read(str);
      else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage)
        str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
      if (str.slice(0, 19) == "socialcalc:version:")
        return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
      return prn_to_sheet_str(str, opts);
    }
    function prn_to_workbook(d2, opts) {
      return sheet_to_workbook(prn_to_sheet(d2, opts), opts);
    }
    function sheet_to_prn(ws2) {
      var o2 = [];
      var r2 = safe_decode_range(ws2["!ref"]), cell;
      var dense = Array.isArray(ws2);
      for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2) {
        var oo = [];
        for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
          var coord = encode_cell({ r: R2, c: C2 });
          cell = dense ? (ws2[R2] || [])[C2] : ws2[coord];
          if (!cell || cell.v == null) {
            oo.push("          ");
            continue;
          }
          var w2 = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
          while (w2.length < 10)
            w2 += " ";
          oo.push(w2 + (C2 === 0 ? " " : ""));
        }
        o2.push(oo.join(""));
      }
      return o2.join("\n");
    }
    return {
      to_workbook: prn_to_workbook,
      to_sheet: prn_to_sheet,
      from_sheet: sheet_to_prn
    };
  }();
  function read_wb_ID(d2, opts) {
    var o2 = opts || {}, OLD_WTF = !!o2.WTF;
    o2.WTF = true;
    try {
      var out = SYLK.to_workbook(d2, o2);
      o2.WTF = OLD_WTF;
      return out;
    } catch (e2) {
      o2.WTF = OLD_WTF;
      if (!e2.message.match(/SYLK bad record ID/) && OLD_WTF)
        throw e2;
      return PRN.to_workbook(d2, opts);
    }
  }
  var WK_ = /* @__PURE__ */ function() {
    function lotushopper(data, cb, opts) {
      if (!data)
        return;
      prep_blob(data, data.l || 0);
      var Enum = opts.Enum || WK1Enum;
      while (data.l < data.length) {
        var RT = data.read_shift(2);
        var R2 = Enum[RT] || Enum[65535];
        var length = data.read_shift(2);
        var tgt = data.l + length;
        var d2 = R2.f && R2.f(data, length, opts);
        data.l = tgt;
        if (cb(d2, R2, RT))
          return;
      }
    }
    function lotus_to_workbook(d2, opts) {
      switch (opts.type) {
        case "base64":
          return lotus_to_workbook_buf(s2a(Base64_decode(d2)), opts);
        case "binary":
          return lotus_to_workbook_buf(s2a(d2), opts);
        case "buffer":
        case "array":
          return lotus_to_workbook_buf(d2, opts);
      }
      throw "Unsupported type " + opts.type;
    }
    function lotus_to_workbook_buf(d2, opts) {
      if (!d2)
        return d2;
      var o2 = opts || {};
      var s2 = o2.dense ? [] : {}, n2 = "Sheet1", next_n = "", sidx = 0;
      var sheets = {}, snames = [], realnames = [];
      var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
      var sheetRows = o2.sheetRows || 0;
      if (d2[2] == 0) {
        if (d2[3] == 8 || d2[3] == 9) {
          if (d2.length >= 16 && d2[14] == 5 && d2[15] === 108)
            throw new Error("Unsupported Works 3 for Mac file");
        }
      }
      if (d2[2] == 2) {
        o2.Enum = WK1Enum;
        lotushopper(d2, function(val, R2, RT) {
          switch (RT) {
            case 0:
              o2.vers = val;
              if (val >= 4096)
                o2.qpro = true;
              break;
            case 6:
              refguess = val;
              break;
            case 204:
              if (val)
                next_n = val;
              break;
            case 222:
              next_n = val;
              break;
            case 15:
            case 51:
              if (!o2.qpro)
                val[1].v = val[1].v.slice(1);
            case 13:
            case 14:
            case 16:
              if (RT == 14 && (val[2] & 112) == 112 && (val[2] & 15) > 1 && (val[2] & 15) < 15) {
                val[1].z = o2.dateNF || table_fmt[14];
                if (o2.cellDates) {
                  val[1].t = "d";
                  val[1].v = numdate(val[1].v);
                }
              }
              if (o2.qpro) {
                if (val[3] > sidx) {
                  s2["!ref"] = encode_range(refguess);
                  sheets[n2] = s2;
                  snames.push(n2);
                  s2 = o2.dense ? [] : {};
                  refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                  sidx = val[3];
                  n2 = next_n || "Sheet" + (sidx + 1);
                  next_n = "";
                }
              }
              var tmpcell = o2.dense ? (s2[val[0].r] || [])[val[0].c] : s2[encode_cell(val[0])];
              if (tmpcell) {
                tmpcell.t = val[1].t;
                tmpcell.v = val[1].v;
                if (val[1].z != null)
                  tmpcell.z = val[1].z;
                if (val[1].f != null)
                  tmpcell.f = val[1].f;
                break;
              }
              if (o2.dense) {
                if (!s2[val[0].r])
                  s2[val[0].r] = [];
                s2[val[0].r][val[0].c] = val[1];
              } else
                s2[encode_cell(val[0])] = val[1];
              break;
          }
        }, o2);
      } else if (d2[2] == 26 || d2[2] == 14) {
        o2.Enum = WK3Enum;
        if (d2[2] == 14) {
          o2.qpro = true;
          d2.l = 0;
        }
        lotushopper(d2, function(val, R2, RT) {
          switch (RT) {
            case 204:
              n2 = val;
              break;
            case 22:
              val[1].v = val[1].v.slice(1);
            case 23:
            case 24:
            case 25:
            case 37:
            case 39:
            case 40:
              if (val[3] > sidx) {
                s2["!ref"] = encode_range(refguess);
                sheets[n2] = s2;
                snames.push(n2);
                s2 = o2.dense ? [] : {};
                refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                sidx = val[3];
                n2 = "Sheet" + (sidx + 1);
              }
              if (sheetRows > 0 && val[0].r >= sheetRows)
                break;
              if (o2.dense) {
                if (!s2[val[0].r])
                  s2[val[0].r] = [];
                s2[val[0].r][val[0].c] = val[1];
              } else
                s2[encode_cell(val[0])] = val[1];
              if (refguess.e.c < val[0].c)
                refguess.e.c = val[0].c;
              if (refguess.e.r < val[0].r)
                refguess.e.r = val[0].r;
              break;
            case 27:
              if (val[14e3])
                realnames[val[14e3][0]] = val[14e3][1];
              break;
            case 1537:
              realnames[val[0]] = val[1];
              if (val[0] == sidx)
                n2 = val[1];
              break;
          }
        }, o2);
      } else
        throw new Error("Unrecognized LOTUS BOF " + d2[2]);
      s2["!ref"] = encode_range(refguess);
      sheets[next_n || n2] = s2;
      snames.push(next_n || n2);
      if (!realnames.length)
        return { SheetNames: snames, Sheets: sheets };
      var osheets = {}, rnames = [];
      for (var i2 = 0; i2 < realnames.length; ++i2)
        if (sheets[snames[i2]]) {
          rnames.push(realnames[i2] || snames[i2]);
          osheets[realnames[i2]] = sheets[realnames[i2]] || sheets[snames[i2]];
        } else {
          rnames.push(realnames[i2]);
          osheets[realnames[i2]] = { "!ref": "A1" };
        }
      return { SheetNames: rnames, Sheets: osheets };
    }
    function sheet_to_wk1(ws2, opts) {
      var o2 = opts || {};
      if (+o2.codepage >= 0)
        set_cp(+o2.codepage);
      if (o2.type == "string")
        throw new Error("Cannot write WK1 to JS string");
      var ba = buf_array();
      var range2 = safe_decode_range(ws2["!ref"]);
      var dense = Array.isArray(ws2);
      var cols = [];
      write_biff_rec(ba, 0, write_BOF_WK1(1030));
      write_biff_rec(ba, 6, write_RANGE(range2));
      var max_R = Math.min(range2.e.r, 8191);
      for (var R2 = range2.s.r; R2 <= max_R; ++R2) {
        var rr = encode_row(R2);
        for (var C2 = range2.s.c; C2 <= range2.e.c; ++C2) {
          if (R2 === range2.s.r)
            cols[C2] = encode_col(C2);
          var ref = cols[C2] + rr;
          var cell = dense ? (ws2[R2] || [])[C2] : ws2[ref];
          if (!cell || cell.t == "z")
            continue;
          if (cell.t == "n") {
            if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767)
              write_biff_rec(ba, 13, write_INTEGER(R2, C2, cell.v));
            else
              write_biff_rec(ba, 14, write_NUMBER(R2, C2, cell.v));
          } else {
            var str = format_cell(cell);
            write_biff_rec(ba, 15, write_LABEL(R2, C2, str.slice(0, 239)));
          }
        }
      }
      write_biff_rec(ba, 1);
      return ba.end();
    }
    function book_to_wk3(wb, opts) {
      var o2 = opts || {};
      if (+o2.codepage >= 0)
        set_cp(+o2.codepage);
      if (o2.type == "string")
        throw new Error("Cannot write WK3 to JS string");
      var ba = buf_array();
      write_biff_rec(ba, 0, write_BOF_WK3(wb));
      for (var i2 = 0, cnt = 0; i2 < wb.SheetNames.length; ++i2)
        if ((wb.Sheets[wb.SheetNames[i2]] || {})["!ref"])
          write_biff_rec(ba, 27, write_XFORMAT_SHEETNAME(wb.SheetNames[i2], cnt++));
      var wsidx = 0;
      for (i2 = 0; i2 < wb.SheetNames.length; ++i2) {
        var ws2 = wb.Sheets[wb.SheetNames[i2]];
        if (!ws2 || !ws2["!ref"])
          continue;
        var range2 = safe_decode_range(ws2["!ref"]);
        var dense = Array.isArray(ws2);
        var cols = [];
        var max_R = Math.min(range2.e.r, 8191);
        for (var R2 = range2.s.r; R2 <= max_R; ++R2) {
          var rr = encode_row(R2);
          for (var C2 = range2.s.c; C2 <= range2.e.c; ++C2) {
            if (R2 === range2.s.r)
              cols[C2] = encode_col(C2);
            var ref = cols[C2] + rr;
            var cell = dense ? (ws2[R2] || [])[C2] : ws2[ref];
            if (!cell || cell.t == "z")
              continue;
            if (cell.t == "n") {
              write_biff_rec(ba, 23, write_NUMBER_17(R2, C2, wsidx, cell.v));
            } else {
              var str = format_cell(cell);
              write_biff_rec(ba, 22, write_LABEL_16(R2, C2, wsidx, str.slice(0, 239)));
            }
          }
        }
        ++wsidx;
      }
      write_biff_rec(ba, 1);
      return ba.end();
    }
    function write_BOF_WK1(v2) {
      var out = new_buf(2);
      out.write_shift(2, v2);
      return out;
    }
    function write_BOF_WK3(wb) {
      var out = new_buf(26);
      out.write_shift(2, 4096);
      out.write_shift(2, 4);
      out.write_shift(4, 0);
      var rows = 0, cols = 0, wscnt = 0;
      for (var i2 = 0; i2 < wb.SheetNames.length; ++i2) {
        var name = wb.SheetNames[i2];
        var ws2 = wb.Sheets[name];
        if (!ws2 || !ws2["!ref"])
          continue;
        ++wscnt;
        var range2 = decode_range(ws2["!ref"]);
        if (rows < range2.e.r)
          rows = range2.e.r;
        if (cols < range2.e.c)
          cols = range2.e.c;
      }
      if (rows > 8191)
        rows = 8191;
      out.write_shift(2, rows);
      out.write_shift(1, wscnt);
      out.write_shift(1, cols);
      out.write_shift(2, 0);
      out.write_shift(2, 0);
      out.write_shift(1, 1);
      out.write_shift(1, 2);
      out.write_shift(4, 0);
      out.write_shift(4, 0);
      return out;
    }
    function parse_RANGE(blob, length, opts) {
      var o2 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
      if (length == 8 && opts.qpro) {
        o2.s.c = blob.read_shift(1);
        blob.l++;
        o2.s.r = blob.read_shift(2);
        o2.e.c = blob.read_shift(1);
        blob.l++;
        o2.e.r = blob.read_shift(2);
        return o2;
      }
      o2.s.c = blob.read_shift(2);
      o2.s.r = blob.read_shift(2);
      if (length == 12 && opts.qpro)
        blob.l += 2;
      o2.e.c = blob.read_shift(2);
      o2.e.r = blob.read_shift(2);
      if (length == 12 && opts.qpro)
        blob.l += 2;
      if (o2.s.c == 65535)
        o2.s.c = o2.e.c = o2.s.r = o2.e.r = 0;
      return o2;
    }
    function write_RANGE(range2) {
      var out = new_buf(8);
      out.write_shift(2, range2.s.c);
      out.write_shift(2, range2.s.r);
      out.write_shift(2, range2.e.c);
      out.write_shift(2, range2.e.r);
      return out;
    }
    function parse_cell(blob, length, opts) {
      var o2 = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0, 0];
      if (opts.qpro && opts.vers != 20768) {
        o2[0].c = blob.read_shift(1);
        o2[3] = blob.read_shift(1);
        o2[0].r = blob.read_shift(2);
        blob.l += 2;
      } else {
        o2[2] = blob.read_shift(1);
        o2[0].c = blob.read_shift(2);
        o2[0].r = blob.read_shift(2);
      }
      return o2;
    }
    function parse_LABEL(blob, length, opts) {
      var tgt = blob.l + length;
      var o2 = parse_cell(blob, length, opts);
      o2[1].t = "s";
      if (opts.vers == 20768) {
        blob.l++;
        var len = blob.read_shift(1);
        o2[1].v = blob.read_shift(len, "utf8");
        return o2;
      }
      if (opts.qpro)
        blob.l++;
      o2[1].v = blob.read_shift(tgt - blob.l, "cstr");
      return o2;
    }
    function write_LABEL(R2, C2, s2) {
      var o2 = new_buf(7 + s2.length);
      o2.write_shift(1, 255);
      o2.write_shift(2, C2);
      o2.write_shift(2, R2);
      o2.write_shift(1, 39);
      for (var i2 = 0; i2 < o2.length; ++i2) {
        var cc = s2.charCodeAt(i2);
        o2.write_shift(1, cc >= 128 ? 95 : cc);
      }
      o2.write_shift(1, 0);
      return o2;
    }
    function parse_INTEGER(blob, length, opts) {
      var o2 = parse_cell(blob, length, opts);
      o2[1].v = blob.read_shift(2, "i");
      return o2;
    }
    function write_INTEGER(R2, C2, v2) {
      var o2 = new_buf(7);
      o2.write_shift(1, 255);
      o2.write_shift(2, C2);
      o2.write_shift(2, R2);
      o2.write_shift(2, v2, "i");
      return o2;
    }
    function parse_NUMBER(blob, length, opts) {
      var o2 = parse_cell(blob, length, opts);
      o2[1].v = blob.read_shift(8, "f");
      return o2;
    }
    function write_NUMBER(R2, C2, v2) {
      var o2 = new_buf(13);
      o2.write_shift(1, 255);
      o2.write_shift(2, C2);
      o2.write_shift(2, R2);
      o2.write_shift(8, v2, "f");
      return o2;
    }
    function parse_FORMULA(blob, length, opts) {
      var tgt = blob.l + length;
      var o2 = parse_cell(blob, length, opts);
      o2[1].v = blob.read_shift(8, "f");
      if (opts.qpro)
        blob.l = tgt;
      else {
        var flen = blob.read_shift(2);
        wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o2);
        blob.l += flen;
      }
      return o2;
    }
    function wk1_parse_rc(B2, V2, col) {
      var rel = V2 & 32768;
      V2 &= ~32768;
      V2 = (rel ? B2 : 0) + (V2 >= 8192 ? V2 - 16384 : V2);
      return (rel ? "" : "$") + (col ? encode_col(V2) : encode_row(V2));
    }
    var FuncTab = {
      51: ["FALSE", 0],
      52: ["TRUE", 0],
      70: ["LEN", 1],
      80: ["SUM", 69],
      81: ["AVERAGEA", 69],
      82: ["COUNTA", 69],
      83: ["MINA", 69],
      84: ["MAXA", 69],
      111: ["T", 1]
    };
    var BinOpTab = [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // eslint-disable-line no-mixed-spaces-and-tabs
      "",
      "+",
      "-",
      "*",
      "/",
      "^",
      "=",
      "<>",
      // eslint-disable-line no-mixed-spaces-and-tabs
      "<=",
      ">=",
      "<",
      ">",
      "",
      "",
      "",
      "",
      // eslint-disable-line no-mixed-spaces-and-tabs
      "&",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
      // eslint-disable-line no-mixed-spaces-and-tabs
    ];
    function wk1_fmla_to_csf(blob, o2) {
      prep_blob(blob, 0);
      var out = [], argc = 0, R2 = "", C2 = "", argL = "", argR = "";
      while (blob.l < blob.length) {
        var cc = blob[blob.l++];
        switch (cc) {
          case 0:
            out.push(blob.read_shift(8, "f"));
            break;
          case 1:
            {
              C2 = wk1_parse_rc(o2[0].c, blob.read_shift(2), true);
              R2 = wk1_parse_rc(o2[0].r, blob.read_shift(2), false);
              out.push(C2 + R2);
            }
            break;
          case 2:
            {
              var c2 = wk1_parse_rc(o2[0].c, blob.read_shift(2), true);
              var r2 = wk1_parse_rc(o2[0].r, blob.read_shift(2), false);
              C2 = wk1_parse_rc(o2[0].c, blob.read_shift(2), true);
              R2 = wk1_parse_rc(o2[0].r, blob.read_shift(2), false);
              out.push(c2 + r2 + ":" + C2 + R2);
            }
            break;
          case 3:
            if (blob.l < blob.length) {
              formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:8967", "WK1 premature formula end");
              return;
            }
            break;
          case 4:
            out.push("(" + out.pop() + ")");
            break;
          case 5:
            out.push(blob.read_shift(2));
            break;
          case 6:
            {
              var Z2 = "";
              while (cc = blob[blob.l++])
                Z2 += String.fromCharCode(cc);
              out.push('"' + Z2.replace(/"/g, '""') + '"');
            }
            break;
          case 8:
            out.push("-" + out.pop());
            break;
          case 23:
            out.push("+" + out.pop());
            break;
          case 22:
            out.push("NOT(" + out.pop() + ")");
            break;
          case 20:
          case 21:
            {
              argR = out.pop();
              argL = out.pop();
              out.push(["AND", "OR"][cc - 20] + "(" + argL + "," + argR + ")");
            }
            break;
          default:
            if (cc < 32 && BinOpTab[cc]) {
              argR = out.pop();
              argL = out.pop();
              out.push(argL + BinOpTab[cc] + argR);
            } else if (FuncTab[cc]) {
              argc = FuncTab[cc][1];
              if (argc == 69)
                argc = blob[blob.l++];
              if (argc > out.length) {
                formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:8993", "WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|");
                return;
              }
              var args = out.slice(-argc);
              out.length -= argc;
              out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
            } else if (cc <= 7)
              return formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:8998", "WK1 invalid opcode " + cc.toString(16));
            else if (cc <= 24)
              return formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:8999", "WK1 unsupported op " + cc.toString(16));
            else if (cc <= 30)
              return formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:9000", "WK1 invalid opcode " + cc.toString(16));
            else if (cc <= 115)
              return formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:9001", "WK1 unsupported function opcode " + cc.toString(16));
            else
              return formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:9003", "WK1 unrecognized opcode " + cc.toString(16));
        }
      }
      if (out.length == 1)
        o2[1].f = "" + out[0];
      else
        formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:9007", "WK1 bad formula parse |" + out.join("|") + "|");
    }
    function parse_cell_3(blob) {
      var o2 = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0];
      o2[0].r = blob.read_shift(2);
      o2[3] = blob[blob.l++];
      o2[0].c = blob[blob.l++];
      return o2;
    }
    function parse_LABEL_16(blob, length) {
      var o2 = parse_cell_3(blob);
      o2[1].t = "s";
      o2[1].v = blob.read_shift(length - 4, "cstr");
      return o2;
    }
    function write_LABEL_16(R2, C2, wsidx, s2) {
      var o2 = new_buf(6 + s2.length);
      o2.write_shift(2, R2);
      o2.write_shift(1, wsidx);
      o2.write_shift(1, C2);
      o2.write_shift(1, 39);
      for (var i2 = 0; i2 < s2.length; ++i2) {
        var cc = s2.charCodeAt(i2);
        o2.write_shift(1, cc >= 128 ? 95 : cc);
      }
      o2.write_shift(1, 0);
      return o2;
    }
    function parse_NUMBER_18(blob, length) {
      var o2 = parse_cell_3(blob);
      o2[1].v = blob.read_shift(2);
      var v2 = o2[1].v >> 1;
      if (o2[1].v & 1) {
        switch (v2 & 7) {
          case 0:
            v2 = (v2 >> 3) * 5e3;
            break;
          case 1:
            v2 = (v2 >> 3) * 500;
            break;
          case 2:
            v2 = (v2 >> 3) / 20;
            break;
          case 3:
            v2 = (v2 >> 3) / 200;
            break;
          case 4:
            v2 = (v2 >> 3) / 2e3;
            break;
          case 5:
            v2 = (v2 >> 3) / 2e4;
            break;
          case 6:
            v2 = (v2 >> 3) / 16;
            break;
          case 7:
            v2 = (v2 >> 3) / 64;
            break;
        }
      }
      o2[1].v = v2;
      return o2;
    }
    function parse_NUMBER_17(blob, length) {
      var o2 = parse_cell_3(blob);
      var v1 = blob.read_shift(4);
      var v2 = blob.read_shift(4);
      var e2 = blob.read_shift(2);
      if (e2 == 65535) {
        if (v1 === 0 && v2 === 3221225472) {
          o2[1].t = "e";
          o2[1].v = 15;
        } else if (v1 === 0 && v2 === 3489660928) {
          o2[1].t = "e";
          o2[1].v = 42;
        } else
          o2[1].v = 0;
        return o2;
      }
      var s2 = e2 & 32768;
      e2 = (e2 & 32767) - 16446;
      o2[1].v = (1 - s2 * 2) * (v2 * Math.pow(2, e2 + 32) + v1 * Math.pow(2, e2));
      return o2;
    }
    function write_NUMBER_17(R2, C2, wsidx, v2) {
      var o2 = new_buf(14);
      o2.write_shift(2, R2);
      o2.write_shift(1, wsidx);
      o2.write_shift(1, C2);
      if (v2 == 0) {
        o2.write_shift(4, 0);
        o2.write_shift(4, 0);
        o2.write_shift(2, 65535);
        return o2;
      }
      var s2 = 0, e2 = 0, v1 = 0, v22 = 0;
      if (v2 < 0) {
        s2 = 1;
        v2 = -v2;
      }
      e2 = Math.log2(v2) | 0;
      v2 /= Math.pow(2, e2 - 31);
      v22 = v2 >>> 0;
      if ((v22 & 2147483648) == 0) {
        v2 /= 2;
        ++e2;
        v22 = v2 >>> 0;
      }
      v2 -= v22;
      v22 |= 2147483648;
      v22 >>>= 0;
      v2 *= Math.pow(2, 32);
      v1 = v2 >>> 0;
      o2.write_shift(4, v1);
      o2.write_shift(4, v22);
      e2 += 16383 + (s2 ? 32768 : 0);
      o2.write_shift(2, e2);
      return o2;
    }
    function parse_FORMULA_19(blob, length) {
      var o2 = parse_NUMBER_17(blob);
      blob.l += length - 14;
      return o2;
    }
    function parse_NUMBER_25(blob, length) {
      var o2 = parse_cell_3(blob);
      var v1 = blob.read_shift(4);
      o2[1].v = v1 >> 6;
      return o2;
    }
    function parse_NUMBER_27(blob, length) {
      var o2 = parse_cell_3(blob);
      var v1 = blob.read_shift(8, "f");
      o2[1].v = v1;
      return o2;
    }
    function parse_FORMULA_28(blob, length) {
      var o2 = parse_NUMBER_27(blob);
      blob.l += length - 10;
      return o2;
    }
    function parse_SHEETNAMECS(blob, length) {
      return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, "cstr") : "";
    }
    function parse_SHEETNAMELP(blob, length) {
      var len = blob[blob.l++];
      if (len > length - 1)
        len = length - 1;
      var o2 = "";
      while (o2.length < len)
        o2 += String.fromCharCode(blob[blob.l++]);
      return o2;
    }
    function parse_SHEETINFOQP(blob, length, opts) {
      if (!opts.qpro || length < 21)
        return;
      var id = blob.read_shift(1);
      blob.l += 17;
      blob.l += 1;
      blob.l += 2;
      var nm = blob.read_shift(length - 21, "cstr");
      return [id, nm];
    }
    function parse_XFORMAT(blob, length) {
      var o2 = {}, tgt = blob.l + length;
      while (blob.l < tgt) {
        var dt2 = blob.read_shift(2);
        if (dt2 == 14e3) {
          o2[dt2] = [0, ""];
          o2[dt2][0] = blob.read_shift(2);
          while (blob[blob.l]) {
            o2[dt2][1] += String.fromCharCode(blob[blob.l]);
            blob.l++;
          }
          blob.l++;
        }
      }
      return o2;
    }
    function write_XFORMAT_SHEETNAME(name, wsidx) {
      var out = new_buf(5 + name.length);
      out.write_shift(2, 14e3);
      out.write_shift(2, wsidx);
      for (var i2 = 0; i2 < name.length; ++i2) {
        var cc = name.charCodeAt(i2);
        out[out.l++] = cc > 127 ? 95 : cc;
      }
      out[out.l++] = 0;
      return out;
    }
    var WK1Enum = {
      /*::[*/
      0: { n: "BOF", f: parseuint16 },
      /*::[*/
      1: { n: "EOF" },
      /*::[*/
      2: { n: "CALCMODE" },
      /*::[*/
      3: { n: "CALCORDER" },
      /*::[*/
      4: { n: "SPLIT" },
      /*::[*/
      5: { n: "SYNC" },
      /*::[*/
      6: { n: "RANGE", f: parse_RANGE },
      /*::[*/
      7: { n: "WINDOW1" },
      /*::[*/
      8: { n: "COLW1" },
      /*::[*/
      9: { n: "WINTWO" },
      /*::[*/
      10: { n: "COLW2" },
      /*::[*/
      11: { n: "NAME" },
      /*::[*/
      12: { n: "BLANK" },
      /*::[*/
      13: { n: "INTEGER", f: parse_INTEGER },
      /*::[*/
      14: { n: "NUMBER", f: parse_NUMBER },
      /*::[*/
      15: { n: "LABEL", f: parse_LABEL },
      /*::[*/
      16: { n: "FORMULA", f: parse_FORMULA },
      /*::[*/
      24: { n: "TABLE" },
      /*::[*/
      25: { n: "ORANGE" },
      /*::[*/
      26: { n: "PRANGE" },
      /*::[*/
      27: { n: "SRANGE" },
      /*::[*/
      28: { n: "FRANGE" },
      /*::[*/
      29: { n: "KRANGE1" },
      /*::[*/
      32: { n: "HRANGE" },
      /*::[*/
      35: { n: "KRANGE2" },
      /*::[*/
      36: { n: "PROTEC" },
      /*::[*/
      37: { n: "FOOTER" },
      /*::[*/
      38: { n: "HEADER" },
      /*::[*/
      39: { n: "SETUP" },
      /*::[*/
      40: { n: "MARGINS" },
      /*::[*/
      41: { n: "LABELFMT" },
      /*::[*/
      42: { n: "TITLES" },
      /*::[*/
      43: { n: "SHEETJS" },
      /*::[*/
      45: { n: "GRAPH" },
      /*::[*/
      46: { n: "NGRAPH" },
      /*::[*/
      47: { n: "CALCCOUNT" },
      /*::[*/
      48: { n: "UNFORMATTED" },
      /*::[*/
      49: { n: "CURSORW12" },
      /*::[*/
      50: { n: "WINDOW" },
      /*::[*/
      51: { n: "STRING", f: parse_LABEL },
      /*::[*/
      55: { n: "PASSWORD" },
      /*::[*/
      56: { n: "LOCKED" },
      /*::[*/
      60: { n: "QUERY" },
      /*::[*/
      61: { n: "QUERYNAME" },
      /*::[*/
      62: { n: "PRINT" },
      /*::[*/
      63: { n: "PRINTNAME" },
      /*::[*/
      64: { n: "GRAPH2" },
      /*::[*/
      65: { n: "GRAPHNAME" },
      /*::[*/
      66: { n: "ZOOM" },
      /*::[*/
      67: { n: "SYMSPLIT" },
      /*::[*/
      68: { n: "NSROWS" },
      /*::[*/
      69: { n: "NSCOLS" },
      /*::[*/
      70: { n: "RULER" },
      /*::[*/
      71: { n: "NNAME" },
      /*::[*/
      72: { n: "ACOMM" },
      /*::[*/
      73: { n: "AMACRO" },
      /*::[*/
      74: { n: "PARSE" },
      /*::[*/
      102: { n: "PRANGES??" },
      /*::[*/
      103: { n: "RRANGES??" },
      /*::[*/
      104: { n: "FNAME??" },
      /*::[*/
      105: { n: "MRANGES??" },
      /*::[*/
      204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
      /*::[*/
      222: { n: "SHEETNAMELP", f: parse_SHEETNAMELP },
      /*::[*/
      65535: { n: "" }
    };
    var WK3Enum = {
      /*::[*/
      0: { n: "BOF" },
      /*::[*/
      1: { n: "EOF" },
      /*::[*/
      2: { n: "PASSWORD" },
      /*::[*/
      3: { n: "CALCSET" },
      /*::[*/
      4: { n: "WINDOWSET" },
      /*::[*/
      5: { n: "SHEETCELLPTR" },
      /*::[*/
      6: { n: "SHEETLAYOUT" },
      /*::[*/
      7: { n: "COLUMNWIDTH" },
      /*::[*/
      8: { n: "HIDDENCOLUMN" },
      /*::[*/
      9: { n: "USERRANGE" },
      /*::[*/
      10: { n: "SYSTEMRANGE" },
      /*::[*/
      11: { n: "ZEROFORCE" },
      /*::[*/
      12: { n: "SORTKEYDIR" },
      /*::[*/
      13: { n: "FILESEAL" },
      /*::[*/
      14: { n: "DATAFILLNUMS" },
      /*::[*/
      15: { n: "PRINTMAIN" },
      /*::[*/
      16: { n: "PRINTSTRING" },
      /*::[*/
      17: { n: "GRAPHMAIN" },
      /*::[*/
      18: { n: "GRAPHSTRING" },
      /*::[*/
      19: { n: "??" },
      /*::[*/
      20: { n: "ERRCELL" },
      /*::[*/
      21: { n: "NACELL" },
      /*::[*/
      22: { n: "LABEL16", f: parse_LABEL_16 },
      /*::[*/
      23: { n: "NUMBER17", f: parse_NUMBER_17 },
      /*::[*/
      24: { n: "NUMBER18", f: parse_NUMBER_18 },
      /*::[*/
      25: { n: "FORMULA19", f: parse_FORMULA_19 },
      /*::[*/
      26: { n: "FORMULA1A" },
      /*::[*/
      27: { n: "XFORMAT", f: parse_XFORMAT },
      /*::[*/
      28: { n: "DTLABELMISC" },
      /*::[*/
      29: { n: "DTLABELCELL" },
      /*::[*/
      30: { n: "GRAPHWINDOW" },
      /*::[*/
      31: { n: "CPA" },
      /*::[*/
      32: { n: "LPLAUTO" },
      /*::[*/
      33: { n: "QUERY" },
      /*::[*/
      34: { n: "HIDDENSHEET" },
      /*::[*/
      35: { n: "??" },
      /*::[*/
      37: { n: "NUMBER25", f: parse_NUMBER_25 },
      /*::[*/
      38: { n: "??" },
      /*::[*/
      39: { n: "NUMBER27", f: parse_NUMBER_27 },
      /*::[*/
      40: { n: "FORMULA28", f: parse_FORMULA_28 },
      /*::[*/
      142: { n: "??" },
      /*::[*/
      147: { n: "??" },
      /*::[*/
      150: { n: "??" },
      /*::[*/
      151: { n: "??" },
      /*::[*/
      152: { n: "??" },
      /*::[*/
      153: { n: "??" },
      /*::[*/
      154: { n: "??" },
      /*::[*/
      155: { n: "??" },
      /*::[*/
      156: { n: "??" },
      /*::[*/
      163: { n: "??" },
      /*::[*/
      174: { n: "??" },
      /*::[*/
      175: { n: "??" },
      /*::[*/
      176: { n: "??" },
      /*::[*/
      177: { n: "??" },
      /*::[*/
      184: { n: "??" },
      /*::[*/
      185: { n: "??" },
      /*::[*/
      186: { n: "??" },
      /*::[*/
      187: { n: "??" },
      /*::[*/
      188: { n: "??" },
      /*::[*/
      195: { n: "??" },
      /*::[*/
      201: { n: "??" },
      /*::[*/
      204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
      /*::[*/
      205: { n: "??" },
      /*::[*/
      206: { n: "??" },
      /*::[*/
      207: { n: "??" },
      /*::[*/
      208: { n: "??" },
      /*::[*/
      256: { n: "??" },
      /*::[*/
      259: { n: "??" },
      /*::[*/
      260: { n: "??" },
      /*::[*/
      261: { n: "??" },
      /*::[*/
      262: { n: "??" },
      /*::[*/
      263: { n: "??" },
      /*::[*/
      265: { n: "??" },
      /*::[*/
      266: { n: "??" },
      /*::[*/
      267: { n: "??" },
      /*::[*/
      268: { n: "??" },
      /*::[*/
      270: { n: "??" },
      /*::[*/
      271: { n: "??" },
      /*::[*/
      384: { n: "??" },
      /*::[*/
      389: { n: "??" },
      /*::[*/
      390: { n: "??" },
      /*::[*/
      393: { n: "??" },
      /*::[*/
      396: { n: "??" },
      /*::[*/
      512: { n: "??" },
      /*::[*/
      514: { n: "??" },
      /*::[*/
      513: { n: "??" },
      /*::[*/
      516: { n: "??" },
      /*::[*/
      517: { n: "??" },
      /*::[*/
      640: { n: "??" },
      /*::[*/
      641: { n: "??" },
      /*::[*/
      642: { n: "??" },
      /*::[*/
      643: { n: "??" },
      /*::[*/
      644: { n: "??" },
      /*::[*/
      645: { n: "??" },
      /*::[*/
      646: { n: "??" },
      /*::[*/
      647: { n: "??" },
      /*::[*/
      648: { n: "??" },
      /*::[*/
      658: { n: "??" },
      /*::[*/
      659: { n: "??" },
      /*::[*/
      660: { n: "??" },
      /*::[*/
      661: { n: "??" },
      /*::[*/
      662: { n: "??" },
      /*::[*/
      665: { n: "??" },
      /*::[*/
      666: { n: "??" },
      /*::[*/
      768: { n: "??" },
      /*::[*/
      772: { n: "??" },
      /*::[*/
      1537: { n: "SHEETINFOQP", f: parse_SHEETINFOQP },
      /*::[*/
      1600: { n: "??" },
      /*::[*/
      1602: { n: "??" },
      /*::[*/
      1793: { n: "??" },
      /*::[*/
      1794: { n: "??" },
      /*::[*/
      1795: { n: "??" },
      /*::[*/
      1796: { n: "??" },
      /*::[*/
      1920: { n: "??" },
      /*::[*/
      2048: { n: "??" },
      /*::[*/
      2049: { n: "??" },
      /*::[*/
      2052: { n: "??" },
      /*::[*/
      2688: { n: "??" },
      /*::[*/
      10998: { n: "??" },
      /*::[*/
      12849: { n: "??" },
      /*::[*/
      28233: { n: "??" },
      /*::[*/
      28484: { n: "??" },
      /*::[*/
      65535: { n: "" }
    };
    return {
      sheet_to_wk1,
      book_to_wk3,
      to_workbook: lotus_to_workbook
    };
  }();
  function parse_rpr(rpr) {
    var font = {}, m2 = rpr.match(tagregex), i2 = 0;
    var pass = false;
    if (m2)
      for (; i2 != m2.length; ++i2) {
        var y2 = parsexmltag(m2[i2]);
        switch (y2[0].replace(/\w*:/g, "")) {
          case "<condense":
            break;
          case "<extend":
            break;
          case "<shadow":
            if (!y2.val)
              break;
          case "<shadow>":
          case "<shadow/>":
            font.shadow = 1;
            break;
          case "</shadow>":
            break;
          case "<charset":
            if (y2.val == "1")
              break;
            font.cp = CS2CP[parseInt(y2.val, 10)];
            break;
          case "<outline":
            if (!y2.val)
              break;
          case "<outline>":
          case "<outline/>":
            font.outline = 1;
            break;
          case "</outline>":
            break;
          case "<rFont":
            font.name = y2.val;
            break;
          case "<sz":
            font.sz = y2.val;
            break;
          case "<strike":
            if (!y2.val)
              break;
          case "<strike>":
          case "<strike/>":
            font.strike = 1;
            break;
          case "</strike>":
            break;
          case "<u":
            if (!y2.val)
              break;
            switch (y2.val) {
              case "double":
                font.uval = "double";
                break;
              case "singleAccounting":
                font.uval = "single-accounting";
                break;
              case "doubleAccounting":
                font.uval = "double-accounting";
                break;
            }
          case "<u>":
          case "<u/>":
            font.u = 1;
            break;
          case "</u>":
            break;
          case "<b":
            if (y2.val == "0")
              break;
          case "<b>":
          case "<b/>":
            font.b = 1;
            break;
          case "</b>":
            break;
          case "<i":
            if (y2.val == "0")
              break;
          case "<i>":
          case "<i/>":
            font.i = 1;
            break;
          case "</i>":
            break;
          case "<color":
            if (y2.rgb)
              font.color = y2.rgb.slice(2, 8);
            break;
          case "<color>":
          case "<color/>":
          case "</color>":
            break;
          case "<family":
            font.family = y2.val;
            break;
          case "<family>":
          case "<family/>":
          case "</family>":
            break;
          case "<vertAlign":
            font.valign = y2.val;
            break;
          case "<vertAlign>":
          case "<vertAlign/>":
          case "</vertAlign>":
            break;
          case "<scheme":
            break;
          case "<scheme>":
          case "<scheme/>":
          case "</scheme>":
            break;
          case "<extLst":
          case "<extLst>":
          case "</extLst>":
            break;
          case "<ext":
            pass = true;
            break;
          case "</ext>":
            pass = false;
            break;
          default:
            if (y2[0].charCodeAt(1) !== 47 && !pass)
              throw new Error("Unrecognized rich format " + y2[0]);
        }
      }
    return font;
  }
  var parse_rs = /* @__PURE__ */ function() {
    var tregex = matchtag("t"), rpregex = matchtag("rPr");
    function parse_r(r2) {
      var t2 = r2.match(tregex);
      if (!t2)
        return { t: "s", v: "" };
      var o2 = { t: "s", v: unescapexml(t2[1]) };
      var rpr = r2.match(rpregex);
      if (rpr)
        o2.s = parse_rpr(rpr[1]);
      return o2;
    }
    var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
    return function parse_rs2(rs2) {
      return rs2.replace(rregex, "").split(rend).map(parse_r).filter(function(r2) {
        return r2.v;
      });
    };
  }();
  var rs_to_html = /* @__PURE__ */ function parse_rs_factory() {
    var nlregex = /(\r\n|\n)/g;
    function parse_rpr2(font, intro, outro) {
      var style = [];
      if (font.u)
        style.push("text-decoration: underline;");
      if (font.uval)
        style.push("text-underline-style:" + font.uval + ";");
      if (font.sz)
        style.push("font-size:" + font.sz + "pt;");
      if (font.outline)
        style.push("text-effect: outline;");
      if (font.shadow)
        style.push("text-shadow: auto;");
      intro.push('<span style="' + style.join("") + '">');
      if (font.b) {
        intro.push("<b>");
        outro.push("</b>");
      }
      if (font.i) {
        intro.push("<i>");
        outro.push("</i>");
      }
      if (font.strike) {
        intro.push("<s>");
        outro.push("</s>");
      }
      var align = font.valign || "";
      if (align == "superscript" || align == "super")
        align = "sup";
      else if (align == "subscript")
        align = "sub";
      if (align != "") {
        intro.push("<" + align + ">");
        outro.push("</" + align + ">");
      }
      outro.push("</span>");
      return font;
    }
    function r_to_html(r2) {
      var terms = [[], r2.v, []];
      if (!r2.v)
        return "";
      if (r2.s)
        parse_rpr2(r2.s, terms[0], terms[2]);
      return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
    }
    return function parse_rs2(rs2) {
      return rs2.map(r_to_html).join("");
    };
  }();
  var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
  var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
  function parse_si(x, opts) {
    var html = opts ? opts.cellHTML : true;
    var z2 = {};
    if (!x)
      return { t: "" };
    if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
      z2.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
      z2.r = utf8read(x);
      if (html)
        z2.h = escapehtml(z2.t);
    } else if (
      /*y = */
      x.match(sirregex)
    ) {
      z2.r = utf8read(x);
      z2.t = unescapexml(utf8read((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")));
      if (html)
        z2.h = rs_to_html(parse_rs(z2.r));
    }
    return z2;
  }
  var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
  var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
  var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
  function parse_sst_xml(data, opts) {
    var s2 = [], ss2 = "";
    if (!data)
      return s2;
    var sst = data.match(sstr0);
    if (sst) {
      ss2 = sst[2].replace(sstr1, "").split(sstr2);
      for (var i2 = 0; i2 != ss2.length; ++i2) {
        var o2 = parse_si(ss2[i2].trim(), opts);
        if (o2 != null)
          s2[s2.length] = o2;
      }
      sst = parsexmltag(sst[1]);
      s2.Count = sst.count;
      s2.Unique = sst.uniqueCount;
    }
    return s2;
  }
  function parse_BrtBeginSst(data) {
    return [data.read_shift(4), data.read_shift(4)];
  }
  function parse_sst_bin(data, opts) {
    var s2 = [];
    var pass = false;
    recordhopper(data, function hopper_sst(val, R2, RT) {
      switch (RT) {
        case 159:
          s2.Count = val[0];
          s2.Unique = val[1];
          break;
        case 19:
          s2.push(val);
          break;
        case 160:
          return true;
        case 35:
          pass = true;
          break;
        case 36:
          pass = false;
          break;
        default:
          if (R2.T)
            ;
          if (!pass || opts.WTF)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    });
    return s2;
  }
  function _JS2ANSI(str) {
    var o2 = [], oo = str.split("");
    for (var i2 = 0; i2 < oo.length; ++i2)
      o2[i2] = oo[i2].charCodeAt(0);
    return o2;
  }
  function parse_CRYPTOVersion(blob, length) {
    var o2 = {};
    o2.Major = blob.read_shift(2);
    o2.Minor = blob.read_shift(2);
    if (length >= 4)
      blob.l += length - 4;
    return o2;
  }
  function parse_DataSpaceVersionInfo(blob) {
    var o2 = {};
    o2.id = blob.read_shift(0, "lpp4");
    o2.R = parse_CRYPTOVersion(blob, 4);
    o2.U = parse_CRYPTOVersion(blob, 4);
    o2.W = parse_CRYPTOVersion(blob, 4);
    return o2;
  }
  function parse_DataSpaceMapEntry(blob) {
    var len = blob.read_shift(4);
    var end = blob.l + len - 4;
    var o2 = {};
    var cnt = blob.read_shift(4);
    var comps = [];
    while (cnt-- > 0)
      comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, "lpp4") });
    o2.name = blob.read_shift(0, "lpp4");
    o2.comps = comps;
    if (blob.l != end)
      throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
    return o2;
  }
  function parse_DataSpaceMap(blob) {
    var o2 = [];
    blob.l += 4;
    var cnt = blob.read_shift(4);
    while (cnt-- > 0)
      o2.push(parse_DataSpaceMapEntry(blob));
    return o2;
  }
  function parse_DataSpaceDefinition(blob) {
    var o2 = [];
    blob.l += 4;
    var cnt = blob.read_shift(4);
    while (cnt-- > 0)
      o2.push(blob.read_shift(0, "lpp4"));
    return o2;
  }
  function parse_TransformInfoHeader(blob) {
    var o2 = {};
    blob.read_shift(4);
    blob.l += 4;
    o2.id = blob.read_shift(0, "lpp4");
    o2.name = blob.read_shift(0, "lpp4");
    o2.R = parse_CRYPTOVersion(blob, 4);
    o2.U = parse_CRYPTOVersion(blob, 4);
    o2.W = parse_CRYPTOVersion(blob, 4);
    return o2;
  }
  function parse_Primary(blob) {
    var hdr = parse_TransformInfoHeader(blob);
    hdr.ename = blob.read_shift(0, "8lpp4");
    hdr.blksz = blob.read_shift(4);
    hdr.cmode = blob.read_shift(4);
    if (blob.read_shift(4) != 4)
      throw new Error("Bad !Primary record");
    return hdr;
  }
  function parse_EncryptionHeader(blob, length) {
    var tgt = blob.l + length;
    var o2 = {};
    o2.Flags = blob.read_shift(4) & 63;
    blob.l += 4;
    o2.AlgID = blob.read_shift(4);
    var valid = false;
    switch (o2.AlgID) {
      case 26126:
      case 26127:
      case 26128:
        valid = o2.Flags == 36;
        break;
      case 26625:
        valid = o2.Flags == 4;
        break;
      case 0:
        valid = o2.Flags == 16 || o2.Flags == 4 || o2.Flags == 36;
        break;
      default:
        throw "Unrecognized encryption algorithm: " + o2.AlgID;
    }
    if (!valid)
      throw new Error("Encryption Flags/AlgID mismatch");
    o2.AlgIDHash = blob.read_shift(4);
    o2.KeySize = blob.read_shift(4);
    o2.ProviderType = blob.read_shift(4);
    blob.l += 8;
    o2.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
    blob.l = tgt;
    return o2;
  }
  function parse_EncryptionVerifier(blob, length) {
    var o2 = {}, tgt = blob.l + length;
    blob.l += 4;
    o2.Salt = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    o2.Verifier = blob.slice(blob.l, blob.l + 16);
    blob.l += 16;
    blob.read_shift(4);
    o2.VerifierHash = blob.slice(blob.l, tgt);
    blob.l = tgt;
    return o2;
  }
  function parse_EncryptionInfo(blob) {
    var vers = parse_CRYPTOVersion(blob);
    switch (vers.Minor) {
      case 2:
        return [vers.Minor, parse_EncInfoStd(blob)];
      case 3:
        return [vers.Minor, parse_EncInfoExt()];
      case 4:
        return [vers.Minor, parse_EncInfoAgl(blob)];
    }
    throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
  }
  function parse_EncInfoStd(blob) {
    var flags = blob.read_shift(4);
    if ((flags & 63) != 36)
      throw new Error("EncryptionInfo mismatch");
    var sz = blob.read_shift(4);
    var hdr = parse_EncryptionHeader(blob, sz);
    var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
    return { t: "Std", h: hdr, v: verifier };
  }
  function parse_EncInfoExt() {
    throw new Error("File is password-protected: ECMA-376 Extensible");
  }
  function parse_EncInfoAgl(blob) {
    var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
    blob.l += 4;
    var xml = blob.read_shift(blob.length - blob.l, "utf8");
    var o2 = {};
    xml.replace(tagregex, function xml_agile(x) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<?xml":
          break;
        case "<encryption":
        case "</encryption>":
          break;
        case "<keyData":
          KeyData.forEach(function(k) {
            o2[k] = y2[k];
          });
          break;
        case "<dataIntegrity":
          o2.encryptedHmacKey = y2.encryptedHmacKey;
          o2.encryptedHmacValue = y2.encryptedHmacValue;
          break;
        case "<keyEncryptors>":
        case "<keyEncryptors":
          o2.encs = [];
          break;
        case "</keyEncryptors>":
          break;
        case "<keyEncryptor":
          o2.uri = y2.uri;
          break;
        case "</keyEncryptor>":
          break;
        case "<encryptedKey":
          o2.encs.push(y2);
          break;
        default:
          throw y2[0];
      }
    });
    return o2;
  }
  function parse_RC4CryptoHeader(blob, length) {
    var o2 = {};
    var vers = o2.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    length -= 4;
    if (vers.Minor != 2)
      throw new Error("unrecognized minor version code: " + vers.Minor);
    if (vers.Major > 4 || vers.Major < 2)
      throw new Error("unrecognized major version code: " + vers.Major);
    o2.Flags = blob.read_shift(4);
    length -= 4;
    var sz = blob.read_shift(4);
    length -= 4;
    o2.EncryptionHeader = parse_EncryptionHeader(blob, sz);
    length -= sz;
    o2.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
    return o2;
  }
  function parse_RC4Header(blob) {
    var o2 = {};
    var vers = o2.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    if (vers.Major != 1 || vers.Minor != 1)
      throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
    o2.Salt = blob.read_shift(16);
    o2.EncryptedVerifier = blob.read_shift(16);
    o2.EncryptedVerifierHash = blob.read_shift(16);
    return o2;
  }
  function crypto_CreatePasswordVerifier_Method1(Password) {
    var Verifier = 0, PasswordArray;
    var PasswordDecoded = _JS2ANSI(Password);
    var len = PasswordDecoded.length + 1, i2, PasswordByte;
    var Intermediate1, Intermediate2, Intermediate3;
    PasswordArray = new_raw_buf(len);
    PasswordArray[0] = PasswordDecoded.length;
    for (i2 = 1; i2 != len; ++i2)
      PasswordArray[i2] = PasswordDecoded[i2 - 1];
    for (i2 = len - 1; i2 >= 0; --i2) {
      PasswordByte = PasswordArray[i2];
      Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
      Intermediate2 = Verifier << 1 & 32767;
      Intermediate3 = Intermediate1 | Intermediate2;
      Verifier = Intermediate3 ^ PasswordByte;
    }
    return Verifier ^ 52811;
  }
  var crypto_CreateXorArray_Method1 = /* @__PURE__ */ function() {
    var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
    var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163];
    var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628];
    var Ror = function(Byte) {
      return (Byte / 2 | Byte * 128) & 255;
    };
    var XorRor = function(byte1, byte2) {
      return Ror(byte1 ^ byte2);
    };
    var CreateXorKey_Method1 = function(Password) {
      var XorKey = InitialCode[Password.length - 1];
      var CurrentElement = 104;
      for (var i2 = Password.length - 1; i2 >= 0; --i2) {
        var Char = Password[i2];
        for (var j2 = 0; j2 != 7; ++j2) {
          if (Char & 64)
            XorKey ^= XorMatrix[CurrentElement];
          Char *= 2;
          --CurrentElement;
        }
      }
      return XorKey;
    };
    return function(password) {
      var Password = _JS2ANSI(password);
      var XorKey = CreateXorKey_Method1(Password);
      var Index = Password.length;
      var ObfuscationArray = new_raw_buf(16);
      for (var i2 = 0; i2 != 16; ++i2)
        ObfuscationArray[i2] = 0;
      var Temp, PasswordLastChar, PadIndex;
      if ((Index & 1) === 1) {
        Temp = XorKey >> 8;
        ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
        --Index;
        Temp = XorKey & 255;
        PasswordLastChar = Password[Password.length - 1];
        ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
      }
      while (Index > 0) {
        --Index;
        Temp = XorKey >> 8;
        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
        --Index;
        Temp = XorKey & 255;
        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
      }
      Index = 15;
      PadIndex = 15 - Password.length;
      while (PadIndex > 0) {
        Temp = XorKey >> 8;
        ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
        --Index;
        --PadIndex;
        Temp = XorKey & 255;
        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
        --Index;
        --PadIndex;
      }
      return ObfuscationArray;
    };
  }();
  var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O2) {
    if (!O2)
      O2 = Data;
    if (!XorArray)
      XorArray = crypto_CreateXorArray_Method1(password);
    var Index, Value;
    for (Index = 0; Index != Data.length; ++Index) {
      Value = Data[Index];
      Value ^= XorArray[XorArrayIndex];
      Value = (Value >> 5 | Value << 3) & 255;
      O2[Index] = Value;
      ++XorArrayIndex;
    }
    return [O2, XorArrayIndex, XorArray];
  };
  var crypto_MakeXorDecryptor = function(password) {
    var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
    return function(Data) {
      var O2 = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
      XorArrayIndex = O2[1];
      return O2[0];
    };
  };
  function parse_XORObfuscation(blob, length, opts, out) {
    var o2 = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };
    if (opts.password)
      o2.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
    out.valid = o2.verificationBytes === o2.verifier;
    if (out.valid)
      out.insitu = crypto_MakeXorDecryptor(opts.password);
    return o2;
  }
  function parse_FilePassHeader(blob, length, oo) {
    var o2 = oo || {};
    o2.Info = blob.read_shift(2);
    blob.l -= 2;
    if (o2.Info === 1)
      o2.Data = parse_RC4Header(blob);
    else
      o2.Data = parse_RC4CryptoHeader(blob, length);
    return o2;
  }
  function parse_FilePass(blob, length, opts) {
    var o2 = { Type: opts.biff >= 8 ? blob.read_shift(2) : 0 };
    if (o2.Type)
      parse_FilePassHeader(blob, length - 2, o2);
    else
      parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o2);
    return o2;
  }
  var RTF = /* @__PURE__ */ function() {
    function rtf_to_sheet(d2, opts) {
      switch (opts.type) {
        case "base64":
          return rtf_to_sheet_str(Base64_decode(d2), opts);
        case "binary":
          return rtf_to_sheet_str(d2, opts);
        case "buffer":
          return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d2) ? d2.toString("binary") : a2s(d2), opts);
        case "array":
          return rtf_to_sheet_str(cc2str(d2), opts);
      }
      throw new Error("Unrecognized type " + opts.type);
    }
    function rtf_to_sheet_str(str, opts) {
      var o2 = opts || {};
      var ws2 = o2.dense ? [] : {};
      var rows = str.match(/\\trowd.*?\\row\b/g);
      if (!rows.length)
        throw new Error("RTF missing table");
      var range2 = { s: { c: 0, r: 0 }, e: { c: 0, r: rows.length - 1 } };
      rows.forEach(function(rowtf, R2) {
        if (Array.isArray(ws2))
          ws2[R2] = [];
        var rtfre = /\\\w+\b/g;
        var last_index = 0;
        var res;
        var C2 = -1;
        while (res = rtfre.exec(rowtf)) {
          switch (res[0]) {
            case "\\cell":
              var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
              if (data[0] == " ")
                data = data.slice(1);
              ++C2;
              if (data.length) {
                var cell = { v: data, t: "s" };
                if (Array.isArray(ws2))
                  ws2[R2][C2] = cell;
                else
                  ws2[encode_cell({ r: R2, c: C2 })] = cell;
              }
              break;
          }
          last_index = rtfre.lastIndex;
        }
        if (C2 > range2.e.c)
          range2.e.c = C2;
      });
      ws2["!ref"] = encode_range(range2);
      return ws2;
    }
    function rtf_to_workbook(d2, opts) {
      return sheet_to_workbook(rtf_to_sheet(d2, opts), opts);
    }
    function sheet_to_rtf(ws2) {
      var o2 = ["{\\rtf1\\ansi"];
      var r2 = safe_decode_range(ws2["!ref"]), cell;
      var dense = Array.isArray(ws2);
      for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2) {
        o2.push("\\trowd\\trautofit1");
        for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2)
          o2.push("\\cellx" + (C2 + 1));
        o2.push("\\pard\\intbl");
        for (C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
          var coord = encode_cell({ r: R2, c: C2 });
          cell = dense ? (ws2[R2] || [])[C2] : ws2[coord];
          if (!cell || cell.v == null && (!cell.f || cell.F))
            continue;
          o2.push(" " + (cell.w || (format_cell(cell), cell.w)));
          o2.push("\\cell");
        }
        o2.push("\\pard\\intbl\\row");
      }
      return o2.join("") + "}";
    }
    return {
      to_workbook: rtf_to_workbook,
      to_sheet: rtf_to_sheet,
      from_sheet: sheet_to_rtf
    };
  }();
  function hex2RGB(h2) {
    var o2 = h2.slice(h2[0] === "#" ? 1 : 0).slice(0, 6);
    return [parseInt(o2.slice(0, 2), 16), parseInt(o2.slice(2, 4), 16), parseInt(o2.slice(4, 6), 16)];
  }
  function rgb2Hex(rgb) {
    for (var i2 = 0, o2 = 1; i2 != 3; ++i2)
      o2 = o2 * 256 + (rgb[i2] > 255 ? 255 : rgb[i2] < 0 ? 0 : rgb[i2]);
    return o2.toString(16).toUpperCase().slice(1);
  }
  function rgb2HSL(rgb) {
    var R2 = rgb[0] / 255, G2 = rgb[1] / 255, B2 = rgb[2] / 255;
    var M2 = Math.max(R2, G2, B2), m2 = Math.min(R2, G2, B2), C2 = M2 - m2;
    if (C2 === 0)
      return [0, 0, R2];
    var H6 = 0, S2 = 0, L2 = M2 + m2;
    S2 = C2 / (L2 > 1 ? 2 - L2 : L2);
    switch (M2) {
      case R2:
        H6 = ((G2 - B2) / C2 + 6) % 6;
        break;
      case G2:
        H6 = (B2 - R2) / C2 + 2;
        break;
      case B2:
        H6 = (R2 - G2) / C2 + 4;
        break;
    }
    return [H6 / 6, S2, L2 / 2];
  }
  function hsl2RGB(hsl) {
    var H2 = hsl[0], S2 = hsl[1], L2 = hsl[2];
    var C2 = S2 * 2 * (L2 < 0.5 ? L2 : 1 - L2), m2 = L2 - C2 / 2;
    var rgb = [m2, m2, m2], h6 = 6 * H2;
    var X2;
    if (S2 !== 0)
      switch (h6 | 0) {
        case 0:
        case 6:
          X2 = C2 * h6;
          rgb[0] += C2;
          rgb[1] += X2;
          break;
        case 1:
          X2 = C2 * (2 - h6);
          rgb[0] += X2;
          rgb[1] += C2;
          break;
        case 2:
          X2 = C2 * (h6 - 2);
          rgb[1] += C2;
          rgb[2] += X2;
          break;
        case 3:
          X2 = C2 * (4 - h6);
          rgb[1] += X2;
          rgb[2] += C2;
          break;
        case 4:
          X2 = C2 * (h6 - 4);
          rgb[2] += C2;
          rgb[0] += X2;
          break;
        case 5:
          X2 = C2 * (6 - h6);
          rgb[2] += X2;
          rgb[0] += C2;
          break;
      }
    for (var i2 = 0; i2 != 3; ++i2)
      rgb[i2] = Math.round(rgb[i2] * 255);
    return rgb;
  }
  function rgb_tint(hex, tint) {
    if (tint === 0)
      return hex;
    var hsl = rgb2HSL(hex2RGB(hex));
    if (tint < 0)
      hsl[2] = hsl[2] * (1 + tint);
    else
      hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
    return rgb2Hex(hsl2RGB(hsl));
  }
  var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
  function width2px(width) {
    return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
  }
  function px2char(px) {
    return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
  }
  function char2width(chr) {
    return Math.round((chr * MDW + 5) / MDW * 256) / 256;
  }
  function cycle_width(collw) {
    return char2width(px2char(width2px(collw)));
  }
  function find_mdw_colw(collw) {
    var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
    if (delta > 5e-3) {
      for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)
        if (Math.abs(collw - cycle_width(collw)) <= delta) {
          delta = Math.abs(collw - cycle_width(collw));
          _MDW = MDW;
        }
    }
    MDW = _MDW;
  }
  function process_col(coll) {
    if (coll.width) {
      coll.wpx = width2px(coll.width);
      coll.wch = px2char(coll.wpx);
      coll.MDW = MDW;
    } else if (coll.wpx) {
      coll.wch = px2char(coll.wpx);
      coll.width = char2width(coll.wch);
      coll.MDW = MDW;
    } else if (typeof coll.wch == "number") {
      coll.width = char2width(coll.wch);
      coll.wpx = width2px(coll.width);
      coll.MDW = MDW;
    }
    if (coll.customWidth)
      delete coll.customWidth;
  }
  var DEF_PPI = 96, PPI = DEF_PPI;
  function px2pt(px) {
    return px * 96 / PPI;
  }
  function pt2px(pt2) {
    return pt2 * PPI / 96;
  }
  var XLMLPatternTypeMap = {
    "None": "none",
    "Solid": "solid",
    "Gray50": "mediumGray",
    "Gray75": "darkGray",
    "Gray25": "lightGray",
    "HorzStripe": "darkHorizontal",
    "VertStripe": "darkVertical",
    "ReverseDiagStripe": "darkDown",
    "DiagStripe": "darkUp",
    "DiagCross": "darkGrid",
    "ThickDiagCross": "darkTrellis",
    "ThinHorzStripe": "lightHorizontal",
    "ThinVertStripe": "lightVertical",
    "ThinReverseDiagStripe": "lightDown",
    "ThinHorzCross": "lightGrid"
  };
  function parse_borders(t2, styles, themes, opts) {
    styles.Borders = [];
    var border = {};
    var pass = false;
    (t2[0].match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<borders":
        case "<borders>":
        case "</borders>":
          break;
        case "<border":
        case "<border>":
        case "<border/>":
          border = /*::(*/
          {};
          if (y2.diagonalUp)
            border.diagonalUp = parsexmlbool(y2.diagonalUp);
          if (y2.diagonalDown)
            border.diagonalDown = parsexmlbool(y2.diagonalDown);
          styles.Borders.push(border);
          break;
        case "</border>":
          break;
        case "<left/>":
          break;
        case "<left":
        case "<left>":
          break;
        case "</left>":
          break;
        case "<right/>":
          break;
        case "<right":
        case "<right>":
          break;
        case "</right>":
          break;
        case "<top/>":
          break;
        case "<top":
        case "<top>":
          break;
        case "</top>":
          break;
        case "<bottom/>":
          break;
        case "<bottom":
        case "<bottom>":
          break;
        case "</bottom>":
          break;
        case "<diagonal":
        case "<diagonal>":
        case "<diagonal/>":
          break;
        case "</diagonal>":
          break;
        case "<horizontal":
        case "<horizontal>":
        case "<horizontal/>":
          break;
        case "</horizontal>":
          break;
        case "<vertical":
        case "<vertical>":
        case "<vertical/>":
          break;
        case "</vertical>":
          break;
        case "<start":
        case "<start>":
        case "<start/>":
          break;
        case "</start>":
          break;
        case "<end":
        case "<end>":
        case "<end/>":
          break;
        case "</end>":
          break;
        case "<color":
        case "<color>":
          break;
        case "<color/>":
        case "</color>":
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        default:
          if (opts && opts.WTF) {
            if (!pass)
              throw new Error("unrecognized " + y2[0] + " in borders");
          }
      }
    });
  }
  function parse_fills(t2, styles, themes, opts) {
    styles.Fills = [];
    var fill2 = {};
    var pass = false;
    (t2[0].match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<fills":
        case "<fills>":
        case "</fills>":
          break;
        case "<fill>":
        case "<fill":
        case "<fill/>":
          fill2 = {};
          styles.Fills.push(fill2);
          break;
        case "</fill>":
          break;
        case "<gradientFill>":
          break;
        case "<gradientFill":
        case "</gradientFill>":
          styles.Fills.push(fill2);
          fill2 = {};
          break;
        case "<patternFill":
        case "<patternFill>":
          if (y2.patternType)
            fill2.patternType = y2.patternType;
          break;
        case "<patternFill/>":
        case "</patternFill>":
          break;
        case "<bgColor":
          if (!fill2.bgColor)
            fill2.bgColor = {};
          if (y2.indexed)
            fill2.bgColor.indexed = parseInt(y2.indexed, 10);
          if (y2.theme)
            fill2.bgColor.theme = parseInt(y2.theme, 10);
          if (y2.tint)
            fill2.bgColor.tint = parseFloat(y2.tint);
          if (y2.rgb)
            fill2.bgColor.rgb = y2.rgb.slice(-6);
          break;
        case "<bgColor/>":
        case "</bgColor>":
          break;
        case "<fgColor":
          if (!fill2.fgColor)
            fill2.fgColor = {};
          if (y2.theme)
            fill2.fgColor.theme = parseInt(y2.theme, 10);
          if (y2.tint)
            fill2.fgColor.tint = parseFloat(y2.tint);
          if (y2.rgb != null)
            fill2.fgColor.rgb = y2.rgb.slice(-6);
          break;
        case "<fgColor/>":
        case "</fgColor>":
          break;
        case "<stop":
        case "<stop/>":
          break;
        case "</stop>":
          break;
        case "<color":
        case "<color/>":
          break;
        case "</color>":
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        default:
          if (opts && opts.WTF) {
            if (!pass)
              throw new Error("unrecognized " + y2[0] + " in fills");
          }
      }
    });
  }
  function parse_fonts(t2, styles, themes, opts) {
    styles.Fonts = [];
    var font = {};
    var pass = false;
    (t2[0].match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<fonts":
        case "<fonts>":
        case "</fonts>":
          break;
        case "<font":
        case "<font>":
          break;
        case "</font>":
        case "<font/>":
          styles.Fonts.push(font);
          font = {};
          break;
        case "<name":
          if (y2.val)
            font.name = utf8read(y2.val);
          break;
        case "<name/>":
        case "</name>":
          break;
        case "<b":
          font.bold = y2.val ? parsexmlbool(y2.val) : 1;
          break;
        case "<b/>":
          font.bold = 1;
          break;
        case "<i":
          font.italic = y2.val ? parsexmlbool(y2.val) : 1;
          break;
        case "<i/>":
          font.italic = 1;
          break;
        case "<u":
          switch (y2.val) {
            case "none":
              font.underline = 0;
              break;
            case "single":
              font.underline = 1;
              break;
            case "double":
              font.underline = 2;
              break;
            case "singleAccounting":
              font.underline = 33;
              break;
            case "doubleAccounting":
              font.underline = 34;
              break;
          }
          break;
        case "<u/>":
          font.underline = 1;
          break;
        case "<strike":
          font.strike = y2.val ? parsexmlbool(y2.val) : 1;
          break;
        case "<strike/>":
          font.strike = 1;
          break;
        case "<outline":
          font.outline = y2.val ? parsexmlbool(y2.val) : 1;
          break;
        case "<outline/>":
          font.outline = 1;
          break;
        case "<shadow":
          font.shadow = y2.val ? parsexmlbool(y2.val) : 1;
          break;
        case "<shadow/>":
          font.shadow = 1;
          break;
        case "<condense":
          font.condense = y2.val ? parsexmlbool(y2.val) : 1;
          break;
        case "<condense/>":
          font.condense = 1;
          break;
        case "<extend":
          font.extend = y2.val ? parsexmlbool(y2.val) : 1;
          break;
        case "<extend/>":
          font.extend = 1;
          break;
        case "<sz":
          if (y2.val)
            font.sz = +y2.val;
          break;
        case "<sz/>":
        case "</sz>":
          break;
        case "<vertAlign":
          if (y2.val)
            font.vertAlign = y2.val;
          break;
        case "<vertAlign/>":
        case "</vertAlign>":
          break;
        case "<family":
          if (y2.val)
            font.family = parseInt(y2.val, 10);
          break;
        case "<family/>":
        case "</family>":
          break;
        case "<scheme":
          if (y2.val)
            font.scheme = y2.val;
          break;
        case "<scheme/>":
        case "</scheme>":
          break;
        case "<charset":
          if (y2.val == "1")
            break;
          y2.codepage = CS2CP[parseInt(y2.val, 10)];
          break;
        case "<color":
          if (!font.color)
            font.color = {};
          if (y2.auto)
            font.color.auto = parsexmlbool(y2.auto);
          if (y2.rgb)
            font.color.rgb = y2.rgb.slice(-6);
          else if (y2.indexed) {
            font.color.index = parseInt(y2.indexed, 10);
            var icv = XLSIcv[font.color.index];
            if (font.color.index == 81)
              icv = XLSIcv[1];
            if (!icv)
              icv = XLSIcv[1];
            font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
          } else if (y2.theme) {
            font.color.theme = parseInt(y2.theme, 10);
            if (y2.tint)
              font.color.tint = parseFloat(y2.tint);
            if (y2.theme && themes.themeElements && themes.themeElements.clrScheme) {
              font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
            }
          }
          break;
        case "<color/>":
        case "</color>":
          break;
        case "<AlternateContent":
          pass = true;
          break;
        case "</AlternateContent>":
          pass = false;
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        default:
          if (opts && opts.WTF) {
            if (!pass)
              throw new Error("unrecognized " + y2[0] + " in fonts");
          }
      }
    });
  }
  function parse_numFmts(t2, styles, opts) {
    styles.NumberFmt = [];
    var k = keys(table_fmt);
    for (var i2 = 0; i2 < k.length; ++i2)
      styles.NumberFmt[k[i2]] = table_fmt[k[i2]];
    var m2 = t2[0].match(tagregex);
    if (!m2)
      return;
    for (i2 = 0; i2 < m2.length; ++i2) {
      var y2 = parsexmltag(m2[i2]);
      switch (strip_ns(y2[0])) {
        case "<numFmts":
        case "</numFmts>":
        case "<numFmts/>":
        case "<numFmts>":
          break;
        case "<numFmt":
          {
            var f2 = unescapexml(utf8read(y2.formatCode)), j2 = parseInt(y2.numFmtId, 10);
            styles.NumberFmt[j2] = f2;
            if (j2 > 0) {
              if (j2 > 392) {
                for (j2 = 392; j2 > 60; --j2)
                  if (styles.NumberFmt[j2] == null)
                    break;
                styles.NumberFmt[j2] = f2;
              }
              SSF_load(f2, j2);
            }
          }
          break;
        case "</numFmt>":
          break;
        default:
          if (opts.WTF)
            throw new Error("unrecognized " + y2[0] + " in numFmts");
      }
    }
  }
  var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
  var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];
  function parse_cellXfs(t2, styles, opts) {
    styles.CellXf = [];
    var xf;
    var pass = false;
    (t2[0].match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x), i2 = 0;
      switch (strip_ns(y2[0])) {
        case "<cellXfs":
        case "<cellXfs>":
        case "<cellXfs/>":
        case "</cellXfs>":
          break;
        case "<xf":
        case "<xf/>":
          xf = y2;
          delete xf[0];
          for (i2 = 0; i2 < cellXF_uint.length; ++i2)
            if (xf[cellXF_uint[i2]])
              xf[cellXF_uint[i2]] = parseInt(xf[cellXF_uint[i2]], 10);
          for (i2 = 0; i2 < cellXF_bool.length; ++i2)
            if (xf[cellXF_bool[i2]])
              xf[cellXF_bool[i2]] = parsexmlbool(xf[cellXF_bool[i2]]);
          if (styles.NumberFmt && xf.numFmtId > 392) {
            for (i2 = 392; i2 > 60; --i2)
              if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i2]) {
                xf.numFmtId = i2;
                break;
              }
          }
          styles.CellXf.push(xf);
          break;
        case "</xf>":
          break;
        case "<alignment":
        case "<alignment/>":
          var alignment = {};
          if (y2.vertical)
            alignment.vertical = y2.vertical;
          if (y2.horizontal)
            alignment.horizontal = y2.horizontal;
          if (y2.textRotation != null)
            alignment.textRotation = y2.textRotation;
          if (y2.indent)
            alignment.indent = y2.indent;
          if (y2.wrapText)
            alignment.wrapText = parsexmlbool(y2.wrapText);
          xf.alignment = alignment;
          break;
        case "</alignment>":
          break;
        case "<protection":
          break;
        case "</protection>":
        case "<protection/>":
          break;
        case "<AlternateContent":
          pass = true;
          break;
        case "</AlternateContent>":
          pass = false;
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        default:
          if (opts && opts.WTF) {
            if (!pass)
              throw new Error("unrecognized " + y2[0] + " in cellXfs");
          }
      }
    });
  }
  var parse_sty_xml = /* @__PURE__ */ function make_pstyx() {
    var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
    var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
    var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
    var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
    var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
    return function parse_sty_xml2(data, themes, opts) {
      var styles = {};
      if (!data)
        return styles;
      data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
      var t2;
      if (t2 = data.match(numFmtRegex))
        parse_numFmts(t2, styles, opts);
      if (t2 = data.match(fontsRegex))
        parse_fonts(t2, styles, themes, opts);
      if (t2 = data.match(fillsRegex))
        parse_fills(t2, styles, themes, opts);
      if (t2 = data.match(bordersRegex))
        parse_borders(t2, styles, themes, opts);
      if (t2 = data.match(cellXfRegex))
        parse_cellXfs(t2, styles, opts);
      return styles;
    };
  }();
  function parse_BrtFmt(data, length) {
    var numFmtId = data.read_shift(2);
    var stFmtCode = parse_XLWideString(data);
    return [numFmtId, stFmtCode];
  }
  function parse_BrtFont(data, length, opts) {
    var out = {};
    out.sz = data.read_shift(2) / 20;
    var grbit = parse_FontFlags(data);
    if (grbit.fItalic)
      out.italic = 1;
    if (grbit.fCondense)
      out.condense = 1;
    if (grbit.fExtend)
      out.extend = 1;
    if (grbit.fShadow)
      out.shadow = 1;
    if (grbit.fOutline)
      out.outline = 1;
    if (grbit.fStrikeout)
      out.strike = 1;
    var bls = data.read_shift(2);
    if (bls === 700)
      out.bold = 1;
    switch (data.read_shift(2)) {
      case 1:
        out.vertAlign = "superscript";
        break;
      case 2:
        out.vertAlign = "subscript";
        break;
    }
    var underline = data.read_shift(1);
    if (underline != 0)
      out.underline = underline;
    var family = data.read_shift(1);
    if (family > 0)
      out.family = family;
    var bCharSet = data.read_shift(1);
    if (bCharSet > 0)
      out.charset = bCharSet;
    data.l++;
    out.color = parse_BrtColor(data);
    switch (data.read_shift(1)) {
      case 1:
        out.scheme = "major";
        break;
      case 2:
        out.scheme = "minor";
        break;
    }
    out.name = parse_XLWideString(data);
    return out;
  }
  var parse_BrtFill = parsenoop;
  function parse_BrtXF(data, length) {
    var tgt = data.l + length;
    var ixfeParent = data.read_shift(2);
    var ifmt = data.read_shift(2);
    data.l = tgt;
    return { ixfe: ixfeParent, numFmtId: ifmt };
  }
  var parse_BrtBorder = parsenoop;
  function parse_sty_bin(data, themes, opts) {
    var styles = {};
    styles.NumberFmt = [];
    for (var y2 in table_fmt)
      styles.NumberFmt[y2] = table_fmt[y2];
    styles.CellXf = [];
    styles.Fonts = [];
    var state = [];
    var pass = false;
    recordhopper(data, function hopper_sty(val, R2, RT) {
      switch (RT) {
        case 44:
          styles.NumberFmt[val[0]] = val[1];
          SSF_load(val[1], val[0]);
          break;
        case 43:
          styles.Fonts.push(val);
          if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
            val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
          }
          break;
        case 1025:
          break;
        case 45:
          break;
        case 46:
          break;
        case 47:
          if (state[state.length - 1] == 617) {
            styles.CellXf.push(val);
          }
          break;
        case 48:
        case 507:
        case 572:
        case 475:
          break;
        case 1171:
        case 2102:
        case 1130:
        case 512:
        case 2095:
        case 3072:
          break;
        case 35:
          pass = true;
          break;
        case 36:
          pass = false;
          break;
        case 37:
          state.push(RT);
          pass = true;
          break;
        case 38:
          state.pop();
          pass = false;
          break;
        default:
          if (R2.T > 0)
            state.push(RT);
          else if (R2.T < 0)
            state.pop();
          else if (!pass || opts.WTF && state[state.length - 1] != 37)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    });
    return styles;
  }
  var XLSXThemeClrScheme = [
    "</a:lt1>",
    "</a:dk1>",
    "</a:lt2>",
    "</a:dk2>",
    "</a:accent1>",
    "</a:accent2>",
    "</a:accent3>",
    "</a:accent4>",
    "</a:accent5>",
    "</a:accent6>",
    "</a:hlink>",
    "</a:folHlink>"
  ];
  function parse_clrScheme(t2, themes, opts) {
    themes.themeElements.clrScheme = [];
    var color = {};
    (t2[0].match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x);
      switch (y2[0]) {
        case "<a:clrScheme":
        case "</a:clrScheme>":
          break;
        case "<a:srgbClr":
          color.rgb = y2.val;
          break;
        case "<a:sysClr":
          color.rgb = y2.lastClr;
          break;
        case "<a:dk1>":
        case "</a:dk1>":
        case "<a:lt1>":
        case "</a:lt1>":
        case "<a:dk2>":
        case "</a:dk2>":
        case "<a:lt2>":
        case "</a:lt2>":
        case "<a:accent1>":
        case "</a:accent1>":
        case "<a:accent2>":
        case "</a:accent2>":
        case "<a:accent3>":
        case "</a:accent3>":
        case "<a:accent4>":
        case "</a:accent4>":
        case "<a:accent5>":
        case "</a:accent5>":
        case "<a:accent6>":
        case "</a:accent6>":
        case "<a:hlink>":
        case "</a:hlink>":
        case "<a:folHlink>":
        case "</a:folHlink>":
          if (y2[0].charAt(1) === "/") {
            themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y2[0])] = color;
            color = {};
          } else {
            color.name = y2[0].slice(3, y2[0].length - 1);
          }
          break;
        default:
          if (opts && opts.WTF)
            throw new Error("Unrecognized " + y2[0] + " in clrScheme");
      }
    });
  }
  function parse_fontScheme() {
  }
  function parse_fmtScheme() {
  }
  var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
  var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
  var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
  function parse_themeElements(data, themes, opts) {
    themes.themeElements = {};
    var t2;
    [
      /* clrScheme CT_ColorScheme */
      ["clrScheme", clrsregex, parse_clrScheme],
      /* fontScheme CT_FontScheme */
      ["fontScheme", fntsregex, parse_fontScheme],
      /* fmtScheme CT_StyleMatrix */
      ["fmtScheme", fmtsregex, parse_fmtScheme]
    ].forEach(function(m2) {
      if (!(t2 = data.match(m2[1])))
        throw new Error(m2[0] + " not found in themeElements");
      m2[2](t2, themes, opts);
    });
  }
  var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
  function parse_theme_xml(data, opts) {
    if (!data || data.length === 0)
      data = write_theme();
    var t2;
    var themes = {};
    if (!(t2 = data.match(themeltregex)))
      throw new Error("themeElements not found in theme");
    parse_themeElements(t2[0], themes, opts);
    themes.raw = data;
    return themes;
  }
  function write_theme(Themes, opts) {
    if (opts && opts.themeXLSX)
      return opts.themeXLSX;
    if (Themes && typeof Themes.raw == "string")
      return Themes.raw;
    var o2 = [XML_HEADER];
    o2[o2.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
    o2[o2.length] = "<a:themeElements>";
    o2[o2.length] = '<a:clrScheme name="Office">';
    o2[o2.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
    o2[o2.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
    o2[o2.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
    o2[o2.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
    o2[o2.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
    o2[o2.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
    o2[o2.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
    o2[o2.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
    o2[o2.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
    o2[o2.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
    o2[o2.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
    o2[o2.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
    o2[o2.length] = "</a:clrScheme>";
    o2[o2.length] = '<a:fontScheme name="Office">';
    o2[o2.length] = "<a:majorFont>";
    o2[o2.length] = '<a:latin typeface="Cambria"/>';
    o2[o2.length] = '<a:ea typeface=""/>';
    o2[o2.length] = '<a:cs typeface=""/>';
    o2[o2.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    o2[o2.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
    o2[o2.length] = '<a:font script="Hans" typeface="宋体"/>';
    o2[o2.length] = '<a:font script="Hant" typeface="新細明體"/>';
    o2[o2.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
    o2[o2.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
    o2[o2.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o2[o2.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o2[o2.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o2[o2.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o2[o2.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
    o2[o2.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o2[o2.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o2[o2.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o2[o2.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o2[o2.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o2[o2.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o2[o2.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o2[o2.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o2[o2.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o2[o2.length] = '<a:font script="Taml" typeface="Latha"/>';
    o2[o2.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o2[o2.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o2[o2.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o2[o2.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o2[o2.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o2[o2.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o2[o2.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
    o2[o2.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o2[o2.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o2[o2.length] = "</a:majorFont>";
    o2[o2.length] = "<a:minorFont>";
    o2[o2.length] = '<a:latin typeface="Calibri"/>';
    o2[o2.length] = '<a:ea typeface=""/>';
    o2[o2.length] = '<a:cs typeface=""/>';
    o2[o2.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    o2[o2.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
    o2[o2.length] = '<a:font script="Hans" typeface="宋体"/>';
    o2[o2.length] = '<a:font script="Hant" typeface="新細明體"/>';
    o2[o2.length] = '<a:font script="Arab" typeface="Arial"/>';
    o2[o2.length] = '<a:font script="Hebr" typeface="Arial"/>';
    o2[o2.length] = '<a:font script="Thai" typeface="Tahoma"/>';
    o2[o2.length] = '<a:font script="Ethi" typeface="Nyala"/>';
    o2[o2.length] = '<a:font script="Beng" typeface="Vrinda"/>';
    o2[o2.length] = '<a:font script="Gujr" typeface="Shruti"/>';
    o2[o2.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
    o2[o2.length] = '<a:font script="Knda" typeface="Tunga"/>';
    o2[o2.length] = '<a:font script="Guru" typeface="Raavi"/>';
    o2[o2.length] = '<a:font script="Cans" typeface="Euphemia"/>';
    o2[o2.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    o2[o2.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    o2[o2.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    o2[o2.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
    o2[o2.length] = '<a:font script="Deva" typeface="Mangal"/>';
    o2[o2.length] = '<a:font script="Telu" typeface="Gautami"/>';
    o2[o2.length] = '<a:font script="Taml" typeface="Latha"/>';
    o2[o2.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    o2[o2.length] = '<a:font script="Orya" typeface="Kalinga"/>';
    o2[o2.length] = '<a:font script="Mlym" typeface="Kartika"/>';
    o2[o2.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
    o2[o2.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    o2[o2.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    o2[o2.length] = '<a:font script="Viet" typeface="Arial"/>';
    o2[o2.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    o2[o2.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
    o2[o2.length] = "</a:minorFont>";
    o2[o2.length] = "</a:fontScheme>";
    o2[o2.length] = '<a:fmtScheme name="Office">';
    o2[o2.length] = "<a:fillStyleLst>";
    o2[o2.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o2[o2.length] = '<a:gradFill rotWithShape="1">';
    o2[o2.length] = "<a:gsLst>";
    o2[o2.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o2[o2.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o2[o2.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o2[o2.length] = "</a:gsLst>";
    o2[o2.length] = '<a:lin ang="16200000" scaled="1"/>';
    o2[o2.length] = "</a:gradFill>";
    o2[o2.length] = '<a:gradFill rotWithShape="1">';
    o2[o2.length] = "<a:gsLst>";
    o2[o2.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
    o2[o2.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o2[o2.length] = "</a:gsLst>";
    o2[o2.length] = '<a:lin ang="16200000" scaled="0"/>';
    o2[o2.length] = "</a:gradFill>";
    o2[o2.length] = "</a:fillStyleLst>";
    o2[o2.length] = "<a:lnStyleLst>";
    o2[o2.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o2[o2.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o2[o2.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    o2[o2.length] = "</a:lnStyleLst>";
    o2[o2.length] = "<a:effectStyleLst>";
    o2[o2.length] = "<a:effectStyle>";
    o2[o2.length] = "<a:effectLst>";
    o2[o2.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
    o2[o2.length] = "</a:effectLst>";
    o2[o2.length] = "</a:effectStyle>";
    o2[o2.length] = "<a:effectStyle>";
    o2[o2.length] = "<a:effectLst>";
    o2[o2.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o2[o2.length] = "</a:effectLst>";
    o2[o2.length] = "</a:effectStyle>";
    o2[o2.length] = "<a:effectStyle>";
    o2[o2.length] = "<a:effectLst>";
    o2[o2.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    o2[o2.length] = "</a:effectLst>";
    o2[o2.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
    o2[o2.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
    o2[o2.length] = "</a:effectStyle>";
    o2[o2.length] = "</a:effectStyleLst>";
    o2[o2.length] = "<a:bgFillStyleLst>";
    o2[o2.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    o2[o2.length] = '<a:gradFill rotWithShape="1">';
    o2[o2.length] = "<a:gsLst>";
    o2[o2.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o2[o2.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    o2[o2.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
    o2[o2.length] = "</a:gsLst>";
    o2[o2.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
    o2[o2.length] = "</a:gradFill>";
    o2[o2.length] = '<a:gradFill rotWithShape="1">';
    o2[o2.length] = "<a:gsLst>";
    o2[o2.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    o2[o2.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
    o2[o2.length] = "</a:gsLst>";
    o2[o2.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
    o2[o2.length] = "</a:gradFill>";
    o2[o2.length] = "</a:bgFillStyleLst>";
    o2[o2.length] = "</a:fmtScheme>";
    o2[o2.length] = "</a:themeElements>";
    o2[o2.length] = "<a:objectDefaults>";
    o2[o2.length] = "<a:spDef>";
    o2[o2.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
    o2[o2.length] = "</a:spDef>";
    o2[o2.length] = "<a:lnDef>";
    o2[o2.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
    o2[o2.length] = "</a:lnDef>";
    o2[o2.length] = "</a:objectDefaults>";
    o2[o2.length] = "<a:extraClrSchemeLst/>";
    o2[o2.length] = "</a:theme>";
    return o2.join("");
  }
  function parse_Theme(blob, length, opts) {
    var end = blob.l + length;
    var dwThemeVersion = blob.read_shift(4);
    if (dwThemeVersion === 124226)
      return;
    if (!opts.cellStyles) {
      blob.l = end;
      return;
    }
    var data = blob.slice(blob.l);
    blob.l = end;
    var zip;
    try {
      zip = zip_read(data, { type: "array" });
    } catch (e2) {
      return;
    }
    var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
    if (!themeXML)
      return;
    return parse_theme_xml(themeXML, opts);
  }
  function parse_ColorTheme(blob) {
    return blob.read_shift(4);
  }
  function parse_FullColorExt(blob) {
    var o2 = {};
    o2.xclrType = blob.read_shift(2);
    o2.nTintShade = blob.read_shift(2);
    switch (o2.xclrType) {
      case 0:
        blob.l += 4;
        break;
      case 1:
        o2.xclrValue = parse_IcvXF(blob, 4);
        break;
      case 2:
        o2.xclrValue = parse_LongRGBA(blob);
        break;
      case 3:
        o2.xclrValue = parse_ColorTheme(blob);
        break;
      case 4:
        blob.l += 4;
        break;
    }
    blob.l += 8;
    return o2;
  }
  function parse_IcvXF(blob, length) {
    return parsenoop(blob, length);
  }
  function parse_XFExtGradient(blob, length) {
    return parsenoop(blob, length);
  }
  function parse_ExtProp(blob) {
    var extType = blob.read_shift(2);
    var cb = blob.read_shift(2) - 4;
    var o2 = [extType];
    switch (extType) {
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 13:
        o2[1] = parse_FullColorExt(blob);
        break;
      case 6:
        o2[1] = parse_XFExtGradient(blob, cb);
        break;
      case 14:
      case 15:
        o2[1] = blob.read_shift(cb === 1 ? 1 : 2);
        break;
      default:
        throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
    }
    return o2;
  }
  function parse_XFExt(blob, length) {
    var end = blob.l + length;
    blob.l += 2;
    var ixfe = blob.read_shift(2);
    blob.l += 2;
    var cexts = blob.read_shift(2);
    var ext = [];
    while (cexts-- > 0)
      ext.push(parse_ExtProp(blob, end - blob.l));
    return { ixfe, ext };
  }
  function update_xfext(xf, xfext) {
    xfext.forEach(function(xfe) {
      switch (xfe[0]) {
      }
    });
  }
  function parse_BrtMdtinfo(data, length) {
    return {
      flags: data.read_shift(4),
      version: data.read_shift(4),
      name: parse_XLWideString(data)
    };
  }
  function parse_BrtMdb(data) {
    var out = [];
    var cnt = data.read_shift(4);
    while (cnt-- > 0)
      out.push([data.read_shift(4), data.read_shift(4)]);
    return out;
  }
  function parse_BrtBeginEsmdb(data) {
    data.l += 4;
    return data.read_shift(4) != 0;
  }
  function parse_xlmeta_bin(data, name, _opts) {
    var out = { Types: [], Cell: [], Value: [] };
    var opts = _opts || {};
    var state = [];
    var pass = false;
    var metatype = 2;
    recordhopper(data, function(val, R2, RT) {
      switch (RT) {
        case 335:
          out.Types.push({ name: val.name });
          break;
        case 51:
          val.forEach(function(r2) {
            if (metatype == 1)
              out.Cell.push({ type: out.Types[r2[0] - 1].name, index: r2[1] });
            else if (metatype == 0)
              out.Value.push({ type: out.Types[r2[0] - 1].name, index: r2[1] });
          });
          break;
        case 337:
          metatype = val ? 1 : 0;
          break;
        case 338:
          metatype = 2;
          break;
        case 35:
          state.push(RT);
          pass = true;
          break;
        case 36:
          state.pop();
          pass = false;
          break;
        default:
          if (R2.T)
            ;
          else if (!pass || opts.WTF && state[state.length - 1] != 35)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    });
    return out;
  }
  function parse_xlmeta_xml(data, name, opts) {
    var out = { Types: [], Cell: [], Value: [] };
    if (!data)
      return out;
    var pass = false;
    var metatype = 2;
    var lastmeta;
    data.replace(tagregex, function(x) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<?xml":
          break;
        case "<metadata":
        case "</metadata>":
          break;
        case "<metadataTypes":
        case "</metadataTypes>":
          break;
        case "<metadataType":
          out.Types.push({ name: y2.name });
          break;
        case "</metadataType>":
          break;
        case "<futureMetadata":
          for (var j2 = 0; j2 < out.Types.length; ++j2)
            if (out.Types[j2].name == y2.name)
              lastmeta = out.Types[j2];
          break;
        case "</futureMetadata>":
          break;
        case "<bk>":
          break;
        case "</bk>":
          break;
        case "<rc":
          if (metatype == 1)
            out.Cell.push({ type: out.Types[y2.t - 1].name, index: +y2.v });
          else if (metatype == 0)
            out.Value.push({ type: out.Types[y2.t - 1].name, index: +y2.v });
          break;
        case "</rc>":
          break;
        case "<cellMetadata":
          metatype = 1;
          break;
        case "</cellMetadata>":
          metatype = 2;
          break;
        case "<valueMetadata":
          metatype = 0;
          break;
        case "</valueMetadata>":
          metatype = 2;
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
        case "<extLst/>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        case "<rvb":
          if (!lastmeta)
            break;
          if (!lastmeta.offsets)
            lastmeta.offsets = [];
          lastmeta.offsets.push(+y2.i);
          break;
        default:
          if (!pass && opts.WTF)
            throw new Error("unrecognized " + y2[0] + " in metadata");
      }
      return x;
    });
    return out;
  }
  function parse_cc_xml(data) {
    var d2 = [];
    if (!data)
      return d2;
    var i2 = 1;
    (data.match(tagregex) || []).forEach(function(x) {
      var y2 = parsexmltag(x);
      switch (y2[0]) {
        case "<?xml":
          break;
        case "<calcChain":
        case "<calcChain>":
        case "</calcChain>":
          break;
        case "<c":
          delete y2[0];
          if (y2.i)
            i2 = y2.i;
          else
            y2.i = i2;
          d2.push(y2);
          break;
      }
    });
    return d2;
  }
  function parse_BrtCalcChainItem$(data) {
    var out = {};
    out.i = data.read_shift(4);
    var cell = {};
    cell.r = data.read_shift(4);
    cell.c = data.read_shift(4);
    out.r = encode_cell(cell);
    var flags = data.read_shift(1);
    if (flags & 2)
      out.l = "1";
    if (flags & 8)
      out.a = "1";
    return out;
  }
  function parse_cc_bin(data, name, opts) {
    var out = [];
    recordhopper(data, function hopper_cc(val, R2, RT) {
      switch (RT) {
        case 63:
          out.push(val);
          break;
        default:
          if (R2.T)
            ;
          else
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    });
    return out;
  }
  function parse_xlink_xml() {
  }
  function parse_xlink_bin(data, rel, name, _opts) {
    if (!data)
      return data;
    var opts = _opts || {};
    var pass = false;
    recordhopper(data, function xlink_parse(val, R2, RT) {
      switch (RT) {
        case 359:
        case 363:
        case 364:
        case 366:
        case 367:
        case 368:
        case 369:
        case 370:
        case 371:
        case 472:
        case 577:
        case 578:
        case 579:
        case 580:
        case 581:
        case 582:
        case 583:
        case 584:
        case 585:
        case 586:
        case 587:
          break;
        case 35:
          pass = true;
          break;
        case 36:
          pass = false;
          break;
        default:
          if (R2.T)
            ;
          else if (!pass || opts.WTF)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    }, opts);
  }
  function parse_drawing(data, rels) {
    if (!data)
      return "??";
    var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1];
    return rels["!id"][id].Target;
  }
  function sheet_insert_comments(sheet, comments, threaded, people) {
    var dense = Array.isArray(sheet);
    var cell;
    comments.forEach(function(comment) {
      var r2 = decode_cell(comment.ref);
      if (dense) {
        if (!sheet[r2.r])
          sheet[r2.r] = [];
        cell = sheet[r2.r][r2.c];
      } else
        cell = sheet[comment.ref];
      if (!cell) {
        cell = { t: "z" };
        if (dense)
          sheet[r2.r][r2.c] = cell;
        else
          sheet[comment.ref] = cell;
        var range2 = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
        if (range2.s.r > r2.r)
          range2.s.r = r2.r;
        if (range2.e.r < r2.r)
          range2.e.r = r2.r;
        if (range2.s.c > r2.c)
          range2.s.c = r2.c;
        if (range2.e.c < r2.c)
          range2.e.c = r2.c;
        var encoded = encode_range(range2);
        if (encoded !== sheet["!ref"])
          sheet["!ref"] = encoded;
      }
      if (!cell.c)
        cell.c = [];
      var o2 = { a: comment.author, t: comment.t, r: comment.r, T: threaded };
      if (comment.h)
        o2.h = comment.h;
      for (var i2 = cell.c.length - 1; i2 >= 0; --i2) {
        if (!threaded && cell.c[i2].T)
          return;
        if (threaded && !cell.c[i2].T)
          cell.c.splice(i2, 1);
      }
      if (threaded && people)
        for (i2 = 0; i2 < people.length; ++i2) {
          if (o2.a == people[i2].id) {
            o2.a = people[i2].name || o2.a;
            break;
          }
        }
      cell.c.push(o2);
    });
  }
  function parse_comments_xml(data, opts) {
    if (data.match(/<(?:\w+:)?comments *\/>/))
      return [];
    var authors = [];
    var commentList = [];
    var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
    if (authtag && authtag[1])
      authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
        if (x === "" || x.trim() === "")
          return;
        var a2 = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
        if (a2)
          authors.push(a2[1]);
      });
    var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
    if (cmnttag && cmnttag[1])
      cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
        if (x === "" || x.trim() === "")
          return;
        var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
        if (!cm)
          return;
        var y2 = parsexmltag(cm[0]);
        var comment = { author: y2.authorId && authors[y2.authorId] || "sheetjsghost", ref: y2.ref, guid: y2.guid };
        var cell = decode_cell(y2.ref);
        if (opts.sheetRows && opts.sheetRows <= cell.r)
          return;
        var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
        var rt2 = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || { r: "", t: "", h: "" };
        comment.r = rt2.r;
        if (rt2.r == "<t></t>")
          rt2.t = rt2.h = "";
        comment.t = (rt2.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        if (opts.cellHTML)
          comment.h = rt2.h;
        commentList.push(comment);
      });
    return commentList;
  }
  function parse_tcmnt_xml(data, opts) {
    var out = [];
    var pass = false, comment = {}, tidx = 0;
    data.replace(tagregex, function xml_tcmnt(x, idx) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<?xml":
          break;
        case "<ThreadedComments":
          break;
        case "</ThreadedComments>":
          break;
        case "<threadedComment":
          comment = { author: y2.personId, guid: y2.id, ref: y2.ref, T: 1 };
          break;
        case "</threadedComment>":
          if (comment.t != null)
            out.push(comment);
          break;
        case "<text>":
        case "<text":
          tidx = idx + x.length;
          break;
        case "</text>":
          comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
          break;
        case "<mentions":
        case "<mentions>":
          pass = true;
          break;
        case "</mentions>":
          pass = false;
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
        case "<extLst/>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        default:
          if (!pass && opts.WTF)
            throw new Error("unrecognized " + y2[0] + " in threaded comments");
      }
      return x;
    });
    return out;
  }
  function parse_people_xml(data, opts) {
    var out = [];
    var pass = false;
    data.replace(tagregex, function xml_tcmnt(x) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<?xml":
          break;
        case "<personList":
          break;
        case "</personList>":
          break;
        case "<person":
          out.push({ name: y2.displayname, id: y2.id });
          break;
        case "</person>":
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
        case "<extLst/>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        default:
          if (!pass && opts.WTF)
            throw new Error("unrecognized " + y2[0] + " in threaded comments");
      }
      return x;
    });
    return out;
  }
  function parse_BrtBeginComment(data) {
    var out = {};
    out.iauthor = data.read_shift(4);
    var rfx = parse_UncheckedRfX(data);
    out.rfx = rfx.s;
    out.ref = encode_cell(rfx.s);
    data.l += 16;
    return out;
  }
  var parse_BrtCommentAuthor = parse_XLWideString;
  function parse_comments_bin(data, opts) {
    var out = [];
    var authors = [];
    var c2 = {};
    var pass = false;
    recordhopper(data, function hopper_cmnt(val, R2, RT) {
      switch (RT) {
        case 632:
          authors.push(val);
          break;
        case 635:
          c2 = val;
          break;
        case 637:
          c2.t = val.t;
          c2.h = val.h;
          c2.r = val.r;
          break;
        case 636:
          c2.author = authors[c2.iauthor];
          delete c2.iauthor;
          if (opts.sheetRows && c2.rfx && opts.sheetRows <= c2.rfx.r)
            break;
          if (!c2.t)
            c2.t = "";
          delete c2.rfx;
          out.push(c2);
          break;
        case 3072:
          break;
        case 35:
          pass = true;
          break;
        case 36:
          pass = false;
          break;
        case 37:
          break;
        case 38:
          break;
        default:
          if (R2.T)
            ;
          else if (!pass || opts.WTF)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    });
    return out;
  }
  var CT_VBA = "application/vnd.ms-office.vbaProject";
  function make_vba_xls(cfb) {
    var newcfb = CFB.utils.cfb_new({ root: "R" });
    cfb.FullPaths.forEach(function(p2, i2) {
      if (p2.slice(-1) === "/" || !p2.match(/_VBA_PROJECT_CUR/))
        return;
      var newpath = p2.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
      CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i2].content);
    });
    return CFB.write(newcfb);
  }
  function parse_ds_bin() {
    return { "!type": "dialog" };
  }
  function parse_ds_xml() {
    return { "!type": "dialog" };
  }
  function parse_ms_bin() {
    return { "!type": "macro" };
  }
  function parse_ms_xml() {
    return { "!type": "macro" };
  }
  var rc_to_a1 = /* @__PURE__ */ function() {
    var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
    var rcbase = { r: 0, c: 0 };
    function rcfunc($$, $1, $2, $3) {
      var cRel = false, rRel = false;
      if ($2.length == 0)
        rRel = true;
      else if ($2.charAt(0) == "[") {
        rRel = true;
        $2 = $2.slice(1, -1);
      }
      if ($3.length == 0)
        cRel = true;
      else if ($3.charAt(0) == "[") {
        cRel = true;
        $3 = $3.slice(1, -1);
      }
      var R2 = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C2 = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
      if (cRel)
        C2 += rcbase.c;
      else
        --C2;
      if (rRel)
        R2 += rcbase.r;
      else
        --R2;
      return $1 + (cRel ? "" : "$") + encode_col(C2) + (rRel ? "" : "$") + encode_row(R2);
    }
    return function rc_to_a12(fstr, base) {
      rcbase = base;
      return fstr.replace(rcregex, rcfunc);
    };
  }();
  var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
  var a1_to_rc = /* @__PURE__ */ function() {
    return function a1_to_rc2(fstr, base) {
      return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
        var c2 = decode_col($3) - ($2 ? 0 : base.c);
        var r2 = decode_row($5) - ($4 ? 0 : base.r);
        var R2 = r2 == 0 ? "" : !$4 ? "[" + r2 + "]" : r2 + 1;
        var C2 = c2 == 0 ? "" : !$2 ? "[" + c2 + "]" : c2 + 1;
        return $1 + "R" + R2 + "C" + C2;
      });
    };
  }();
  function shift_formula_str(f2, delta) {
    return f2.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
      return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
    });
  }
  function shift_formula_xlsx(f2, range2, cell) {
    var r2 = decode_range(range2), s2 = r2.s, c2 = decode_cell(cell);
    var delta = { r: c2.r - s2.r, c: c2.c - s2.c };
    return shift_formula_str(f2, delta);
  }
  function fuzzyfmla(f2) {
    if (f2.length == 1)
      return false;
    return true;
  }
  function _xlfn(f2) {
    return f2.replace(/_xlfn\./g, "");
  }
  function parseread1(blob) {
    blob.l += 1;
    return;
  }
  function parse_ColRelU(blob, length) {
    var c2 = blob.read_shift(length == 1 ? 1 : 2);
    return [c2 & 16383, c2 >> 14 & 1, c2 >> 15 & 1];
  }
  function parse_RgceArea(blob, length, opts) {
    var w2 = 2;
    if (opts) {
      if (opts.biff >= 2 && opts.biff <= 5)
        return parse_RgceArea_BIFF2(blob);
      else if (opts.biff == 12)
        w2 = 4;
    }
    var r2 = blob.read_shift(w2), R2 = blob.read_shift(w2);
    var c2 = parse_ColRelU(blob, 2);
    var C2 = parse_ColRelU(blob, 2);
    return { s: { r: r2, c: c2[0], cRel: c2[1], rRel: c2[2] }, e: { r: R2, c: C2[0], cRel: C2[1], rRel: C2[2] } };
  }
  function parse_RgceArea_BIFF2(blob) {
    var r2 = parse_ColRelU(blob, 2), R2 = parse_ColRelU(blob, 2);
    var c2 = blob.read_shift(1);
    var C2 = blob.read_shift(1);
    return { s: { r: r2[0], c: c2, cRel: r2[1], rRel: r2[2] }, e: { r: R2[0], c: C2, cRel: R2[1], rRel: R2[2] } };
  }
  function parse_RgceAreaRel(blob, length, opts) {
    if (opts.biff < 8)
      return parse_RgceArea_BIFF2(blob);
    var r2 = blob.read_shift(opts.biff == 12 ? 4 : 2), R2 = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var c2 = parse_ColRelU(blob, 2);
    var C2 = parse_ColRelU(blob, 2);
    return { s: { r: r2, c: c2[0], cRel: c2[1], rRel: c2[2] }, e: { r: R2, c: C2[0], cRel: C2[1], rRel: C2[2] } };
  }
  function parse_RgceLoc(blob, length, opts) {
    if (opts && opts.biff >= 2 && opts.biff <= 5)
      return parse_RgceLoc_BIFF2(blob);
    var r2 = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
    var c2 = parse_ColRelU(blob, 2);
    return { r: r2, c: c2[0], cRel: c2[1], rRel: c2[2] };
  }
  function parse_RgceLoc_BIFF2(blob) {
    var r2 = parse_ColRelU(blob, 2);
    var c2 = blob.read_shift(1);
    return { r: r2[0], c: c2, cRel: r2[1], rRel: r2[2] };
  }
  function parse_RgceElfLoc(blob) {
    var r2 = blob.read_shift(2);
    var c2 = blob.read_shift(2);
    return { r: r2, c: c2 & 255, fQuoted: !!(c2 & 16384), cRel: c2 >> 15, rRel: c2 >> 15 };
  }
  function parse_RgceLocRel(blob, length, opts) {
    var biff = opts && opts.biff ? opts.biff : 8;
    if (biff >= 2 && biff <= 5)
      return parse_RgceLocRel_BIFF2(blob);
    var r2 = blob.read_shift(biff >= 12 ? 4 : 2);
    var cl = blob.read_shift(2);
    var cRel = (cl & 16384) >> 14, rRel = (cl & 32768) >> 15;
    cl &= 16383;
    if (rRel == 1)
      while (r2 > 524287)
        r2 -= 1048576;
    if (cRel == 1)
      while (cl > 8191)
        cl = cl - 16384;
    return { r: r2, c: cl, cRel, rRel };
  }
  function parse_RgceLocRel_BIFF2(blob) {
    var rl = blob.read_shift(2);
    var c2 = blob.read_shift(1);
    var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14;
    rl &= 16383;
    if (rRel == 1 && rl >= 8192)
      rl = rl - 16384;
    if (cRel == 1 && c2 >= 128)
      c2 = c2 - 256;
    return { r: rl, c: c2, cRel, rRel };
  }
  function parse_PtgArea(blob, length, opts) {
    var type2 = (blob[blob.l++] & 96) >> 5;
    var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
    return [type2, area];
  }
  function parse_PtgArea3d(blob, length, opts) {
    var type2 = (blob[blob.l++] & 96) >> 5;
    var ixti = blob.read_shift(2, "i");
    var w2 = 8;
    if (opts)
      switch (opts.biff) {
        case 5:
          blob.l += 12;
          w2 = 6;
          break;
        case 12:
          w2 = 12;
          break;
      }
    var area = parse_RgceArea(blob, w2, opts);
    return [type2, ixti, area];
  }
  function parse_PtgAreaErr(blob, length, opts) {
    var type2 = (blob[blob.l++] & 96) >> 5;
    blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
    return [type2];
  }
  function parse_PtgAreaErr3d(blob, length, opts) {
    var type2 = (blob[blob.l++] & 96) >> 5;
    var ixti = blob.read_shift(2);
    var w2 = 8;
    if (opts)
      switch (opts.biff) {
        case 5:
          blob.l += 12;
          w2 = 6;
          break;
        case 12:
          w2 = 12;
          break;
      }
    blob.l += w2;
    return [type2, ixti];
  }
  function parse_PtgAreaN(blob, length, opts) {
    var type2 = (blob[blob.l++] & 96) >> 5;
    var area = parse_RgceAreaRel(blob, length - 1, opts);
    return [type2, area];
  }
  function parse_PtgArray(blob, length, opts) {
    var type2 = (blob[blob.l++] & 96) >> 5;
    blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
    return [type2];
  }
  function parse_PtgAttrBaxcel(blob) {
    var bitSemi = blob[blob.l + 1] & 1;
    var bitBaxcel = 1;
    blob.l += 4;
    return [bitSemi, bitBaxcel];
  }
  function parse_PtgAttrChoose(blob, length, opts) {
    blob.l += 2;
    var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    var o2 = [];
    for (var i2 = 0; i2 <= offset; ++i2)
      o2.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
    return o2;
  }
  function parse_PtgAttrGoto(blob, length, opts) {
    var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0;
    blob.l += 2;
    return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
  }
  function parse_PtgAttrIf(blob, length, opts) {
    var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
    blob.l += 2;
    return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
  }
  function parse_PtgAttrIfError(blob) {
    var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
    blob.l += 2;
    return [bitIf, blob.read_shift(2)];
  }
  function parse_PtgAttrSemi(blob, length, opts) {
    var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return [bitSemi];
  }
  function parse_PtgAttrSpaceType(blob) {
    var type2 = blob.read_shift(1), cch = blob.read_shift(1);
    return [type2, cch];
  }
  function parse_PtgAttrSpace(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob);
  }
  function parse_PtgAttrSpaceSemi(blob) {
    blob.read_shift(2);
    return parse_PtgAttrSpaceType(blob);
  }
  function parse_PtgRef(blob, length, opts) {
    var type2 = (blob[blob.l] & 96) >> 5;
    blob.l += 1;
    var loc = parse_RgceLoc(blob, 0, opts);
    return [type2, loc];
  }
  function parse_PtgRefN(blob, length, opts) {
    var type2 = (blob[blob.l] & 96) >> 5;
    blob.l += 1;
    var loc = parse_RgceLocRel(blob, 0, opts);
    return [type2, loc];
  }
  function parse_PtgRef3d(blob, length, opts) {
    var type2 = (blob[blob.l] & 96) >> 5;
    blob.l += 1;
    var ixti = blob.read_shift(2);
    if (opts && opts.biff == 5)
      blob.l += 12;
    var loc = parse_RgceLoc(blob, 0, opts);
    return [type2, ixti, loc];
  }
  function parse_PtgFunc(blob, length, opts) {
    var type2 = (blob[blob.l] & 96) >> 5;
    blob.l += 1;
    var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
    return [FtabArgc[iftab], Ftab[iftab], type2];
  }
  function parse_PtgFuncVar(blob, length, opts) {
    var type2 = blob[blob.l++];
    var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [type2 == 88 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);
    return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
  }
  function parsetab(blob) {
    return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767];
  }
  function parse_PtgAttrSum(blob, length, opts) {
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    return;
  }
  function parse_PtgExp(blob, length, opts) {
    blob.l++;
    if (opts && opts.biff == 12)
      return [blob.read_shift(4, "i"), 0];
    var row = blob.read_shift(2);
    var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [row, col];
  }
  function parse_PtgErr(blob) {
    blob.l++;
    return BErr[blob.read_shift(1)];
  }
  function parse_PtgInt(blob) {
    blob.l++;
    return blob.read_shift(2);
  }
  function parse_PtgBool(blob) {
    blob.l++;
    return blob.read_shift(1) !== 0;
  }
  function parse_PtgNum(blob) {
    blob.l++;
    return parse_Xnum(blob);
  }
  function parse_PtgStr(blob, length, opts) {
    blob.l++;
    return parse_ShortXLUnicodeString(blob, length - 1, opts);
  }
  function parse_SerAr(blob, biff) {
    var val = [blob.read_shift(1)];
    if (biff == 12)
      switch (val[0]) {
        case 2:
          val[0] = 4;
          break;
        case 4:
          val[0] = 16;
          break;
        case 0:
          val[0] = 1;
          break;
        case 1:
          val[0] = 2;
          break;
      }
    switch (val[0]) {
      case 4:
        val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
        if (biff != 12)
          blob.l += 7;
        break;
      case 37:
      case 16:
        val[1] = BErr[blob[blob.l]];
        blob.l += biff == 12 ? 4 : 8;
        break;
      case 0:
        blob.l += 8;
        break;
      case 1:
        val[1] = parse_Xnum(blob);
        break;
      case 2:
        val[1] = parse_XLUnicodeString2(blob, 0, { biff: biff > 0 && biff < 8 ? 2 : biff });
        break;
      default:
        throw new Error("Bad SerAr: " + val[0]);
    }
    return val;
  }
  function parse_PtgExtraMem(blob, cce, opts) {
    var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
    var out = [];
    for (var i2 = 0; i2 != count; ++i2)
      out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob));
    return out;
  }
  function parse_PtgExtraArray(blob, length, opts) {
    var rows = 0, cols = 0;
    if (opts.biff == 12) {
      rows = blob.read_shift(4);
      cols = blob.read_shift(4);
    } else {
      cols = 1 + blob.read_shift(1);
      rows = 1 + blob.read_shift(2);
    }
    if (opts.biff >= 2 && opts.biff < 8) {
      --rows;
      if (--cols == 0)
        cols = 256;
    }
    for (var i2 = 0, o2 = []; i2 != rows && (o2[i2] = []); ++i2)
      for (var j2 = 0; j2 != cols; ++j2)
        o2[i2][j2] = parse_SerAr(blob, opts.biff);
    return o2;
  }
  function parse_PtgName(blob, length, opts) {
    var type2 = blob.read_shift(1) >>> 5 & 3;
    var w2 = !opts || opts.biff >= 8 ? 4 : 2;
    var nameindex = blob.read_shift(w2);
    switch (opts.biff) {
      case 2:
        blob.l += 5;
        break;
      case 3:
      case 4:
        blob.l += 8;
        break;
      case 5:
        blob.l += 12;
        break;
    }
    return [type2, 0, nameindex];
  }
  function parse_PtgNameX(blob, length, opts) {
    if (opts.biff == 5)
      return parse_PtgNameX_BIFF5(blob);
    var type2 = blob.read_shift(1) >>> 5 & 3;
    var ixti = blob.read_shift(2);
    var nameindex = blob.read_shift(4);
    return [type2, ixti, nameindex];
  }
  function parse_PtgNameX_BIFF5(blob) {
    var type2 = blob.read_shift(1) >>> 5 & 3;
    var ixti = blob.read_shift(2, "i");
    blob.l += 8;
    var nameindex = blob.read_shift(2);
    blob.l += 12;
    return [type2, ixti, nameindex];
  }
  function parse_PtgMemArea(blob, length, opts) {
    var type2 = blob.read_shift(1) >>> 5 & 3;
    blob.l += opts && opts.biff == 2 ? 3 : 4;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [type2, cce];
  }
  function parse_PtgMemFunc(blob, length, opts) {
    var type2 = blob.read_shift(1) >>> 5 & 3;
    var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    return [type2, cce];
  }
  function parse_PtgRefErr(blob, length, opts) {
    var type2 = blob.read_shift(1) >>> 5 & 3;
    blob.l += 4;
    if (opts.biff < 8)
      blob.l--;
    if (opts.biff == 12)
      blob.l += 2;
    return [type2];
  }
  function parse_PtgRefErr3d(blob, length, opts) {
    var type2 = (blob[blob.l++] & 96) >> 5;
    var ixti = blob.read_shift(2);
    var w2 = 4;
    if (opts)
      switch (opts.biff) {
        case 5:
          w2 = 15;
          break;
        case 12:
          w2 = 6;
          break;
      }
    blob.l += w2;
    return [type2, ixti];
  }
  var parse_PtgMemErr = parsenoop;
  var parse_PtgMemNoMem = parsenoop;
  var parse_PtgTbl = parsenoop;
  function parse_PtgElfLoc(blob, length, opts) {
    blob.l += 2;
    return [parse_RgceElfLoc(blob)];
  }
  function parse_PtgElfNoop(blob) {
    blob.l += 6;
    return [];
  }
  var parse_PtgElfCol = parse_PtgElfLoc;
  var parse_PtgElfColS = parse_PtgElfNoop;
  var parse_PtgElfColSV = parse_PtgElfNoop;
  var parse_PtgElfColV = parse_PtgElfLoc;
  function parse_PtgElfLel(blob) {
    blob.l += 2;
    return [parseuint16(blob), blob.read_shift(2) & 1];
  }
  var parse_PtgElfRadical = parse_PtgElfLoc;
  var parse_PtgElfRadicalLel = parse_PtgElfLel;
  var parse_PtgElfRadicalS = parse_PtgElfNoop;
  var parse_PtgElfRw = parse_PtgElfLoc;
  var parse_PtgElfRwV = parse_PtgElfLoc;
  var PtgListRT = [
    "Data",
    "All",
    "Headers",
    "??",
    "?Data2",
    "??",
    "?DataHeaders",
    "??",
    "Totals",
    "??",
    "??",
    "??",
    "?DataTotals",
    "??",
    "??",
    "??",
    "?Current"
  ];
  function parse_PtgList(blob) {
    blob.l += 2;
    var ixti = blob.read_shift(2);
    var flags = blob.read_shift(2);
    var idx = blob.read_shift(4);
    var c2 = blob.read_shift(2);
    var C2 = blob.read_shift(2);
    var rt2 = PtgListRT[flags >> 2 & 31];
    return { ixti, coltype: flags & 3, rt: rt2, idx, c: c2, C: C2 };
  }
  function parse_PtgSxName(blob) {
    blob.l += 2;
    return [blob.read_shift(4)];
  }
  function parse_PtgSheet(blob, length, opts) {
    blob.l += 5;
    blob.l += 2;
    blob.l += opts.biff == 2 ? 1 : 4;
    return ["PTGSHEET"];
  }
  function parse_PtgEndSheet(blob, length, opts) {
    blob.l += opts.biff == 2 ? 4 : 5;
    return ["PTGENDSHEET"];
  }
  function parse_PtgMemAreaN(blob) {
    var type2 = blob.read_shift(1) >>> 5 & 3;
    var cce = blob.read_shift(2);
    return [type2, cce];
  }
  function parse_PtgMemNoMemN(blob) {
    var type2 = blob.read_shift(1) >>> 5 & 3;
    var cce = blob.read_shift(2);
    return [type2, cce];
  }
  function parse_PtgAttrNoop(blob) {
    blob.l += 4;
    return [0, 0];
  }
  var PtgTypes = {
    /*::[*/
    1: { n: "PtgExp", f: parse_PtgExp },
    /*::[*/
    2: { n: "PtgTbl", f: parse_PtgTbl },
    /*::[*/
    3: { n: "PtgAdd", f: parseread1 },
    /*::[*/
    4: { n: "PtgSub", f: parseread1 },
    /*::[*/
    5: { n: "PtgMul", f: parseread1 },
    /*::[*/
    6: { n: "PtgDiv", f: parseread1 },
    /*::[*/
    7: { n: "PtgPower", f: parseread1 },
    /*::[*/
    8: { n: "PtgConcat", f: parseread1 },
    /*::[*/
    9: { n: "PtgLt", f: parseread1 },
    /*::[*/
    10: { n: "PtgLe", f: parseread1 },
    /*::[*/
    11: { n: "PtgEq", f: parseread1 },
    /*::[*/
    12: { n: "PtgGe", f: parseread1 },
    /*::[*/
    13: { n: "PtgGt", f: parseread1 },
    /*::[*/
    14: { n: "PtgNe", f: parseread1 },
    /*::[*/
    15: { n: "PtgIsect", f: parseread1 },
    /*::[*/
    16: { n: "PtgUnion", f: parseread1 },
    /*::[*/
    17: { n: "PtgRange", f: parseread1 },
    /*::[*/
    18: { n: "PtgUplus", f: parseread1 },
    /*::[*/
    19: { n: "PtgUminus", f: parseread1 },
    /*::[*/
    20: { n: "PtgPercent", f: parseread1 },
    /*::[*/
    21: { n: "PtgParen", f: parseread1 },
    /*::[*/
    22: { n: "PtgMissArg", f: parseread1 },
    /*::[*/
    23: { n: "PtgStr", f: parse_PtgStr },
    /*::[*/
    26: { n: "PtgSheet", f: parse_PtgSheet },
    /*::[*/
    27: { n: "PtgEndSheet", f: parse_PtgEndSheet },
    /*::[*/
    28: { n: "PtgErr", f: parse_PtgErr },
    /*::[*/
    29: { n: "PtgBool", f: parse_PtgBool },
    /*::[*/
    30: { n: "PtgInt", f: parse_PtgInt },
    /*::[*/
    31: { n: "PtgNum", f: parse_PtgNum },
    /*::[*/
    32: { n: "PtgArray", f: parse_PtgArray },
    /*::[*/
    33: { n: "PtgFunc", f: parse_PtgFunc },
    /*::[*/
    34: { n: "PtgFuncVar", f: parse_PtgFuncVar },
    /*::[*/
    35: { n: "PtgName", f: parse_PtgName },
    /*::[*/
    36: { n: "PtgRef", f: parse_PtgRef },
    /*::[*/
    37: { n: "PtgArea", f: parse_PtgArea },
    /*::[*/
    38: { n: "PtgMemArea", f: parse_PtgMemArea },
    /*::[*/
    39: { n: "PtgMemErr", f: parse_PtgMemErr },
    /*::[*/
    40: { n: "PtgMemNoMem", f: parse_PtgMemNoMem },
    /*::[*/
    41: { n: "PtgMemFunc", f: parse_PtgMemFunc },
    /*::[*/
    42: { n: "PtgRefErr", f: parse_PtgRefErr },
    /*::[*/
    43: { n: "PtgAreaErr", f: parse_PtgAreaErr },
    /*::[*/
    44: { n: "PtgRefN", f: parse_PtgRefN },
    /*::[*/
    45: { n: "PtgAreaN", f: parse_PtgAreaN },
    /*::[*/
    46: { n: "PtgMemAreaN", f: parse_PtgMemAreaN },
    /*::[*/
    47: { n: "PtgMemNoMemN", f: parse_PtgMemNoMemN },
    /*::[*/
    57: { n: "PtgNameX", f: parse_PtgNameX },
    /*::[*/
    58: { n: "PtgRef3d", f: parse_PtgRef3d },
    /*::[*/
    59: { n: "PtgArea3d", f: parse_PtgArea3d },
    /*::[*/
    60: { n: "PtgRefErr3d", f: parse_PtgRefErr3d },
    /*::[*/
    61: { n: "PtgAreaErr3d", f: parse_PtgAreaErr3d },
    /*::[*/
    255: {}
  };
  var PtgDupes = {
    /*::[*/
    64: 32,
    /*::[*/
    96: 32,
    /*::[*/
    65: 33,
    /*::[*/
    97: 33,
    /*::[*/
    66: 34,
    /*::[*/
    98: 34,
    /*::[*/
    67: 35,
    /*::[*/
    99: 35,
    /*::[*/
    68: 36,
    /*::[*/
    100: 36,
    /*::[*/
    69: 37,
    /*::[*/
    101: 37,
    /*::[*/
    70: 38,
    /*::[*/
    102: 38,
    /*::[*/
    71: 39,
    /*::[*/
    103: 39,
    /*::[*/
    72: 40,
    /*::[*/
    104: 40,
    /*::[*/
    73: 41,
    /*::[*/
    105: 41,
    /*::[*/
    74: 42,
    /*::[*/
    106: 42,
    /*::[*/
    75: 43,
    /*::[*/
    107: 43,
    /*::[*/
    76: 44,
    /*::[*/
    108: 44,
    /*::[*/
    77: 45,
    /*::[*/
    109: 45,
    /*::[*/
    78: 46,
    /*::[*/
    110: 46,
    /*::[*/
    79: 47,
    /*::[*/
    111: 47,
    /*::[*/
    88: 34,
    /*::[*/
    120: 34,
    /*::[*/
    89: 57,
    /*::[*/
    121: 57,
    /*::[*/
    90: 58,
    /*::[*/
    122: 58,
    /*::[*/
    91: 59,
    /*::[*/
    123: 59,
    /*::[*/
    92: 60,
    /*::[*/
    124: 60,
    /*::[*/
    93: 61,
    /*::[*/
    125: 61
  };
  var Ptg18 = {
    /*::[*/
    1: { n: "PtgElfLel", f: parse_PtgElfLel },
    /*::[*/
    2: { n: "PtgElfRw", f: parse_PtgElfRw },
    /*::[*/
    3: { n: "PtgElfCol", f: parse_PtgElfCol },
    /*::[*/
    6: { n: "PtgElfRwV", f: parse_PtgElfRwV },
    /*::[*/
    7: { n: "PtgElfColV", f: parse_PtgElfColV },
    /*::[*/
    10: { n: "PtgElfRadical", f: parse_PtgElfRadical },
    /*::[*/
    11: { n: "PtgElfRadicalS", f: parse_PtgElfRadicalS },
    /*::[*/
    13: { n: "PtgElfColS", f: parse_PtgElfColS },
    /*::[*/
    15: { n: "PtgElfColSV", f: parse_PtgElfColSV },
    /*::[*/
    16: { n: "PtgElfRadicalLel", f: parse_PtgElfRadicalLel },
    /*::[*/
    25: { n: "PtgList", f: parse_PtgList },
    /*::[*/
    29: { n: "PtgSxName", f: parse_PtgSxName },
    /*::[*/
    255: {}
  };
  var Ptg19 = {
    /*::[*/
    0: { n: "PtgAttrNoop", f: parse_PtgAttrNoop },
    /*::[*/
    1: { n: "PtgAttrSemi", f: parse_PtgAttrSemi },
    /*::[*/
    2: { n: "PtgAttrIf", f: parse_PtgAttrIf },
    /*::[*/
    4: { n: "PtgAttrChoose", f: parse_PtgAttrChoose },
    /*::[*/
    8: { n: "PtgAttrGoto", f: parse_PtgAttrGoto },
    /*::[*/
    16: { n: "PtgAttrSum", f: parse_PtgAttrSum },
    /*::[*/
    32: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
    /*::[*/
    33: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
    /*::[*/
    64: { n: "PtgAttrSpace", f: parse_PtgAttrSpace },
    /*::[*/
    65: { n: "PtgAttrSpaceSemi", f: parse_PtgAttrSpaceSemi },
    /*::[*/
    128: { n: "PtgAttrIfError", f: parse_PtgAttrIfError },
    /*::[*/
    255: {}
  };
  function parse_RgbExtra(blob, length, rgce, opts) {
    if (opts.biff < 8)
      return parsenoop(blob, length);
    var target = blob.l + length;
    var o2 = [];
    for (var i2 = 0; i2 !== rgce.length; ++i2) {
      switch (rgce[i2][0]) {
        case "PtgArray":
          rgce[i2][1] = parse_PtgExtraArray(blob, 0, opts);
          o2.push(rgce[i2][1]);
          break;
        case "PtgMemArea":
          rgce[i2][2] = parse_PtgExtraMem(blob, rgce[i2][1], opts);
          o2.push(rgce[i2][2]);
          break;
        case "PtgExp":
          if (opts && opts.biff == 12) {
            rgce[i2][1][1] = blob.read_shift(4);
            o2.push(rgce[i2][1]);
          }
          break;
        case "PtgList":
        case "PtgElfRadicalS":
        case "PtgElfColS":
        case "PtgElfColSV":
          throw "Unsupported " + rgce[i2][0];
      }
    }
    length = target - blob.l;
    if (length !== 0)
      o2.push(parsenoop(blob, length));
    return o2;
  }
  function parse_Rgce(blob, length, opts) {
    var target = blob.l + length;
    var R2, id, ptgs = [];
    while (target != blob.l) {
      length = target - blob.l;
      id = blob[blob.l];
      R2 = PtgTypes[id] || PtgTypes[PtgDupes[id]];
      if (id === 24 || id === 25)
        R2 = (id === 24 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
      if (!R2 || !R2.f) {
        parsenoop(blob, length);
      } else {
        ptgs.push([R2.n, R2.f(blob, length, opts)]);
      }
    }
    return ptgs;
  }
  function stringify_array(f2) {
    var o2 = [];
    for (var i2 = 0; i2 < f2.length; ++i2) {
      var x = f2[i2], r2 = [];
      for (var j2 = 0; j2 < x.length; ++j2) {
        var y2 = x[j2];
        if (y2)
          switch (y2[0]) {
            case 2:
              r2.push('"' + y2[1].replace(/"/g, '""') + '"');
              break;
            default:
              r2.push(y2[1]);
          }
        else
          r2.push("");
      }
      o2.push(r2.join(","));
    }
    return o2.join(";");
  }
  var PtgBinOp = {
    PtgAdd: "+",
    PtgConcat: "&",
    PtgDiv: "/",
    PtgEq: "=",
    PtgGe: ">=",
    PtgGt: ">",
    PtgLe: "<=",
    PtgLt: "<",
    PtgMul: "*",
    PtgNe: "<>",
    PtgPower: "^",
    PtgSub: "-"
  };
  function formula_quote_sheet_name(sname, opts) {
    if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2))
      throw new Error("empty sheet name");
    if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname))
      return "'" + sname + "'";
    return sname;
  }
  function get_ixti_raw(supbooks, ixti, opts) {
    if (!supbooks)
      return "SH33TJSERR0";
    if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti]))
      return supbooks.SheetNames[ixti];
    if (!supbooks.XTI)
      return "SH33TJSERR6";
    var XTI = supbooks.XTI[ixti];
    if (opts.biff < 8) {
      if (ixti > 1e4)
        ixti -= 65536;
      if (ixti < 0)
        ixti = -ixti;
      return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
    }
    if (!XTI)
      return "SH33TJSERR1";
    var o2 = "";
    if (opts.biff > 8)
      switch (supbooks[XTI[0]][0]) {
        case 357:
          o2 = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
          return XTI[1] == XTI[2] ? o2 : o2 + ":" + supbooks.SheetNames[XTI[2]];
        case 358:
          if (opts.SID != null)
            return supbooks.SheetNames[opts.SID];
          return "SH33TJSSAME" + supbooks[XTI[0]][0];
        case 355:
        default:
          return "SH33TJSSRC" + supbooks[XTI[0]][0];
      }
    switch (supbooks[XTI[0]][0][0]) {
      case 1025:
        o2 = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
        return XTI[1] == XTI[2] ? o2 : o2 + ":" + supbooks.SheetNames[XTI[2]];
      case 14849:
        return supbooks[XTI[0]].slice(1).map(function(name) {
          return name.Name;
        }).join(";;");
      default:
        if (!supbooks[XTI[0]][0][3])
          return "SH33TJSERR2";
        o2 = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
        return XTI[1] == XTI[2] ? o2 : o2 + ":" + supbooks[XTI[0]][0][3][XTI[2]];
    }
  }
  function get_ixti(supbooks, ixti, opts) {
    var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
    return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
  }
  function stringify_formula(formula, range2, cell, supbooks, opts) {
    var biff = opts && opts.biff || 8;
    var _range = (
      /*range != null ? range :*/
      { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } }
    );
    var stack = [], e1, e2, c2, ixti = 0, nameidx = 0, r2, sname = "";
    if (!formula[0] || !formula[0][0])
      return "";
    var last_sp = -1, sp = "";
    for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
      var f2 = formula[0][ff];
      switch (f2[0]) {
        case "PtgUminus":
          stack.push("-" + stack.pop());
          break;
        case "PtgUplus":
          stack.push("+" + stack.pop());
          break;
        case "PtgPercent":
          stack.push(stack.pop() + "%");
          break;
        case "PtgAdd":
        case "PtgConcat":
        case "PtgDiv":
        case "PtgEq":
        case "PtgGe":
        case "PtgGt":
        case "PtgLe":
        case "PtgLt":
        case "PtgMul":
        case "PtgNe":
        case "PtgPower":
        case "PtgSub":
          e1 = stack.pop();
          e2 = stack.pop();
          if (last_sp >= 0) {
            switch (formula[0][last_sp][1][0]) {
              case 0:
                sp = fill(" ", formula[0][last_sp][1][1]);
                break;
              case 1:
                sp = fill("\r", formula[0][last_sp][1][1]);
                break;
              default:
                sp = "";
                if (opts.WTF)
                  throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
            }
            e2 = e2 + sp;
            last_sp = -1;
          }
          stack.push(e2 + PtgBinOp[f2[0]] + e1);
          break;
        case "PtgIsect":
          e1 = stack.pop();
          e2 = stack.pop();
          stack.push(e2 + " " + e1);
          break;
        case "PtgUnion":
          e1 = stack.pop();
          e2 = stack.pop();
          stack.push(e2 + "," + e1);
          break;
        case "PtgRange":
          e1 = stack.pop();
          e2 = stack.pop();
          stack.push(e2 + ":" + e1);
          break;
        case "PtgAttrChoose":
          break;
        case "PtgAttrGoto":
          break;
        case "PtgAttrIf":
          break;
        case "PtgAttrIfError":
          break;
        case "PtgRef":
          c2 = shift_cell_xls(f2[1][1], _range, opts);
          stack.push(encode_cell_xls(c2, biff));
          break;
        case "PtgRefN":
          c2 = cell ? shift_cell_xls(f2[1][1], cell, opts) : f2[1][1];
          stack.push(encode_cell_xls(c2, biff));
          break;
        case "PtgRef3d":
          ixti = /*::Number(*/
          f2[1][1];
          c2 = shift_cell_xls(f2[1][2], _range, opts);
          sname = get_ixti(supbooks, ixti, opts);
          stack.push(sname + "!" + encode_cell_xls(c2, biff));
          break;
        case "PtgFunc":
        case "PtgFuncVar":
          var argc = f2[1][0], func2 = f2[1][1];
          if (!argc)
            argc = 0;
          argc &= 127;
          var args = argc == 0 ? [] : stack.slice(-argc);
          stack.length -= argc;
          if (func2 === "User")
            func2 = args.shift();
          stack.push(func2 + "(" + args.join(",") + ")");
          break;
        case "PtgBool":
          stack.push(f2[1] ? "TRUE" : "FALSE");
          break;
        case "PtgInt":
          stack.push(
            /*::String(*/
            f2[1]
            /*::)*/
          );
          break;
        case "PtgNum":
          stack.push(String(f2[1]));
          break;
        case "PtgStr":
          stack.push('"' + f2[1].replace(/"/g, '""') + '"');
          break;
        case "PtgErr":
          stack.push(
            /*::String(*/
            f2[1]
            /*::)*/
          );
          break;
        case "PtgAreaN":
          r2 = shift_range_xls(f2[1][1], cell ? { s: cell } : _range, opts);
          stack.push(encode_range_xls(r2, opts));
          break;
        case "PtgArea":
          r2 = shift_range_xls(f2[1][1], _range, opts);
          stack.push(encode_range_xls(r2, opts));
          break;
        case "PtgArea3d":
          ixti = /*::Number(*/
          f2[1][1];
          r2 = f2[1][2];
          sname = get_ixti(supbooks, ixti, opts);
          stack.push(sname + "!" + encode_range_xls(r2, opts));
          break;
        case "PtgAttrSum":
          stack.push("SUM(" + stack.pop() + ")");
          break;
        case "PtgAttrBaxcel":
        case "PtgAttrSemi":
          break;
        case "PtgName":
          nameidx = f2[1][2];
          var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
          var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
          if (name && name.slice(0, 6) == "_xlfn." && !opts.xlfn)
            name = name.slice(6);
          stack.push(name);
          break;
        case "PtgNameX":
          var bookidx = f2[1][1];
          nameidx = f2[1][2];
          var externbook;
          if (opts.biff <= 5) {
            if (bookidx < 0)
              bookidx = -bookidx;
            if (supbooks[bookidx])
              externbook = supbooks[bookidx][nameidx];
          } else {
            var o2 = "";
            if (((supbooks[bookidx] || [])[0] || [])[0] == 14849)
              ;
            else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
              if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
                o2 = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
              }
            } else
              o2 = supbooks.SheetNames[nameidx - 1] + "!";
            if (supbooks[bookidx] && supbooks[bookidx][nameidx])
              o2 += supbooks[bookidx][nameidx].Name;
            else if (supbooks[0] && supbooks[0][nameidx])
              o2 += supbooks[0][nameidx].Name;
            else {
              var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
              if (ixtidata[nameidx - 1])
                o2 = ixtidata[nameidx - 1];
              else
                o2 += "SH33TJSERRX";
            }
            stack.push(o2);
            break;
          }
          if (!externbook)
            externbook = { Name: "SH33TJSERRY" };
          stack.push(externbook.Name);
          break;
        case "PtgParen":
          var lp = "(", rp = ")";
          if (last_sp >= 0) {
            sp = "";
            switch (formula[0][last_sp][1][0]) {
              case 2:
                lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                break;
              case 3:
                lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                break;
              case 4:
                rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                break;
              case 5:
                rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                break;
              default:
                if (opts.WTF)
                  throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
            }
            last_sp = -1;
          }
          stack.push(lp + stack.pop() + rp);
          break;
        case "PtgRefErr":
          stack.push("#REF!");
          break;
        case "PtgRefErr3d":
          stack.push("#REF!");
          break;
        case "PtgExp":
          c2 = { c: f2[1][1], r: f2[1][0] };
          var q2 = { c: cell.c, r: cell.r };
          if (supbooks.sharedf[encode_cell(c2)]) {
            var parsedf = supbooks.sharedf[encode_cell(c2)];
            stack.push(stringify_formula(parsedf, _range, q2, supbooks, opts));
          } else {
            var fnd = false;
            for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
              e2 = supbooks.arrayf[e1];
              if (c2.c < e2[0].s.c || c2.c > e2[0].e.c)
                continue;
              if (c2.r < e2[0].s.r || c2.r > e2[0].e.r)
                continue;
              stack.push(stringify_formula(e2[1], _range, q2, supbooks, opts));
              fnd = true;
              break;
            }
            if (!fnd)
              stack.push(
                /*::String(*/
                f2[1]
                /*::)*/
              );
          }
          break;
        case "PtgArray":
          stack.push("{" + stringify_array(
            /*::(*/
            f2[1]
            /*:: :any)*/
          ) + "}");
          break;
        case "PtgMemArea":
          break;
        case "PtgAttrSpace":
        case "PtgAttrSpaceSemi":
          last_sp = ff;
          break;
        case "PtgTbl":
          break;
        case "PtgMemErr":
          break;
        case "PtgMissArg":
          stack.push("");
          break;
        case "PtgAreaErr":
          stack.push("#REF!");
          break;
        case "PtgAreaErr3d":
          stack.push("#REF!");
          break;
        case "PtgList":
          stack.push("Table" + f2[1].idx + "[#" + f2[1].rt + "]");
          break;
        case "PtgMemAreaN":
        case "PtgMemNoMemN":
        case "PtgAttrNoop":
        case "PtgSheet":
        case "PtgEndSheet":
          break;
        case "PtgMemFunc":
          break;
        case "PtgMemNoMem":
          break;
        case "PtgElfCol":
        case "PtgElfColS":
        case "PtgElfColSV":
        case "PtgElfColV":
        case "PtgElfLel":
        case "PtgElfRadical":
        case "PtgElfRadicalLel":
        case "PtgElfRadicalS":
        case "PtgElfRw":
        case "PtgElfRwV":
          throw new Error("Unsupported ELFs");
        case "PtgSxName":
          throw new Error("Unrecognized Formula Token: " + String(f2));
        default:
          throw new Error("Unrecognized Formula Token: " + String(f2));
      }
      var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"];
      if (opts.biff != 3) {
        if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
          f2 = formula[0][last_sp];
          var _left = true;
          switch (f2[1][0]) {
            case 4:
              _left = false;
            case 0:
              sp = fill(" ", f2[1][1]);
              break;
            case 5:
              _left = false;
            case 1:
              sp = fill("\r", f2[1][1]);
              break;
            default:
              sp = "";
              if (opts.WTF)
                throw new Error("Unexpected PtgAttrSpaceType " + f2[1][0]);
          }
          stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
          last_sp = -1;
        }
      }
    }
    if (stack.length > 1 && opts.WTF)
      throw new Error("bad formula stack");
    return stack[0];
  }
  function parse_ArrayParsedFormula(blob, length, opts) {
    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    var rgcb, cce = blob.read_shift(len);
    if (cce == 65535)
      return [[], parsenoop(blob, length - 2)];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len)
      rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [rgce, rgcb];
  }
  function parse_XLSCellParsedFormula(blob, length, opts) {
    var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    var rgcb, cce = blob.read_shift(len);
    if (cce == 65535)
      return [[], parsenoop(blob, length - 2)];
    var rgce = parse_Rgce(blob, cce, opts);
    if (length !== cce + len)
      rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    blob.l = target;
    return [rgce, rgcb];
  }
  function parse_NameParsedFormula(blob, length, opts, cce) {
    var target = blob.l + length;
    var rgce = parse_Rgce(blob, cce, opts);
    var rgcb;
    if (target !== blob.l)
      rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
    return [rgce, rgcb];
  }
  function parse_SharedParsedFormula(blob, length, opts) {
    var target = blob.l + length;
    var rgcb, cce = blob.read_shift(2);
    var rgce = parse_Rgce(blob, cce, opts);
    if (cce == 65535)
      return [[], parsenoop(blob, length - 2)];
    if (length !== cce + 2)
      rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
    return [rgce, rgcb];
  }
  function parse_FormulaValue(blob) {
    var b2;
    if (__readUInt16LE(blob, blob.l + 6) !== 65535)
      return [parse_Xnum(blob), "n"];
    switch (blob[blob.l]) {
      case 0:
        blob.l += 8;
        return ["String", "s"];
      case 1:
        b2 = blob[blob.l + 2] === 1;
        blob.l += 8;
        return [b2, "b"];
      case 2:
        b2 = blob[blob.l + 2];
        blob.l += 8;
        return [b2, "e"];
      case 3:
        blob.l += 8;
        return ["", "s"];
    }
    return [];
  }
  function parse_Formula(blob, length, opts) {
    var end = blob.l + length;
    var cell = parse_XLSCell(blob);
    if (opts.biff == 2)
      ++blob.l;
    var val = parse_FormulaValue(blob);
    var flags = blob.read_shift(1);
    if (opts.biff != 2) {
      blob.read_shift(1);
      if (opts.biff >= 5) {
        blob.read_shift(4);
      }
    }
    var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
    return { cell, val: val[0], formula: cbf, shared: flags >> 3 & 1, tt: val[1] };
  }
  function parse_XLSBParsedFormula(data, length, opts) {
    var cce = data.read_shift(4);
    var rgce = parse_Rgce(data, cce, opts);
    var cb = data.read_shift(4);
    var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
    return [rgce, rgcb];
  }
  var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
  var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
  var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
  var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
  var Cetab = {
    0: "BEEP",
    1: "OPEN",
    2: "OPEN.LINKS",
    3: "CLOSE.ALL",
    4: "SAVE",
    5: "SAVE.AS",
    6: "FILE.DELETE",
    7: "PAGE.SETUP",
    8: "PRINT",
    9: "PRINTER.SETUP",
    10: "QUIT",
    11: "NEW.WINDOW",
    12: "ARRANGE.ALL",
    13: "WINDOW.SIZE",
    14: "WINDOW.MOVE",
    15: "FULL",
    16: "CLOSE",
    17: "RUN",
    22: "SET.PRINT.AREA",
    23: "SET.PRINT.TITLES",
    24: "SET.PAGE.BREAK",
    25: "REMOVE.PAGE.BREAK",
    26: "FONT",
    27: "DISPLAY",
    28: "PROTECT.DOCUMENT",
    29: "PRECISION",
    30: "A1.R1C1",
    31: "CALCULATE.NOW",
    32: "CALCULATION",
    34: "DATA.FIND",
    35: "EXTRACT",
    36: "DATA.DELETE",
    37: "SET.DATABASE",
    38: "SET.CRITERIA",
    39: "SORT",
    40: "DATA.SERIES",
    41: "TABLE",
    42: "FORMAT.NUMBER",
    43: "ALIGNMENT",
    44: "STYLE",
    45: "BORDER",
    46: "CELL.PROTECTION",
    47: "COLUMN.WIDTH",
    48: "UNDO",
    49: "CUT",
    50: "COPY",
    51: "PASTE",
    52: "CLEAR",
    53: "PASTE.SPECIAL",
    54: "EDIT.DELETE",
    55: "INSERT",
    56: "FILL.RIGHT",
    57: "FILL.DOWN",
    61: "DEFINE.NAME",
    62: "CREATE.NAMES",
    63: "FORMULA.GOTO",
    64: "FORMULA.FIND",
    65: "SELECT.LAST.CELL",
    66: "SHOW.ACTIVE.CELL",
    67: "GALLERY.AREA",
    68: "GALLERY.BAR",
    69: "GALLERY.COLUMN",
    70: "GALLERY.LINE",
    71: "GALLERY.PIE",
    72: "GALLERY.SCATTER",
    73: "COMBINATION",
    74: "PREFERRED",
    75: "ADD.OVERLAY",
    76: "GRIDLINES",
    77: "SET.PREFERRED",
    78: "AXES",
    79: "LEGEND",
    80: "ATTACH.TEXT",
    81: "ADD.ARROW",
    82: "SELECT.CHART",
    83: "SELECT.PLOT.AREA",
    84: "PATTERNS",
    85: "MAIN.CHART",
    86: "OVERLAY",
    87: "SCALE",
    88: "FORMAT.LEGEND",
    89: "FORMAT.TEXT",
    90: "EDIT.REPEAT",
    91: "PARSE",
    92: "JUSTIFY",
    93: "HIDE",
    94: "UNHIDE",
    95: "WORKSPACE",
    96: "FORMULA",
    97: "FORMULA.FILL",
    98: "FORMULA.ARRAY",
    99: "DATA.FIND.NEXT",
    100: "DATA.FIND.PREV",
    101: "FORMULA.FIND.NEXT",
    102: "FORMULA.FIND.PREV",
    103: "ACTIVATE",
    104: "ACTIVATE.NEXT",
    105: "ACTIVATE.PREV",
    106: "UNLOCKED.NEXT",
    107: "UNLOCKED.PREV",
    108: "COPY.PICTURE",
    109: "SELECT",
    110: "DELETE.NAME",
    111: "DELETE.FORMAT",
    112: "VLINE",
    113: "HLINE",
    114: "VPAGE",
    115: "HPAGE",
    116: "VSCROLL",
    117: "HSCROLL",
    118: "ALERT",
    119: "NEW",
    120: "CANCEL.COPY",
    121: "SHOW.CLIPBOARD",
    122: "MESSAGE",
    124: "PASTE.LINK",
    125: "APP.ACTIVATE",
    126: "DELETE.ARROW",
    127: "ROW.HEIGHT",
    128: "FORMAT.MOVE",
    129: "FORMAT.SIZE",
    130: "FORMULA.REPLACE",
    131: "SEND.KEYS",
    132: "SELECT.SPECIAL",
    133: "APPLY.NAMES",
    134: "REPLACE.FONT",
    135: "FREEZE.PANES",
    136: "SHOW.INFO",
    137: "SPLIT",
    138: "ON.WINDOW",
    139: "ON.DATA",
    140: "DISABLE.INPUT",
    142: "OUTLINE",
    143: "LIST.NAMES",
    144: "FILE.CLOSE",
    145: "SAVE.WORKBOOK",
    146: "DATA.FORM",
    147: "COPY.CHART",
    148: "ON.TIME",
    149: "WAIT",
    150: "FORMAT.FONT",
    151: "FILL.UP",
    152: "FILL.LEFT",
    153: "DELETE.OVERLAY",
    155: "SHORT.MENUS",
    159: "SET.UPDATE.STATUS",
    161: "COLOR.PALETTE",
    162: "DELETE.STYLE",
    163: "WINDOW.RESTORE",
    164: "WINDOW.MAXIMIZE",
    166: "CHANGE.LINK",
    167: "CALCULATE.DOCUMENT",
    168: "ON.KEY",
    169: "APP.RESTORE",
    170: "APP.MOVE",
    171: "APP.SIZE",
    172: "APP.MINIMIZE",
    173: "APP.MAXIMIZE",
    174: "BRING.TO.FRONT",
    175: "SEND.TO.BACK",
    185: "MAIN.CHART.TYPE",
    186: "OVERLAY.CHART.TYPE",
    187: "SELECT.END",
    188: "OPEN.MAIL",
    189: "SEND.MAIL",
    190: "STANDARD.FONT",
    191: "CONSOLIDATE",
    192: "SORT.SPECIAL",
    193: "GALLERY.3D.AREA",
    194: "GALLERY.3D.COLUMN",
    195: "GALLERY.3D.LINE",
    196: "GALLERY.3D.PIE",
    197: "VIEW.3D",
    198: "GOAL.SEEK",
    199: "WORKGROUP",
    200: "FILL.GROUP",
    201: "UPDATE.LINK",
    202: "PROMOTE",
    203: "DEMOTE",
    204: "SHOW.DETAIL",
    206: "UNGROUP",
    207: "OBJECT.PROPERTIES",
    208: "SAVE.NEW.OBJECT",
    209: "SHARE",
    210: "SHARE.NAME",
    211: "DUPLICATE",
    212: "APPLY.STYLE",
    213: "ASSIGN.TO.OBJECT",
    214: "OBJECT.PROTECTION",
    215: "HIDE.OBJECT",
    216: "SET.EXTRACT",
    217: "CREATE.PUBLISHER",
    218: "SUBSCRIBE.TO",
    219: "ATTRIBUTES",
    220: "SHOW.TOOLBAR",
    222: "PRINT.PREVIEW",
    223: "EDIT.COLOR",
    224: "SHOW.LEVELS",
    225: "FORMAT.MAIN",
    226: "FORMAT.OVERLAY",
    227: "ON.RECALC",
    228: "EDIT.SERIES",
    229: "DEFINE.STYLE",
    240: "LINE.PRINT",
    243: "ENTER.DATA",
    249: "GALLERY.RADAR",
    250: "MERGE.STYLES",
    251: "EDITION.OPTIONS",
    252: "PASTE.PICTURE",
    253: "PASTE.PICTURE.LINK",
    254: "SPELLING",
    256: "ZOOM",
    259: "INSERT.OBJECT",
    260: "WINDOW.MINIMIZE",
    265: "SOUND.NOTE",
    266: "SOUND.PLAY",
    267: "FORMAT.SHAPE",
    268: "EXTEND.POLYGON",
    269: "FORMAT.AUTO",
    272: "GALLERY.3D.BAR",
    273: "GALLERY.3D.SURFACE",
    274: "FILL.AUTO",
    276: "CUSTOMIZE.TOOLBAR",
    277: "ADD.TOOL",
    278: "EDIT.OBJECT",
    279: "ON.DOUBLECLICK",
    280: "ON.ENTRY",
    281: "WORKBOOK.ADD",
    282: "WORKBOOK.MOVE",
    283: "WORKBOOK.COPY",
    284: "WORKBOOK.OPTIONS",
    285: "SAVE.WORKSPACE",
    288: "CHART.WIZARD",
    289: "DELETE.TOOL",
    290: "MOVE.TOOL",
    291: "WORKBOOK.SELECT",
    292: "WORKBOOK.ACTIVATE",
    293: "ASSIGN.TO.TOOL",
    295: "COPY.TOOL",
    296: "RESET.TOOL",
    297: "CONSTRAIN.NUMERIC",
    298: "PASTE.TOOL",
    302: "WORKBOOK.NEW",
    305: "SCENARIO.CELLS",
    306: "SCENARIO.DELETE",
    307: "SCENARIO.ADD",
    308: "SCENARIO.EDIT",
    309: "SCENARIO.SHOW",
    310: "SCENARIO.SHOW.NEXT",
    311: "SCENARIO.SUMMARY",
    312: "PIVOT.TABLE.WIZARD",
    313: "PIVOT.FIELD.PROPERTIES",
    314: "PIVOT.FIELD",
    315: "PIVOT.ITEM",
    316: "PIVOT.ADD.FIELDS",
    318: "OPTIONS.CALCULATION",
    319: "OPTIONS.EDIT",
    320: "OPTIONS.VIEW",
    321: "ADDIN.MANAGER",
    322: "MENU.EDITOR",
    323: "ATTACH.TOOLBARS",
    324: "VBAActivate",
    325: "OPTIONS.CHART",
    328: "VBA.INSERT.FILE",
    330: "VBA.PROCEDURE.DEFINITION",
    336: "ROUTING.SLIP",
    338: "ROUTE.DOCUMENT",
    339: "MAIL.LOGON",
    342: "INSERT.PICTURE",
    343: "EDIT.TOOL",
    344: "GALLERY.DOUGHNUT",
    350: "CHART.TREND",
    352: "PIVOT.ITEM.PROPERTIES",
    354: "WORKBOOK.INSERT",
    355: "OPTIONS.TRANSITION",
    356: "OPTIONS.GENERAL",
    370: "FILTER.ADVANCED",
    373: "MAIL.ADD.MAILER",
    374: "MAIL.DELETE.MAILER",
    375: "MAIL.REPLY",
    376: "MAIL.REPLY.ALL",
    377: "MAIL.FORWARD",
    378: "MAIL.NEXT.LETTER",
    379: "DATA.LABEL",
    380: "INSERT.TITLE",
    381: "FONT.PROPERTIES",
    382: "MACRO.OPTIONS",
    383: "WORKBOOK.HIDE",
    384: "WORKBOOK.UNHIDE",
    385: "WORKBOOK.DELETE",
    386: "WORKBOOK.NAME",
    388: "GALLERY.CUSTOM",
    390: "ADD.CHART.AUTOFORMAT",
    391: "DELETE.CHART.AUTOFORMAT",
    392: "CHART.ADD.DATA",
    393: "AUTO.OUTLINE",
    394: "TAB.ORDER",
    395: "SHOW.DIALOG",
    396: "SELECT.ALL",
    397: "UNGROUP.SHEETS",
    398: "SUBTOTAL.CREATE",
    399: "SUBTOTAL.REMOVE",
    400: "RENAME.OBJECT",
    412: "WORKBOOK.SCROLL",
    413: "WORKBOOK.NEXT",
    414: "WORKBOOK.PREV",
    415: "WORKBOOK.TAB.SPLIT",
    416: "FULL.SCREEN",
    417: "WORKBOOK.PROTECT",
    420: "SCROLLBAR.PROPERTIES",
    421: "PIVOT.SHOW.PAGES",
    422: "TEXT.TO.COLUMNS",
    423: "FORMAT.CHARTTYPE",
    424: "LINK.FORMAT",
    425: "TRACER.DISPLAY",
    430: "TRACER.NAVIGATE",
    431: "TRACER.CLEAR",
    432: "TRACER.ERROR",
    433: "PIVOT.FIELD.GROUP",
    434: "PIVOT.FIELD.UNGROUP",
    435: "CHECKBOX.PROPERTIES",
    436: "LABEL.PROPERTIES",
    437: "LISTBOX.PROPERTIES",
    438: "EDITBOX.PROPERTIES",
    439: "PIVOT.REFRESH",
    440: "LINK.COMBO",
    441: "OPEN.TEXT",
    442: "HIDE.DIALOG",
    443: "SET.DIALOG.FOCUS",
    444: "ENABLE.OBJECT",
    445: "PUSHBUTTON.PROPERTIES",
    446: "SET.DIALOG.DEFAULT",
    447: "FILTER",
    448: "FILTER.SHOW.ALL",
    449: "CLEAR.OUTLINE",
    450: "FUNCTION.WIZARD",
    451: "ADD.LIST.ITEM",
    452: "SET.LIST.ITEM",
    453: "REMOVE.LIST.ITEM",
    454: "SELECT.LIST.ITEM",
    455: "SET.CONTROL.VALUE",
    456: "SAVE.COPY.AS",
    458: "OPTIONS.LISTS.ADD",
    459: "OPTIONS.LISTS.DELETE",
    460: "SERIES.AXES",
    461: "SERIES.X",
    462: "SERIES.Y",
    463: "ERRORBAR.X",
    464: "ERRORBAR.Y",
    465: "FORMAT.CHART",
    466: "SERIES.ORDER",
    467: "MAIL.LOGOFF",
    468: "CLEAR.ROUTING.SLIP",
    469: "APP.ACTIVATE.MICROSOFT",
    470: "MAIL.EDIT.MAILER",
    471: "ON.SHEET",
    472: "STANDARD.WIDTH",
    473: "SCENARIO.MERGE",
    474: "SUMMARY.INFO",
    475: "FIND.FILE",
    476: "ACTIVE.CELL.FONT",
    477: "ENABLE.TIPWIZARD",
    478: "VBA.MAKE.ADDIN",
    480: "INSERTDATATABLE",
    481: "WORKGROUP.OPTIONS",
    482: "MAIL.SEND.MAILER",
    485: "AUTOCORRECT",
    489: "POST.DOCUMENT",
    491: "PICKLIST",
    493: "VIEW.SHOW",
    494: "VIEW.DEFINE",
    495: "VIEW.DELETE",
    509: "SHEET.BACKGROUND",
    510: "INSERT.MAP.OBJECT",
    511: "OPTIONS.MENONO",
    517: "MSOCHECKS",
    518: "NORMAL",
    519: "LAYOUT",
    520: "RM.PRINT.AREA",
    521: "CLEAR.PRINT.AREA",
    522: "ADD.PRINT.AREA",
    523: "MOVE.BRK",
    545: "HIDECURR.NOTE",
    546: "HIDEALL.NOTES",
    547: "DELETE.NOTE",
    548: "TRAVERSE.NOTES",
    549: "ACTIVATE.NOTES",
    620: "PROTECT.REVISIONS",
    621: "UNPROTECT.REVISIONS",
    647: "OPTIONS.ME",
    653: "WEB.PUBLISH",
    667: "NEWWEBQUERY",
    673: "PIVOT.TABLE.CHART",
    753: "OPTIONS.SAVE",
    755: "OPTIONS.SPELL",
    808: "HIDEALL.INKANNOTS"
  };
  var Ftab = {
    0: "COUNT",
    1: "IF",
    2: "ISNA",
    3: "ISERROR",
    4: "SUM",
    5: "AVERAGE",
    6: "MIN",
    7: "MAX",
    8: "ROW",
    9: "COLUMN",
    10: "NA",
    11: "NPV",
    12: "STDEV",
    13: "DOLLAR",
    14: "FIXED",
    15: "SIN",
    16: "COS",
    17: "TAN",
    18: "ATAN",
    19: "PI",
    20: "SQRT",
    21: "EXP",
    22: "LN",
    23: "LOG10",
    24: "ABS",
    25: "INT",
    26: "SIGN",
    27: "ROUND",
    28: "LOOKUP",
    29: "INDEX",
    30: "REPT",
    31: "MID",
    32: "LEN",
    33: "VALUE",
    34: "TRUE",
    35: "FALSE",
    36: "AND",
    37: "OR",
    38: "NOT",
    39: "MOD",
    40: "DCOUNT",
    41: "DSUM",
    42: "DAVERAGE",
    43: "DMIN",
    44: "DMAX",
    45: "DSTDEV",
    46: "VAR",
    47: "DVAR",
    48: "TEXT",
    49: "LINEST",
    50: "TREND",
    51: "LOGEST",
    52: "GROWTH",
    53: "GOTO",
    54: "HALT",
    55: "RETURN",
    56: "PV",
    57: "FV",
    58: "NPER",
    59: "PMT",
    60: "RATE",
    61: "MIRR",
    62: "IRR",
    63: "RAND",
    64: "MATCH",
    65: "DATE",
    66: "TIME",
    67: "DAY",
    68: "MONTH",
    69: "YEAR",
    70: "WEEKDAY",
    71: "HOUR",
    72: "MINUTE",
    73: "SECOND",
    74: "NOW",
    75: "AREAS",
    76: "ROWS",
    77: "COLUMNS",
    78: "OFFSET",
    79: "ABSREF",
    80: "RELREF",
    81: "ARGUMENT",
    82: "SEARCH",
    83: "TRANSPOSE",
    84: "ERROR",
    85: "STEP",
    86: "TYPE",
    87: "ECHO",
    88: "SET.NAME",
    89: "CALLER",
    90: "DEREF",
    91: "WINDOWS",
    92: "SERIES",
    93: "DOCUMENTS",
    94: "ACTIVE.CELL",
    95: "SELECTION",
    96: "RESULT",
    97: "ATAN2",
    98: "ASIN",
    99: "ACOS",
    100: "CHOOSE",
    101: "HLOOKUP",
    102: "VLOOKUP",
    103: "LINKS",
    104: "INPUT",
    105: "ISREF",
    106: "GET.FORMULA",
    107: "GET.NAME",
    108: "SET.VALUE",
    109: "LOG",
    110: "EXEC",
    111: "CHAR",
    112: "LOWER",
    113: "UPPER",
    114: "PROPER",
    115: "LEFT",
    116: "RIGHT",
    117: "EXACT",
    118: "TRIM",
    119: "REPLACE",
    120: "SUBSTITUTE",
    121: "CODE",
    122: "NAMES",
    123: "DIRECTORY",
    124: "FIND",
    125: "CELL",
    126: "ISERR",
    127: "ISTEXT",
    128: "ISNUMBER",
    129: "ISBLANK",
    130: "T",
    131: "N",
    132: "FOPEN",
    133: "FCLOSE",
    134: "FSIZE",
    135: "FREADLN",
    136: "FREAD",
    137: "FWRITELN",
    138: "FWRITE",
    139: "FPOS",
    140: "DATEVALUE",
    141: "TIMEVALUE",
    142: "SLN",
    143: "SYD",
    144: "DDB",
    145: "GET.DEF",
    146: "REFTEXT",
    147: "TEXTREF",
    148: "INDIRECT",
    149: "REGISTER",
    150: "CALL",
    151: "ADD.BAR",
    152: "ADD.MENU",
    153: "ADD.COMMAND",
    154: "ENABLE.COMMAND",
    155: "CHECK.COMMAND",
    156: "RENAME.COMMAND",
    157: "SHOW.BAR",
    158: "DELETE.MENU",
    159: "DELETE.COMMAND",
    160: "GET.CHART.ITEM",
    161: "DIALOG.BOX",
    162: "CLEAN",
    163: "MDETERM",
    164: "MINVERSE",
    165: "MMULT",
    166: "FILES",
    167: "IPMT",
    168: "PPMT",
    169: "COUNTA",
    170: "CANCEL.KEY",
    171: "FOR",
    172: "WHILE",
    173: "BREAK",
    174: "NEXT",
    175: "INITIATE",
    176: "REQUEST",
    177: "POKE",
    178: "EXECUTE",
    179: "TERMINATE",
    180: "RESTART",
    181: "HELP",
    182: "GET.BAR",
    183: "PRODUCT",
    184: "FACT",
    185: "GET.CELL",
    186: "GET.WORKSPACE",
    187: "GET.WINDOW",
    188: "GET.DOCUMENT",
    189: "DPRODUCT",
    190: "ISNONTEXT",
    191: "GET.NOTE",
    192: "NOTE",
    193: "STDEVP",
    194: "VARP",
    195: "DSTDEVP",
    196: "DVARP",
    197: "TRUNC",
    198: "ISLOGICAL",
    199: "DCOUNTA",
    200: "DELETE.BAR",
    201: "UNREGISTER",
    204: "USDOLLAR",
    205: "FINDB",
    206: "SEARCHB",
    207: "REPLACEB",
    208: "LEFTB",
    209: "RIGHTB",
    210: "MIDB",
    211: "LENB",
    212: "ROUNDUP",
    213: "ROUNDDOWN",
    214: "ASC",
    215: "DBCS",
    216: "RANK",
    219: "ADDRESS",
    220: "DAYS360",
    221: "TODAY",
    222: "VDB",
    223: "ELSE",
    224: "ELSE.IF",
    225: "END.IF",
    226: "FOR.CELL",
    227: "MEDIAN",
    228: "SUMPRODUCT",
    229: "SINH",
    230: "COSH",
    231: "TANH",
    232: "ASINH",
    233: "ACOSH",
    234: "ATANH",
    235: "DGET",
    236: "CREATE.OBJECT",
    237: "VOLATILE",
    238: "LAST.ERROR",
    239: "CUSTOM.UNDO",
    240: "CUSTOM.REPEAT",
    241: "FORMULA.CONVERT",
    242: "GET.LINK.INFO",
    243: "TEXT.BOX",
    244: "INFO",
    245: "GROUP",
    246: "GET.OBJECT",
    247: "DB",
    248: "PAUSE",
    251: "RESUME",
    252: "FREQUENCY",
    253: "ADD.TOOLBAR",
    254: "DELETE.TOOLBAR",
    255: "User",
    256: "RESET.TOOLBAR",
    257: "EVALUATE",
    258: "GET.TOOLBAR",
    259: "GET.TOOL",
    260: "SPELLING.CHECK",
    261: "ERROR.TYPE",
    262: "APP.TITLE",
    263: "WINDOW.TITLE",
    264: "SAVE.TOOLBAR",
    265: "ENABLE.TOOL",
    266: "PRESS.TOOL",
    267: "REGISTER.ID",
    268: "GET.WORKBOOK",
    269: "AVEDEV",
    270: "BETADIST",
    271: "GAMMALN",
    272: "BETAINV",
    273: "BINOMDIST",
    274: "CHIDIST",
    275: "CHIINV",
    276: "COMBIN",
    277: "CONFIDENCE",
    278: "CRITBINOM",
    279: "EVEN",
    280: "EXPONDIST",
    281: "FDIST",
    282: "FINV",
    283: "FISHER",
    284: "FISHERINV",
    285: "FLOOR",
    286: "GAMMADIST",
    287: "GAMMAINV",
    288: "CEILING",
    289: "HYPGEOMDIST",
    290: "LOGNORMDIST",
    291: "LOGINV",
    292: "NEGBINOMDIST",
    293: "NORMDIST",
    294: "NORMSDIST",
    295: "NORMINV",
    296: "NORMSINV",
    297: "STANDARDIZE",
    298: "ODD",
    299: "PERMUT",
    300: "POISSON",
    301: "TDIST",
    302: "WEIBULL",
    303: "SUMXMY2",
    304: "SUMX2MY2",
    305: "SUMX2PY2",
    306: "CHITEST",
    307: "CORREL",
    308: "COVAR",
    309: "FORECAST",
    310: "FTEST",
    311: "INTERCEPT",
    312: "PEARSON",
    313: "RSQ",
    314: "STEYX",
    315: "SLOPE",
    316: "TTEST",
    317: "PROB",
    318: "DEVSQ",
    319: "GEOMEAN",
    320: "HARMEAN",
    321: "SUMSQ",
    322: "KURT",
    323: "SKEW",
    324: "ZTEST",
    325: "LARGE",
    326: "SMALL",
    327: "QUARTILE",
    328: "PERCENTILE",
    329: "PERCENTRANK",
    330: "MODE",
    331: "TRIMMEAN",
    332: "TINV",
    334: "MOVIE.COMMAND",
    335: "GET.MOVIE",
    336: "CONCATENATE",
    337: "POWER",
    338: "PIVOT.ADD.DATA",
    339: "GET.PIVOT.TABLE",
    340: "GET.PIVOT.FIELD",
    341: "GET.PIVOT.ITEM",
    342: "RADIANS",
    343: "DEGREES",
    344: "SUBTOTAL",
    345: "SUMIF",
    346: "COUNTIF",
    347: "COUNTBLANK",
    348: "SCENARIO.GET",
    349: "OPTIONS.LISTS.GET",
    350: "ISPMT",
    351: "DATEDIF",
    352: "DATESTRING",
    353: "NUMBERSTRING",
    354: "ROMAN",
    355: "OPEN.DIALOG",
    356: "SAVE.DIALOG",
    357: "VIEW.GET",
    358: "GETPIVOTDATA",
    359: "HYPERLINK",
    360: "PHONETIC",
    361: "AVERAGEA",
    362: "MAXA",
    363: "MINA",
    364: "STDEVPA",
    365: "VARPA",
    366: "STDEVA",
    367: "VARA",
    368: "BAHTTEXT",
    369: "THAIDAYOFWEEK",
    370: "THAIDIGIT",
    371: "THAIMONTHOFYEAR",
    372: "THAINUMSOUND",
    373: "THAINUMSTRING",
    374: "THAISTRINGLENGTH",
    375: "ISTHAIDIGIT",
    376: "ROUNDBAHTDOWN",
    377: "ROUNDBAHTUP",
    378: "THAIYEAR",
    379: "RTD",
    380: "CUBEVALUE",
    381: "CUBEMEMBER",
    382: "CUBEMEMBERPROPERTY",
    383: "CUBERANKEDMEMBER",
    384: "HEX2BIN",
    385: "HEX2DEC",
    386: "HEX2OCT",
    387: "DEC2BIN",
    388: "DEC2HEX",
    389: "DEC2OCT",
    390: "OCT2BIN",
    391: "OCT2HEX",
    392: "OCT2DEC",
    393: "BIN2DEC",
    394: "BIN2OCT",
    395: "BIN2HEX",
    396: "IMSUB",
    397: "IMDIV",
    398: "IMPOWER",
    399: "IMABS",
    400: "IMSQRT",
    401: "IMLN",
    402: "IMLOG2",
    403: "IMLOG10",
    404: "IMSIN",
    405: "IMCOS",
    406: "IMEXP",
    407: "IMARGUMENT",
    408: "IMCONJUGATE",
    409: "IMAGINARY",
    410: "IMREAL",
    411: "COMPLEX",
    412: "IMSUM",
    413: "IMPRODUCT",
    414: "SERIESSUM",
    415: "FACTDOUBLE",
    416: "SQRTPI",
    417: "QUOTIENT",
    418: "DELTA",
    419: "GESTEP",
    420: "ISEVEN",
    421: "ISODD",
    422: "MROUND",
    423: "ERF",
    424: "ERFC",
    425: "BESSELJ",
    426: "BESSELK",
    427: "BESSELY",
    428: "BESSELI",
    429: "XIRR",
    430: "XNPV",
    431: "PRICEMAT",
    432: "YIELDMAT",
    433: "INTRATE",
    434: "RECEIVED",
    435: "DISC",
    436: "PRICEDISC",
    437: "YIELDDISC",
    438: "TBILLEQ",
    439: "TBILLPRICE",
    440: "TBILLYIELD",
    441: "PRICE",
    442: "YIELD",
    443: "DOLLARDE",
    444: "DOLLARFR",
    445: "NOMINAL",
    446: "EFFECT",
    447: "CUMPRINC",
    448: "CUMIPMT",
    449: "EDATE",
    450: "EOMONTH",
    451: "YEARFRAC",
    452: "COUPDAYBS",
    453: "COUPDAYS",
    454: "COUPDAYSNC",
    455: "COUPNCD",
    456: "COUPNUM",
    457: "COUPPCD",
    458: "DURATION",
    459: "MDURATION",
    460: "ODDLPRICE",
    461: "ODDLYIELD",
    462: "ODDFPRICE",
    463: "ODDFYIELD",
    464: "RANDBETWEEN",
    465: "WEEKNUM",
    466: "AMORDEGRC",
    467: "AMORLINC",
    468: "CONVERT",
    724: "SHEETJS",
    469: "ACCRINT",
    470: "ACCRINTM",
    471: "WORKDAY",
    472: "NETWORKDAYS",
    473: "GCD",
    474: "MULTINOMIAL",
    475: "LCM",
    476: "FVSCHEDULE",
    477: "CUBEKPIMEMBER",
    478: "CUBESET",
    479: "CUBESETCOUNT",
    480: "IFERROR",
    481: "COUNTIFS",
    482: "SUMIFS",
    483: "AVERAGEIF",
    484: "AVERAGEIFS"
  };
  var FtabArgc = {
    2: 1,
    3: 1,
    10: 0,
    15: 1,
    16: 1,
    17: 1,
    18: 1,
    19: 0,
    20: 1,
    21: 1,
    22: 1,
    23: 1,
    24: 1,
    25: 1,
    26: 1,
    27: 2,
    30: 2,
    31: 3,
    32: 1,
    33: 1,
    34: 0,
    35: 0,
    38: 1,
    39: 2,
    40: 3,
    41: 3,
    42: 3,
    43: 3,
    44: 3,
    45: 3,
    47: 3,
    48: 2,
    53: 1,
    61: 3,
    63: 0,
    65: 3,
    66: 3,
    67: 1,
    68: 1,
    69: 1,
    70: 1,
    71: 1,
    72: 1,
    73: 1,
    74: 0,
    75: 1,
    76: 1,
    77: 1,
    79: 2,
    80: 2,
    83: 1,
    85: 0,
    86: 1,
    89: 0,
    90: 1,
    94: 0,
    95: 0,
    97: 2,
    98: 1,
    99: 1,
    101: 3,
    102: 3,
    105: 1,
    106: 1,
    108: 2,
    111: 1,
    112: 1,
    113: 1,
    114: 1,
    117: 2,
    118: 1,
    119: 4,
    121: 1,
    126: 1,
    127: 1,
    128: 1,
    129: 1,
    130: 1,
    131: 1,
    133: 1,
    134: 1,
    135: 1,
    136: 2,
    137: 2,
    138: 2,
    140: 1,
    141: 1,
    142: 3,
    143: 4,
    144: 4,
    161: 1,
    162: 1,
    163: 1,
    164: 1,
    165: 2,
    172: 1,
    175: 2,
    176: 2,
    177: 3,
    178: 2,
    179: 1,
    184: 1,
    186: 1,
    189: 3,
    190: 1,
    195: 3,
    196: 3,
    197: 1,
    198: 1,
    199: 3,
    201: 1,
    207: 4,
    210: 3,
    211: 1,
    212: 2,
    213: 2,
    214: 1,
    215: 1,
    225: 0,
    229: 1,
    230: 1,
    231: 1,
    232: 1,
    233: 1,
    234: 1,
    235: 3,
    244: 1,
    247: 4,
    252: 2,
    257: 1,
    261: 1,
    271: 1,
    273: 4,
    274: 2,
    275: 2,
    276: 2,
    277: 3,
    278: 3,
    279: 1,
    280: 3,
    281: 3,
    282: 3,
    283: 1,
    284: 1,
    285: 2,
    286: 4,
    287: 3,
    288: 2,
    289: 4,
    290: 3,
    291: 3,
    292: 3,
    293: 4,
    294: 1,
    295: 3,
    296: 1,
    297: 3,
    298: 1,
    299: 2,
    300: 3,
    301: 3,
    302: 4,
    303: 2,
    304: 2,
    305: 2,
    306: 2,
    307: 2,
    308: 2,
    309: 3,
    310: 2,
    311: 2,
    312: 2,
    313: 2,
    314: 2,
    315: 2,
    316: 4,
    325: 2,
    326: 2,
    327: 2,
    328: 2,
    331: 2,
    332: 2,
    337: 2,
    342: 1,
    343: 1,
    346: 2,
    347: 1,
    350: 4,
    351: 3,
    352: 1,
    353: 2,
    360: 1,
    368: 1,
    369: 1,
    370: 1,
    371: 1,
    372: 1,
    373: 1,
    374: 1,
    375: 1,
    376: 1,
    377: 1,
    378: 1,
    382: 3,
    385: 1,
    392: 1,
    393: 1,
    396: 2,
    397: 2,
    398: 2,
    399: 1,
    400: 1,
    401: 1,
    402: 1,
    403: 1,
    404: 1,
    405: 1,
    406: 1,
    407: 1,
    408: 1,
    409: 1,
    410: 1,
    414: 4,
    415: 1,
    416: 1,
    417: 2,
    420: 1,
    421: 1,
    422: 2,
    424: 1,
    425: 2,
    426: 2,
    427: 2,
    428: 2,
    430: 3,
    438: 3,
    439: 3,
    440: 3,
    443: 2,
    444: 2,
    445: 2,
    446: 2,
    447: 6,
    448: 6,
    449: 2,
    450: 2,
    464: 2,
    468: 3,
    476: 2,
    479: 1,
    480: 2,
    65535: 0
  };
  function ods_to_csf_formula(f2) {
    if (f2.slice(0, 3) == "of:")
      f2 = f2.slice(3);
    if (f2.charCodeAt(0) == 61) {
      f2 = f2.slice(1);
      if (f2.charCodeAt(0) == 61)
        f2 = f2.slice(1);
    }
    f2 = f2.replace(/COM\.MICROSOFT\./g, "");
    f2 = f2.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
      return $1.replace(/\./g, "");
    });
    f2 = f2.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
    return f2.replace(/[;~]/g, ",").replace(/\|/g, ";");
  }
  function ods_to_csf_3D(r2) {
    var a2 = r2.split(":");
    var s2 = a2[0].split(".")[0];
    return [s2, a2[0].split(".")[1] + (a2.length > 1 ? ":" + (a2[1].split(".")[1] || a2[1].split(".")[0]) : "")];
  }
  var strs = {};
  var _ssfopts = {};
  function default_margins(margins, mode) {
    if (!margins)
      return;
    var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
    if (mode == "xlml")
      defs = [1, 1, 1, 1, 0.5, 0.5];
    if (margins.left == null)
      margins.left = defs[0];
    if (margins.right == null)
      margins.right = defs[1];
    if (margins.top == null)
      margins.top = defs[2];
    if (margins.bottom == null)
      margins.bottom = defs[3];
    if (margins.header == null)
      margins.header = defs[4];
    if (margins.footer == null)
      margins.footer = defs[5];
  }
  function safe_format(p2, fmtid, fillid, opts, themes, styles) {
    try {
      if (opts.cellNF)
        p2.z = table_fmt[fmtid];
    } catch (e2) {
      if (opts.WTF)
        throw e2;
    }
    if (p2.t === "z" && !opts.cellStyles)
      return;
    if (p2.t === "d" && typeof p2.v === "string")
      p2.v = parseDate(p2.v);
    if ((!opts || opts.cellText !== false) && p2.t !== "z")
      try {
        if (table_fmt[fmtid] == null)
          SSF_load(SSFImplicit[fmtid] || "General", fmtid);
        if (p2.t === "e")
          p2.w = p2.w || BErr[p2.v];
        else if (fmtid === 0) {
          if (p2.t === "n") {
            if ((p2.v | 0) === p2.v)
              p2.w = p2.v.toString(10);
            else
              p2.w = SSF_general_num(p2.v);
          } else if (p2.t === "d") {
            var dd = datenum(p2.v);
            if ((dd | 0) === dd)
              p2.w = dd.toString(10);
            else
              p2.w = SSF_general_num(dd);
          } else if (p2.v === void 0)
            return "";
          else
            p2.w = SSF_general(p2.v, _ssfopts);
        } else if (p2.t === "d")
          p2.w = SSF_format(fmtid, datenum(p2.v), _ssfopts);
        else
          p2.w = SSF_format(fmtid, p2.v, _ssfopts);
      } catch (e2) {
        if (opts.WTF)
          throw e2;
      }
    if (!opts.cellStyles)
      return;
    if (fillid != null)
      try {
        p2.s = styles.Fills[fillid];
        if (p2.s.fgColor && p2.s.fgColor.theme && !p2.s.fgColor.rgb) {
          p2.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p2.s.fgColor.theme].rgb, p2.s.fgColor.tint || 0);
          if (opts.WTF)
            p2.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p2.s.fgColor.theme].rgb;
        }
        if (p2.s.bgColor && p2.s.bgColor.theme) {
          p2.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p2.s.bgColor.theme].rgb, p2.s.bgColor.tint || 0);
          if (opts.WTF)
            p2.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p2.s.bgColor.theme].rgb;
        }
      } catch (e2) {
        if (opts.WTF && styles.Fills)
          throw e2;
      }
  }
  function parse_ws_xml_dim(ws2, s2) {
    var d2 = safe_decode_range(s2);
    if (d2.s.r <= d2.e.r && d2.s.c <= d2.e.c && d2.s.r >= 0 && d2.s.c >= 0)
      ws2["!ref"] = encode_range(d2);
  }
  var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
  var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
  var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
  var dimregex = /"(\w*:\w*)"/;
  var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
  var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
  var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
  var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
  var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
  var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
  function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
    if (!data)
      return data;
    if (!rels)
      rels = { "!id": {} };
    var s2 = opts.dense ? [] : {};
    var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
    var data1 = "", data2 = "";
    var mtch = data.match(sheetdataregex);
    if (mtch) {
      data1 = data.slice(0, mtch.index);
      data2 = data.slice(mtch.index + mtch[0].length);
    } else
      data1 = data2 = data;
    var sheetPr = data1.match(sheetprregex);
    if (sheetPr)
      parse_ws_xml_sheetpr(sheetPr[0], s2, wb, idx);
    else if (sheetPr = data1.match(sheetprregex2))
      parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s2, wb, idx);
    var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index;
    if (ridx > 0) {
      var ref = data1.slice(ridx, ridx + 50).match(dimregex);
      if (ref)
        parse_ws_xml_dim(s2, ref[1]);
    }
    var svs = data1.match(svsregex);
    if (svs && svs[1])
      parse_ws_xml_sheetviews(svs[1], wb);
    var columns = [];
    if (opts.cellStyles) {
      var cols = data1.match(colregex);
      if (cols)
        parse_ws_xml_cols(columns, cols);
    }
    if (mtch)
      parse_ws_xml_data(mtch[1], s2, opts, refguess, themes, styles);
    var afilter = data2.match(afregex);
    if (afilter)
      s2["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
    var merges = [];
    var _merge = data2.match(mergecregex);
    if (_merge)
      for (ridx = 0; ridx != _merge.length; ++ridx)
        merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('"') + 1));
    var hlink = data2.match(hlinkregex);
    if (hlink)
      parse_ws_xml_hlinks(s2, hlink, rels);
    var margins = data2.match(marginregex);
    if (margins)
      s2["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
    if (!s2["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r)
      s2["!ref"] = encode_range(refguess);
    if (opts.sheetRows > 0 && s2["!ref"]) {
      var tmpref = safe_decode_range(s2["!ref"]);
      if (opts.sheetRows <= +tmpref.e.r) {
        tmpref.e.r = opts.sheetRows - 1;
        if (tmpref.e.r > refguess.e.r)
          tmpref.e.r = refguess.e.r;
        if (tmpref.e.r < tmpref.s.r)
          tmpref.s.r = tmpref.e.r;
        if (tmpref.e.c > refguess.e.c)
          tmpref.e.c = refguess.e.c;
        if (tmpref.e.c < tmpref.s.c)
          tmpref.s.c = tmpref.e.c;
        s2["!fullref"] = s2["!ref"];
        s2["!ref"] = encode_range(tmpref);
      }
    }
    if (columns.length > 0)
      s2["!cols"] = columns;
    if (merges.length > 0)
      s2["!merges"] = merges;
    return s2;
  }
  function parse_ws_xml_sheetpr(sheetPr, s2, wb, idx) {
    var data = parsexmltag(sheetPr);
    if (!wb.Sheets[idx])
      wb.Sheets[idx] = {};
    if (data.codeName)
      wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
  }
  function parse_ws_xml_sheetpr2(sheetPr, body, s2, wb, idx) {
    parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s2, wb, idx);
  }
  function parse_ws_xml_hlinks(s2, data, rels) {
    var dense = Array.isArray(s2);
    for (var i2 = 0; i2 != data.length; ++i2) {
      var val = parsexmltag(utf8read(data[i2]), true);
      if (!val.ref)
        return;
      var rel = ((rels || {})["!id"] || [])[val.id];
      if (rel) {
        val.Target = rel.Target;
        if (val.location)
          val.Target += "#" + unescapexml(val.location);
      } else {
        val.Target = "#" + unescapexml(val.location);
        rel = { Target: val.Target, TargetMode: "Internal" };
      }
      val.Rel = rel;
      if (val.tooltip) {
        val.Tooltip = val.tooltip;
        delete val.tooltip;
      }
      var rng = safe_decode_range(val.ref);
      for (var R2 = rng.s.r; R2 <= rng.e.r; ++R2)
        for (var C2 = rng.s.c; C2 <= rng.e.c; ++C2) {
          var addr = encode_cell({ c: C2, r: R2 });
          if (dense) {
            if (!s2[R2])
              s2[R2] = [];
            if (!s2[R2][C2])
              s2[R2][C2] = { t: "z", v: void 0 };
            s2[R2][C2].l = val;
          } else {
            if (!s2[addr])
              s2[addr] = { t: "z", v: void 0 };
            s2[addr].l = val;
          }
        }
    }
  }
  function parse_ws_xml_margins(margin) {
    var o2 = {};
    ["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
      if (margin[k])
        o2[k] = parseFloat(margin[k]);
    });
    return o2;
  }
  function parse_ws_xml_cols(columns, cols) {
    var seencol = false;
    for (var coli = 0; coli != cols.length; ++coli) {
      var coll = parsexmltag(cols[coli], true);
      if (coll.hidden)
        coll.hidden = parsexmlbool(coll.hidden);
      var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
      if (coll.outlineLevel)
        coll.level = +coll.outlineLevel || 0;
      delete coll.min;
      delete coll.max;
      coll.width = +coll.width;
      if (!seencol && coll.width) {
        seencol = true;
        find_mdw_colw(coll.width);
      }
      process_col(coll);
      while (colm <= colM)
        columns[colm++] = dup(coll);
    }
  }
  function parse_ws_xml_autofilter(data) {
    var o2 = { ref: (data.match(/ref="([^"]*)"/) || [])[1] };
    return o2;
  }
  var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
  function parse_ws_xml_sheetviews(data, wb) {
    if (!wb.Views)
      wb.Views = [{}];
    (data.match(sviewregex) || []).forEach(function(r2, i2) {
      var tag = parsexmltag(r2);
      if (!wb.Views[i2])
        wb.Views[i2] = {};
      if (+tag.zoomScale)
        wb.Views[i2].zoom = +tag.zoomScale;
      if (parsexmlbool(tag.rightToLeft))
        wb.Views[i2].RTL = true;
    });
  }
  var parse_ws_xml_data = /* @__PURE__ */ function() {
    var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
    var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
    var refregex = /ref=["']([^"']*)["']/;
    var match_v = matchtag("v"), match_f = matchtag("f");
    return function parse_ws_xml_data2(sdata, s2, opts, guess, themes, styles) {
      var ri = 0, x = "", cells = [], cref = [], idx = 0, i2 = 0, cc = 0, d2 = "", p2;
      var tag, tagr = 0, tagc = 0;
      var sstr, ftag;
      var fmtid = 0, fillid = 0;
      var do_format = Array.isArray(styles.CellXf), cf;
      var arrayf = [];
      var sharedf = [];
      var dense = Array.isArray(s2);
      var rows = [], rowobj = {}, rowrite = false;
      var sheetStubs = !!opts.sheetStubs;
      for (var marr = sdata.split(rowregex), mt2 = 0, marrlen = marr.length; mt2 != marrlen; ++mt2) {
        x = marr[mt2].trim();
        var xlen = x.length;
        if (xlen === 0)
          continue;
        var rstarti = 0;
        outa:
          for (ri = 0; ri < xlen; ++ri)
            switch (
              /*x.charCodeAt(ri)*/
              x[ri]
            ) {
              case ">":
                if (
                  /*x.charCodeAt(ri-1) != 47*/
                  x[ri - 1] != "/"
                ) {
                  ++ri;
                  break outa;
                }
                if (opts && opts.cellStyles) {
                  tag = parsexmltag(x.slice(rstarti, ri), true);
                  tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                  tagc = -1;
                  if (opts.sheetRows && opts.sheetRows < tagr)
                    continue;
                  rowobj = {};
                  rowrite = false;
                  if (tag.ht) {
                    rowrite = true;
                    rowobj.hpt = parseFloat(tag.ht);
                    rowobj.hpx = pt2px(rowobj.hpt);
                  }
                  if (tag.hidden == "1") {
                    rowrite = true;
                    rowobj.hidden = true;
                  }
                  if (tag.outlineLevel != null) {
                    rowrite = true;
                    rowobj.level = +tag.outlineLevel;
                  }
                  if (rowrite)
                    rows[tagr - 1] = rowobj;
                }
                break;
              case "<":
                rstarti = ri;
                break;
            }
        if (rstarti >= ri)
          break;
        tag = parsexmltag(x.slice(rstarti, ri), true);
        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
        tagc = -1;
        if (opts.sheetRows && opts.sheetRows < tagr)
          continue;
        if (guess.s.r > tagr - 1)
          guess.s.r = tagr - 1;
        if (guess.e.r < tagr - 1)
          guess.e.r = tagr - 1;
        if (opts && opts.cellStyles) {
          rowobj = {};
          rowrite = false;
          if (tag.ht) {
            rowrite = true;
            rowobj.hpt = parseFloat(tag.ht);
            rowobj.hpx = pt2px(rowobj.hpt);
          }
          if (tag.hidden == "1") {
            rowrite = true;
            rowobj.hidden = true;
          }
          if (tag.outlineLevel != null) {
            rowrite = true;
            rowobj.level = +tag.outlineLevel;
          }
          if (rowrite)
            rows[tagr - 1] = rowobj;
        }
        cells = x.slice(ri).split(cellregex);
        for (var rslice = 0; rslice != cells.length; ++rslice)
          if (cells[rslice].trim().charAt(0) != "<")
            break;
        cells = cells.slice(rslice);
        for (ri = 0; ri != cells.length; ++ri) {
          x = cells[ri].trim();
          if (x.length === 0)
            continue;
          cref = x.match(rregex);
          idx = ri;
          i2 = 0;
          cc = 0;
          x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;
          if (cref != null && cref.length === 2) {
            idx = 0;
            d2 = cref[1];
            for (i2 = 0; i2 != d2.length; ++i2) {
              if ((cc = d2.charCodeAt(i2) - 64) < 1 || cc > 26)
                break;
              idx = 26 * idx + cc;
            }
            --idx;
            tagc = idx;
          } else
            ++tagc;
          for (i2 = 0; i2 != x.length; ++i2)
            if (x.charCodeAt(i2) === 62)
              break;
          ++i2;
          tag = parsexmltag(x.slice(0, i2), true);
          if (!tag.r)
            tag.r = encode_cell({ r: tagr - 1, c: tagc });
          d2 = x.slice(i2);
          p2 = { t: "" };
          if ((cref = d2.match(match_v)) != null && /*::cref != null && */
          cref[1] !== "")
            p2.v = unescapexml(cref[1]);
          if (opts.cellFormula) {
            if ((cref = d2.match(match_f)) != null && /*::cref != null && */
            cref[1] !== "") {
              p2.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
              if (!opts.xlfn)
                p2.f = _xlfn(p2.f);
              if (
                /*::cref != null && cref[0] != null && */
                cref[0].indexOf('t="array"') > -1
              ) {
                p2.F = (d2.match(refregex) || [])[1];
                if (p2.F.indexOf(":") > -1)
                  arrayf.push([safe_decode_range(p2.F), p2.F]);
              } else if (
                /*::cref != null && cref[0] != null && */
                cref[0].indexOf('t="shared"') > -1
              ) {
                ftag = parsexmltag(cref[0]);
                var ___f = unescapexml(utf8read(cref[1]));
                if (!opts.xlfn)
                  ___f = _xlfn(___f);
                sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
              }
            } else if (cref = d2.match(/<f[^>]*\/>/)) {
              ftag = parsexmltag(cref[0]);
              if (sharedf[ftag.si])
                p2.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
            }
            var _tag = decode_cell(tag.r);
            for (i2 = 0; i2 < arrayf.length; ++i2)
              if (_tag.r >= arrayf[i2][0].s.r && _tag.r <= arrayf[i2][0].e.r) {
                if (_tag.c >= arrayf[i2][0].s.c && _tag.c <= arrayf[i2][0].e.c)
                  p2.F = arrayf[i2][1];
              }
          }
          if (tag.t == null && p2.v === void 0) {
            if (p2.f || p2.F) {
              p2.v = 0;
              p2.t = "n";
            } else if (!sheetStubs)
              continue;
            else
              p2.t = "z";
          } else
            p2.t = tag.t || "n";
          if (guess.s.c > tagc)
            guess.s.c = tagc;
          if (guess.e.c < tagc)
            guess.e.c = tagc;
          switch (p2.t) {
            case "n":
              if (p2.v == "" || p2.v == null) {
                if (!sheetStubs)
                  continue;
                p2.t = "z";
              } else
                p2.v = parseFloat(p2.v);
              break;
            case "s":
              if (typeof p2.v == "undefined") {
                if (!sheetStubs)
                  continue;
                p2.t = "z";
              } else {
                sstr = strs[parseInt(p2.v, 10)];
                p2.v = sstr.t;
                p2.r = sstr.r;
                if (opts.cellHTML)
                  p2.h = sstr.h;
              }
              break;
            case "str":
              p2.t = "s";
              p2.v = p2.v != null ? utf8read(p2.v) : "";
              if (opts.cellHTML)
                p2.h = escapehtml(p2.v);
              break;
            case "inlineStr":
              cref = d2.match(isregex);
              p2.t = "s";
              if (cref != null && (sstr = parse_si(cref[1]))) {
                p2.v = sstr.t;
                if (opts.cellHTML)
                  p2.h = sstr.h;
              } else
                p2.v = "";
              break;
            case "b":
              p2.v = parsexmlbool(p2.v);
              break;
            case "d":
              if (opts.cellDates)
                p2.v = parseDate(p2.v, 1);
              else {
                p2.v = datenum(parseDate(p2.v, 1));
                p2.t = "n";
              }
              break;
            case "e":
              if (!opts || opts.cellText !== false)
                p2.w = p2.v;
              p2.v = RBErr[p2.v];
              break;
          }
          fmtid = fillid = 0;
          cf = null;
          if (do_format && tag.s !== void 0) {
            cf = styles.CellXf[tag.s];
            if (cf != null) {
              if (cf.numFmtId != null)
                fmtid = cf.numFmtId;
              if (opts.cellStyles) {
                if (cf.fillId != null)
                  fillid = cf.fillId;
              }
            }
          }
          safe_format(p2, fmtid, fillid, opts, themes, styles);
          if (opts.cellDates && do_format && p2.t == "n" && fmt_is_date(table_fmt[fmtid])) {
            p2.t = "d";
            p2.v = numdate(p2.v);
          }
          if (tag.cm && opts.xlmeta) {
            var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
            if (cm && cm.type == "XLDAPR")
              p2.D = true;
          }
          if (dense) {
            var _r2 = decode_cell(tag.r);
            if (!s2[_r2.r])
              s2[_r2.r] = [];
            s2[_r2.r][_r2.c] = p2;
          } else
            s2[tag.r] = p2;
        }
      }
      if (rows.length > 0)
        s2["!rows"] = rows;
    };
  }();
  function parse_BrtRowHdr(data, length) {
    var z2 = {};
    var tgt = data.l + length;
    z2.r = data.read_shift(4);
    data.l += 4;
    var miyRw = data.read_shift(2);
    data.l += 1;
    var flags = data.read_shift(1);
    data.l = tgt;
    if (flags & 7)
      z2.level = flags & 7;
    if (flags & 16)
      z2.hidden = true;
    if (flags & 32)
      z2.hpt = miyRw / 20;
    return z2;
  }
  var parse_BrtWsDim = parse_UncheckedRfX;
  function parse_BrtWsFmtInfo() {
  }
  function parse_BrtWsProp(data, length) {
    var z2 = {};
    var f2 = data[data.l];
    ++data.l;
    z2.above = !(f2 & 64);
    z2.left = !(f2 & 128);
    data.l += 18;
    z2.name = parse_XLSBCodeName(data);
    return z2;
  }
  function parse_BrtCellBlank(data) {
    var cell = parse_XLSBCell(data);
    return [cell];
  }
  function parse_BrtShortBlank(data) {
    var cell = parse_XLSBShortCell(data);
    return [cell];
  }
  function parse_BrtCellBool(data) {
    var cell = parse_XLSBCell(data);
    var fBool = data.read_shift(1);
    return [cell, fBool, "b"];
  }
  function parse_BrtShortBool(data) {
    var cell = parse_XLSBShortCell(data);
    var fBool = data.read_shift(1);
    return [cell, fBool, "b"];
  }
  function parse_BrtCellError(data) {
    var cell = parse_XLSBCell(data);
    var bError = data.read_shift(1);
    return [cell, bError, "e"];
  }
  function parse_BrtShortError(data) {
    var cell = parse_XLSBShortCell(data);
    var bError = data.read_shift(1);
    return [cell, bError, "e"];
  }
  function parse_BrtCellIsst(data) {
    var cell = parse_XLSBCell(data);
    var isst = data.read_shift(4);
    return [cell, isst, "s"];
  }
  function parse_BrtShortIsst(data) {
    var cell = parse_XLSBShortCell(data);
    var isst = data.read_shift(4);
    return [cell, isst, "s"];
  }
  function parse_BrtCellReal(data) {
    var cell = parse_XLSBCell(data);
    var value2 = parse_Xnum(data);
    return [cell, value2, "n"];
  }
  function parse_BrtShortReal(data) {
    var cell = parse_XLSBShortCell(data);
    var value2 = parse_Xnum(data);
    return [cell, value2, "n"];
  }
  function parse_BrtCellRk(data) {
    var cell = parse_XLSBCell(data);
    var value2 = parse_RkNumber(data);
    return [cell, value2, "n"];
  }
  function parse_BrtShortRk(data) {
    var cell = parse_XLSBShortCell(data);
    var value2 = parse_RkNumber(data);
    return [cell, value2, "n"];
  }
  function parse_BrtCellRString(data) {
    var cell = parse_XLSBCell(data);
    var value2 = parse_RichStr(data);
    return [cell, value2, "is"];
  }
  function parse_BrtCellSt(data) {
    var cell = parse_XLSBCell(data);
    var value2 = parse_XLWideString(data);
    return [cell, value2, "str"];
  }
  function parse_BrtShortSt(data) {
    var cell = parse_XLSBShortCell(data);
    var value2 = parse_XLWideString(data);
    return [cell, value2, "str"];
  }
  function parse_BrtFmlaBool(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value2 = data.read_shift(1);
    var o2 = [cell, value2, "b"];
    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o2[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
    } else
      data.l = end;
    return o2;
  }
  function parse_BrtFmlaError(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value2 = data.read_shift(1);
    var o2 = [cell, value2, "e"];
    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o2[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
    } else
      data.l = end;
    return o2;
  }
  function parse_BrtFmlaNum(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value2 = parse_Xnum(data);
    var o2 = [cell, value2, "n"];
    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o2[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
    } else
      data.l = end;
    return o2;
  }
  function parse_BrtFmlaString(data, length, opts) {
    var end = data.l + length;
    var cell = parse_XLSBCell(data);
    cell.r = opts["!row"];
    var value2 = parse_XLWideString(data);
    var o2 = [cell, value2, "str"];
    if (opts.cellFormula) {
      data.l += 2;
      var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
      o2[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
    } else
      data.l = end;
    return o2;
  }
  var parse_BrtMergeCell = parse_UncheckedRfX;
  function parse_BrtHLink(data, length) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data);
    var relId = parse_XLNullableWideString(data);
    var loc = parse_XLWideString(data);
    var tooltip = parse_XLWideString(data);
    var display = parse_XLWideString(data);
    data.l = end;
    var o2 = { rfx, relId, loc, display };
    if (tooltip)
      o2.Tooltip = tooltip;
    return o2;
  }
  function parse_BrtPane() {
  }
  function parse_BrtArrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_RfX(data);
    var fAlwaysCalc = data.read_shift(1);
    var o2 = [rfx];
    o2[2] = fAlwaysCalc;
    if (opts.cellFormula) {
      var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
      o2[1] = formula;
    } else
      data.l = end;
    return o2;
  }
  function parse_BrtShrFmla(data, length, opts) {
    var end = data.l + length;
    var rfx = parse_UncheckedRfX(data);
    var o2 = [rfx];
    if (opts.cellFormula) {
      var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
      o2[1] = formula;
      data.l = end;
    } else
      data.l = end;
    return o2;
  }
  var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];
  function parse_BrtMargins(data) {
    var margins = {};
    BrtMarginKeys.forEach(function(k) {
      margins[k] = parse_Xnum(data);
    });
    return margins;
  }
  function parse_BrtBeginWsView(data) {
    var f2 = data.read_shift(2);
    data.l += 28;
    return { RTL: f2 & 32 };
  }
  function parse_BrtDVal() {
  }
  function parse_BrtDVal14() {
  }
  function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
    if (!data)
      return data;
    var opts = _opts || {};
    if (!rels)
      rels = { "!id": {} };
    var s2 = opts.dense ? [] : {};
    var ref;
    var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
    var pass = false, end = false;
    var row, p2, cf, R2, C2, addr, sstr, rr, cell;
    var merges = [];
    opts.biff = 12;
    opts["!row"] = 0;
    var ai = 0, af = false;
    var arrayf = [];
    var sharedf = {};
    var supbooks = opts.supbooks || /*::(*/
    wb.supbooks || [[]];
    supbooks.sharedf = sharedf;
    supbooks.arrayf = arrayf;
    supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) {
      return x.name;
    });
    if (!opts.supbooks) {
      opts.supbooks = supbooks;
      if (wb.Names)
        for (var i2 = 0; i2 < wb.Names.length; ++i2)
          supbooks[0][i2 + 1] = wb.Names[i2];
    }
    var colinfo = [], rowinfo = [];
    var seencol = false;
    XLSBRecordEnum[16] = { n: "BrtShortReal", f: parse_BrtShortReal };
    var cm;
    recordhopper(data, function ws_parse(val, RR, RT) {
      if (end)
        return;
      switch (RT) {
        case 148:
          ref = val;
          break;
        case 0:
          row = val;
          if (opts.sheetRows && opts.sheetRows <= row.r)
            end = true;
          rr = encode_row(R2 = row.r);
          opts["!row"] = row.r;
          if (val.hidden || val.hpt || val.level != null) {
            if (val.hpt)
              val.hpx = pt2px(val.hpt);
            rowinfo[val.r] = val;
          }
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 62:
          p2 = { t: val[2] };
          switch (val[2]) {
            case "n":
              p2.v = val[1];
              break;
            case "s":
              sstr = strs[val[1]];
              p2.v = sstr.t;
              p2.r = sstr.r;
              break;
            case "b":
              p2.v = val[1] ? true : false;
              break;
            case "e":
              p2.v = val[1];
              if (opts.cellText !== false)
                p2.w = BErr[p2.v];
              break;
            case "str":
              p2.t = "s";
              p2.v = val[1];
              break;
            case "is":
              p2.t = "s";
              p2.v = val[1].t;
              break;
          }
          if (cf = styles.CellXf[val[0].iStyleRef])
            safe_format(p2, cf.numFmtId, null, opts, themes, styles);
          C2 = val[0].c == -1 ? C2 + 1 : val[0].c;
          if (opts.dense) {
            if (!s2[R2])
              s2[R2] = [];
            s2[R2][C2] = p2;
          } else
            s2[encode_col(C2) + rr] = p2;
          if (opts.cellFormula) {
            af = false;
            for (ai = 0; ai < arrayf.length; ++ai) {
              var aii = arrayf[ai];
              if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                if (C2 >= aii[0].s.c && C2 <= aii[0].e.c) {
                  p2.F = encode_range(aii[0]);
                  af = true;
                }
              }
            }
            if (!af && val.length > 3)
              p2.f = val[3];
          }
          if (refguess.s.r > row.r)
            refguess.s.r = row.r;
          if (refguess.s.c > C2)
            refguess.s.c = C2;
          if (refguess.e.r < row.r)
            refguess.e.r = row.r;
          if (refguess.e.c < C2)
            refguess.e.c = C2;
          if (opts.cellDates && cf && p2.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
            var _d = SSF_parse_date_code(p2.v);
            if (_d) {
              p2.t = "d";
              p2.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
            }
          }
          if (cm) {
            if (cm.type == "XLDAPR")
              p2.D = true;
            cm = void 0;
          }
          break;
        case 1:
        case 12:
          if (!opts.sheetStubs || pass)
            break;
          p2 = { t: "z", v: void 0 };
          C2 = val[0].c == -1 ? C2 + 1 : val[0].c;
          if (opts.dense) {
            if (!s2[R2])
              s2[R2] = [];
            s2[R2][C2] = p2;
          } else
            s2[encode_col(C2) + rr] = p2;
          if (refguess.s.r > row.r)
            refguess.s.r = row.r;
          if (refguess.s.c > C2)
            refguess.s.c = C2;
          if (refguess.e.r < row.r)
            refguess.e.r = row.r;
          if (refguess.e.c < C2)
            refguess.e.c = C2;
          if (cm) {
            if (cm.type == "XLDAPR")
              p2.D = true;
            cm = void 0;
          }
          break;
        case 176:
          merges.push(val);
          break;
        case 49:
          {
            cm = ((opts.xlmeta || {}).Cell || [])[val - 1];
          }
          break;
        case 494:
          var rel = rels["!id"][val.relId];
          if (rel) {
            val.Target = rel.Target;
            if (val.loc)
              val.Target += "#" + val.loc;
            val.Rel = rel;
          } else if (val.relId == "") {
            val.Target = "#" + val.loc;
          }
          for (R2 = val.rfx.s.r; R2 <= val.rfx.e.r; ++R2)
            for (C2 = val.rfx.s.c; C2 <= val.rfx.e.c; ++C2) {
              if (opts.dense) {
                if (!s2[R2])
                  s2[R2] = [];
                if (!s2[R2][C2])
                  s2[R2][C2] = { t: "z", v: void 0 };
                s2[R2][C2].l = val;
              } else {
                addr = encode_cell({ c: C2, r: R2 });
                if (!s2[addr])
                  s2[addr] = { t: "z", v: void 0 };
                s2[addr].l = val;
              }
            }
          break;
        case 426:
          if (!opts.cellFormula)
            break;
          arrayf.push(val);
          cell = opts.dense ? s2[R2][C2] : s2[encode_col(C2) + rr];
          cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C2 }, supbooks, opts);
          cell.F = encode_range(val[0]);
          break;
        case 427:
          if (!opts.cellFormula)
            break;
          sharedf[encode_cell(val[0].s)] = val[1];
          cell = opts.dense ? s2[R2][C2] : s2[encode_col(C2) + rr];
          cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C2 }, supbooks, opts);
          break;
        case 60:
          if (!opts.cellStyles)
            break;
          while (val.e >= val.s) {
            colinfo[val.e--] = { width: val.w / 256, hidden: !!(val.flags & 1), level: val.level };
            if (!seencol) {
              seencol = true;
              find_mdw_colw(val.w / 256);
            }
            process_col(colinfo[val.e + 1]);
          }
          break;
        case 161:
          s2["!autofilter"] = { ref: encode_range(val) };
          break;
        case 476:
          s2["!margins"] = val;
          break;
        case 147:
          if (!wb.Sheets[idx])
            wb.Sheets[idx] = {};
          if (val.name)
            wb.Sheets[idx].CodeName = val.name;
          if (val.above || val.left)
            s2["!outline"] = { above: val.above, left: val.left };
          break;
        case 137:
          if (!wb.Views)
            wb.Views = [{}];
          if (!wb.Views[0])
            wb.Views[0] = {};
          if (val.RTL)
            wb.Views[0].RTL = true;
          break;
        case 485:
          break;
        case 64:
        case 1053:
          break;
        case 151:
          break;
        case 152:
        case 175:
        case 644:
        case 625:
        case 562:
        case 396:
        case 1112:
        case 1146:
        case 471:
        case 1050:
        case 649:
        case 1105:
        case 589:
        case 607:
        case 564:
        case 1055:
        case 168:
        case 174:
        case 1180:
        case 499:
        case 507:
        case 550:
        case 171:
        case 167:
        case 1177:
        case 169:
        case 1181:
        case 551:
        case 552:
        case 661:
        case 639:
        case 478:
        case 537:
        case 477:
        case 536:
        case 1103:
        case 680:
        case 1104:
        case 1024:
        case 663:
        case 535:
        case 678:
        case 504:
        case 1043:
        case 428:
        case 170:
        case 3072:
        case 50:
        case 2070:
        case 1045:
          break;
        case 35:
          pass = true;
          break;
        case 36:
          pass = false;
          break;
        case 37:
          pass = true;
          break;
        case 38:
          pass = false;
          break;
        default:
          if (RR.T)
            ;
          else if (!pass || opts.WTF)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    }, opts);
    delete opts.supbooks;
    delete opts["!row"];
    if (!s2["!ref"] && (refguess.s.r < 2e6 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)))
      s2["!ref"] = encode_range(ref || refguess);
    if (opts.sheetRows && s2["!ref"]) {
      var tmpref = safe_decode_range(s2["!ref"]);
      if (opts.sheetRows <= +tmpref.e.r) {
        tmpref.e.r = opts.sheetRows - 1;
        if (tmpref.e.r > refguess.e.r)
          tmpref.e.r = refguess.e.r;
        if (tmpref.e.r < tmpref.s.r)
          tmpref.s.r = tmpref.e.r;
        if (tmpref.e.c > refguess.e.c)
          tmpref.e.c = refguess.e.c;
        if (tmpref.e.c < tmpref.s.c)
          tmpref.s.c = tmpref.e.c;
        s2["!fullref"] = s2["!ref"];
        s2["!ref"] = encode_range(tmpref);
      }
    }
    if (merges.length > 0)
      s2["!merges"] = merges;
    if (colinfo.length > 0)
      s2["!cols"] = colinfo;
    if (rowinfo.length > 0)
      s2["!rows"] = rowinfo;
    return s2;
  }
  function parse_Cache(data) {
    var col = [];
    var num = data.match(/^<c:numCache>/);
    var f2;
    (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function(pt2) {
      var q2 = pt2.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
      if (!q2)
        return;
      col[+q2[1]] = num ? +q2[2] : q2[2];
    });
    var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]);
    (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function(F2) {
      f2 = F2.replace(/<.*?>/g, "");
    });
    return [col, nf, f2];
  }
  function parse_chart(data, name, opts, rels, wb, csheet) {
    var cs2 = csheet || { "!type": "chart" };
    if (!data)
      return csheet;
    var C2 = 0, R2 = 0, col = "A";
    var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
    (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function(nc) {
      var cache = parse_Cache(nc);
      refguess.s.r = refguess.s.c = 0;
      refguess.e.c = C2;
      col = encode_col(C2);
      cache[0].forEach(function(n2, i2) {
        cs2[col + encode_row(i2)] = { t: "n", v: n2, z: cache[1] };
        R2 = i2;
      });
      if (refguess.e.r < R2)
        refguess.e.r = R2;
      ++C2;
    });
    if (C2 > 0)
      cs2["!ref"] = encode_range(refguess);
    return cs2;
  }
  function parse_cs_xml(data, opts, idx, rels, wb) {
    if (!data)
      return data;
    if (!rels)
      rels = { "!id": {} };
    var s2 = { "!type": "chart", "!drawel": null, "!rel": "" };
    var m2;
    var sheetPr = data.match(sheetprregex);
    if (sheetPr)
      parse_ws_xml_sheetpr(sheetPr[0], s2, wb, idx);
    if (m2 = data.match(/drawing r:id="(.*?)"/))
      s2["!rel"] = m2[1];
    if (rels["!id"][s2["!rel"]])
      s2["!drawel"] = rels["!id"][s2["!rel"]];
    return s2;
  }
  function parse_BrtCsProp(data, length) {
    data.l += 10;
    var name = parse_XLWideString(data);
    return { name };
  }
  function parse_cs_bin(data, opts, idx, rels, wb) {
    if (!data)
      return data;
    if (!rels)
      rels = { "!id": {} };
    var s2 = { "!type": "chart", "!drawel": null, "!rel": "" };
    var pass = false;
    recordhopper(data, function cs_parse(val, R2, RT) {
      switch (RT) {
        case 550:
          s2["!rel"] = val;
          break;
        case 651:
          if (!wb.Sheets[idx])
            wb.Sheets[idx] = {};
          if (val.name)
            wb.Sheets[idx].CodeName = val.name;
          break;
        case 562:
        case 652:
        case 669:
        case 679:
        case 551:
        case 552:
        case 476:
        case 3072:
          break;
        case 35:
          pass = true;
          break;
        case 36:
          pass = false;
          break;
        case 37:
          break;
        case 38:
          break;
        default:
          if (R2.T > 0)
            ;
          else if (R2.T < 0)
            ;
          else if (!pass || opts.WTF)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    }, opts);
    if (rels["!id"][s2["!rel"]])
      s2["!drawel"] = rels["!id"][s2["!rel"]];
    return s2;
  }
  var WBPropsDef = [
    ["allowRefreshQuery", false, "bool"],
    ["autoCompressPictures", true, "bool"],
    ["backupFile", false, "bool"],
    ["checkCompatibility", false, "bool"],
    ["CodeName", ""],
    ["date1904", false, "bool"],
    ["defaultThemeVersion", 0, "int"],
    ["filterPrivacy", false, "bool"],
    ["hidePivotFieldList", false, "bool"],
    ["promptedSolutions", false, "bool"],
    ["publishItems", false, "bool"],
    ["refreshAllConnections", false, "bool"],
    ["saveExternalLinkValues", true, "bool"],
    ["showBorderUnselectedTables", true, "bool"],
    ["showInkAnnotation", true, "bool"],
    ["showObjects", "all"],
    ["showPivotChartFilter", false, "bool"],
    ["updateLinks", "userSet"]
  ];
  var WBViewDef = [
    ["activeTab", 0, "int"],
    ["autoFilterDateGrouping", true, "bool"],
    ["firstSheet", 0, "int"],
    ["minimized", false, "bool"],
    ["showHorizontalScroll", true, "bool"],
    ["showSheetTabs", true, "bool"],
    ["showVerticalScroll", true, "bool"],
    ["tabRatio", 600, "int"],
    ["visibility", "visible"]
    //window{Height,Width}, {x,y}Window
  ];
  var SheetDef = [
    //['state', 'visible']
  ];
  var CalcPrDef = [
    ["calcCompleted", "true"],
    ["calcMode", "auto"],
    ["calcOnSave", "true"],
    ["concurrentCalc", "true"],
    ["fullCalcOnLoad", "false"],
    ["fullPrecision", "true"],
    ["iterate", "false"],
    ["iterateCount", "100"],
    ["iterateDelta", "0.001"],
    ["refMode", "A1"]
  ];
  function push_defaults_array(target, defaults) {
    for (var j2 = 0; j2 != target.length; ++j2) {
      var w2 = target[j2];
      for (var i2 = 0; i2 != defaults.length; ++i2) {
        var z2 = defaults[i2];
        if (w2[z2[0]] == null)
          w2[z2[0]] = z2[1];
        else
          switch (z2[2]) {
            case "bool":
              if (typeof w2[z2[0]] == "string")
                w2[z2[0]] = parsexmlbool(w2[z2[0]]);
              break;
            case "int":
              if (typeof w2[z2[0]] == "string")
                w2[z2[0]] = parseInt(w2[z2[0]], 10);
              break;
          }
      }
    }
  }
  function push_defaults(target, defaults) {
    for (var i2 = 0; i2 != defaults.length; ++i2) {
      var z2 = defaults[i2];
      if (target[z2[0]] == null)
        target[z2[0]] = z2[1];
      else
        switch (z2[2]) {
          case "bool":
            if (typeof target[z2[0]] == "string")
              target[z2[0]] = parsexmlbool(target[z2[0]]);
            break;
          case "int":
            if (typeof target[z2[0]] == "string")
              target[z2[0]] = parseInt(target[z2[0]], 10);
            break;
        }
    }
  }
  function parse_wb_defaults(wb) {
    push_defaults(wb.WBProps, WBPropsDef);
    push_defaults(wb.CalcPr, CalcPrDef);
    push_defaults_array(wb.WBView, WBViewDef);
    push_defaults_array(wb.Sheets, SheetDef);
    _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
  }
  var badchars = /* @__PURE__ */ "][*?/\\".split("");
  function check_ws_name(n2, safe) {
    if (n2.length > 31) {
      if (safe)
        return false;
      throw new Error("Sheet names cannot exceed 31 chars");
    }
    var _good = true;
    badchars.forEach(function(c2) {
      if (n2.indexOf(c2) == -1)
        return;
      if (!safe)
        throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
      _good = false;
    });
    return _good;
  }
  var wbnsregex = /<\w+:workbook/;
  function parse_wb_xml(data, opts) {
    if (!data)
      throw new Error("Could not find file");
    var wb = (
      /*::(*/
      { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, Names: [], xmlns: "" }
    );
    var pass = false, xmlns = "xmlns";
    var dname = {}, dnstart = 0;
    data.replace(tagregex, function xml_wb(x, idx) {
      var y2 = parsexmltag(x);
      switch (strip_ns(y2[0])) {
        case "<?xml":
          break;
        case "<workbook":
          if (x.match(wbnsregex))
            xmlns = "xmlns" + x.match(/<(\w+):/)[1];
          wb.xmlns = y2[xmlns];
          break;
        case "</workbook>":
          break;
        case "<fileVersion":
          delete y2[0];
          wb.AppVersion = y2;
          break;
        case "<fileVersion/>":
        case "</fileVersion>":
          break;
        case "<fileSharing":
          break;
        case "<fileSharing/>":
          break;
        case "<workbookPr":
        case "<workbookPr/>":
          WBPropsDef.forEach(function(w2) {
            if (y2[w2[0]] == null)
              return;
            switch (w2[2]) {
              case "bool":
                wb.WBProps[w2[0]] = parsexmlbool(y2[w2[0]]);
                break;
              case "int":
                wb.WBProps[w2[0]] = parseInt(y2[w2[0]], 10);
                break;
              default:
                wb.WBProps[w2[0]] = y2[w2[0]];
            }
          });
          if (y2.codeName)
            wb.WBProps.CodeName = utf8read(y2.codeName);
          break;
        case "</workbookPr>":
          break;
        case "<workbookProtection":
          break;
        case "<workbookProtection/>":
          break;
        case "<bookViews":
        case "<bookViews>":
        case "</bookViews>":
          break;
        case "<workbookView":
        case "<workbookView/>":
          delete y2[0];
          wb.WBView.push(y2);
          break;
        case "</workbookView>":
          break;
        case "<sheets":
        case "<sheets>":
        case "</sheets>":
          break;
        case "<sheet":
          switch (y2.state) {
            case "hidden":
              y2.Hidden = 1;
              break;
            case "veryHidden":
              y2.Hidden = 2;
              break;
            default:
              y2.Hidden = 0;
          }
          delete y2.state;
          y2.name = unescapexml(utf8read(y2.name));
          delete y2[0];
          wb.Sheets.push(y2);
          break;
        case "</sheet>":
          break;
        case "<functionGroups":
        case "<functionGroups/>":
          break;
        case "<functionGroup":
          break;
        case "<externalReferences":
        case "</externalReferences>":
        case "<externalReferences>":
          break;
        case "<externalReference":
          break;
        case "<definedNames/>":
          break;
        case "<definedNames>":
        case "<definedNames":
          pass = true;
          break;
        case "</definedNames>":
          pass = false;
          break;
        case "<definedName":
          {
            dname = {};
            dname.Name = utf8read(y2.name);
            if (y2.comment)
              dname.Comment = y2.comment;
            if (y2.localSheetId)
              dname.Sheet = +y2.localSheetId;
            if (parsexmlbool(y2.hidden || "0"))
              dname.Hidden = true;
            dnstart = idx + x.length;
          }
          break;
        case "</definedName>":
          {
            dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
            wb.Names.push(dname);
          }
          break;
        case "<definedName/>":
          break;
        case "<calcPr":
          delete y2[0];
          wb.CalcPr = y2;
          break;
        case "<calcPr/>":
          delete y2[0];
          wb.CalcPr = y2;
          break;
        case "</calcPr>":
          break;
        case "<oleSize":
          break;
        case "<customWorkbookViews>":
        case "</customWorkbookViews>":
        case "<customWorkbookViews":
          break;
        case "<customWorkbookView":
        case "</customWorkbookView>":
          break;
        case "<pivotCaches>":
        case "</pivotCaches>":
        case "<pivotCaches":
          break;
        case "<pivotCache":
          break;
        case "<smartTagPr":
        case "<smartTagPr/>":
          break;
        case "<smartTagTypes":
        case "<smartTagTypes>":
        case "</smartTagTypes>":
          break;
        case "<smartTagType":
          break;
        case "<webPublishing":
        case "<webPublishing/>":
          break;
        case "<fileRecoveryPr":
        case "<fileRecoveryPr/>":
          break;
        case "<webPublishObjects>":
        case "<webPublishObjects":
        case "</webPublishObjects>":
          break;
        case "<webPublishObject":
          break;
        case "<extLst":
        case "<extLst>":
        case "</extLst>":
        case "<extLst/>":
          break;
        case "<ext":
          pass = true;
          break;
        case "</ext>":
          pass = false;
          break;
        case "<ArchID":
          break;
        case "<AlternateContent":
        case "<AlternateContent>":
          pass = true;
          break;
        case "</AlternateContent>":
          pass = false;
          break;
        case "<revisionPtr":
          break;
        default:
          if (!pass && opts.WTF)
            throw new Error("unrecognized " + y2[0] + " in workbook");
      }
      return x;
    });
    if (XMLNS_main.indexOf(wb.xmlns) === -1)
      throw new Error("Unknown Namespace: " + wb.xmlns);
    parse_wb_defaults(wb);
    return wb;
  }
  function parse_BrtBundleSh(data, length) {
    var z2 = {};
    z2.Hidden = data.read_shift(4);
    z2.iTabID = data.read_shift(4);
    z2.strRelID = parse_RelID(data);
    z2.name = parse_XLWideString(data);
    return z2;
  }
  function parse_BrtWbProp(data, length) {
    var o2 = {};
    var flags = data.read_shift(4);
    o2.defaultThemeVersion = data.read_shift(4);
    var strName = length > 8 ? parse_XLWideString(data) : "";
    if (strName.length > 0)
      o2.CodeName = strName;
    o2.autoCompressPictures = !!(flags & 65536);
    o2.backupFile = !!(flags & 64);
    o2.checkCompatibility = !!(flags & 4096);
    o2.date1904 = !!(flags & 1);
    o2.filterPrivacy = !!(flags & 8);
    o2.hidePivotFieldList = !!(flags & 1024);
    o2.promptedSolutions = !!(flags & 16);
    o2.publishItems = !!(flags & 2048);
    o2.refreshAllConnections = !!(flags & 262144);
    o2.saveExternalLinkValues = !!(flags & 128);
    o2.showBorderUnselectedTables = !!(flags & 4);
    o2.showInkAnnotation = !!(flags & 32);
    o2.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3];
    o2.showPivotChartFilter = !!(flags & 32768);
    o2.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3];
    return o2;
  }
  function parse_BrtFRTArchID$(data, length) {
    var o2 = {};
    data.read_shift(4);
    o2.ArchID = data.read_shift(4);
    data.l += length - 8;
    return o2;
  }
  function parse_BrtName(data, length, opts) {
    var end = data.l + length;
    data.l += 4;
    data.l += 1;
    var itab = data.read_shift(4);
    var name = parse_XLNameWideString(data);
    var formula = parse_XLSBNameParsedFormula(data, 0, opts);
    var comment = parse_XLNullableWideString(data);
    data.l = end;
    var out = { Name: name, Ptg: formula };
    if (itab < 268435455)
      out.Sheet = itab;
    if (comment)
      out.Comment = comment;
    return out;
  }
  function parse_wb_bin(data, opts) {
    var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, xmlns: "" };
    var state = [];
    var pass = false;
    if (!opts)
      opts = {};
    opts.biff = 12;
    var Names = [];
    var supbooks = [[]];
    supbooks.SheetNames = [];
    supbooks.XTI = [];
    XLSBRecordEnum[16] = { n: "BrtFRTArchID$", f: parse_BrtFRTArchID$ };
    recordhopper(data, function hopper_wb(val, R2, RT) {
      switch (RT) {
        case 156:
          supbooks.SheetNames.push(val.name);
          wb.Sheets.push(val);
          break;
        case 153:
          wb.WBProps = val;
          break;
        case 39:
          if (val.Sheet != null)
            opts.SID = val.Sheet;
          val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
          delete opts.SID;
          delete val.Ptg;
          Names.push(val);
          break;
        case 1036:
          break;
        case 357:
        case 358:
        case 355:
        case 667:
          if (!supbooks[0].length)
            supbooks[0] = [RT, val];
          else
            supbooks.push([RT, val]);
          supbooks[supbooks.length - 1].XTI = [];
          break;
        case 362:
          if (supbooks.length === 0) {
            supbooks[0] = [];
            supbooks[0].XTI = [];
          }
          supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
          supbooks.XTI = supbooks.XTI.concat(val);
          break;
        case 361:
          break;
        case 2071:
        case 158:
        case 143:
        case 664:
        case 353:
          break;
        case 3072:
        case 3073:
        case 534:
        case 677:
        case 157:
        case 610:
        case 2050:
        case 155:
        case 548:
        case 676:
        case 128:
        case 665:
        case 2128:
        case 2125:
        case 549:
        case 2053:
        case 596:
        case 2076:
        case 2075:
        case 2082:
        case 397:
        case 154:
        case 1117:
        case 553:
        case 2091:
          break;
        case 35:
          state.push(RT);
          pass = true;
          break;
        case 36:
          state.pop();
          pass = false;
          break;
        case 37:
          state.push(RT);
          pass = true;
          break;
        case 38:
          state.pop();
          pass = false;
          break;
        case 16:
          break;
        default:
          if (R2.T)
            ;
          else if (!pass || opts.WTF && state[state.length - 1] != 37 && state[state.length - 1] != 35)
            throw new Error("Unexpected record 0x" + RT.toString(16));
      }
    }, opts);
    parse_wb_defaults(wb);
    wb.Names = Names;
    wb.supbooks = supbooks;
    return wb;
  }
  function parse_wb(data, name, opts) {
    if (name.slice(-4) === ".bin")
      return parse_wb_bin(data, opts);
    return parse_wb_xml(data, opts);
  }
  function parse_ws(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin")
      return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
    return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
  }
  function parse_cs(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin")
      return parse_cs_bin(data, opts, idx, rels, wb);
    return parse_cs_xml(data, opts, idx, rels, wb);
  }
  function parse_ms(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin")
      return parse_ms_bin();
    return parse_ms_xml();
  }
  function parse_ds(data, name, idx, opts, rels, wb, themes, styles) {
    if (name.slice(-4) === ".bin")
      return parse_ds_bin();
    return parse_ds_xml();
  }
  function parse_sty(data, name, themes, opts) {
    if (name.slice(-4) === ".bin")
      return parse_sty_bin(data, themes, opts);
    return parse_sty_xml(data, themes, opts);
  }
  function parse_theme(data, name, opts) {
    return parse_theme_xml(data, opts);
  }
  function parse_sst(data, name, opts) {
    if (name.slice(-4) === ".bin")
      return parse_sst_bin(data, opts);
    return parse_sst_xml(data, opts);
  }
  function parse_cmnt(data, name, opts) {
    if (name.slice(-4) === ".bin")
      return parse_comments_bin(data, opts);
    return parse_comments_xml(data, opts);
  }
  function parse_cc(data, name, opts) {
    if (name.slice(-4) === ".bin")
      return parse_cc_bin(data);
    return parse_cc_xml(data);
  }
  function parse_xlink(data, rel, name, opts) {
    if (name.slice(-4) === ".bin")
      return parse_xlink_bin(data, rel, name, opts);
    return parse_xlink_xml();
  }
  function parse_xlmeta(data, name, opts) {
    if (name.slice(-4) === ".bin")
      return parse_xlmeta_bin(data, name, opts);
    return parse_xlmeta_xml(data, name, opts);
  }
  var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
  var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
  function xlml_parsexmltag(tag, skip_root) {
    var words = tag.split(/\s+/);
    var z2 = [];
    if (!skip_root)
      z2[0] = words[0];
    if (words.length === 1)
      return z2;
    var m2 = tag.match(attregexg2), y2, j2, w2, i2;
    if (m2)
      for (i2 = 0; i2 != m2.length; ++i2) {
        y2 = m2[i2].match(attregex2);
        if ((j2 = y2[1].indexOf(":")) === -1)
          z2[y2[1]] = y2[2].slice(1, y2[2].length - 1);
        else {
          if (y2[1].slice(0, 6) === "xmlns:")
            w2 = "xmlns" + y2[1].slice(6);
          else
            w2 = y2[1].slice(j2 + 1);
          z2[w2] = y2[2].slice(1, y2[2].length - 1);
        }
      }
    return z2;
  }
  function xlml_parsexmltagobj(tag) {
    var words = tag.split(/\s+/);
    var z2 = {};
    if (words.length === 1)
      return z2;
    var m2 = tag.match(attregexg2), y2, j2, w2, i2;
    if (m2)
      for (i2 = 0; i2 != m2.length; ++i2) {
        y2 = m2[i2].match(attregex2);
        if ((j2 = y2[1].indexOf(":")) === -1)
          z2[y2[1]] = y2[2].slice(1, y2[2].length - 1);
        else {
          if (y2[1].slice(0, 6) === "xmlns:")
            w2 = "xmlns" + y2[1].slice(6);
          else
            w2 = y2[1].slice(j2 + 1);
          z2[w2] = y2[2].slice(1, y2[2].length - 1);
        }
      }
    return z2;
  }
  var XLMLFormatMap;
  function xlml_format(format2, value2) {
    var fmt = XLMLFormatMap[format2] || unescapexml(format2);
    if (fmt === "General")
      return SSF_general(value2);
    return SSF_format(fmt, value2);
  }
  function xlml_set_custprop(Custprops, key, cp, val) {
    var oval = val;
    switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
      case "boolean":
        oval = parsexmlbool(val);
        break;
      case "i2":
      case "int":
        oval = parseInt(val, 10);
        break;
      case "r4":
      case "float":
        oval = parseFloat(val);
        break;
      case "date":
      case "dateTime.tz":
        oval = parseDate(val);
        break;
      case "i8":
      case "string":
      case "fixed":
      case "uuid":
      case "bin.base64":
        break;
      default:
        throw new Error("bad custprop:" + cp[0]);
    }
    Custprops[unescapexml(key)] = oval;
  }
  function safe_format_xlml(cell, nf, o2) {
    if (cell.t === "z")
      return;
    if (!o2 || o2.cellText !== false)
      try {
        if (cell.t === "e") {
          cell.w = cell.w || BErr[cell.v];
        } else if (nf === "General") {
          if (cell.t === "n") {
            if ((cell.v | 0) === cell.v)
              cell.w = cell.v.toString(10);
            else
              cell.w = SSF_general_num(cell.v);
          } else
            cell.w = SSF_general(cell.v);
        } else
          cell.w = xlml_format(nf || "General", cell.v);
      } catch (e2) {
        if (o2.WTF)
          throw e2;
      }
    try {
      var z2 = XLMLFormatMap[nf] || nf || "General";
      if (o2.cellNF)
        cell.z = z2;
      if (o2.cellDates && cell.t == "n" && fmt_is_date(z2)) {
        var _d = SSF_parse_date_code(cell.v);
        if (_d) {
          cell.t = "d";
          cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
        }
      }
    } catch (e2) {
      if (o2.WTF)
        throw e2;
    }
  }
  function process_style_xlml(styles, stag, opts) {
    if (opts.cellStyles) {
      if (stag.Interior) {
        var I2 = stag.Interior;
        if (I2.Pattern)
          I2.patternType = XLMLPatternTypeMap[I2.Pattern] || I2.Pattern;
      }
    }
    styles[stag.ID] = stag;
  }
  function parse_xlml_data(xml, ss2, data, cell, base, styles, csty, row, arrayf, o2) {
    var nf = "General", sid = cell.StyleID, S2 = {};
    o2 = o2 || {};
    var interiors = [];
    var i2 = 0;
    if (sid === void 0 && row)
      sid = row.StyleID;
    if (sid === void 0 && csty)
      sid = csty.StyleID;
    while (styles[sid] !== void 0) {
      if (styles[sid].nf)
        nf = styles[sid].nf;
      if (styles[sid].Interior)
        interiors.push(styles[sid].Interior);
      if (!styles[sid].Parent)
        break;
      sid = styles[sid].Parent;
    }
    switch (data.Type) {
      case "Boolean":
        cell.t = "b";
        cell.v = parsexmlbool(xml);
        break;
      case "String":
        cell.t = "s";
        cell.r = xlml_fixstr(unescapexml(xml));
        cell.v = xml.indexOf("<") > -1 ? unescapexml(ss2 || xml).replace(/<.*?>/g, "") : cell.r;
        break;
      case "DateTime":
        if (xml.slice(-1) != "Z")
          xml += "Z";
        cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1e3);
        if (cell.v !== cell.v)
          cell.v = unescapexml(xml);
        else if (cell.v < 60)
          cell.v = cell.v - 1;
        if (!nf || nf == "General")
          nf = "yyyy-mm-dd";
      case "Number":
        if (cell.v === void 0)
          cell.v = +xml;
        if (!cell.t)
          cell.t = "n";
        break;
      case "Error":
        cell.t = "e";
        cell.v = RBErr[xml];
        if (o2.cellText !== false)
          cell.w = xml;
        break;
      default:
        if (xml == "" && ss2 == "") {
          cell.t = "z";
        } else {
          cell.t = "s";
          cell.v = xlml_fixstr(ss2 || xml);
        }
        break;
    }
    safe_format_xlml(cell, nf, o2);
    if (o2.cellFormula !== false) {
      if (cell.Formula) {
        var fstr = unescapexml(cell.Formula);
        if (fstr.charCodeAt(0) == 61)
          fstr = fstr.slice(1);
        cell.f = rc_to_a1(fstr, base);
        delete cell.Formula;
        if (cell.ArrayRange == "RC")
          cell.F = rc_to_a1("RC:RC", base);
        else if (cell.ArrayRange) {
          cell.F = rc_to_a1(cell.ArrayRange, base);
          arrayf.push([safe_decode_range(cell.F), cell.F]);
        }
      } else {
        for (i2 = 0; i2 < arrayf.length; ++i2)
          if (base.r >= arrayf[i2][0].s.r && base.r <= arrayf[i2][0].e.r) {
            if (base.c >= arrayf[i2][0].s.c && base.c <= arrayf[i2][0].e.c)
              cell.F = arrayf[i2][1];
          }
      }
    }
    if (o2.cellStyles) {
      interiors.forEach(function(x) {
        if (!S2.patternType && x.patternType)
          S2.patternType = x.patternType;
      });
      cell.s = S2;
    }
    if (cell.StyleID !== void 0)
      cell.ixfe = cell.StyleID;
  }
  function xlml_clean_comment(comment) {
    comment.t = comment.v || "";
    comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    comment.v = comment.w = comment.ixfe = void 0;
  }
  function parse_xlml_xml(d2, _opts) {
    var opts = _opts || {};
    make_ssf();
    var str = debom(xlml_normalize(d2));
    if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
      str = utf8read(str);
    }
    var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
    opening = opening.replace(/".*?"/g, "");
    if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
      var _o2 = dup(opts);
      _o2.type = "string";
      return PRN.to_workbook(str, _o2);
    }
    if (opening.indexOf("<?xml") == -1)
      ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) {
        if (opening.indexOf("<" + tag) >= 0)
          ishtml = true;
      });
    if (ishtml)
      return html_to_workbook(str, opts);
    XLMLFormatMap = {
      "General Number": "General",
      "General Date": table_fmt[22],
      "Long Date": "dddd, mmmm dd, yyyy",
      "Medium Date": table_fmt[15],
      "Short Date": table_fmt[14],
      "Long Time": table_fmt[19],
      "Medium Time": table_fmt[18],
      "Short Time": table_fmt[20],
      "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
      "Fixed": table_fmt[2],
      "Standard": table_fmt[4],
      "Percent": table_fmt[10],
      "Scientific": table_fmt[11],
      "Yes/No": '"Yes";"Yes";"No";@',
      "True/False": '"True";"True";"False";@',
      "On/Off": '"Yes";"Yes";"No";@'
    };
    var Rn;
    var state = [], tmp;
    var sheets = {}, sheetnames = [], cursheet = opts.dense ? [] : {}, sheetname = "";
    var cell = {}, row = {};
    var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
    var c2 = 0, r2 = 0;
    var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
    var styles = {}, stag = {};
    var ss2 = "", fidx = 0;
    var merges = [];
    var Props = {}, Custprops = {}, pidx = 0, cp = [];
    var comments = [], comment = {};
    var cstys = [], csty, seencol = false;
    var arrayf = [];
    var rowinfo = [], rowobj = {}, cc = 0, rr = 0;
    var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {};
    xlmlregex.lastIndex = 0;
    str = str.replace(/<!--([\s\S]*?)-->/mg, "");
    var raw_Rn3 = "";
    while (Rn = xlmlregex.exec(str))
      switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {
        case "data":
          if (raw_Rn3 == "data") {
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3])
                throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
              state.push([Rn[3], true]);
            break;
          }
          if (state[state.length - 1][1])
            break;
          if (Rn[1] === "/")
            parse_xlml_data(str.slice(didx, Rn.index), ss2, dtag, state[state.length - 1][0] == /*"Comment"*/
            "comment" ? comment : cell, { c: c2, r: r2 }, styles, cstys[c2], row, arrayf, opts);
          else {
            ss2 = "";
            dtag = xlml_parsexmltag(Rn[0]);
            didx = Rn.index + Rn[0].length;
          }
          break;
        case "cell":
          if (Rn[1] === "/") {
            if (comments.length > 0)
              cell.c = comments;
            if ((!opts.sheetRows || opts.sheetRows > r2) && cell.v !== void 0) {
              if (opts.dense) {
                if (!cursheet[r2])
                  cursheet[r2] = [];
                cursheet[r2][c2] = cell;
              } else
                cursheet[encode_col(c2) + encode_row(r2)] = cell;
            }
            if (cell.HRef) {
              cell.l = { Target: unescapexml(cell.HRef) };
              if (cell.HRefScreenTip)
                cell.l.Tooltip = cell.HRefScreenTip;
              delete cell.HRef;
              delete cell.HRefScreenTip;
            }
            if (cell.MergeAcross || cell.MergeDown) {
              cc = c2 + (parseInt(cell.MergeAcross, 10) | 0);
              rr = r2 + (parseInt(cell.MergeDown, 10) | 0);
              merges.push({ s: { c: c2, r: r2 }, e: { c: cc, r: rr } });
            }
            if (!opts.sheetStubs) {
              if (cell.MergeAcross)
                c2 = cc + 1;
              else
                ++c2;
            } else if (cell.MergeAcross || cell.MergeDown) {
              for (var cma = c2; cma <= cc; ++cma) {
                for (var cmd = r2; cmd <= rr; ++cmd) {
                  if (cma > c2 || cmd > r2) {
                    if (opts.dense) {
                      if (!cursheet[cmd])
                        cursheet[cmd] = [];
                      cursheet[cmd][cma] = { t: "z" };
                    } else
                      cursheet[encode_col(cma) + encode_row(cmd)] = { t: "z" };
                  }
                }
              }
              c2 = cc + 1;
            } else
              ++c2;
          } else {
            cell = xlml_parsexmltagobj(Rn[0]);
            if (cell.Index)
              c2 = +cell.Index - 1;
            if (c2 < refguess.s.c)
              refguess.s.c = c2;
            if (c2 > refguess.e.c)
              refguess.e.c = c2;
            if (Rn[0].slice(-2) === "/>")
              ++c2;
            comments = [];
          }
          break;
        case "row":
          if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
            if (r2 < refguess.s.r)
              refguess.s.r = r2;
            if (r2 > refguess.e.r)
              refguess.e.r = r2;
            if (Rn[0].slice(-2) === "/>") {
              row = xlml_parsexmltag(Rn[0]);
              if (row.Index)
                r2 = +row.Index - 1;
            }
            c2 = 0;
            ++r2;
          } else {
            row = xlml_parsexmltag(Rn[0]);
            if (row.Index)
              r2 = +row.Index - 1;
            rowobj = {};
            if (row.AutoFitHeight == "0" || row.Height) {
              rowobj.hpx = parseInt(row.Height, 10);
              rowobj.hpt = px2pt(rowobj.hpx);
              rowinfo[r2] = rowobj;
            }
            if (row.Hidden == "1") {
              rowobj.hidden = true;
              rowinfo[r2] = rowobj;
            }
          }
          break;
        case "worksheet":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw new Error("Bad state: " + tmp.join("|"));
            sheetnames.push(sheetname);
            if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
              cursheet["!ref"] = encode_range(refguess);
              if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                cursheet["!fullref"] = cursheet["!ref"];
                refguess.e.r = opts.sheetRows - 1;
                cursheet["!ref"] = encode_range(refguess);
              }
            }
            if (merges.length)
              cursheet["!merges"] = merges;
            if (cstys.length > 0)
              cursheet["!cols"] = cstys;
            if (rowinfo.length > 0)
              cursheet["!rows"] = rowinfo;
            sheets[sheetname] = cursheet;
          } else {
            refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
            r2 = c2 = 0;
            state.push([Rn[3], false]);
            tmp = xlml_parsexmltag(Rn[0]);
            sheetname = unescapexml(tmp.Name);
            cursheet = opts.dense ? [] : {};
            merges = [];
            arrayf = [];
            rowinfo = [];
            wsprops = { name: sheetname, Hidden: 0 };
            Workbook.Sheets.push(wsprops);
          }
          break;
        case "table":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw new Error("Bad state: " + tmp.join("|"));
          } else if (Rn[0].slice(-2) == "/>")
            break;
          else {
            state.push([Rn[3], false]);
            cstys = [];
            seencol = false;
          }
          break;
        case "style":
          if (Rn[1] === "/")
            process_style_xlml(styles, stag, opts);
          else
            stag = xlml_parsexmltag(Rn[0]);
          break;
        case "numberformat":
          stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
          if (XLMLFormatMap[stag.nf])
            stag.nf = XLMLFormatMap[stag.nf];
          for (var ssfidx = 0; ssfidx != 392; ++ssfidx)
            if (table_fmt[ssfidx] == stag.nf)
              break;
          if (ssfidx == 392) {
            for (ssfidx = 57; ssfidx != 392; ++ssfidx)
              if (table_fmt[ssfidx] == null) {
                SSF_load(stag.nf, ssfidx);
                break;
              }
          }
          break;
        case "column":
          if (state[state.length - 1][0] !== /*'Table'*/
          "table")
            break;
          csty = xlml_parsexmltag(Rn[0]);
          if (csty.Hidden) {
            csty.hidden = true;
            delete csty.Hidden;
          }
          if (csty.Width)
            csty.wpx = parseInt(csty.Width, 10);
          if (!seencol && csty.wpx > 10) {
            seencol = true;
            MDW = DEF_MDW;
            for (var _col = 0; _col < cstys.length; ++_col)
              if (cstys[_col])
                process_col(cstys[_col]);
          }
          if (seencol)
            process_col(csty);
          cstys[csty.Index - 1 || cstys.length] = csty;
          for (var i2 = 0; i2 < +csty.Span; ++i2)
            cstys[cstys.length] = dup(csty);
          break;
        case "namedrange":
          if (Rn[1] === "/")
            break;
          if (!Workbook.Names)
            Workbook.Names = [];
          var _NamedRange = parsexmltag(Rn[0]);
          var _DefinedName = {
            Name: _NamedRange.Name,
            Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), { r: 0, c: 0 })
          };
          if (Workbook.Sheets.length > 0)
            _DefinedName.Sheet = Workbook.Sheets.length - 1;
          Workbook.Names.push(_DefinedName);
          break;
        case "namedcell":
          break;
        case "b":
          break;
        case "i":
          break;
        case "u":
          break;
        case "s":
          break;
        case "em":
          break;
        case "h2":
          break;
        case "h3":
          break;
        case "sub":
          break;
        case "sup":
          break;
        case "span":
          break;
        case "alignment":
          break;
        case "borders":
          break;
        case "border":
          break;
        case "font":
          if (Rn[0].slice(-2) === "/>")
            break;
          else if (Rn[1] === "/")
            ss2 += str.slice(fidx, Rn.index);
          else
            fidx = Rn.index + Rn[0].length;
          break;
        case "interior":
          if (!opts.cellStyles)
            break;
          stag.Interior = xlml_parsexmltag(Rn[0]);
          break;
        case "protection":
          break;
        case "author":
        case "title":
        case "description":
        case "created":
        case "keywords":
        case "subject":
        case "category":
        case "company":
        case "lastauthor":
        case "lastsaved":
        case "lastprinted":
        case "version":
        case "revision":
        case "totaltime":
        case "hyperlinkbase":
        case "manager":
        case "contentstatus":
        case "identifier":
        case "language":
        case "appname":
          if (Rn[0].slice(-2) === "/>")
            break;
          else if (Rn[1] === "/")
            xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
          else
            pidx = Rn.index + Rn[0].length;
          break;
        case "paragraphs":
          break;
        case "styles":
        case "workbook":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw new Error("Bad state: " + tmp.join("|"));
          } else
            state.push([Rn[3], false]);
          break;
        case "comment":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw new Error("Bad state: " + tmp.join("|"));
            xlml_clean_comment(comment);
            comments.push(comment);
          } else {
            state.push([Rn[3], false]);
            tmp = xlml_parsexmltag(Rn[0]);
            comment = { a: tmp.Author };
          }
          break;
        case "autofilter":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw new Error("Bad state: " + tmp.join("|"));
          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
            var AutoFilter = xlml_parsexmltag(Rn[0]);
            cursheet["!autofilter"] = { ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "") };
            state.push([Rn[3], true]);
          }
          break;
        case "name":
          break;
        case "datavalidation":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw new Error("Bad state: " + tmp.join("|"));
          } else {
            if (Rn[0].charAt(Rn[0].length - 2) !== "/")
              state.push([Rn[3], true]);
          }
          break;
        case "pixelsperinch":
          break;
        case "componentoptions":
        case "documentproperties":
        case "customdocumentproperties":
        case "officedocumentsettings":
        case "pivottable":
        case "pivotcache":
        case "names":
        case "mapinfo":
        case "pagebreaks":
        case "querytable":
        case "sorting":
        case "schema":
        case "conditionalformatting":
        case "smarttagtype":
        case "smarttags":
        case "excelworkbook":
        case "workbookoptions":
        case "worksheetoptions":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw new Error("Bad state: " + tmp.join("|"));
          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
            state.push([Rn[3], true]);
          break;
        case "null":
          break;
        default:
          if (state.length == 0 && Rn[3] == "document")
            return parse_fods(str, opts);
          if (state.length == 0 && Rn[3] == "uof")
            return parse_fods(str, opts);
          var seen = true;
          switch (state[state.length - 1][0]) {
            case "officedocumentsettings":
              switch (Rn[3]) {
                case "allowpng":
                  break;
                case "removepersonalinformation":
                  break;
                case "downloadcomponents":
                  break;
                case "locationofcomponents":
                  break;
                case "colors":
                  break;
                case "color":
                  break;
                case "index":
                  break;
                case "rgb":
                  break;
                case "targetscreensize":
                  break;
                case "readonlyrecommended":
                  break;
                default:
                  seen = false;
              }
              break;
            case "componentoptions":
              switch (Rn[3]) {
                case "toolbar":
                  break;
                case "hideofficelogo":
                  break;
                case "spreadsheetautofit":
                  break;
                case "label":
                  break;
                case "caption":
                  break;
                case "maxheight":
                  break;
                case "maxwidth":
                  break;
                case "nextsheetnumber":
                  break;
                default:
                  seen = false;
              }
              break;
            case "excelworkbook":
              switch (Rn[3]) {
                case "date1904":
                  Workbook.WBProps.date1904 = true;
                  break;
                case "windowheight":
                  break;
                case "windowwidth":
                  break;
                case "windowtopx":
                  break;
                case "windowtopy":
                  break;
                case "tabratio":
                  break;
                case "protectstructure":
                  break;
                case "protectwindow":
                  break;
                case "protectwindows":
                  break;
                case "activesheet":
                  break;
                case "displayinknotes":
                  break;
                case "firstvisiblesheet":
                  break;
                case "supbook":
                  break;
                case "sheetname":
                  break;
                case "sheetindex":
                  break;
                case "sheetindexfirst":
                  break;
                case "sheetindexlast":
                  break;
                case "dll":
                  break;
                case "acceptlabelsinformulas":
                  break;
                case "donotsavelinkvalues":
                  break;
                case "iteration":
                  break;
                case "maxiterations":
                  break;
                case "maxchange":
                  break;
                case "path":
                  break;
                case "xct":
                  break;
                case "count":
                  break;
                case "selectedsheets":
                  break;
                case "calculation":
                  break;
                case "uncalced":
                  break;
                case "startupprompt":
                  break;
                case "crn":
                  break;
                case "externname":
                  break;
                case "formula":
                  break;
                case "colfirst":
                  break;
                case "collast":
                  break;
                case "wantadvise":
                  break;
                case "boolean":
                  break;
                case "error":
                  break;
                case "text":
                  break;
                case "ole":
                  break;
                case "noautorecover":
                  break;
                case "publishobjects":
                  break;
                case "donotcalculatebeforesave":
                  break;
                case "number":
                  break;
                case "refmoder1c1":
                  break;
                case "embedsavesmarttags":
                  break;
                default:
                  seen = false;
              }
              break;
            case "workbookoptions":
              switch (Rn[3]) {
                case "owcversion":
                  break;
                case "height":
                  break;
                case "width":
                  break;
                default:
                  seen = false;
              }
              break;
            case "worksheetoptions":
              switch (Rn[3]) {
                case "visible":
                  if (Rn[0].slice(-2) === "/>")
                    ;
                  else if (Rn[1] === "/")
                    switch (str.slice(pidx, Rn.index)) {
                      case "SheetHidden":
                        wsprops.Hidden = 1;
                        break;
                      case "SheetVeryHidden":
                        wsprops.Hidden = 2;
                        break;
                    }
                  else
                    pidx = Rn.index + Rn[0].length;
                  break;
                case "header":
                  if (!cursheet["!margins"])
                    default_margins(cursheet["!margins"] = {}, "xlml");
                  if (!isNaN(+parsexmltag(Rn[0]).Margin))
                    cursheet["!margins"].header = +parsexmltag(Rn[0]).Margin;
                  break;
                case "footer":
                  if (!cursheet["!margins"])
                    default_margins(cursheet["!margins"] = {}, "xlml");
                  if (!isNaN(+parsexmltag(Rn[0]).Margin))
                    cursheet["!margins"].footer = +parsexmltag(Rn[0]).Margin;
                  break;
                case "pagemargins":
                  var pagemargins = parsexmltag(Rn[0]);
                  if (!cursheet["!margins"])
                    default_margins(cursheet["!margins"] = {}, "xlml");
                  if (!isNaN(+pagemargins.Top))
                    cursheet["!margins"].top = +pagemargins.Top;
                  if (!isNaN(+pagemargins.Left))
                    cursheet["!margins"].left = +pagemargins.Left;
                  if (!isNaN(+pagemargins.Right))
                    cursheet["!margins"].right = +pagemargins.Right;
                  if (!isNaN(+pagemargins.Bottom))
                    cursheet["!margins"].bottom = +pagemargins.Bottom;
                  break;
                case "displayrighttoleft":
                  if (!Workbook.Views)
                    Workbook.Views = [];
                  if (!Workbook.Views[0])
                    Workbook.Views[0] = {};
                  Workbook.Views[0].RTL = true;
                  break;
                case "freezepanes":
                  break;
                case "frozennosplit":
                  break;
                case "splithorizontal":
                case "splitvertical":
                  break;
                case "donotdisplaygridlines":
                  break;
                case "activerow":
                  break;
                case "activecol":
                  break;
                case "toprowbottompane":
                  break;
                case "leftcolumnrightpane":
                  break;
                case "unsynced":
                  break;
                case "print":
                  break;
                case "printerrors":
                  break;
                case "panes":
                  break;
                case "scale":
                  break;
                case "pane":
                  break;
                case "number":
                  break;
                case "layout":
                  break;
                case "pagesetup":
                  break;
                case "selected":
                  break;
                case "protectobjects":
                  break;
                case "enableselection":
                  break;
                case "protectscenarios":
                  break;
                case "validprinterinfo":
                  break;
                case "horizontalresolution":
                  break;
                case "verticalresolution":
                  break;
                case "numberofcopies":
                  break;
                case "activepane":
                  break;
                case "toprowvisible":
                  break;
                case "leftcolumnvisible":
                  break;
                case "fittopage":
                  break;
                case "rangeselection":
                  break;
                case "papersizeindex":
                  break;
                case "pagelayoutzoom":
                  break;
                case "pagebreakzoom":
                  break;
                case "filteron":
                  break;
                case "fitwidth":
                  break;
                case "fitheight":
                  break;
                case "commentslayout":
                  break;
                case "zoom":
                  break;
                case "lefttoright":
                  break;
                case "gridlines":
                  break;
                case "allowsort":
                  break;
                case "allowfilter":
                  break;
                case "allowinsertrows":
                  break;
                case "allowdeleterows":
                  break;
                case "allowinsertcols":
                  break;
                case "allowdeletecols":
                  break;
                case "allowinserthyperlinks":
                  break;
                case "allowformatcells":
                  break;
                case "allowsizecols":
                  break;
                case "allowsizerows":
                  break;
                case "nosummaryrowsbelowdetail":
                  if (!cursheet["!outline"])
                    cursheet["!outline"] = {};
                  cursheet["!outline"].above = true;
                  break;
                case "tabcolorindex":
                  break;
                case "donotdisplayheadings":
                  break;
                case "showpagelayoutzoom":
                  break;
                case "nosummarycolumnsrightdetail":
                  if (!cursheet["!outline"])
                    cursheet["!outline"] = {};
                  cursheet["!outline"].left = true;
                  break;
                case "blackandwhite":
                  break;
                case "donotdisplayzeros":
                  break;
                case "displaypagebreak":
                  break;
                case "rowcolheadings":
                  break;
                case "donotdisplayoutline":
                  break;
                case "noorientation":
                  break;
                case "allowusepivottables":
                  break;
                case "zeroheight":
                  break;
                case "viewablerange":
                  break;
                case "selection":
                  break;
                case "protectcontents":
                  break;
                default:
                  seen = false;
              }
              break;
            case "pivottable":
            case "pivotcache":
              switch (Rn[3]) {
                case "immediateitemsondrop":
                  break;
                case "showpagemultipleitemlabel":
                  break;
                case "compactrowindent":
                  break;
                case "location":
                  break;
                case "pivotfield":
                  break;
                case "orientation":
                  break;
                case "layoutform":
                  break;
                case "layoutsubtotallocation":
                  break;
                case "layoutcompactrow":
                  break;
                case "position":
                  break;
                case "pivotitem":
                  break;
                case "datatype":
                  break;
                case "datafield":
                  break;
                case "sourcename":
                  break;
                case "parentfield":
                  break;
                case "ptlineitems":
                  break;
                case "ptlineitem":
                  break;
                case "countofsameitems":
                  break;
                case "item":
                  break;
                case "itemtype":
                  break;
                case "ptsource":
                  break;
                case "cacheindex":
                  break;
                case "consolidationreference":
                  break;
                case "filename":
                  break;
                case "reference":
                  break;
                case "nocolumngrand":
                  break;
                case "norowgrand":
                  break;
                case "blanklineafteritems":
                  break;
                case "hidden":
                  break;
                case "subtotal":
                  break;
                case "basefield":
                  break;
                case "mapchilditems":
                  break;
                case "function":
                  break;
                case "refreshonfileopen":
                  break;
                case "printsettitles":
                  break;
                case "mergelabels":
                  break;
                case "defaultversion":
                  break;
                case "refreshname":
                  break;
                case "refreshdate":
                  break;
                case "refreshdatecopy":
                  break;
                case "versionlastrefresh":
                  break;
                case "versionlastupdate":
                  break;
                case "versionupdateablemin":
                  break;
                case "versionrefreshablemin":
                  break;
                case "calculation":
                  break;
                default:
                  seen = false;
              }
              break;
            case "pagebreaks":
              switch (Rn[3]) {
                case "colbreaks":
                  break;
                case "colbreak":
                  break;
                case "rowbreaks":
                  break;
                case "rowbreak":
                  break;
                case "colstart":
                  break;
                case "colend":
                  break;
                case "rowend":
                  break;
                default:
                  seen = false;
              }
              break;
            case "autofilter":
              switch (Rn[3]) {
                case "autofiltercolumn":
                  break;
                case "autofiltercondition":
                  break;
                case "autofilterand":
                  break;
                case "autofilteror":
                  break;
                default:
                  seen = false;
              }
              break;
            case "querytable":
              switch (Rn[3]) {
                case "id":
                  break;
                case "autoformatfont":
                  break;
                case "autoformatpattern":
                  break;
                case "querysource":
                  break;
                case "querytype":
                  break;
                case "enableredirections":
                  break;
                case "refreshedinxl9":
                  break;
                case "urlstring":
                  break;
                case "htmltables":
                  break;
                case "connection":
                  break;
                case "commandtext":
                  break;
                case "refreshinfo":
                  break;
                case "notitles":
                  break;
                case "nextid":
                  break;
                case "columninfo":
                  break;
                case "overwritecells":
                  break;
                case "donotpromptforfile":
                  break;
                case "textwizardsettings":
                  break;
                case "source":
                  break;
                case "number":
                  break;
                case "decimal":
                  break;
                case "thousandseparator":
                  break;
                case "trailingminusnumbers":
                  break;
                case "formatsettings":
                  break;
                case "fieldtype":
                  break;
                case "delimiters":
                  break;
                case "tab":
                  break;
                case "comma":
                  break;
                case "autoformatname":
                  break;
                case "versionlastedit":
                  break;
                case "versionlastrefresh":
                  break;
                default:
                  seen = false;
              }
              break;
            case "datavalidation":
              switch (Rn[3]) {
                case "range":
                  break;
                case "type":
                  break;
                case "min":
                  break;
                case "max":
                  break;
                case "sort":
                  break;
                case "descending":
                  break;
                case "order":
                  break;
                case "casesensitive":
                  break;
                case "value":
                  break;
                case "errorstyle":
                  break;
                case "errormessage":
                  break;
                case "errortitle":
                  break;
                case "inputmessage":
                  break;
                case "inputtitle":
                  break;
                case "combohide":
                  break;
                case "inputhide":
                  break;
                case "condition":
                  break;
                case "qualifier":
                  break;
                case "useblank":
                  break;
                case "value1":
                  break;
                case "value2":
                  break;
                case "format":
                  break;
                case "cellrangelist":
                  break;
                default:
                  seen = false;
              }
              break;
            case "sorting":
            case "conditionalformatting":
              switch (Rn[3]) {
                case "range":
                  break;
                case "type":
                  break;
                case "min":
                  break;
                case "max":
                  break;
                case "sort":
                  break;
                case "descending":
                  break;
                case "order":
                  break;
                case "casesensitive":
                  break;
                case "value":
                  break;
                case "errorstyle":
                  break;
                case "errormessage":
                  break;
                case "errortitle":
                  break;
                case "cellrangelist":
                  break;
                case "inputmessage":
                  break;
                case "inputtitle":
                  break;
                case "combohide":
                  break;
                case "inputhide":
                  break;
                case "condition":
                  break;
                case "qualifier":
                  break;
                case "useblank":
                  break;
                case "value1":
                  break;
                case "value2":
                  break;
                case "format":
                  break;
                default:
                  seen = false;
              }
              break;
            case "mapinfo":
            case "schema":
            case "data":
              switch (Rn[3]) {
                case "map":
                  break;
                case "entry":
                  break;
                case "range":
                  break;
                case "xpath":
                  break;
                case "field":
                  break;
                case "xsdtype":
                  break;
                case "filteron":
                  break;
                case "aggregate":
                  break;
                case "elementtype":
                  break;
                case "attributetype":
                  break;
                case "schema":
                case "element":
                case "complextype":
                case "datatype":
                case "all":
                case "attribute":
                case "extends":
                  break;
                case "row":
                  break;
                default:
                  seen = false;
              }
              break;
            case "smarttags":
              break;
            default:
              seen = false;
              break;
          }
          if (seen)
            break;
          if (Rn[3].match(/!\[CDATA/))
            break;
          if (!state[state.length - 1][1])
            throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
          if (state[state.length - 1][0] === /*'CustomDocumentProperties'*/
          "customdocumentproperties") {
            if (Rn[0].slice(-2) === "/>")
              break;
            else if (Rn[1] === "/")
              xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
            else {
              cp = Rn;
              pidx = Rn.index + Rn[0].length;
            }
            break;
          }
          if (opts.WTF)
            throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
      }
    var out = {};
    if (!opts.bookSheets && !opts.bookProps)
      out.Sheets = sheets;
    out.SheetNames = sheetnames;
    out.Workbook = Workbook;
    out.SSF = dup(table_fmt);
    out.Props = Props;
    out.Custprops = Custprops;
    return out;
  }
  function parse_xlml(data, opts) {
    fix_read_opts(opts = opts || {});
    switch (opts.type || "base64") {
      case "base64":
        return parse_xlml_xml(Base64_decode(data), opts);
      case "binary":
      case "buffer":
      case "file":
        return parse_xlml_xml(data, opts);
      case "array":
        return parse_xlml_xml(a2s(data), opts);
    }
  }
  function parse_compobj(obj) {
    var v2 = {};
    var o2 = obj.content;
    o2.l = 28;
    v2.AnsiUserType = o2.read_shift(0, "lpstr-ansi");
    v2.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o2);
    if (o2.length - o2.l <= 4)
      return v2;
    var m2 = o2.read_shift(4);
    if (m2 == 0 || m2 > 40)
      return v2;
    o2.l -= 4;
    v2.Reserved1 = o2.read_shift(0, "lpstr-ansi");
    if (o2.length - o2.l <= 4)
      return v2;
    m2 = o2.read_shift(4);
    if (m2 !== 1907505652)
      return v2;
    v2.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o2);
    m2 = o2.read_shift(4);
    if (m2 == 0 || m2 > 40)
      return v2;
    o2.l -= 4;
    v2.Reserved2 = o2.read_shift(0, "lpwstr");
  }
  var CONTINUE_RT = [60, 1084, 2066, 2165, 2175];
  function slurp(RecordType, R2, blob, length, opts) {
    var l2 = length;
    var bufs = [];
    var d2 = blob.slice(blob.l, blob.l + l2);
    if (opts && opts.enc && opts.enc.insitu && d2.length > 0)
      switch (RecordType) {
        case 9:
        case 521:
        case 1033:
        case 2057:
        case 47:
        case 405:
        case 225:
        case 406:
        case 312:
        case 404:
        case 10:
          break;
        case 133:
          break;
        default:
          opts.enc.insitu(d2);
      }
    bufs.push(d2);
    blob.l += l2;
    var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];
    var start = 0;
    while (next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
      l2 = __readUInt16LE(blob, blob.l + 2);
      start = blob.l + 4;
      if (nextrt == 2066)
        start += 4;
      else if (nextrt == 2165 || nextrt == 2175) {
        start += 12;
      }
      d2 = blob.slice(start, blob.l + 4 + l2);
      bufs.push(d2);
      blob.l += 4 + l2;
      next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];
    }
    var b2 = bconcat(bufs);
    prep_blob(b2, 0);
    var ll = 0;
    b2.lens = [];
    for (var j2 = 0; j2 < bufs.length; ++j2) {
      b2.lens.push(ll);
      ll += bufs[j2].length;
    }
    if (b2.length < length)
      throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b2.length + " < " + length;
    return R2.f(b2, b2.length, opts);
  }
  function safe_format_xf(p2, opts, date1904) {
    if (p2.t === "z")
      return;
    if (!p2.XF)
      return;
    var fmtid = 0;
    try {
      fmtid = p2.z || p2.XF.numFmtId || 0;
      if (opts.cellNF)
        p2.z = table_fmt[fmtid];
    } catch (e2) {
      if (opts.WTF)
        throw e2;
    }
    if (!opts || opts.cellText !== false)
      try {
        if (p2.t === "e") {
          p2.w = p2.w || BErr[p2.v];
        } else if (fmtid === 0 || fmtid == "General") {
          if (p2.t === "n") {
            if ((p2.v | 0) === p2.v)
              p2.w = p2.v.toString(10);
            else
              p2.w = SSF_general_num(p2.v);
          } else
            p2.w = SSF_general(p2.v);
        } else
          p2.w = SSF_format(fmtid, p2.v, { date1904: !!date1904, dateNF: opts && opts.dateNF });
      } catch (e2) {
        if (opts.WTF)
          throw e2;
      }
    if (opts.cellDates && fmtid && p2.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
      var _d = SSF_parse_date_code(p2.v);
      if (_d) {
        p2.t = "d";
        p2.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
      }
    }
  }
  function make_cell(val, ixfe, t2) {
    return { v: val, ixfe, t: t2 };
  }
  function parse_workbook(blob, options) {
    var wb = { opts: {} };
    var Sheets = {};
    var out = options.dense ? [] : {};
    var Directory = {};
    var range2 = {};
    var last_formula = null;
    var sst = [];
    var cur_sheet = "";
    var Preamble = {};
    var lastcell, last_cell = "", cc, cmnt, rngC, rngR;
    var sharedf = {};
    var arrayf = [];
    var temp_val;
    var country;
    var XFs = [];
    var palette = [];
    var Workbook = { Sheets: [], WBProps: { date1904: false }, Views: [{}] }, wsprops = {};
    var get_rgb = function getrgb(icv) {
      if (icv < 8)
        return XLSIcv[icv];
      if (icv < 64)
        return palette[icv - 8] || XLSIcv[icv];
      return XLSIcv[icv];
    };
    var process_cell_style = function pcs(cell, line, options2) {
      var xfd = line.XF.data;
      if (!xfd || !xfd.patternType || !options2 || !options2.cellStyles)
        return;
      line.s = {};
      line.s.patternType = xfd.patternType;
      var t2;
      if (t2 = rgb2Hex(get_rgb(xfd.icvFore))) {
        line.s.fgColor = { rgb: t2 };
      }
      if (t2 = rgb2Hex(get_rgb(xfd.icvBack))) {
        line.s.bgColor = { rgb: t2 };
      }
    };
    var addcell = function addcell2(cell, line, options2) {
      if (file_depth > 1)
        return;
      if (options2.sheetRows && cell.r >= options2.sheetRows)
        return;
      if (options2.cellStyles && line.XF && line.XF.data)
        process_cell_style(cell, line, options2);
      delete line.ixfe;
      delete line.XF;
      lastcell = cell;
      last_cell = encode_cell(cell);
      if (!range2 || !range2.s || !range2.e)
        range2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
      if (cell.r < range2.s.r)
        range2.s.r = cell.r;
      if (cell.c < range2.s.c)
        range2.s.c = cell.c;
      if (cell.r + 1 > range2.e.r)
        range2.e.r = cell.r + 1;
      if (cell.c + 1 > range2.e.c)
        range2.e.c = cell.c + 1;
      if (options2.cellFormula && line.f) {
        for (var afi = 0; afi < arrayf.length; ++afi) {
          if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r)
            continue;
          if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r)
            continue;
          line.F = encode_range(arrayf[afi][0]);
          if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r)
            delete line.f;
          if (line.f)
            line.f = "" + stringify_formula(arrayf[afi][1], range2, cell, supbooks, opts);
          break;
        }
      }
      {
        if (options2.dense) {
          if (!out[cell.r])
            out[cell.r] = [];
          out[cell.r][cell.c] = line;
        } else
          out[last_cell] = line;
      }
    };
    var opts = {
      enc: false,
      // encrypted
      sbcch: 0,
      // cch in the preceding SupBook
      snames: [],
      // sheetnames
      sharedf,
      // shared formulae by address
      arrayf,
      // array formulae array
      rrtabid: [],
      // RRTabId
      lastuser: "",
      // Last User from WriteAccess
      biff: 8,
      // BIFF version
      codepage: 0,
      // CP from CodePage record
      winlocked: 0,
      // fLockWn from WinProtect
      cellStyles: !!options && !!options.cellStyles,
      WTF: !!options && !!options.wtf
    };
    if (options.password)
      opts.password = options.password;
    var themes;
    var merges = [];
    var objects = [];
    var colinfo = [], rowinfo = [];
    var seencol = false;
    var supbooks = [];
    supbooks.SheetNames = opts.snames;
    supbooks.sharedf = opts.sharedf;
    supbooks.arrayf = opts.arrayf;
    supbooks.names = [];
    supbooks.XTI = [];
    var last_RT = 0;
    var file_depth = 0;
    var BIFF2Fmt = 0, BIFF2FmtTable = [];
    var FilterDatabases = [];
    var last_lbl;
    opts.codepage = 1200;
    set_cp(1200);
    var seen_codepage = false;
    while (blob.l < blob.length - 1) {
      var s2 = blob.l;
      var RecordType = blob.read_shift(2);
      if (RecordType === 0 && last_RT === 10)
        break;
      var length = blob.l === blob.length ? 0 : blob.read_shift(2);
      var R2 = XLSRecordEnum[RecordType];
      if (R2 && R2.f) {
        if (options.bookSheets) {
          if (last_RT === 133 && RecordType !== 133)
            break;
        }
        last_RT = RecordType;
        if (R2.r === 2 || R2.r == 12) {
          var rt2 = blob.read_shift(2);
          length -= 2;
          if (!opts.enc && rt2 !== RecordType && ((rt2 & 255) << 8 | rt2 >> 8) !== RecordType)
            throw new Error("rt mismatch: " + rt2 + "!=" + RecordType);
          if (R2.r == 12) {
            blob.l += 10;
            length -= 10;
          }
        }
        var val = {};
        if (RecordType === 10)
          val = /*::(*/
          R2.f(blob, length, opts);
        else
          val = /*::(*/
          slurp(RecordType, R2, blob, length, opts);
        if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(last_RT) === -1)
          continue;
        switch (RecordType) {
          case 34:
            wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
            break;
          case 134:
            wb.opts.WriteProtect = true;
            break;
          case 47:
            if (!opts.enc)
              blob.l = 0;
            opts.enc = val;
            if (!options.password)
              throw new Error("File is password-protected");
            if (val.valid == null)
              throw new Error("Encryption scheme unsupported");
            if (!val.valid)
              throw new Error("Password is incorrect");
            break;
          case 92:
            opts.lastuser = val;
            break;
          case 66:
            var cpval = Number(val);
            switch (cpval) {
              case 21010:
                cpval = 1200;
                break;
              case 32768:
                cpval = 1e4;
                break;
              case 32769:
                cpval = 1252;
                break;
            }
            set_cp(opts.codepage = cpval);
            seen_codepage = true;
            break;
          case 317:
            opts.rrtabid = val;
            break;
          case 25:
            opts.winlocked = val;
            break;
          case 439:
            wb.opts["RefreshAll"] = val;
            break;
          case 12:
            wb.opts["CalcCount"] = val;
            break;
          case 16:
            wb.opts["CalcDelta"] = val;
            break;
          case 17:
            wb.opts["CalcIter"] = val;
            break;
          case 13:
            wb.opts["CalcMode"] = val;
            break;
          case 14:
            wb.opts["CalcPrecision"] = val;
            break;
          case 95:
            wb.opts["CalcSaveRecalc"] = val;
            break;
          case 15:
            opts.CalcRefMode = val;
            break;
          case 2211:
            wb.opts.FullCalc = val;
            break;
          case 129:
            if (val.fDialog)
              out["!type"] = "dialog";
            if (!val.fBelow)
              (out["!outline"] || (out["!outline"] = {})).above = true;
            if (!val.fRight)
              (out["!outline"] || (out["!outline"] = {})).left = true;
            break;
          case 224:
            XFs.push(val);
            break;
          case 430:
            supbooks.push([val]);
            supbooks[supbooks.length - 1].XTI = [];
            break;
          case 35:
          case 547:
            supbooks[supbooks.length - 1].push(val);
            break;
          case 24:
          case 536:
            last_lbl = {
              Name: val.Name,
              Ref: stringify_formula(val.rgce, range2, null, supbooks, opts)
            };
            if (val.itab > 0)
              last_lbl.Sheet = val.itab - 1;
            supbooks.names.push(last_lbl);
            if (!supbooks[0]) {
              supbooks[0] = [];
              supbooks[0].XTI = [];
            }
            supbooks[supbooks.length - 1].push(val);
            if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) {
              if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d")
                FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
            }
            break;
          case 22:
            opts.ExternCount = val;
            break;
          case 23:
            if (supbooks.length == 0) {
              supbooks[0] = [];
              supbooks[0].XTI = [];
            }
            supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
            supbooks.XTI = supbooks.XTI.concat(val);
            break;
          case 2196:
            if (opts.biff < 8)
              break;
            if (last_lbl != null)
              last_lbl.Comment = val[1];
            break;
          case 18:
            out["!protect"] = val;
            break;
          case 19:
            if (val !== 0 && opts.WTF)
              formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:18748", "Password verifier: " + val);
            break;
          case 133:
            {
              Directory[val.pos] = val;
              opts.snames.push(val.name);
            }
            break;
          case 10:
            {
              if (--file_depth)
                break;
              if (range2.e) {
                if (range2.e.r > 0 && range2.e.c > 0) {
                  range2.e.r--;
                  range2.e.c--;
                  out["!ref"] = encode_range(range2);
                  if (options.sheetRows && options.sheetRows <= range2.e.r) {
                    var tmpri = range2.e.r;
                    range2.e.r = options.sheetRows - 1;
                    out["!fullref"] = out["!ref"];
                    out["!ref"] = encode_range(range2);
                    range2.e.r = tmpri;
                  }
                  range2.e.r++;
                  range2.e.c++;
                }
                if (merges.length > 0)
                  out["!merges"] = merges;
                if (objects.length > 0)
                  out["!objects"] = objects;
                if (colinfo.length > 0)
                  out["!cols"] = colinfo;
                if (rowinfo.length > 0)
                  out["!rows"] = rowinfo;
                Workbook.Sheets.push(wsprops);
              }
              if (cur_sheet === "")
                Preamble = out;
              else
                Sheets[cur_sheet] = out;
              out = options.dense ? [] : {};
            }
            break;
          case 9:
          case 521:
          case 1033:
          case 2057:
            {
              if (opts.biff === 8)
                opts.biff = {
                  /*::[*/
                  9: 2,
                  /*::[*/
                  521: 3,
                  /*::[*/
                  1033: 4
                }[RecordType] || {
                  /*::[*/
                  512: 2,
                  /*::[*/
                  768: 3,
                  /*::[*/
                  1024: 4,
                  /*::[*/
                  1280: 5,
                  /*::[*/
                  1536: 8,
                  /*::[*/
                  2: 2,
                  /*::[*/
                  7: 2
                }[val.BIFFVer] || 8;
              opts.biffguess = val.BIFFVer == 0;
              if (val.BIFFVer == 0 && val.dt == 4096) {
                opts.biff = 5;
                seen_codepage = true;
                set_cp(opts.codepage = 28591);
              }
              if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16)
                opts.biff = 2;
              if (file_depth++)
                break;
              out = options.dense ? [] : {};
              if (opts.biff < 8 && !seen_codepage) {
                seen_codepage = true;
                set_cp(opts.codepage = options.codepage || 1252);
              }
              if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 4096) {
                if (cur_sheet === "")
                  cur_sheet = "Sheet1";
                range2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                var fakebs8 = { pos: blob.l - length, name: cur_sheet };
                Directory[fakebs8.pos] = fakebs8;
                opts.snames.push(cur_sheet);
              } else
                cur_sheet = (Directory[s2] || { name: "" }).name;
              if (val.dt == 32)
                out["!type"] = "chart";
              if (val.dt == 64)
                out["!type"] = "macro";
              merges = [];
              objects = [];
              opts.arrayf = arrayf = [];
              colinfo = [];
              rowinfo = [];
              seencol = false;
              wsprops = { Hidden: (Directory[s2] || { hs: 0 }).hs, name: cur_sheet };
            }
            break;
          case 515:
          case 3:
          case 2:
            {
              if (out["!type"] == "chart") {
                if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({ c: val.c, r: val.r })])
                  ++val.c;
              }
              temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe] || {}, v: val.val, t: "n" };
              if (BIFF2Fmt > 0)
                temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({ c: val.c, r: val.r }, temp_val, options);
            }
            break;
          case 5:
          case 517:
            {
              temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.val, t: val.t };
              if (BIFF2Fmt > 0)
                temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({ c: val.c, r: val.r }, temp_val, options);
            }
            break;
          case 638:
            {
              temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.rknum, t: "n" };
              if (BIFF2Fmt > 0)
                temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({ c: val.c, r: val.r }, temp_val, options);
            }
            break;
          case 189:
            {
              for (var j2 = val.c; j2 <= val.C; ++j2) {
                var ixfe = val.rkrec[j2 - val.c][0];
                temp_val = { ixfe, XF: XFs[ixfe], v: val.rkrec[j2 - val.c][1], t: "n" };
                if (BIFF2Fmt > 0)
                  temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: j2, r: val.r }, temp_val, options);
              }
            }
            break;
          case 6:
          case 518:
          case 1030:
            {
              if (val.val == "String") {
                last_formula = val;
                break;
              }
              temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
              temp_val.XF = XFs[temp_val.ixfe];
              if (options.cellFormula) {
                var _f2 = val.formula;
                if (_f2 && _f2[0] && _f2[0][0] && _f2[0][0][0] == "PtgExp") {
                  var _fr = _f2[0][0][1][0], _fc = _f2[0][0][1][1];
                  var _fe = encode_cell({ r: _fr, c: _fc });
                  if (sharedf[_fe])
                    temp_val.f = "" + stringify_formula(val.formula, range2, val.cell, supbooks, opts);
                  else
                    temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
                } else
                  temp_val.f = "" + stringify_formula(val.formula, range2, val.cell, supbooks, opts);
              }
              if (BIFF2Fmt > 0)
                temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell(val.cell, temp_val, options);
              last_formula = val;
            }
            break;
          case 7:
          case 519:
            {
              if (last_formula) {
                last_formula.val = val;
                temp_val = make_cell(val, last_formula.cell.ixfe, "s");
                temp_val.XF = XFs[temp_val.ixfe];
                if (options.cellFormula) {
                  temp_val.f = "" + stringify_formula(last_formula.formula, range2, last_formula.cell, supbooks, opts);
                }
                if (BIFF2Fmt > 0)
                  temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell(last_formula.cell, temp_val, options);
                last_formula = null;
              } else
                throw new Error("String record expects Formula");
            }
            break;
          case 33:
          case 545:
            {
              arrayf.push(val);
              var _arraystart = encode_cell(val[0].s);
              cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
              if (options.cellFormula && cc) {
                if (!last_formula)
                  break;
                if (!_arraystart || !cc)
                  break;
                cc.f = "" + stringify_formula(val[1], range2, val[0], supbooks, opts);
                cc.F = encode_range(val[0]);
              }
            }
            break;
          case 1212:
            {
              if (!options.cellFormula)
                break;
              if (last_cell) {
                if (!last_formula)
                  break;
                sharedf[encode_cell(last_formula.cell)] = val[0];
                cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                (cc || {}).f = "" + stringify_formula(val[0], range2, lastcell, supbooks, opts);
              }
            }
            break;
          case 253:
            temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
            if (sst[val.isst].h)
              temp_val.h = sst[val.isst].h;
            temp_val.XF = XFs[temp_val.ixfe];
            if (BIFF2Fmt > 0)
              temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({ c: val.c, r: val.r }, temp_val, options);
            break;
          case 513:
            if (options.sheetStubs) {
              temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], t: "z" };
              if (BIFF2Fmt > 0)
                temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({ c: val.c, r: val.r }, temp_val, options);
            }
            break;
          case 190:
            if (options.sheetStubs) {
              for (var _j2 = val.c; _j2 <= val.C; ++_j2) {
                var _ixfe = val.ixfe[_j2 - val.c];
                temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: "z" };
                if (BIFF2Fmt > 0)
                  temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: _j2, r: val.r }, temp_val, options);
              }
            }
            break;
          case 214:
          case 516:
          case 4:
            temp_val = make_cell(val.val, val.ixfe, "s");
            temp_val.XF = XFs[temp_val.ixfe];
            if (BIFF2Fmt > 0)
              temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({ c: val.c, r: val.r }, temp_val, options);
            break;
          case 0:
          case 512:
            {
              if (file_depth === 1)
                range2 = val;
            }
            break;
          case 252:
            {
              sst = val;
            }
            break;
          case 1054:
            {
              if (opts.biff == 4) {
                BIFF2FmtTable[BIFF2Fmt++] = val[1];
                for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)
                  if (table_fmt[b4idx] == val[1])
                    break;
                if (b4idx >= 163)
                  SSF_load(val[1], BIFF2Fmt + 163);
              } else
                SSF_load(val[1], val[0]);
            }
            break;
          case 30:
            {
              BIFF2FmtTable[BIFF2Fmt++] = val;
              for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)
                if (table_fmt[b2idx] == val)
                  break;
              if (b2idx >= 163)
                SSF_load(val, BIFF2Fmt + 163);
            }
            break;
          case 229:
            merges = merges.concat(val);
            break;
          case 93:
            objects[val.cmo[0]] = opts.lastobj = val;
            break;
          case 438:
            opts.lastobj.TxO = val;
            break;
          case 127:
            opts.lastobj.ImData = val;
            break;
          case 440:
            {
              for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                  cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                  if (cc)
                    cc.l = val[1];
                }
            }
            break;
          case 2048:
            {
              for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                  cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                  if (cc && cc.l)
                    cc.l.Tooltip = val[1];
                }
            }
            break;
          case 28:
            {
              if (opts.biff <= 5 && opts.biff >= 2)
                break;
              cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
              var noteobj = objects[val[2]];
              if (!cc) {
                if (options.dense) {
                  if (!out[val[0].r])
                    out[val[0].r] = [];
                  cc = out[val[0].r][val[0].c] = { t: "z" };
                } else {
                  cc = out[encode_cell(val[0])] = { t: "z" };
                }
                range2.e.r = Math.max(range2.e.r, val[0].r);
                range2.s.r = Math.min(range2.s.r, val[0].r);
                range2.e.c = Math.max(range2.e.c, val[0].c);
                range2.s.c = Math.min(range2.s.c, val[0].c);
              }
              if (!cc.c)
                cc.c = [];
              cmnt = { a: val[1], t: noteobj.TxO.t };
              cc.c.push(cmnt);
            }
            break;
          case 2173:
            update_xfext(XFs[val.ixfe], val.ext);
            break;
          case 125:
            {
              if (!opts.cellStyles)
                break;
              while (val.e >= val.s) {
                colinfo[val.e--] = { width: val.w / 256, level: val.level || 0, hidden: !!(val.flags & 1) };
                if (!seencol) {
                  seencol = true;
                  find_mdw_colw(val.w / 256);
                }
                process_col(colinfo[val.e + 1]);
              }
            }
            break;
          case 520:
            {
              var rowobj = {};
              if (val.level != null) {
                rowinfo[val.r] = rowobj;
                rowobj.level = val.level;
              }
              if (val.hidden) {
                rowinfo[val.r] = rowobj;
                rowobj.hidden = true;
              }
              if (val.hpt) {
                rowinfo[val.r] = rowobj;
                rowobj.hpt = val.hpt;
                rowobj.hpx = pt2px(val.hpt);
              }
            }
            break;
          case 38:
          case 39:
          case 40:
          case 41:
            if (!out["!margins"])
              default_margins(out["!margins"] = {});
            out["!margins"][{ 38: "left", 39: "right", 40: "top", 41: "bottom" }[RecordType]] = val;
            break;
          case 161:
            if (!out["!margins"])
              default_margins(out["!margins"] = {});
            out["!margins"].header = val.header;
            out["!margins"].footer = val.footer;
            break;
          case 574:
            if (val.RTL)
              Workbook.Views[0].RTL = true;
            break;
          case 146:
            palette = val;
            break;
          case 2198:
            themes = val;
            break;
          case 140:
            country = val;
            break;
          case 442:
            {
              if (!cur_sheet)
                Workbook.WBProps.CodeName = val || "ThisWorkbook";
              else
                wsprops.CodeName = val || wsprops.name;
            }
            break;
        }
      } else {
        if (!R2)
          formatAppLog("error", "at node_modules/xlsx/xlsx.mjs:19034", "Missing Info for XLS Record 0x" + RecordType.toString(16));
        blob.l += length;
      }
    }
    wb.SheetNames = keys(Directory).sort(function(a2, b2) {
      return Number(a2) - Number(b2);
    }).map(function(x) {
      return Directory[x].name;
    });
    if (!options.bookSheets)
      wb.Sheets = Sheets;
    if (!wb.SheetNames.length && Preamble["!ref"]) {
      wb.SheetNames.push("Sheet1");
      if (wb.Sheets)
        wb.Sheets["Sheet1"] = Preamble;
    } else
      wb.Preamble = Preamble;
    if (wb.Sheets)
      FilterDatabases.forEach(function(r2, i2) {
        wb.Sheets[wb.SheetNames[i2]]["!autofilter"] = r2;
      });
    wb.Strings = sst;
    wb.SSF = dup(table_fmt);
    if (opts.enc)
      wb.Encryption = opts.enc;
    if (themes)
      wb.Themes = themes;
    wb.Metadata = {};
    if (country !== void 0)
      wb.Metadata.Country = country;
    if (supbooks.names.length > 0)
      Workbook.Names = supbooks.names;
    wb.Workbook = Workbook;
    return wb;
  }
  var PSCLSID = {
    SI: "e0859ff2f94f6810ab9108002b27b3d9",
    DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
    UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
  };
  function parse_xls_props(cfb, props2, o2) {
    var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
    if (DSI && DSI.size > 0)
      try {
        var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
        for (var d2 in DocSummary)
          props2[d2] = DocSummary[d2];
      } catch (e2) {
        if (o2.WTF)
          throw e2;
      }
    var SI = CFB.find(cfb, "/!SummaryInformation");
    if (SI && SI.size > 0)
      try {
        var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
        for (var s2 in Summary)
          if (props2[s2] == null)
            props2[s2] = Summary[s2];
      } catch (e2) {
        if (o2.WTF)
          throw e2;
      }
    if (props2.HeadingPairs && props2.TitlesOfParts) {
      load_props_pairs(props2.HeadingPairs, props2.TitlesOfParts, props2, o2);
      delete props2.HeadingPairs;
      delete props2.TitlesOfParts;
    }
  }
  function parse_xlscfb(cfb, options) {
    if (!options)
      options = {};
    fix_read_opts(options);
    reset_cp();
    if (options.codepage)
      set_ansi(options.codepage);
    var CompObj, WB;
    if (cfb.FullPaths) {
      if (CFB.find(cfb, "/encryption"))
        throw new Error("File is password-protected");
      CompObj = CFB.find(cfb, "!CompObj");
      WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
    } else {
      switch (options.type) {
        case "base64":
          cfb = s2a(Base64_decode(cfb));
          break;
        case "binary":
          cfb = s2a(cfb);
          break;
        case "buffer":
          break;
        case "array":
          if (!Array.isArray(cfb))
            cfb = Array.prototype.slice.call(cfb);
          break;
      }
      prep_blob(cfb, 0);
      WB = { content: cfb };
    }
    var WorkbookP;
    var _data;
    if (CompObj)
      parse_compobj(CompObj);
    if (options.bookProps && !options.bookSheets)
      WorkbookP = {};
    else {
      var T2 = has_buf ? "buffer" : "array";
      if (WB && WB.content)
        WorkbookP = parse_workbook(WB.content, options);
      else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content)
        WorkbookP = WK_.to_workbook(_data.content, (options.type = T2, options));
      else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content)
        WorkbookP = WK_.to_workbook(_data.content, (options.type = T2, options));
      else if ((_data = CFB.find(cfb, "MN0")) && _data.content)
        throw new Error("Unsupported Works 4 for Mac file");
      else
        throw new Error("Cannot find Workbook stream");
      if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir"))
        WorkbookP.vbaraw = make_vba_xls(cfb);
    }
    var props2 = {};
    if (cfb.FullPaths)
      parse_xls_props(
        /*::((*/
        cfb,
        props2,
        options
      );
    WorkbookP.Props = WorkbookP.Custprops = props2;
    if (options.bookFiles)
      WorkbookP.cfb = cfb;
    return WorkbookP;
  }
  var XLSBRecordEnum = {
    /*::[*/
    0: {
      /* n:"BrtRowHdr", */
      f: parse_BrtRowHdr
    },
    /*::[*/
    1: {
      /* n:"BrtCellBlank", */
      f: parse_BrtCellBlank
    },
    /*::[*/
    2: {
      /* n:"BrtCellRk", */
      f: parse_BrtCellRk
    },
    /*::[*/
    3: {
      /* n:"BrtCellError", */
      f: parse_BrtCellError
    },
    /*::[*/
    4: {
      /* n:"BrtCellBool", */
      f: parse_BrtCellBool
    },
    /*::[*/
    5: {
      /* n:"BrtCellReal", */
      f: parse_BrtCellReal
    },
    /*::[*/
    6: {
      /* n:"BrtCellSt", */
      f: parse_BrtCellSt
    },
    /*::[*/
    7: {
      /* n:"BrtCellIsst", */
      f: parse_BrtCellIsst
    },
    /*::[*/
    8: {
      /* n:"BrtFmlaString", */
      f: parse_BrtFmlaString
    },
    /*::[*/
    9: {
      /* n:"BrtFmlaNum", */
      f: parse_BrtFmlaNum
    },
    /*::[*/
    10: {
      /* n:"BrtFmlaBool", */
      f: parse_BrtFmlaBool
    },
    /*::[*/
    11: {
      /* n:"BrtFmlaError", */
      f: parse_BrtFmlaError
    },
    /*::[*/
    12: {
      /* n:"BrtShortBlank", */
      f: parse_BrtShortBlank
    },
    /*::[*/
    13: {
      /* n:"BrtShortRk", */
      f: parse_BrtShortRk
    },
    /*::[*/
    14: {
      /* n:"BrtShortError", */
      f: parse_BrtShortError
    },
    /*::[*/
    15: {
      /* n:"BrtShortBool", */
      f: parse_BrtShortBool
    },
    /*::[*/
    16: {
      /* n:"BrtShortReal", */
      f: parse_BrtShortReal
    },
    /*::[*/
    17: {
      /* n:"BrtShortSt", */
      f: parse_BrtShortSt
    },
    /*::[*/
    18: {
      /* n:"BrtShortIsst", */
      f: parse_BrtShortIsst
    },
    /*::[*/
    19: {
      /* n:"BrtSSTItem", */
      f: parse_RichStr
    },
    /*::[*/
    20: {
      /* n:"BrtPCDIMissing" */
    },
    /*::[*/
    21: {
      /* n:"BrtPCDINumber" */
    },
    /*::[*/
    22: {
      /* n:"BrtPCDIBoolean" */
    },
    /*::[*/
    23: {
      /* n:"BrtPCDIError" */
    },
    /*::[*/
    24: {
      /* n:"BrtPCDIString" */
    },
    /*::[*/
    25: {
      /* n:"BrtPCDIDatetime" */
    },
    /*::[*/
    26: {
      /* n:"BrtPCDIIndex" */
    },
    /*::[*/
    27: {
      /* n:"BrtPCDIAMissing" */
    },
    /*::[*/
    28: {
      /* n:"BrtPCDIANumber" */
    },
    /*::[*/
    29: {
      /* n:"BrtPCDIABoolean" */
    },
    /*::[*/
    30: {
      /* n:"BrtPCDIAError" */
    },
    /*::[*/
    31: {
      /* n:"BrtPCDIAString" */
    },
    /*::[*/
    32: {
      /* n:"BrtPCDIADatetime" */
    },
    /*::[*/
    33: {
      /* n:"BrtPCRRecord" */
    },
    /*::[*/
    34: {
      /* n:"BrtPCRRecordDt" */
    },
    /*::[*/
    35: {
      /* n:"BrtFRTBegin", */
      T: 1
    },
    /*::[*/
    36: {
      /* n:"BrtFRTEnd", */
      T: -1
    },
    /*::[*/
    37: {
      /* n:"BrtACBegin", */
      T: 1
    },
    /*::[*/
    38: {
      /* n:"BrtACEnd", */
      T: -1
    },
    /*::[*/
    39: {
      /* n:"BrtName", */
      f: parse_BrtName
    },
    /*::[*/
    40: {
      /* n:"BrtIndexRowBlock" */
    },
    /*::[*/
    42: {
      /* n:"BrtIndexBlock" */
    },
    /*::[*/
    43: {
      /* n:"BrtFont", */
      f: parse_BrtFont
    },
    /*::[*/
    44: {
      /* n:"BrtFmt", */
      f: parse_BrtFmt
    },
    /*::[*/
    45: {
      /* n:"BrtFill", */
      f: parse_BrtFill
    },
    /*::[*/
    46: {
      /* n:"BrtBorder", */
      f: parse_BrtBorder
    },
    /*::[*/
    47: {
      /* n:"BrtXF", */
      f: parse_BrtXF
    },
    /*::[*/
    48: {
      /* n:"BrtStyle" */
    },
    /*::[*/
    49: {
      /* n:"BrtCellMeta", */
      f: parse_Int32LE
    },
    /*::[*/
    50: {
      /* n:"BrtValueMeta" */
    },
    /*::[*/
    51: {
      /* n:"BrtMdb" */
      f: parse_BrtMdb
    },
    /*::[*/
    52: {
      /* n:"BrtBeginFmd", */
      T: 1
    },
    /*::[*/
    53: {
      /* n:"BrtEndFmd", */
      T: -1
    },
    /*::[*/
    54: {
      /* n:"BrtBeginMdx", */
      T: 1
    },
    /*::[*/
    55: {
      /* n:"BrtEndMdx", */
      T: -1
    },
    /*::[*/
    56: {
      /* n:"BrtBeginMdxTuple", */
      T: 1
    },
    /*::[*/
    57: {
      /* n:"BrtEndMdxTuple", */
      T: -1
    },
    /*::[*/
    58: {
      /* n:"BrtMdxMbrIstr" */
    },
    /*::[*/
    59: {
      /* n:"BrtStr" */
    },
    /*::[*/
    60: {
      /* n:"BrtColInfo", */
      f: parse_ColInfo
    },
    /*::[*/
    62: {
      /* n:"BrtCellRString", */
      f: parse_BrtCellRString
    },
    /*::[*/
    63: {
      /* n:"BrtCalcChainItem$", */
      f: parse_BrtCalcChainItem$
    },
    /*::[*/
    64: {
      /* n:"BrtDVal", */
      f: parse_BrtDVal
    },
    /*::[*/
    65: {
      /* n:"BrtSxvcellNum" */
    },
    /*::[*/
    66: {
      /* n:"BrtSxvcellStr" */
    },
    /*::[*/
    67: {
      /* n:"BrtSxvcellBool" */
    },
    /*::[*/
    68: {
      /* n:"BrtSxvcellErr" */
    },
    /*::[*/
    69: {
      /* n:"BrtSxvcellDate" */
    },
    /*::[*/
    70: {
      /* n:"BrtSxvcellNil" */
    },
    /*::[*/
    128: {
      /* n:"BrtFileVersion" */
    },
    /*::[*/
    129: {
      /* n:"BrtBeginSheet", */
      T: 1
    },
    /*::[*/
    130: {
      /* n:"BrtEndSheet", */
      T: -1
    },
    /*::[*/
    131: {
      /* n:"BrtBeginBook", */
      T: 1,
      f: parsenoop,
      p: 0
    },
    /*::[*/
    132: {
      /* n:"BrtEndBook", */
      T: -1
    },
    /*::[*/
    133: {
      /* n:"BrtBeginWsViews", */
      T: 1
    },
    /*::[*/
    134: {
      /* n:"BrtEndWsViews", */
      T: -1
    },
    /*::[*/
    135: {
      /* n:"BrtBeginBookViews", */
      T: 1
    },
    /*::[*/
    136: {
      /* n:"BrtEndBookViews", */
      T: -1
    },
    /*::[*/
    137: {
      /* n:"BrtBeginWsView", */
      T: 1,
      f: parse_BrtBeginWsView
    },
    /*::[*/
    138: {
      /* n:"BrtEndWsView", */
      T: -1
    },
    /*::[*/
    139: {
      /* n:"BrtBeginCsViews", */
      T: 1
    },
    /*::[*/
    140: {
      /* n:"BrtEndCsViews", */
      T: -1
    },
    /*::[*/
    141: {
      /* n:"BrtBeginCsView", */
      T: 1
    },
    /*::[*/
    142: {
      /* n:"BrtEndCsView", */
      T: -1
    },
    /*::[*/
    143: {
      /* n:"BrtBeginBundleShs", */
      T: 1
    },
    /*::[*/
    144: {
      /* n:"BrtEndBundleShs", */
      T: -1
    },
    /*::[*/
    145: {
      /* n:"BrtBeginSheetData", */
      T: 1
    },
    /*::[*/
    146: {
      /* n:"BrtEndSheetData", */
      T: -1
    },
    /*::[*/
    147: {
      /* n:"BrtWsProp", */
      f: parse_BrtWsProp
    },
    /*::[*/
    148: {
      /* n:"BrtWsDim", */
      f: parse_BrtWsDim,
      p: 16
    },
    /*::[*/
    151: {
      /* n:"BrtPane", */
      f: parse_BrtPane
    },
    /*::[*/
    152: {
      /* n:"BrtSel" */
    },
    /*::[*/
    153: {
      /* n:"BrtWbProp", */
      f: parse_BrtWbProp
    },
    /*::[*/
    154: {
      /* n:"BrtWbFactoid" */
    },
    /*::[*/
    155: {
      /* n:"BrtFileRecover" */
    },
    /*::[*/
    156: {
      /* n:"BrtBundleSh", */
      f: parse_BrtBundleSh
    },
    /*::[*/
    157: {
      /* n:"BrtCalcProp" */
    },
    /*::[*/
    158: {
      /* n:"BrtBookView" */
    },
    /*::[*/
    159: {
      /* n:"BrtBeginSst", */
      T: 1,
      f: parse_BrtBeginSst
    },
    /*::[*/
    160: {
      /* n:"BrtEndSst", */
      T: -1
    },
    /*::[*/
    161: {
      /* n:"BrtBeginAFilter", */
      T: 1,
      f: parse_UncheckedRfX
    },
    /*::[*/
    162: {
      /* n:"BrtEndAFilter", */
      T: -1
    },
    /*::[*/
    163: {
      /* n:"BrtBeginFilterColumn", */
      T: 1
    },
    /*::[*/
    164: {
      /* n:"BrtEndFilterColumn", */
      T: -1
    },
    /*::[*/
    165: {
      /* n:"BrtBeginFilters", */
      T: 1
    },
    /*::[*/
    166: {
      /* n:"BrtEndFilters", */
      T: -1
    },
    /*::[*/
    167: {
      /* n:"BrtFilter" */
    },
    /*::[*/
    168: {
      /* n:"BrtColorFilter" */
    },
    /*::[*/
    169: {
      /* n:"BrtIconFilter" */
    },
    /*::[*/
    170: {
      /* n:"BrtTop10Filter" */
    },
    /*::[*/
    171: {
      /* n:"BrtDynamicFilter" */
    },
    /*::[*/
    172: {
      /* n:"BrtBeginCustomFilters", */
      T: 1
    },
    /*::[*/
    173: {
      /* n:"BrtEndCustomFilters", */
      T: -1
    },
    /*::[*/
    174: {
      /* n:"BrtCustomFilter" */
    },
    /*::[*/
    175: {
      /* n:"BrtAFilterDateGroupItem" */
    },
    /*::[*/
    176: {
      /* n:"BrtMergeCell", */
      f: parse_BrtMergeCell
    },
    /*::[*/
    177: {
      /* n:"BrtBeginMergeCells", */
      T: 1
    },
    /*::[*/
    178: {
      /* n:"BrtEndMergeCells", */
      T: -1
    },
    /*::[*/
    179: {
      /* n:"BrtBeginPivotCacheDef", */
      T: 1
    },
    /*::[*/
    180: {
      /* n:"BrtEndPivotCacheDef", */
      T: -1
    },
    /*::[*/
    181: {
      /* n:"BrtBeginPCDFields", */
      T: 1
    },
    /*::[*/
    182: {
      /* n:"BrtEndPCDFields", */
      T: -1
    },
    /*::[*/
    183: {
      /* n:"BrtBeginPCDField", */
      T: 1
    },
    /*::[*/
    184: {
      /* n:"BrtEndPCDField", */
      T: -1
    },
    /*::[*/
    185: {
      /* n:"BrtBeginPCDSource", */
      T: 1
    },
    /*::[*/
    186: {
      /* n:"BrtEndPCDSource", */
      T: -1
    },
    /*::[*/
    187: {
      /* n:"BrtBeginPCDSRange", */
      T: 1
    },
    /*::[*/
    188: {
      /* n:"BrtEndPCDSRange", */
      T: -1
    },
    /*::[*/
    189: {
      /* n:"BrtBeginPCDFAtbl", */
      T: 1
    },
    /*::[*/
    190: {
      /* n:"BrtEndPCDFAtbl", */
      T: -1
    },
    /*::[*/
    191: {
      /* n:"BrtBeginPCDIRun", */
      T: 1
    },
    /*::[*/
    192: {
      /* n:"BrtEndPCDIRun", */
      T: -1
    },
    /*::[*/
    193: {
      /* n:"BrtBeginPivotCacheRecords", */
      T: 1
    },
    /*::[*/
    194: {
      /* n:"BrtEndPivotCacheRecords", */
      T: -1
    },
    /*::[*/
    195: {
      /* n:"BrtBeginPCDHierarchies", */
      T: 1
    },
    /*::[*/
    196: {
      /* n:"BrtEndPCDHierarchies", */
      T: -1
    },
    /*::[*/
    197: {
      /* n:"BrtBeginPCDHierarchy", */
      T: 1
    },
    /*::[*/
    198: {
      /* n:"BrtEndPCDHierarchy", */
      T: -1
    },
    /*::[*/
    199: {
      /* n:"BrtBeginPCDHFieldsUsage", */
      T: 1
    },
    /*::[*/
    200: {
      /* n:"BrtEndPCDHFieldsUsage", */
      T: -1
    },
    /*::[*/
    201: {
      /* n:"BrtBeginExtConnection", */
      T: 1
    },
    /*::[*/
    202: {
      /* n:"BrtEndExtConnection", */
      T: -1
    },
    /*::[*/
    203: {
      /* n:"BrtBeginECDbProps", */
      T: 1
    },
    /*::[*/
    204: {
      /* n:"BrtEndECDbProps", */
      T: -1
    },
    /*::[*/
    205: {
      /* n:"BrtBeginECOlapProps", */
      T: 1
    },
    /*::[*/
    206: {
      /* n:"BrtEndECOlapProps", */
      T: -1
    },
    /*::[*/
    207: {
      /* n:"BrtBeginPCDSConsol", */
      T: 1
    },
    /*::[*/
    208: {
      /* n:"BrtEndPCDSConsol", */
      T: -1
    },
    /*::[*/
    209: {
      /* n:"BrtBeginPCDSCPages", */
      T: 1
    },
    /*::[*/
    210: {
      /* n:"BrtEndPCDSCPages", */
      T: -1
    },
    /*::[*/
    211: {
      /* n:"BrtBeginPCDSCPage", */
      T: 1
    },
    /*::[*/
    212: {
      /* n:"BrtEndPCDSCPage", */
      T: -1
    },
    /*::[*/
    213: {
      /* n:"BrtBeginPCDSCPItem", */
      T: 1
    },
    /*::[*/
    214: {
      /* n:"BrtEndPCDSCPItem", */
      T: -1
    },
    /*::[*/
    215: {
      /* n:"BrtBeginPCDSCSets", */
      T: 1
    },
    /*::[*/
    216: {
      /* n:"BrtEndPCDSCSets", */
      T: -1
    },
    /*::[*/
    217: {
      /* n:"BrtBeginPCDSCSet", */
      T: 1
    },
    /*::[*/
    218: {
      /* n:"BrtEndPCDSCSet", */
      T: -1
    },
    /*::[*/
    219: {
      /* n:"BrtBeginPCDFGroup", */
      T: 1
    },
    /*::[*/
    220: {
      /* n:"BrtEndPCDFGroup", */
      T: -1
    },
    /*::[*/
    221: {
      /* n:"BrtBeginPCDFGItems", */
      T: 1
    },
    /*::[*/
    222: {
      /* n:"BrtEndPCDFGItems", */
      T: -1
    },
    /*::[*/
    223: {
      /* n:"BrtBeginPCDFGRange", */
      T: 1
    },
    /*::[*/
    224: {
      /* n:"BrtEndPCDFGRange", */
      T: -1
    },
    /*::[*/
    225: {
      /* n:"BrtBeginPCDFGDiscrete", */
      T: 1
    },
    /*::[*/
    226: {
      /* n:"BrtEndPCDFGDiscrete", */
      T: -1
    },
    /*::[*/
    227: {
      /* n:"BrtBeginPCDSDTupleCache", */
      T: 1
    },
    /*::[*/
    228: {
      /* n:"BrtEndPCDSDTupleCache", */
      T: -1
    },
    /*::[*/
    229: {
      /* n:"BrtBeginPCDSDTCEntries", */
      T: 1
    },
    /*::[*/
    230: {
      /* n:"BrtEndPCDSDTCEntries", */
      T: -1
    },
    /*::[*/
    231: {
      /* n:"BrtBeginPCDSDTCEMembers", */
      T: 1
    },
    /*::[*/
    232: {
      /* n:"BrtEndPCDSDTCEMembers", */
      T: -1
    },
    /*::[*/
    233: {
      /* n:"BrtBeginPCDSDTCEMember", */
      T: 1
    },
    /*::[*/
    234: {
      /* n:"BrtEndPCDSDTCEMember", */
      T: -1
    },
    /*::[*/
    235: {
      /* n:"BrtBeginPCDSDTCQueries", */
      T: 1
    },
    /*::[*/
    236: {
      /* n:"BrtEndPCDSDTCQueries", */
      T: -1
    },
    /*::[*/
    237: {
      /* n:"BrtBeginPCDSDTCQuery", */
      T: 1
    },
    /*::[*/
    238: {
      /* n:"BrtEndPCDSDTCQuery", */
      T: -1
    },
    /*::[*/
    239: {
      /* n:"BrtBeginPCDSDTCSets", */
      T: 1
    },
    /*::[*/
    240: {
      /* n:"BrtEndPCDSDTCSets", */
      T: -1
    },
    /*::[*/
    241: {
      /* n:"BrtBeginPCDSDTCSet", */
      T: 1
    },
    /*::[*/
    242: {
      /* n:"BrtEndPCDSDTCSet", */
      T: -1
    },
    /*::[*/
    243: {
      /* n:"BrtBeginPCDCalcItems", */
      T: 1
    },
    /*::[*/
    244: {
      /* n:"BrtEndPCDCalcItems", */
      T: -1
    },
    /*::[*/
    245: {
      /* n:"BrtBeginPCDCalcItem", */
      T: 1
    },
    /*::[*/
    246: {
      /* n:"BrtEndPCDCalcItem", */
      T: -1
    },
    /*::[*/
    247: {
      /* n:"BrtBeginPRule", */
      T: 1
    },
    /*::[*/
    248: {
      /* n:"BrtEndPRule", */
      T: -1
    },
    /*::[*/
    249: {
      /* n:"BrtBeginPRFilters", */
      T: 1
    },
    /*::[*/
    250: {
      /* n:"BrtEndPRFilters", */
      T: -1
    },
    /*::[*/
    251: {
      /* n:"BrtBeginPRFilter", */
      T: 1
    },
    /*::[*/
    252: {
      /* n:"BrtEndPRFilter", */
      T: -1
    },
    /*::[*/
    253: {
      /* n:"BrtBeginPNames", */
      T: 1
    },
    /*::[*/
    254: {
      /* n:"BrtEndPNames", */
      T: -1
    },
    /*::[*/
    255: {
      /* n:"BrtBeginPName", */
      T: 1
    },
    /*::[*/
    256: {
      /* n:"BrtEndPName", */
      T: -1
    },
    /*::[*/
    257: {
      /* n:"BrtBeginPNPairs", */
      T: 1
    },
    /*::[*/
    258: {
      /* n:"BrtEndPNPairs", */
      T: -1
    },
    /*::[*/
    259: {
      /* n:"BrtBeginPNPair", */
      T: 1
    },
    /*::[*/
    260: {
      /* n:"BrtEndPNPair", */
      T: -1
    },
    /*::[*/
    261: {
      /* n:"BrtBeginECWebProps", */
      T: 1
    },
    /*::[*/
    262: {
      /* n:"BrtEndECWebProps", */
      T: -1
    },
    /*::[*/
    263: {
      /* n:"BrtBeginEcWpTables", */
      T: 1
    },
    /*::[*/
    264: {
      /* n:"BrtEndECWPTables", */
      T: -1
    },
    /*::[*/
    265: {
      /* n:"BrtBeginECParams", */
      T: 1
    },
    /*::[*/
    266: {
      /* n:"BrtEndECParams", */
      T: -1
    },
    /*::[*/
    267: {
      /* n:"BrtBeginECParam", */
      T: 1
    },
    /*::[*/
    268: {
      /* n:"BrtEndECParam", */
      T: -1
    },
    /*::[*/
    269: {
      /* n:"BrtBeginPCDKPIs", */
      T: 1
    },
    /*::[*/
    270: {
      /* n:"BrtEndPCDKPIs", */
      T: -1
    },
    /*::[*/
    271: {
      /* n:"BrtBeginPCDKPI", */
      T: 1
    },
    /*::[*/
    272: {
      /* n:"BrtEndPCDKPI", */
      T: -1
    },
    /*::[*/
    273: {
      /* n:"BrtBeginDims", */
      T: 1
    },
    /*::[*/
    274: {
      /* n:"BrtEndDims", */
      T: -1
    },
    /*::[*/
    275: {
      /* n:"BrtBeginDim", */
      T: 1
    },
    /*::[*/
    276: {
      /* n:"BrtEndDim", */
      T: -1
    },
    /*::[*/
    277: {
      /* n:"BrtIndexPartEnd" */
    },
    /*::[*/
    278: {
      /* n:"BrtBeginStyleSheet", */
      T: 1
    },
    /*::[*/
    279: {
      /* n:"BrtEndStyleSheet", */
      T: -1
    },
    /*::[*/
    280: {
      /* n:"BrtBeginSXView", */
      T: 1
    },
    /*::[*/
    281: {
      /* n:"BrtEndSXVI", */
      T: -1
    },
    /*::[*/
    282: {
      /* n:"BrtBeginSXVI", */
      T: 1
    },
    /*::[*/
    283: {
      /* n:"BrtBeginSXVIs", */
      T: 1
    },
    /*::[*/
    284: {
      /* n:"BrtEndSXVIs", */
      T: -1
    },
    /*::[*/
    285: {
      /* n:"BrtBeginSXVD", */
      T: 1
    },
    /*::[*/
    286: {
      /* n:"BrtEndSXVD", */
      T: -1
    },
    /*::[*/
    287: {
      /* n:"BrtBeginSXVDs", */
      T: 1
    },
    /*::[*/
    288: {
      /* n:"BrtEndSXVDs", */
      T: -1
    },
    /*::[*/
    289: {
      /* n:"BrtBeginSXPI", */
      T: 1
    },
    /*::[*/
    290: {
      /* n:"BrtEndSXPI", */
      T: -1
    },
    /*::[*/
    291: {
      /* n:"BrtBeginSXPIs", */
      T: 1
    },
    /*::[*/
    292: {
      /* n:"BrtEndSXPIs", */
      T: -1
    },
    /*::[*/
    293: {
      /* n:"BrtBeginSXDI", */
      T: 1
    },
    /*::[*/
    294: {
      /* n:"BrtEndSXDI", */
      T: -1
    },
    /*::[*/
    295: {
      /* n:"BrtBeginSXDIs", */
      T: 1
    },
    /*::[*/
    296: {
      /* n:"BrtEndSXDIs", */
      T: -1
    },
    /*::[*/
    297: {
      /* n:"BrtBeginSXLI", */
      T: 1
    },
    /*::[*/
    298: {
      /* n:"BrtEndSXLI", */
      T: -1
    },
    /*::[*/
    299: {
      /* n:"BrtBeginSXLIRws", */
      T: 1
    },
    /*::[*/
    300: {
      /* n:"BrtEndSXLIRws", */
      T: -1
    },
    /*::[*/
    301: {
      /* n:"BrtBeginSXLICols", */
      T: 1
    },
    /*::[*/
    302: {
      /* n:"BrtEndSXLICols", */
      T: -1
    },
    /*::[*/
    303: {
      /* n:"BrtBeginSXFormat", */
      T: 1
    },
    /*::[*/
    304: {
      /* n:"BrtEndSXFormat", */
      T: -1
    },
    /*::[*/
    305: {
      /* n:"BrtBeginSXFormats", */
      T: 1
    },
    /*::[*/
    306: {
      /* n:"BrtEndSxFormats", */
      T: -1
    },
    /*::[*/
    307: {
      /* n:"BrtBeginSxSelect", */
      T: 1
    },
    /*::[*/
    308: {
      /* n:"BrtEndSxSelect", */
      T: -1
    },
    /*::[*/
    309: {
      /* n:"BrtBeginISXVDRws", */
      T: 1
    },
    /*::[*/
    310: {
      /* n:"BrtEndISXVDRws", */
      T: -1
    },
    /*::[*/
    311: {
      /* n:"BrtBeginISXVDCols", */
      T: 1
    },
    /*::[*/
    312: {
      /* n:"BrtEndISXVDCols", */
      T: -1
    },
    /*::[*/
    313: {
      /* n:"BrtEndSXLocation", */
      T: -1
    },
    /*::[*/
    314: {
      /* n:"BrtBeginSXLocation", */
      T: 1
    },
    /*::[*/
    315: {
      /* n:"BrtEndSXView", */
      T: -1
    },
    /*::[*/
    316: {
      /* n:"BrtBeginSXTHs", */
      T: 1
    },
    /*::[*/
    317: {
      /* n:"BrtEndSXTHs", */
      T: -1
    },
    /*::[*/
    318: {
      /* n:"BrtBeginSXTH", */
      T: 1
    },
    /*::[*/
    319: {
      /* n:"BrtEndSXTH", */
      T: -1
    },
    /*::[*/
    320: {
      /* n:"BrtBeginISXTHRws", */
      T: 1
    },
    /*::[*/
    321: {
      /* n:"BrtEndISXTHRws", */
      T: -1
    },
    /*::[*/
    322: {
      /* n:"BrtBeginISXTHCols", */
      T: 1
    },
    /*::[*/
    323: {
      /* n:"BrtEndISXTHCols", */
      T: -1
    },
    /*::[*/
    324: {
      /* n:"BrtBeginSXTDMPS", */
      T: 1
    },
    /*::[*/
    325: {
      /* n:"BrtEndSXTDMPs", */
      T: -1
    },
    /*::[*/
    326: {
      /* n:"BrtBeginSXTDMP", */
      T: 1
    },
    /*::[*/
    327: {
      /* n:"BrtEndSXTDMP", */
      T: -1
    },
    /*::[*/
    328: {
      /* n:"BrtBeginSXTHItems", */
      T: 1
    },
    /*::[*/
    329: {
      /* n:"BrtEndSXTHItems", */
      T: -1
    },
    /*::[*/
    330: {
      /* n:"BrtBeginSXTHItem", */
      T: 1
    },
    /*::[*/
    331: {
      /* n:"BrtEndSXTHItem", */
      T: -1
    },
    /*::[*/
    332: {
      /* n:"BrtBeginMetadata", */
      T: 1
    },
    /*::[*/
    333: {
      /* n:"BrtEndMetadata", */
      T: -1
    },
    /*::[*/
    334: {
      /* n:"BrtBeginEsmdtinfo", */
      T: 1
    },
    /*::[*/
    335: {
      /* n:"BrtMdtinfo", */
      f: parse_BrtMdtinfo
    },
    /*::[*/
    336: {
      /* n:"BrtEndEsmdtinfo", */
      T: -1
    },
    /*::[*/
    337: {
      /* n:"BrtBeginEsmdb", */
      f: parse_BrtBeginEsmdb,
      T: 1
    },
    /*::[*/
    338: {
      /* n:"BrtEndEsmdb", */
      T: -1
    },
    /*::[*/
    339: {
      /* n:"BrtBeginEsfmd", */
      T: 1
    },
    /*::[*/
    340: {
      /* n:"BrtEndEsfmd", */
      T: -1
    },
    /*::[*/
    341: {
      /* n:"BrtBeginSingleCells", */
      T: 1
    },
    /*::[*/
    342: {
      /* n:"BrtEndSingleCells", */
      T: -1
    },
    /*::[*/
    343: {
      /* n:"BrtBeginList", */
      T: 1
    },
    /*::[*/
    344: {
      /* n:"BrtEndList", */
      T: -1
    },
    /*::[*/
    345: {
      /* n:"BrtBeginListCols", */
      T: 1
    },
    /*::[*/
    346: {
      /* n:"BrtEndListCols", */
      T: -1
    },
    /*::[*/
    347: {
      /* n:"BrtBeginListCol", */
      T: 1
    },
    /*::[*/
    348: {
      /* n:"BrtEndListCol", */
      T: -1
    },
    /*::[*/
    349: {
      /* n:"BrtBeginListXmlCPr", */
      T: 1
    },
    /*::[*/
    350: {
      /* n:"BrtEndListXmlCPr", */
      T: -1
    },
    /*::[*/
    351: {
      /* n:"BrtListCCFmla" */
    },
    /*::[*/
    352: {
      /* n:"BrtListTrFmla" */
    },
    /*::[*/
    353: {
      /* n:"BrtBeginExternals", */
      T: 1
    },
    /*::[*/
    354: {
      /* n:"BrtEndExternals", */
      T: -1
    },
    /*::[*/
    355: {
      /* n:"BrtSupBookSrc", */
      f: parse_RelID
    },
    /*::[*/
    357: {
      /* n:"BrtSupSelf" */
    },
    /*::[*/
    358: {
      /* n:"BrtSupSame" */
    },
    /*::[*/
    359: {
      /* n:"BrtSupTabs" */
    },
    /*::[*/
    360: {
      /* n:"BrtBeginSupBook", */
      T: 1
    },
    /*::[*/
    361: {
      /* n:"BrtPlaceholderName" */
    },
    /*::[*/
    362: {
      /* n:"BrtExternSheet", */
      f: parse_ExternSheet
    },
    /*::[*/
    363: {
      /* n:"BrtExternTableStart" */
    },
    /*::[*/
    364: {
      /* n:"BrtExternTableEnd" */
    },
    /*::[*/
    366: {
      /* n:"BrtExternRowHdr" */
    },
    /*::[*/
    367: {
      /* n:"BrtExternCellBlank" */
    },
    /*::[*/
    368: {
      /* n:"BrtExternCellReal" */
    },
    /*::[*/
    369: {
      /* n:"BrtExternCellBool" */
    },
    /*::[*/
    370: {
      /* n:"BrtExternCellError" */
    },
    /*::[*/
    371: {
      /* n:"BrtExternCellString" */
    },
    /*::[*/
    372: {
      /* n:"BrtBeginEsmdx", */
      T: 1
    },
    /*::[*/
    373: {
      /* n:"BrtEndEsmdx", */
      T: -1
    },
    /*::[*/
    374: {
      /* n:"BrtBeginMdxSet", */
      T: 1
    },
    /*::[*/
    375: {
      /* n:"BrtEndMdxSet", */
      T: -1
    },
    /*::[*/
    376: {
      /* n:"BrtBeginMdxMbrProp", */
      T: 1
    },
    /*::[*/
    377: {
      /* n:"BrtEndMdxMbrProp", */
      T: -1
    },
    /*::[*/
    378: {
      /* n:"BrtBeginMdxKPI", */
      T: 1
    },
    /*::[*/
    379: {
      /* n:"BrtEndMdxKPI", */
      T: -1
    },
    /*::[*/
    380: {
      /* n:"BrtBeginEsstr", */
      T: 1
    },
    /*::[*/
    381: {
      /* n:"BrtEndEsstr", */
      T: -1
    },
    /*::[*/
    382: {
      /* n:"BrtBeginPRFItem", */
      T: 1
    },
    /*::[*/
    383: {
      /* n:"BrtEndPRFItem", */
      T: -1
    },
    /*::[*/
    384: {
      /* n:"BrtBeginPivotCacheIDs", */
      T: 1
    },
    /*::[*/
    385: {
      /* n:"BrtEndPivotCacheIDs", */
      T: -1
    },
    /*::[*/
    386: {
      /* n:"BrtBeginPivotCacheID", */
      T: 1
    },
    /*::[*/
    387: {
      /* n:"BrtEndPivotCacheID", */
      T: -1
    },
    /*::[*/
    388: {
      /* n:"BrtBeginISXVIs", */
      T: 1
    },
    /*::[*/
    389: {
      /* n:"BrtEndISXVIs", */
      T: -1
    },
    /*::[*/
    390: {
      /* n:"BrtBeginColInfos", */
      T: 1
    },
    /*::[*/
    391: {
      /* n:"BrtEndColInfos", */
      T: -1
    },
    /*::[*/
    392: {
      /* n:"BrtBeginRwBrk", */
      T: 1
    },
    /*::[*/
    393: {
      /* n:"BrtEndRwBrk", */
      T: -1
    },
    /*::[*/
    394: {
      /* n:"BrtBeginColBrk", */
      T: 1
    },
    /*::[*/
    395: {
      /* n:"BrtEndColBrk", */
      T: -1
    },
    /*::[*/
    396: {
      /* n:"BrtBrk" */
    },
    /*::[*/
    397: {
      /* n:"BrtUserBookView" */
    },
    /*::[*/
    398: {
      /* n:"BrtInfo" */
    },
    /*::[*/
    399: {
      /* n:"BrtCUsr" */
    },
    /*::[*/
    400: {
      /* n:"BrtUsr" */
    },
    /*::[*/
    401: {
      /* n:"BrtBeginUsers", */
      T: 1
    },
    /*::[*/
    403: {
      /* n:"BrtEOF" */
    },
    /*::[*/
    404: {
      /* n:"BrtUCR" */
    },
    /*::[*/
    405: {
      /* n:"BrtRRInsDel" */
    },
    /*::[*/
    406: {
      /* n:"BrtRREndInsDel" */
    },
    /*::[*/
    407: {
      /* n:"BrtRRMove" */
    },
    /*::[*/
    408: {
      /* n:"BrtRREndMove" */
    },
    /*::[*/
    409: {
      /* n:"BrtRRChgCell" */
    },
    /*::[*/
    410: {
      /* n:"BrtRREndChgCell" */
    },
    /*::[*/
    411: {
      /* n:"BrtRRHeader" */
    },
    /*::[*/
    412: {
      /* n:"BrtRRUserView" */
    },
    /*::[*/
    413: {
      /* n:"BrtRRRenSheet" */
    },
    /*::[*/
    414: {
      /* n:"BrtRRInsertSh" */
    },
    /*::[*/
    415: {
      /* n:"BrtRRDefName" */
    },
    /*::[*/
    416: {
      /* n:"BrtRRNote" */
    },
    /*::[*/
    417: {
      /* n:"BrtRRConflict" */
    },
    /*::[*/
    418: {
      /* n:"BrtRRTQSIF" */
    },
    /*::[*/
    419: {
      /* n:"BrtRRFormat" */
    },
    /*::[*/
    420: {
      /* n:"BrtRREndFormat" */
    },
    /*::[*/
    421: {
      /* n:"BrtRRAutoFmt" */
    },
    /*::[*/
    422: {
      /* n:"BrtBeginUserShViews", */
      T: 1
    },
    /*::[*/
    423: {
      /* n:"BrtBeginUserShView", */
      T: 1
    },
    /*::[*/
    424: {
      /* n:"BrtEndUserShView", */
      T: -1
    },
    /*::[*/
    425: {
      /* n:"BrtEndUserShViews", */
      T: -1
    },
    /*::[*/
    426: {
      /* n:"BrtArrFmla", */
      f: parse_BrtArrFmla
    },
    /*::[*/
    427: {
      /* n:"BrtShrFmla", */
      f: parse_BrtShrFmla
    },
    /*::[*/
    428: {
      /* n:"BrtTable" */
    },
    /*::[*/
    429: {
      /* n:"BrtBeginExtConnections", */
      T: 1
    },
    /*::[*/
    430: {
      /* n:"BrtEndExtConnections", */
      T: -1
    },
    /*::[*/
    431: {
      /* n:"BrtBeginPCDCalcMems", */
      T: 1
    },
    /*::[*/
    432: {
      /* n:"BrtEndPCDCalcMems", */
      T: -1
    },
    /*::[*/
    433: {
      /* n:"BrtBeginPCDCalcMem", */
      T: 1
    },
    /*::[*/
    434: {
      /* n:"BrtEndPCDCalcMem", */
      T: -1
    },
    /*::[*/
    435: {
      /* n:"BrtBeginPCDHGLevels", */
      T: 1
    },
    /*::[*/
    436: {
      /* n:"BrtEndPCDHGLevels", */
      T: -1
    },
    /*::[*/
    437: {
      /* n:"BrtBeginPCDHGLevel", */
      T: 1
    },
    /*::[*/
    438: {
      /* n:"BrtEndPCDHGLevel", */
      T: -1
    },
    /*::[*/
    439: {
      /* n:"BrtBeginPCDHGLGroups", */
      T: 1
    },
    /*::[*/
    440: {
      /* n:"BrtEndPCDHGLGroups", */
      T: -1
    },
    /*::[*/
    441: {
      /* n:"BrtBeginPCDHGLGroup", */
      T: 1
    },
    /*::[*/
    442: {
      /* n:"BrtEndPCDHGLGroup", */
      T: -1
    },
    /*::[*/
    443: {
      /* n:"BrtBeginPCDHGLGMembers", */
      T: 1
    },
    /*::[*/
    444: {
      /* n:"BrtEndPCDHGLGMembers", */
      T: -1
    },
    /*::[*/
    445: {
      /* n:"BrtBeginPCDHGLGMember", */
      T: 1
    },
    /*::[*/
    446: {
      /* n:"BrtEndPCDHGLGMember", */
      T: -1
    },
    /*::[*/
    447: {
      /* n:"BrtBeginQSI", */
      T: 1
    },
    /*::[*/
    448: {
      /* n:"BrtEndQSI", */
      T: -1
    },
    /*::[*/
    449: {
      /* n:"BrtBeginQSIR", */
      T: 1
    },
    /*::[*/
    450: {
      /* n:"BrtEndQSIR", */
      T: -1
    },
    /*::[*/
    451: {
      /* n:"BrtBeginDeletedNames", */
      T: 1
    },
    /*::[*/
    452: {
      /* n:"BrtEndDeletedNames", */
      T: -1
    },
    /*::[*/
    453: {
      /* n:"BrtBeginDeletedName", */
      T: 1
    },
    /*::[*/
    454: {
      /* n:"BrtEndDeletedName", */
      T: -1
    },
    /*::[*/
    455: {
      /* n:"BrtBeginQSIFs", */
      T: 1
    },
    /*::[*/
    456: {
      /* n:"BrtEndQSIFs", */
      T: -1
    },
    /*::[*/
    457: {
      /* n:"BrtBeginQSIF", */
      T: 1
    },
    /*::[*/
    458: {
      /* n:"BrtEndQSIF", */
      T: -1
    },
    /*::[*/
    459: {
      /* n:"BrtBeginAutoSortScope", */
      T: 1
    },
    /*::[*/
    460: {
      /* n:"BrtEndAutoSortScope", */
      T: -1
    },
    /*::[*/
    461: {
      /* n:"BrtBeginConditionalFormatting", */
      T: 1
    },
    /*::[*/
    462: {
      /* n:"BrtEndConditionalFormatting", */
      T: -1
    },
    /*::[*/
    463: {
      /* n:"BrtBeginCFRule", */
      T: 1
    },
    /*::[*/
    464: {
      /* n:"BrtEndCFRule", */
      T: -1
    },
    /*::[*/
    465: {
      /* n:"BrtBeginIconSet", */
      T: 1
    },
    /*::[*/
    466: {
      /* n:"BrtEndIconSet", */
      T: -1
    },
    /*::[*/
    467: {
      /* n:"BrtBeginDatabar", */
      T: 1
    },
    /*::[*/
    468: {
      /* n:"BrtEndDatabar", */
      T: -1
    },
    /*::[*/
    469: {
      /* n:"BrtBeginColorScale", */
      T: 1
    },
    /*::[*/
    470: {
      /* n:"BrtEndColorScale", */
      T: -1
    },
    /*::[*/
    471: {
      /* n:"BrtCFVO" */
    },
    /*::[*/
    472: {
      /* n:"BrtExternValueMeta" */
    },
    /*::[*/
    473: {
      /* n:"BrtBeginColorPalette", */
      T: 1
    },
    /*::[*/
    474: {
      /* n:"BrtEndColorPalette", */
      T: -1
    },
    /*::[*/
    475: {
      /* n:"BrtIndexedColor" */
    },
    /*::[*/
    476: {
      /* n:"BrtMargins", */
      f: parse_BrtMargins
    },
    /*::[*/
    477: {
      /* n:"BrtPrintOptions" */
    },
    /*::[*/
    478: {
      /* n:"BrtPageSetup" */
    },
    /*::[*/
    479: {
      /* n:"BrtBeginHeaderFooter", */
      T: 1
    },
    /*::[*/
    480: {
      /* n:"BrtEndHeaderFooter", */
      T: -1
    },
    /*::[*/
    481: {
      /* n:"BrtBeginSXCrtFormat", */
      T: 1
    },
    /*::[*/
    482: {
      /* n:"BrtEndSXCrtFormat", */
      T: -1
    },
    /*::[*/
    483: {
      /* n:"BrtBeginSXCrtFormats", */
      T: 1
    },
    /*::[*/
    484: {
      /* n:"BrtEndSXCrtFormats", */
      T: -1
    },
    /*::[*/
    485: {
      /* n:"BrtWsFmtInfo", */
      f: parse_BrtWsFmtInfo
    },
    /*::[*/
    486: {
      /* n:"BrtBeginMgs", */
      T: 1
    },
    /*::[*/
    487: {
      /* n:"BrtEndMGs", */
      T: -1
    },
    /*::[*/
    488: {
      /* n:"BrtBeginMGMaps", */
      T: 1
    },
    /*::[*/
    489: {
      /* n:"BrtEndMGMaps", */
      T: -1
    },
    /*::[*/
    490: {
      /* n:"BrtBeginMG", */
      T: 1
    },
    /*::[*/
    491: {
      /* n:"BrtEndMG", */
      T: -1
    },
    /*::[*/
    492: {
      /* n:"BrtBeginMap", */
      T: 1
    },
    /*::[*/
    493: {
      /* n:"BrtEndMap", */
      T: -1
    },
    /*::[*/
    494: {
      /* n:"BrtHLink", */
      f: parse_BrtHLink
    },
    /*::[*/
    495: {
      /* n:"BrtBeginDCon", */
      T: 1
    },
    /*::[*/
    496: {
      /* n:"BrtEndDCon", */
      T: -1
    },
    /*::[*/
    497: {
      /* n:"BrtBeginDRefs", */
      T: 1
    },
    /*::[*/
    498: {
      /* n:"BrtEndDRefs", */
      T: -1
    },
    /*::[*/
    499: {
      /* n:"BrtDRef" */
    },
    /*::[*/
    500: {
      /* n:"BrtBeginScenMan", */
      T: 1
    },
    /*::[*/
    501: {
      /* n:"BrtEndScenMan", */
      T: -1
    },
    /*::[*/
    502: {
      /* n:"BrtBeginSct", */
      T: 1
    },
    /*::[*/
    503: {
      /* n:"BrtEndSct", */
      T: -1
    },
    /*::[*/
    504: {
      /* n:"BrtSlc" */
    },
    /*::[*/
    505: {
      /* n:"BrtBeginDXFs", */
      T: 1
    },
    /*::[*/
    506: {
      /* n:"BrtEndDXFs", */
      T: -1
    },
    /*::[*/
    507: {
      /* n:"BrtDXF" */
    },
    /*::[*/
    508: {
      /* n:"BrtBeginTableStyles", */
      T: 1
    },
    /*::[*/
    509: {
      /* n:"BrtEndTableStyles", */
      T: -1
    },
    /*::[*/
    510: {
      /* n:"BrtBeginTableStyle", */
      T: 1
    },
    /*::[*/
    511: {
      /* n:"BrtEndTableStyle", */
      T: -1
    },
    /*::[*/
    512: {
      /* n:"BrtTableStyleElement" */
    },
    /*::[*/
    513: {
      /* n:"BrtTableStyleClient" */
    },
    /*::[*/
    514: {
      /* n:"BrtBeginVolDeps", */
      T: 1
    },
    /*::[*/
    515: {
      /* n:"BrtEndVolDeps", */
      T: -1
    },
    /*::[*/
    516: {
      /* n:"BrtBeginVolType", */
      T: 1
    },
    /*::[*/
    517: {
      /* n:"BrtEndVolType", */
      T: -1
    },
    /*::[*/
    518: {
      /* n:"BrtBeginVolMain", */
      T: 1
    },
    /*::[*/
    519: {
      /* n:"BrtEndVolMain", */
      T: -1
    },
    /*::[*/
    520: {
      /* n:"BrtBeginVolTopic", */
      T: 1
    },
    /*::[*/
    521: {
      /* n:"BrtEndVolTopic", */
      T: -1
    },
    /*::[*/
    522: {
      /* n:"BrtVolSubtopic" */
    },
    /*::[*/
    523: {
      /* n:"BrtVolRef" */
    },
    /*::[*/
    524: {
      /* n:"BrtVolNum" */
    },
    /*::[*/
    525: {
      /* n:"BrtVolErr" */
    },
    /*::[*/
    526: {
      /* n:"BrtVolStr" */
    },
    /*::[*/
    527: {
      /* n:"BrtVolBool" */
    },
    /*::[*/
    528: {
      /* n:"BrtBeginCalcChain$", */
      T: 1
    },
    /*::[*/
    529: {
      /* n:"BrtEndCalcChain$", */
      T: -1
    },
    /*::[*/
    530: {
      /* n:"BrtBeginSortState", */
      T: 1
    },
    /*::[*/
    531: {
      /* n:"BrtEndSortState", */
      T: -1
    },
    /*::[*/
    532: {
      /* n:"BrtBeginSortCond", */
      T: 1
    },
    /*::[*/
    533: {
      /* n:"BrtEndSortCond", */
      T: -1
    },
    /*::[*/
    534: {
      /* n:"BrtBookProtection" */
    },
    /*::[*/
    535: {
      /* n:"BrtSheetProtection" */
    },
    /*::[*/
    536: {
      /* n:"BrtRangeProtection" */
    },
    /*::[*/
    537: {
      /* n:"BrtPhoneticInfo" */
    },
    /*::[*/
    538: {
      /* n:"BrtBeginECTxtWiz", */
      T: 1
    },
    /*::[*/
    539: {
      /* n:"BrtEndECTxtWiz", */
      T: -1
    },
    /*::[*/
    540: {
      /* n:"BrtBeginECTWFldInfoLst", */
      T: 1
    },
    /*::[*/
    541: {
      /* n:"BrtEndECTWFldInfoLst", */
      T: -1
    },
    /*::[*/
    542: {
      /* n:"BrtBeginECTwFldInfo", */
      T: 1
    },
    /*::[*/
    548: {
      /* n:"BrtFileSharing" */
    },
    /*::[*/
    549: {
      /* n:"BrtOleSize" */
    },
    /*::[*/
    550: {
      /* n:"BrtDrawing", */
      f: parse_RelID
    },
    /*::[*/
    551: {
      /* n:"BrtLegacyDrawing" */
    },
    /*::[*/
    552: {
      /* n:"BrtLegacyDrawingHF" */
    },
    /*::[*/
    553: {
      /* n:"BrtWebOpt" */
    },
    /*::[*/
    554: {
      /* n:"BrtBeginWebPubItems", */
      T: 1
    },
    /*::[*/
    555: {
      /* n:"BrtEndWebPubItems", */
      T: -1
    },
    /*::[*/
    556: {
      /* n:"BrtBeginWebPubItem", */
      T: 1
    },
    /*::[*/
    557: {
      /* n:"BrtEndWebPubItem", */
      T: -1
    },
    /*::[*/
    558: {
      /* n:"BrtBeginSXCondFmt", */
      T: 1
    },
    /*::[*/
    559: {
      /* n:"BrtEndSXCondFmt", */
      T: -1
    },
    /*::[*/
    560: {
      /* n:"BrtBeginSXCondFmts", */
      T: 1
    },
    /*::[*/
    561: {
      /* n:"BrtEndSXCondFmts", */
      T: -1
    },
    /*::[*/
    562: {
      /* n:"BrtBkHim" */
    },
    /*::[*/
    564: {
      /* n:"BrtColor" */
    },
    /*::[*/
    565: {
      /* n:"BrtBeginIndexedColors", */
      T: 1
    },
    /*::[*/
    566: {
      /* n:"BrtEndIndexedColors", */
      T: -1
    },
    /*::[*/
    569: {
      /* n:"BrtBeginMRUColors", */
      T: 1
    },
    /*::[*/
    570: {
      /* n:"BrtEndMRUColors", */
      T: -1
    },
    /*::[*/
    572: {
      /* n:"BrtMRUColor" */
    },
    /*::[*/
    573: {
      /* n:"BrtBeginDVals", */
      T: 1
    },
    /*::[*/
    574: {
      /* n:"BrtEndDVals", */
      T: -1
    },
    /*::[*/
    577: {
      /* n:"BrtSupNameStart" */
    },
    /*::[*/
    578: {
      /* n:"BrtSupNameValueStart" */
    },
    /*::[*/
    579: {
      /* n:"BrtSupNameValueEnd" */
    },
    /*::[*/
    580: {
      /* n:"BrtSupNameNum" */
    },
    /*::[*/
    581: {
      /* n:"BrtSupNameErr" */
    },
    /*::[*/
    582: {
      /* n:"BrtSupNameSt" */
    },
    /*::[*/
    583: {
      /* n:"BrtSupNameNil" */
    },
    /*::[*/
    584: {
      /* n:"BrtSupNameBool" */
    },
    /*::[*/
    585: {
      /* n:"BrtSupNameFmla" */
    },
    /*::[*/
    586: {
      /* n:"BrtSupNameBits" */
    },
    /*::[*/
    587: {
      /* n:"BrtSupNameEnd" */
    },
    /*::[*/
    588: {
      /* n:"BrtEndSupBook", */
      T: -1
    },
    /*::[*/
    589: {
      /* n:"BrtCellSmartTagProperty" */
    },
    /*::[*/
    590: {
      /* n:"BrtBeginCellSmartTag", */
      T: 1
    },
    /*::[*/
    591: {
      /* n:"BrtEndCellSmartTag", */
      T: -1
    },
    /*::[*/
    592: {
      /* n:"BrtBeginCellSmartTags", */
      T: 1
    },
    /*::[*/
    593: {
      /* n:"BrtEndCellSmartTags", */
      T: -1
    },
    /*::[*/
    594: {
      /* n:"BrtBeginSmartTags", */
      T: 1
    },
    /*::[*/
    595: {
      /* n:"BrtEndSmartTags", */
      T: -1
    },
    /*::[*/
    596: {
      /* n:"BrtSmartTagType" */
    },
    /*::[*/
    597: {
      /* n:"BrtBeginSmartTagTypes", */
      T: 1
    },
    /*::[*/
    598: {
      /* n:"BrtEndSmartTagTypes", */
      T: -1
    },
    /*::[*/
    599: {
      /* n:"BrtBeginSXFilters", */
      T: 1
    },
    /*::[*/
    600: {
      /* n:"BrtEndSXFilters", */
      T: -1
    },
    /*::[*/
    601: {
      /* n:"BrtBeginSXFILTER", */
      T: 1
    },
    /*::[*/
    602: {
      /* n:"BrtEndSXFilter", */
      T: -1
    },
    /*::[*/
    603: {
      /* n:"BrtBeginFills", */
      T: 1
    },
    /*::[*/
    604: {
      /* n:"BrtEndFills", */
      T: -1
    },
    /*::[*/
    605: {
      /* n:"BrtBeginCellWatches", */
      T: 1
    },
    /*::[*/
    606: {
      /* n:"BrtEndCellWatches", */
      T: -1
    },
    /*::[*/
    607: {
      /* n:"BrtCellWatch" */
    },
    /*::[*/
    608: {
      /* n:"BrtBeginCRErrs", */
      T: 1
    },
    /*::[*/
    609: {
      /* n:"BrtEndCRErrs", */
      T: -1
    },
    /*::[*/
    610: {
      /* n:"BrtCrashRecErr" */
    },
    /*::[*/
    611: {
      /* n:"BrtBeginFonts", */
      T: 1
    },
    /*::[*/
    612: {
      /* n:"BrtEndFonts", */
      T: -1
    },
    /*::[*/
    613: {
      /* n:"BrtBeginBorders", */
      T: 1
    },
    /*::[*/
    614: {
      /* n:"BrtEndBorders", */
      T: -1
    },
    /*::[*/
    615: {
      /* n:"BrtBeginFmts", */
      T: 1
    },
    /*::[*/
    616: {
      /* n:"BrtEndFmts", */
      T: -1
    },
    /*::[*/
    617: {
      /* n:"BrtBeginCellXFs", */
      T: 1
    },
    /*::[*/
    618: {
      /* n:"BrtEndCellXFs", */
      T: -1
    },
    /*::[*/
    619: {
      /* n:"BrtBeginStyles", */
      T: 1
    },
    /*::[*/
    620: {
      /* n:"BrtEndStyles", */
      T: -1
    },
    /*::[*/
    625: {
      /* n:"BrtBigName" */
    },
    /*::[*/
    626: {
      /* n:"BrtBeginCellStyleXFs", */
      T: 1
    },
    /*::[*/
    627: {
      /* n:"BrtEndCellStyleXFs", */
      T: -1
    },
    /*::[*/
    628: {
      /* n:"BrtBeginComments", */
      T: 1
    },
    /*::[*/
    629: {
      /* n:"BrtEndComments", */
      T: -1
    },
    /*::[*/
    630: {
      /* n:"BrtBeginCommentAuthors", */
      T: 1
    },
    /*::[*/
    631: {
      /* n:"BrtEndCommentAuthors", */
      T: -1
    },
    /*::[*/
    632: {
      /* n:"BrtCommentAuthor", */
      f: parse_BrtCommentAuthor
    },
    /*::[*/
    633: {
      /* n:"BrtBeginCommentList", */
      T: 1
    },
    /*::[*/
    634: {
      /* n:"BrtEndCommentList", */
      T: -1
    },
    /*::[*/
    635: {
      /* n:"BrtBeginComment", */
      T: 1,
      f: parse_BrtBeginComment
    },
    /*::[*/
    636: {
      /* n:"BrtEndComment", */
      T: -1
    },
    /*::[*/
    637: {
      /* n:"BrtCommentText", */
      f: parse_BrtCommentText
    },
    /*::[*/
    638: {
      /* n:"BrtBeginOleObjects", */
      T: 1
    },
    /*::[*/
    639: {
      /* n:"BrtOleObject" */
    },
    /*::[*/
    640: {
      /* n:"BrtEndOleObjects", */
      T: -1
    },
    /*::[*/
    641: {
      /* n:"BrtBeginSxrules", */
      T: 1
    },
    /*::[*/
    642: {
      /* n:"BrtEndSxRules", */
      T: -1
    },
    /*::[*/
    643: {
      /* n:"BrtBeginActiveXControls", */
      T: 1
    },
    /*::[*/
    644: {
      /* n:"BrtActiveX" */
    },
    /*::[*/
    645: {
      /* n:"BrtEndActiveXControls", */
      T: -1
    },
    /*::[*/
    646: {
      /* n:"BrtBeginPCDSDTCEMembersSortBy", */
      T: 1
    },
    /*::[*/
    648: {
      /* n:"BrtBeginCellIgnoreECs", */
      T: 1
    },
    /*::[*/
    649: {
      /* n:"BrtCellIgnoreEC" */
    },
    /*::[*/
    650: {
      /* n:"BrtEndCellIgnoreECs", */
      T: -1
    },
    /*::[*/
    651: {
      /* n:"BrtCsProp", */
      f: parse_BrtCsProp
    },
    /*::[*/
    652: {
      /* n:"BrtCsPageSetup" */
    },
    /*::[*/
    653: {
      /* n:"BrtBeginUserCsViews", */
      T: 1
    },
    /*::[*/
    654: {
      /* n:"BrtEndUserCsViews", */
      T: -1
    },
    /*::[*/
    655: {
      /* n:"BrtBeginUserCsView", */
      T: 1
    },
    /*::[*/
    656: {
      /* n:"BrtEndUserCsView", */
      T: -1
    },
    /*::[*/
    657: {
      /* n:"BrtBeginPcdSFCIEntries", */
      T: 1
    },
    /*::[*/
    658: {
      /* n:"BrtEndPCDSFCIEntries", */
      T: -1
    },
    /*::[*/
    659: {
      /* n:"BrtPCDSFCIEntry" */
    },
    /*::[*/
    660: {
      /* n:"BrtBeginListParts", */
      T: 1
    },
    /*::[*/
    661: {
      /* n:"BrtListPart" */
    },
    /*::[*/
    662: {
      /* n:"BrtEndListParts", */
      T: -1
    },
    /*::[*/
    663: {
      /* n:"BrtSheetCalcProp" */
    },
    /*::[*/
    664: {
      /* n:"BrtBeginFnGroup", */
      T: 1
    },
    /*::[*/
    665: {
      /* n:"BrtFnGroup" */
    },
    /*::[*/
    666: {
      /* n:"BrtEndFnGroup", */
      T: -1
    },
    /*::[*/
    667: {
      /* n:"BrtSupAddin" */
    },
    /*::[*/
    668: {
      /* n:"BrtSXTDMPOrder" */
    },
    /*::[*/
    669: {
      /* n:"BrtCsProtection" */
    },
    /*::[*/
    671: {
      /* n:"BrtBeginWsSortMap", */
      T: 1
    },
    /*::[*/
    672: {
      /* n:"BrtEndWsSortMap", */
      T: -1
    },
    /*::[*/
    673: {
      /* n:"BrtBeginRRSort", */
      T: 1
    },
    /*::[*/
    674: {
      /* n:"BrtEndRRSort", */
      T: -1
    },
    /*::[*/
    675: {
      /* n:"BrtRRSortItem" */
    },
    /*::[*/
    676: {
      /* n:"BrtFileSharingIso" */
    },
    /*::[*/
    677: {
      /* n:"BrtBookProtectionIso" */
    },
    /*::[*/
    678: {
      /* n:"BrtSheetProtectionIso" */
    },
    /*::[*/
    679: {
      /* n:"BrtCsProtectionIso" */
    },
    /*::[*/
    680: {
      /* n:"BrtRangeProtectionIso" */
    },
    /*::[*/
    681: {
      /* n:"BrtDValList" */
    },
    /*::[*/
    1024: {
      /* n:"BrtRwDescent" */
    },
    /*::[*/
    1025: {
      /* n:"BrtKnownFonts" */
    },
    /*::[*/
    1026: {
      /* n:"BrtBeginSXTupleSet", */
      T: 1
    },
    /*::[*/
    1027: {
      /* n:"BrtEndSXTupleSet", */
      T: -1
    },
    /*::[*/
    1028: {
      /* n:"BrtBeginSXTupleSetHeader", */
      T: 1
    },
    /*::[*/
    1029: {
      /* n:"BrtEndSXTupleSetHeader", */
      T: -1
    },
    /*::[*/
    1030: {
      /* n:"BrtSXTupleSetHeaderItem" */
    },
    /*::[*/
    1031: {
      /* n:"BrtBeginSXTupleSetData", */
      T: 1
    },
    /*::[*/
    1032: {
      /* n:"BrtEndSXTupleSetData", */
      T: -1
    },
    /*::[*/
    1033: {
      /* n:"BrtBeginSXTupleSetRow", */
      T: 1
    },
    /*::[*/
    1034: {
      /* n:"BrtEndSXTupleSetRow", */
      T: -1
    },
    /*::[*/
    1035: {
      /* n:"BrtSXTupleSetRowItem" */
    },
    /*::[*/
    1036: {
      /* n:"BrtNameExt" */
    },
    /*::[*/
    1037: {
      /* n:"BrtPCDH14" */
    },
    /*::[*/
    1038: {
      /* n:"BrtBeginPCDCalcMem14", */
      T: 1
    },
    /*::[*/
    1039: {
      /* n:"BrtEndPCDCalcMem14", */
      T: -1
    },
    /*::[*/
    1040: {
      /* n:"BrtSXTH14" */
    },
    /*::[*/
    1041: {
      /* n:"BrtBeginSparklineGroup", */
      T: 1
    },
    /*::[*/
    1042: {
      /* n:"BrtEndSparklineGroup", */
      T: -1
    },
    /*::[*/
    1043: {
      /* n:"BrtSparkline" */
    },
    /*::[*/
    1044: {
      /* n:"BrtSXDI14" */
    },
    /*::[*/
    1045: {
      /* n:"BrtWsFmtInfoEx14" */
    },
    /*::[*/
    1046: {
      /* n:"BrtBeginConditionalFormatting14", */
      T: 1
    },
    /*::[*/
    1047: {
      /* n:"BrtEndConditionalFormatting14", */
      T: -1
    },
    /*::[*/
    1048: {
      /* n:"BrtBeginCFRule14", */
      T: 1
    },
    /*::[*/
    1049: {
      /* n:"BrtEndCFRule14", */
      T: -1
    },
    /*::[*/
    1050: {
      /* n:"BrtCFVO14" */
    },
    /*::[*/
    1051: {
      /* n:"BrtBeginDatabar14", */
      T: 1
    },
    /*::[*/
    1052: {
      /* n:"BrtBeginIconSet14", */
      T: 1
    },
    /*::[*/
    1053: {
      /* n:"BrtDVal14", */
      f: parse_BrtDVal14
    },
    /*::[*/
    1054: {
      /* n:"BrtBeginDVals14", */
      T: 1
    },
    /*::[*/
    1055: {
      /* n:"BrtColor14" */
    },
    /*::[*/
    1056: {
      /* n:"BrtBeginSparklines", */
      T: 1
    },
    /*::[*/
    1057: {
      /* n:"BrtEndSparklines", */
      T: -1
    },
    /*::[*/
    1058: {
      /* n:"BrtBeginSparklineGroups", */
      T: 1
    },
    /*::[*/
    1059: {
      /* n:"BrtEndSparklineGroups", */
      T: -1
    },
    /*::[*/
    1061: {
      /* n:"BrtSXVD14" */
    },
    /*::[*/
    1062: {
      /* n:"BrtBeginSXView14", */
      T: 1
    },
    /*::[*/
    1063: {
      /* n:"BrtEndSXView14", */
      T: -1
    },
    /*::[*/
    1064: {
      /* n:"BrtBeginSXView16", */
      T: 1
    },
    /*::[*/
    1065: {
      /* n:"BrtEndSXView16", */
      T: -1
    },
    /*::[*/
    1066: {
      /* n:"BrtBeginPCD14", */
      T: 1
    },
    /*::[*/
    1067: {
      /* n:"BrtEndPCD14", */
      T: -1
    },
    /*::[*/
    1068: {
      /* n:"BrtBeginExtConn14", */
      T: 1
    },
    /*::[*/
    1069: {
      /* n:"BrtEndExtConn14", */
      T: -1
    },
    /*::[*/
    1070: {
      /* n:"BrtBeginSlicerCacheIDs", */
      T: 1
    },
    /*::[*/
    1071: {
      /* n:"BrtEndSlicerCacheIDs", */
      T: -1
    },
    /*::[*/
    1072: {
      /* n:"BrtBeginSlicerCacheID", */
      T: 1
    },
    /*::[*/
    1073: {
      /* n:"BrtEndSlicerCacheID", */
      T: -1
    },
    /*::[*/
    1075: {
      /* n:"BrtBeginSlicerCache", */
      T: 1
    },
    /*::[*/
    1076: {
      /* n:"BrtEndSlicerCache", */
      T: -1
    },
    /*::[*/
    1077: {
      /* n:"BrtBeginSlicerCacheDef", */
      T: 1
    },
    /*::[*/
    1078: {
      /* n:"BrtEndSlicerCacheDef", */
      T: -1
    },
    /*::[*/
    1079: {
      /* n:"BrtBeginSlicersEx", */
      T: 1
    },
    /*::[*/
    1080: {
      /* n:"BrtEndSlicersEx", */
      T: -1
    },
    /*::[*/
    1081: {
      /* n:"BrtBeginSlicerEx", */
      T: 1
    },
    /*::[*/
    1082: {
      /* n:"BrtEndSlicerEx", */
      T: -1
    },
    /*::[*/
    1083: {
      /* n:"BrtBeginSlicer", */
      T: 1
    },
    /*::[*/
    1084: {
      /* n:"BrtEndSlicer", */
      T: -1
    },
    /*::[*/
    1085: {
      /* n:"BrtSlicerCachePivotTables" */
    },
    /*::[*/
    1086: {
      /* n:"BrtBeginSlicerCacheOlapImpl", */
      T: 1
    },
    /*::[*/
    1087: {
      /* n:"BrtEndSlicerCacheOlapImpl", */
      T: -1
    },
    /*::[*/
    1088: {
      /* n:"BrtBeginSlicerCacheLevelsData", */
      T: 1
    },
    /*::[*/
    1089: {
      /* n:"BrtEndSlicerCacheLevelsData", */
      T: -1
    },
    /*::[*/
    1090: {
      /* n:"BrtBeginSlicerCacheLevelData", */
      T: 1
    },
    /*::[*/
    1091: {
      /* n:"BrtEndSlicerCacheLevelData", */
      T: -1
    },
    /*::[*/
    1092: {
      /* n:"BrtBeginSlicerCacheSiRanges", */
      T: 1
    },
    /*::[*/
    1093: {
      /* n:"BrtEndSlicerCacheSiRanges", */
      T: -1
    },
    /*::[*/
    1094: {
      /* n:"BrtBeginSlicerCacheSiRange", */
      T: 1
    },
    /*::[*/
    1095: {
      /* n:"BrtEndSlicerCacheSiRange", */
      T: -1
    },
    /*::[*/
    1096: {
      /* n:"BrtSlicerCacheOlapItem" */
    },
    /*::[*/
    1097: {
      /* n:"BrtBeginSlicerCacheSelections", */
      T: 1
    },
    /*::[*/
    1098: {
      /* n:"BrtSlicerCacheSelection" */
    },
    /*::[*/
    1099: {
      /* n:"BrtEndSlicerCacheSelections", */
      T: -1
    },
    /*::[*/
    1100: {
      /* n:"BrtBeginSlicerCacheNative", */
      T: 1
    },
    /*::[*/
    1101: {
      /* n:"BrtEndSlicerCacheNative", */
      T: -1
    },
    /*::[*/
    1102: {
      /* n:"BrtSlicerCacheNativeItem" */
    },
    /*::[*/
    1103: {
      /* n:"BrtRangeProtection14" */
    },
    /*::[*/
    1104: {
      /* n:"BrtRangeProtectionIso14" */
    },
    /*::[*/
    1105: {
      /* n:"BrtCellIgnoreEC14" */
    },
    /*::[*/
    1111: {
      /* n:"BrtList14" */
    },
    /*::[*/
    1112: {
      /* n:"BrtCFIcon" */
    },
    /*::[*/
    1113: {
      /* n:"BrtBeginSlicerCachesPivotCacheIDs", */
      T: 1
    },
    /*::[*/
    1114: {
      /* n:"BrtEndSlicerCachesPivotCacheIDs", */
      T: -1
    },
    /*::[*/
    1115: {
      /* n:"BrtBeginSlicers", */
      T: 1
    },
    /*::[*/
    1116: {
      /* n:"BrtEndSlicers", */
      T: -1
    },
    /*::[*/
    1117: {
      /* n:"BrtWbProp14" */
    },
    /*::[*/
    1118: {
      /* n:"BrtBeginSXEdit", */
      T: 1
    },
    /*::[*/
    1119: {
      /* n:"BrtEndSXEdit", */
      T: -1
    },
    /*::[*/
    1120: {
      /* n:"BrtBeginSXEdits", */
      T: 1
    },
    /*::[*/
    1121: {
      /* n:"BrtEndSXEdits", */
      T: -1
    },
    /*::[*/
    1122: {
      /* n:"BrtBeginSXChange", */
      T: 1
    },
    /*::[*/
    1123: {
      /* n:"BrtEndSXChange", */
      T: -1
    },
    /*::[*/
    1124: {
      /* n:"BrtBeginSXChanges", */
      T: 1
    },
    /*::[*/
    1125: {
      /* n:"BrtEndSXChanges", */
      T: -1
    },
    /*::[*/
    1126: {
      /* n:"BrtSXTupleItems" */
    },
    /*::[*/
    1128: {
      /* n:"BrtBeginSlicerStyle", */
      T: 1
    },
    /*::[*/
    1129: {
      /* n:"BrtEndSlicerStyle", */
      T: -1
    },
    /*::[*/
    1130: {
      /* n:"BrtSlicerStyleElement" */
    },
    /*::[*/
    1131: {
      /* n:"BrtBeginStyleSheetExt14", */
      T: 1
    },
    /*::[*/
    1132: {
      /* n:"BrtEndStyleSheetExt14", */
      T: -1
    },
    /*::[*/
    1133: {
      /* n:"BrtBeginSlicerCachesPivotCacheID", */
      T: 1
    },
    /*::[*/
    1134: {
      /* n:"BrtEndSlicerCachesPivotCacheID", */
      T: -1
    },
    /*::[*/
    1135: {
      /* n:"BrtBeginConditionalFormattings", */
      T: 1
    },
    /*::[*/
    1136: {
      /* n:"BrtEndConditionalFormattings", */
      T: -1
    },
    /*::[*/
    1137: {
      /* n:"BrtBeginPCDCalcMemExt", */
      T: 1
    },
    /*::[*/
    1138: {
      /* n:"BrtEndPCDCalcMemExt", */
      T: -1
    },
    /*::[*/
    1139: {
      /* n:"BrtBeginPCDCalcMemsExt", */
      T: 1
    },
    /*::[*/
    1140: {
      /* n:"BrtEndPCDCalcMemsExt", */
      T: -1
    },
    /*::[*/
    1141: {
      /* n:"BrtPCDField14" */
    },
    /*::[*/
    1142: {
      /* n:"BrtBeginSlicerStyles", */
      T: 1
    },
    /*::[*/
    1143: {
      /* n:"BrtEndSlicerStyles", */
      T: -1
    },
    /*::[*/
    1144: {
      /* n:"BrtBeginSlicerStyleElements", */
      T: 1
    },
    /*::[*/
    1145: {
      /* n:"BrtEndSlicerStyleElements", */
      T: -1
    },
    /*::[*/
    1146: {
      /* n:"BrtCFRuleExt" */
    },
    /*::[*/
    1147: {
      /* n:"BrtBeginSXCondFmt14", */
      T: 1
    },
    /*::[*/
    1148: {
      /* n:"BrtEndSXCondFmt14", */
      T: -1
    },
    /*::[*/
    1149: {
      /* n:"BrtBeginSXCondFmts14", */
      T: 1
    },
    /*::[*/
    1150: {
      /* n:"BrtEndSXCondFmts14", */
      T: -1
    },
    /*::[*/
    1152: {
      /* n:"BrtBeginSortCond14", */
      T: 1
    },
    /*::[*/
    1153: {
      /* n:"BrtEndSortCond14", */
      T: -1
    },
    /*::[*/
    1154: {
      /* n:"BrtEndDVals14", */
      T: -1
    },
    /*::[*/
    1155: {
      /* n:"BrtEndIconSet14", */
      T: -1
    },
    /*::[*/
    1156: {
      /* n:"BrtEndDatabar14", */
      T: -1
    },
    /*::[*/
    1157: {
      /* n:"BrtBeginColorScale14", */
      T: 1
    },
    /*::[*/
    1158: {
      /* n:"BrtEndColorScale14", */
      T: -1
    },
    /*::[*/
    1159: {
      /* n:"BrtBeginSxrules14", */
      T: 1
    },
    /*::[*/
    1160: {
      /* n:"BrtEndSxrules14", */
      T: -1
    },
    /*::[*/
    1161: {
      /* n:"BrtBeginPRule14", */
      T: 1
    },
    /*::[*/
    1162: {
      /* n:"BrtEndPRule14", */
      T: -1
    },
    /*::[*/
    1163: {
      /* n:"BrtBeginPRFilters14", */
      T: 1
    },
    /*::[*/
    1164: {
      /* n:"BrtEndPRFilters14", */
      T: -1
    },
    /*::[*/
    1165: {
      /* n:"BrtBeginPRFilter14", */
      T: 1
    },
    /*::[*/
    1166: {
      /* n:"BrtEndPRFilter14", */
      T: -1
    },
    /*::[*/
    1167: {
      /* n:"BrtBeginPRFItem14", */
      T: 1
    },
    /*::[*/
    1168: {
      /* n:"BrtEndPRFItem14", */
      T: -1
    },
    /*::[*/
    1169: {
      /* n:"BrtBeginCellIgnoreECs14", */
      T: 1
    },
    /*::[*/
    1170: {
      /* n:"BrtEndCellIgnoreECs14", */
      T: -1
    },
    /*::[*/
    1171: {
      /* n:"BrtDxf14" */
    },
    /*::[*/
    1172: {
      /* n:"BrtBeginDxF14s", */
      T: 1
    },
    /*::[*/
    1173: {
      /* n:"BrtEndDxf14s", */
      T: -1
    },
    /*::[*/
    1177: {
      /* n:"BrtFilter14" */
    },
    /*::[*/
    1178: {
      /* n:"BrtBeginCustomFilters14", */
      T: 1
    },
    /*::[*/
    1180: {
      /* n:"BrtCustomFilter14" */
    },
    /*::[*/
    1181: {
      /* n:"BrtIconFilter14" */
    },
    /*::[*/
    1182: {
      /* n:"BrtPivotCacheConnectionName" */
    },
    /*::[*/
    2048: {
      /* n:"BrtBeginDecoupledPivotCacheIDs", */
      T: 1
    },
    /*::[*/
    2049: {
      /* n:"BrtEndDecoupledPivotCacheIDs", */
      T: -1
    },
    /*::[*/
    2050: {
      /* n:"BrtDecoupledPivotCacheID" */
    },
    /*::[*/
    2051: {
      /* n:"BrtBeginPivotTableRefs", */
      T: 1
    },
    /*::[*/
    2052: {
      /* n:"BrtEndPivotTableRefs", */
      T: -1
    },
    /*::[*/
    2053: {
      /* n:"BrtPivotTableRef" */
    },
    /*::[*/
    2054: {
      /* n:"BrtSlicerCacheBookPivotTables" */
    },
    /*::[*/
    2055: {
      /* n:"BrtBeginSxvcells", */
      T: 1
    },
    /*::[*/
    2056: {
      /* n:"BrtEndSxvcells", */
      T: -1
    },
    /*::[*/
    2057: {
      /* n:"BrtBeginSxRow", */
      T: 1
    },
    /*::[*/
    2058: {
      /* n:"BrtEndSxRow", */
      T: -1
    },
    /*::[*/
    2060: {
      /* n:"BrtPcdCalcMem15" */
    },
    /*::[*/
    2067: {
      /* n:"BrtQsi15" */
    },
    /*::[*/
    2068: {
      /* n:"BrtBeginWebExtensions", */
      T: 1
    },
    /*::[*/
    2069: {
      /* n:"BrtEndWebExtensions", */
      T: -1
    },
    /*::[*/
    2070: {
      /* n:"BrtWebExtension" */
    },
    /*::[*/
    2071: {
      /* n:"BrtAbsPath15" */
    },
    /*::[*/
    2072: {
      /* n:"BrtBeginPivotTableUISettings", */
      T: 1
    },
    /*::[*/
    2073: {
      /* n:"BrtEndPivotTableUISettings", */
      T: -1
    },
    /*::[*/
    2075: {
      /* n:"BrtTableSlicerCacheIDs" */
    },
    /*::[*/
    2076: {
      /* n:"BrtTableSlicerCacheID" */
    },
    /*::[*/
    2077: {
      /* n:"BrtBeginTableSlicerCache", */
      T: 1
    },
    /*::[*/
    2078: {
      /* n:"BrtEndTableSlicerCache", */
      T: -1
    },
    /*::[*/
    2079: {
      /* n:"BrtSxFilter15" */
    },
    /*::[*/
    2080: {
      /* n:"BrtBeginTimelineCachePivotCacheIDs", */
      T: 1
    },
    /*::[*/
    2081: {
      /* n:"BrtEndTimelineCachePivotCacheIDs", */
      T: -1
    },
    /*::[*/
    2082: {
      /* n:"BrtTimelineCachePivotCacheID" */
    },
    /*::[*/
    2083: {
      /* n:"BrtBeginTimelineCacheIDs", */
      T: 1
    },
    /*::[*/
    2084: {
      /* n:"BrtEndTimelineCacheIDs", */
      T: -1
    },
    /*::[*/
    2085: {
      /* n:"BrtBeginTimelineCacheID", */
      T: 1
    },
    /*::[*/
    2086: {
      /* n:"BrtEndTimelineCacheID", */
      T: -1
    },
    /*::[*/
    2087: {
      /* n:"BrtBeginTimelinesEx", */
      T: 1
    },
    /*::[*/
    2088: {
      /* n:"BrtEndTimelinesEx", */
      T: -1
    },
    /*::[*/
    2089: {
      /* n:"BrtBeginTimelineEx", */
      T: 1
    },
    /*::[*/
    2090: {
      /* n:"BrtEndTimelineEx", */
      T: -1
    },
    /*::[*/
    2091: {
      /* n:"BrtWorkBookPr15" */
    },
    /*::[*/
    2092: {
      /* n:"BrtPCDH15" */
    },
    /*::[*/
    2093: {
      /* n:"BrtBeginTimelineStyle", */
      T: 1
    },
    /*::[*/
    2094: {
      /* n:"BrtEndTimelineStyle", */
      T: -1
    },
    /*::[*/
    2095: {
      /* n:"BrtTimelineStyleElement" */
    },
    /*::[*/
    2096: {
      /* n:"BrtBeginTimelineStylesheetExt15", */
      T: 1
    },
    /*::[*/
    2097: {
      /* n:"BrtEndTimelineStylesheetExt15", */
      T: -1
    },
    /*::[*/
    2098: {
      /* n:"BrtBeginTimelineStyles", */
      T: 1
    },
    /*::[*/
    2099: {
      /* n:"BrtEndTimelineStyles", */
      T: -1
    },
    /*::[*/
    2100: {
      /* n:"BrtBeginTimelineStyleElements", */
      T: 1
    },
    /*::[*/
    2101: {
      /* n:"BrtEndTimelineStyleElements", */
      T: -1
    },
    /*::[*/
    2102: {
      /* n:"BrtDxf15" */
    },
    /*::[*/
    2103: {
      /* n:"BrtBeginDxfs15", */
      T: 1
    },
    /*::[*/
    2104: {
      /* n:"BrtEndDxfs15", */
      T: -1
    },
    /*::[*/
    2105: {
      /* n:"BrtSlicerCacheHideItemsWithNoData" */
    },
    /*::[*/
    2106: {
      /* n:"BrtBeginItemUniqueNames", */
      T: 1
    },
    /*::[*/
    2107: {
      /* n:"BrtEndItemUniqueNames", */
      T: -1
    },
    /*::[*/
    2108: {
      /* n:"BrtItemUniqueName" */
    },
    /*::[*/
    2109: {
      /* n:"BrtBeginExtConn15", */
      T: 1
    },
    /*::[*/
    2110: {
      /* n:"BrtEndExtConn15", */
      T: -1
    },
    /*::[*/
    2111: {
      /* n:"BrtBeginOledbPr15", */
      T: 1
    },
    /*::[*/
    2112: {
      /* n:"BrtEndOledbPr15", */
      T: -1
    },
    /*::[*/
    2113: {
      /* n:"BrtBeginDataFeedPr15", */
      T: 1
    },
    /*::[*/
    2114: {
      /* n:"BrtEndDataFeedPr15", */
      T: -1
    },
    /*::[*/
    2115: {
      /* n:"BrtTextPr15" */
    },
    /*::[*/
    2116: {
      /* n:"BrtRangePr15" */
    },
    /*::[*/
    2117: {
      /* n:"BrtDbCommand15" */
    },
    /*::[*/
    2118: {
      /* n:"BrtBeginDbTables15", */
      T: 1
    },
    /*::[*/
    2119: {
      /* n:"BrtEndDbTables15", */
      T: -1
    },
    /*::[*/
    2120: {
      /* n:"BrtDbTable15" */
    },
    /*::[*/
    2121: {
      /* n:"BrtBeginDataModel", */
      T: 1
    },
    /*::[*/
    2122: {
      /* n:"BrtEndDataModel", */
      T: -1
    },
    /*::[*/
    2123: {
      /* n:"BrtBeginModelTables", */
      T: 1
    },
    /*::[*/
    2124: {
      /* n:"BrtEndModelTables", */
      T: -1
    },
    /*::[*/
    2125: {
      /* n:"BrtModelTable" */
    },
    /*::[*/
    2126: {
      /* n:"BrtBeginModelRelationships", */
      T: 1
    },
    /*::[*/
    2127: {
      /* n:"BrtEndModelRelationships", */
      T: -1
    },
    /*::[*/
    2128: {
      /* n:"BrtModelRelationship" */
    },
    /*::[*/
    2129: {
      /* n:"BrtBeginECTxtWiz15", */
      T: 1
    },
    /*::[*/
    2130: {
      /* n:"BrtEndECTxtWiz15", */
      T: -1
    },
    /*::[*/
    2131: {
      /* n:"BrtBeginECTWFldInfoLst15", */
      T: 1
    },
    /*::[*/
    2132: {
      /* n:"BrtEndECTWFldInfoLst15", */
      T: -1
    },
    /*::[*/
    2133: {
      /* n:"BrtBeginECTWFldInfo15", */
      T: 1
    },
    /*::[*/
    2134: {
      /* n:"BrtFieldListActiveItem" */
    },
    /*::[*/
    2135: {
      /* n:"BrtPivotCacheIdVersion" */
    },
    /*::[*/
    2136: {
      /* n:"BrtSXDI15" */
    },
    /*::[*/
    2137: {
      /* n:"BrtBeginModelTimeGroupings", */
      T: 1
    },
    /*::[*/
    2138: {
      /* n:"BrtEndModelTimeGroupings", */
      T: -1
    },
    /*::[*/
    2139: {
      /* n:"BrtBeginModelTimeGrouping", */
      T: 1
    },
    /*::[*/
    2140: {
      /* n:"BrtEndModelTimeGrouping", */
      T: -1
    },
    /*::[*/
    2141: {
      /* n:"BrtModelTimeGroupingCalcCol" */
    },
    /*::[*/
    3072: {
      /* n:"BrtUid" */
    },
    /*::[*/
    3073: {
      /* n:"BrtRevisionPtr" */
    },
    /*::[*/
    4096: {
      /* n:"BrtBeginDynamicArrayPr", */
      T: 1
    },
    /*::[*/
    4097: {
      /* n:"BrtEndDynamicArrayPr", */
      T: -1
    },
    /*::[*/
    5002: {
      /* n:"BrtBeginRichValueBlock", */
      T: 1
    },
    /*::[*/
    5003: {
      /* n:"BrtEndRichValueBlock", */
      T: -1
    },
    /*::[*/
    5081: {
      /* n:"BrtBeginRichFilters", */
      T: 1
    },
    /*::[*/
    5082: {
      /* n:"BrtEndRichFilters", */
      T: -1
    },
    /*::[*/
    5083: {
      /* n:"BrtRichFilter" */
    },
    /*::[*/
    5084: {
      /* n:"BrtBeginRichFilterColumn", */
      T: 1
    },
    /*::[*/
    5085: {
      /* n:"BrtEndRichFilterColumn", */
      T: -1
    },
    /*::[*/
    5086: {
      /* n:"BrtBeginCustomRichFilters", */
      T: 1
    },
    /*::[*/
    5087: {
      /* n:"BrtEndCustomRichFilters", */
      T: -1
    },
    /*::[*/
    5088: {
      /* n:"BrtCustomRichFilter" */
    },
    /*::[*/
    5089: {
      /* n:"BrtTop10RichFilter" */
    },
    /*::[*/
    5090: {
      /* n:"BrtDynamicRichFilter" */
    },
    /*::[*/
    5092: {
      /* n:"BrtBeginRichSortCondition", */
      T: 1
    },
    /*::[*/
    5093: {
      /* n:"BrtEndRichSortCondition", */
      T: -1
    },
    /*::[*/
    5094: {
      /* n:"BrtRichFilterDateGroupItem" */
    },
    /*::[*/
    5095: {
      /* n:"BrtBeginCalcFeatures", */
      T: 1
    },
    /*::[*/
    5096: {
      /* n:"BrtEndCalcFeatures", */
      T: -1
    },
    /*::[*/
    5097: {
      /* n:"BrtCalcFeature" */
    },
    /*::[*/
    5099: {
      /* n:"BrtExternalLinksPr" */
    },
    /*::[*/
    65535: { n: "" }
  };
  var XLSRecordEnum = {
    /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */
    /*::[*/
    6: {
      /* n:"Formula", */
      f: parse_Formula
    },
    /*::[*/
    10: {
      /* n:"EOF", */
      f: parsenoop2
    },
    /*::[*/
    12: {
      /* n:"CalcCount", */
      f: parseuint16
    },
    //
    /*::[*/
    13: {
      /* n:"CalcMode", */
      f: parseuint16
    },
    //
    /*::[*/
    14: {
      /* n:"CalcPrecision", */
      f: parsebool
    },
    //
    /*::[*/
    15: {
      /* n:"CalcRefMode", */
      f: parsebool
    },
    //
    /*::[*/
    16: {
      /* n:"CalcDelta", */
      f: parse_Xnum
    },
    //
    /*::[*/
    17: {
      /* n:"CalcIter", */
      f: parsebool
    },
    //
    /*::[*/
    18: {
      /* n:"Protect", */
      f: parsebool
    },
    /*::[*/
    19: {
      /* n:"Password", */
      f: parseuint16
    },
    /*::[*/
    20: {
      /* n:"Header", */
      f: parse_XLHeaderFooter
    },
    /*::[*/
    21: {
      /* n:"Footer", */
      f: parse_XLHeaderFooter
    },
    /*::[*/
    23: {
      /* n:"ExternSheet", */
      f: parse_ExternSheet
    },
    /*::[*/
    24: {
      /* n:"Lbl", */
      f: parse_Lbl
    },
    /*::[*/
    25: {
      /* n:"WinProtect", */
      f: parsebool
    },
    /*::[*/
    26: {
      /* n:"VerticalPageBreaks", */
    },
    /*::[*/
    27: {
      /* n:"HorizontalPageBreaks", */
    },
    /*::[*/
    28: {
      /* n:"Note", */
      f: parse_Note
    },
    /*::[*/
    29: {
      /* n:"Selection", */
    },
    /*::[*/
    34: {
      /* n:"Date1904", */
      f: parsebool
    },
    /*::[*/
    35: {
      /* n:"ExternName", */
      f: parse_ExternName
    },
    /*::[*/
    38: {
      /* n:"LeftMargin", */
      f: parse_Xnum
    },
    // *
    /*::[*/
    39: {
      /* n:"RightMargin", */
      f: parse_Xnum
    },
    // *
    /*::[*/
    40: {
      /* n:"TopMargin", */
      f: parse_Xnum
    },
    // *
    /*::[*/
    41: {
      /* n:"BottomMargin", */
      f: parse_Xnum
    },
    // *
    /*::[*/
    42: {
      /* n:"PrintRowCol", */
      f: parsebool
    },
    /*::[*/
    43: {
      /* n:"PrintGrid", */
      f: parsebool
    },
    /*::[*/
    47: {
      /* n:"FilePass", */
      f: parse_FilePass
    },
    /*::[*/
    49: {
      /* n:"Font", */
      f: parse_Font
    },
    /*::[*/
    51: {
      /* n:"PrintSize", */
      f: parseuint16
    },
    /*::[*/
    60: {
      /* n:"Continue", */
    },
    /*::[*/
    61: {
      /* n:"Window1", */
      f: parse_Window1
    },
    /*::[*/
    64: {
      /* n:"Backup", */
      f: parsebool
    },
    /*::[*/
    65: {
      /* n:"Pane", */
      f: parse_Pane
    },
    /*::[*/
    66: {
      /* n:"CodePage", */
      f: parseuint16
    },
    /*::[*/
    77: {
      /* n:"Pls", */
    },
    /*::[*/
    80: {
      /* n:"DCon", */
    },
    /*::[*/
    81: {
      /* n:"DConRef", */
    },
    /*::[*/
    82: {
      /* n:"DConName", */
    },
    /*::[*/
    85: {
      /* n:"DefColWidth", */
      f: parseuint16
    },
    /*::[*/
    89: {
      /* n:"XCT", */
    },
    /*::[*/
    90: {
      /* n:"CRN", */
    },
    /*::[*/
    91: {
      /* n:"FileSharing", */
    },
    /*::[*/
    92: {
      /* n:"WriteAccess", */
      f: parse_WriteAccess
    },
    /*::[*/
    93: {
      /* n:"Obj", */
      f: parse_Obj
    },
    /*::[*/
    94: {
      /* n:"Uncalced", */
    },
    /*::[*/
    95: {
      /* n:"CalcSaveRecalc", */
      f: parsebool
    },
    //
    /*::[*/
    96: {
      /* n:"Template", */
    },
    /*::[*/
    97: {
      /* n:"Intl", */
    },
    /*::[*/
    99: {
      /* n:"ObjProtect", */
      f: parsebool
    },
    /*::[*/
    125: {
      /* n:"ColInfo", */
      f: parse_ColInfo
    },
    /*::[*/
    128: {
      /* n:"Guts", */
      f: parse_Guts
    },
    /*::[*/
    129: {
      /* n:"WsBool", */
      f: parse_WsBool
    },
    /*::[*/
    130: {
      /* n:"GridSet", */
      f: parseuint16
    },
    /*::[*/
    131: {
      /* n:"HCenter", */
      f: parsebool
    },
    /*::[*/
    132: {
      /* n:"VCenter", */
      f: parsebool
    },
    /*::[*/
    133: {
      /* n:"BoundSheet8", */
      f: parse_BoundSheet8
    },
    /*::[*/
    134: {
      /* n:"WriteProtect", */
    },
    /*::[*/
    140: {
      /* n:"Country", */
      f: parse_Country
    },
    /*::[*/
    141: {
      /* n:"HideObj", */
      f: parseuint16
    },
    /*::[*/
    144: {
      /* n:"Sort", */
    },
    /*::[*/
    146: {
      /* n:"Palette", */
      f: parse_Palette
    },
    /*::[*/
    151: {
      /* n:"Sync", */
    },
    /*::[*/
    152: {
      /* n:"LPr", */
    },
    /*::[*/
    153: {
      /* n:"DxGCol", */
    },
    /*::[*/
    154: {
      /* n:"FnGroupName", */
    },
    /*::[*/
    155: {
      /* n:"FilterMode", */
    },
    /*::[*/
    156: {
      /* n:"BuiltInFnGroupCount", */
      f: parseuint16
    },
    /*::[*/
    157: {
      /* n:"AutoFilterInfo", */
    },
    /*::[*/
    158: {
      /* n:"AutoFilter", */
    },
    /*::[*/
    160: {
      /* n:"Scl", */
      f: parse_Scl
    },
    /*::[*/
    161: {
      /* n:"Setup", */
      f: parse_Setup
    },
    /*::[*/
    174: {
      /* n:"ScenMan", */
    },
    /*::[*/
    175: {
      /* n:"SCENARIO", */
    },
    /*::[*/
    176: {
      /* n:"SxView", */
    },
    /*::[*/
    177: {
      /* n:"Sxvd", */
    },
    /*::[*/
    178: {
      /* n:"SXVI", */
    },
    /*::[*/
    180: {
      /* n:"SxIvd", */
    },
    /*::[*/
    181: {
      /* n:"SXLI", */
    },
    /*::[*/
    182: {
      /* n:"SXPI", */
    },
    /*::[*/
    184: {
      /* n:"DocRoute", */
    },
    /*::[*/
    185: {
      /* n:"RecipName", */
    },
    /*::[*/
    189: {
      /* n:"MulRk", */
      f: parse_MulRk
    },
    /*::[*/
    190: {
      /* n:"MulBlank", */
      f: parse_MulBlank
    },
    /*::[*/
    193: {
      /* n:"Mms", */
      f: parsenoop2
    },
    /*::[*/
    197: {
      /* n:"SXDI", */
    },
    /*::[*/
    198: {
      /* n:"SXDB", */
    },
    /*::[*/
    199: {
      /* n:"SXFDB", */
    },
    /*::[*/
    200: {
      /* n:"SXDBB", */
    },
    /*::[*/
    201: {
      /* n:"SXNum", */
    },
    /*::[*/
    202: {
      /* n:"SxBool", */
      f: parsebool
    },
    /*::[*/
    203: {
      /* n:"SxErr", */
    },
    /*::[*/
    204: {
      /* n:"SXInt", */
    },
    /*::[*/
    205: {
      /* n:"SXString", */
    },
    /*::[*/
    206: {
      /* n:"SXDtr", */
    },
    /*::[*/
    207: {
      /* n:"SxNil", */
    },
    /*::[*/
    208: {
      /* n:"SXTbl", */
    },
    /*::[*/
    209: {
      /* n:"SXTBRGIITM", */
    },
    /*::[*/
    210: {
      /* n:"SxTbpg", */
    },
    /*::[*/
    211: {
      /* n:"ObProj", */
    },
    /*::[*/
    213: {
      /* n:"SXStreamID", */
    },
    /*::[*/
    215: {
      /* n:"DBCell", */
    },
    /*::[*/
    216: {
      /* n:"SXRng", */
    },
    /*::[*/
    217: {
      /* n:"SxIsxoper", */
    },
    /*::[*/
    218: {
      /* n:"BookBool", */
      f: parseuint16
    },
    /*::[*/
    220: {
      /* n:"DbOrParamQry", */
    },
    /*::[*/
    221: {
      /* n:"ScenarioProtect", */
      f: parsebool
    },
    /*::[*/
    222: {
      /* n:"OleObjectSize", */
    },
    /*::[*/
    224: {
      /* n:"XF", */
      f: parse_XF
    },
    /*::[*/
    225: {
      /* n:"InterfaceHdr", */
      f: parse_InterfaceHdr
    },
    /*::[*/
    226: {
      /* n:"InterfaceEnd", */
      f: parsenoop2
    },
    /*::[*/
    227: {
      /* n:"SXVS", */
    },
    /*::[*/
    229: {
      /* n:"MergeCells", */
      f: parse_MergeCells
    },
    /*::[*/
    233: {
      /* n:"BkHim", */
    },
    /*::[*/
    235: {
      /* n:"MsoDrawingGroup", */
    },
    /*::[*/
    236: {
      /* n:"MsoDrawing", */
    },
    /*::[*/
    237: {
      /* n:"MsoDrawingSelection", */
    },
    /*::[*/
    239: {
      /* n:"PhoneticInfo", */
    },
    /*::[*/
    240: {
      /* n:"SxRule", */
    },
    /*::[*/
    241: {
      /* n:"SXEx", */
    },
    /*::[*/
    242: {
      /* n:"SxFilt", */
    },
    /*::[*/
    244: {
      /* n:"SxDXF", */
    },
    /*::[*/
    245: {
      /* n:"SxItm", */
    },
    /*::[*/
    246: {
      /* n:"SxName", */
    },
    /*::[*/
    247: {
      /* n:"SxSelect", */
    },
    /*::[*/
    248: {
      /* n:"SXPair", */
    },
    /*::[*/
    249: {
      /* n:"SxFmla", */
    },
    /*::[*/
    251: {
      /* n:"SxFormat", */
    },
    /*::[*/
    252: {
      /* n:"SST", */
      f: parse_SST
    },
    /*::[*/
    253: {
      /* n:"LabelSst", */
      f: parse_LabelSst
    },
    /*::[*/
    255: {
      /* n:"ExtSST", */
      f: parse_ExtSST
    },
    /*::[*/
    256: {
      /* n:"SXVDEx", */
    },
    /*::[*/
    259: {
      /* n:"SXFormula", */
    },
    /*::[*/
    290: {
      /* n:"SXDBEx", */
    },
    /*::[*/
    311: {
      /* n:"RRDInsDel", */
    },
    /*::[*/
    312: {
      /* n:"RRDHead", */
    },
    /*::[*/
    315: {
      /* n:"RRDChgCell", */
    },
    /*::[*/
    317: {
      /* n:"RRTabId", */
      f: parseuint16a
    },
    /*::[*/
    318: {
      /* n:"RRDRenSheet", */
    },
    /*::[*/
    319: {
      /* n:"RRSort", */
    },
    /*::[*/
    320: {
      /* n:"RRDMove", */
    },
    /*::[*/
    330: {
      /* n:"RRFormat", */
    },
    /*::[*/
    331: {
      /* n:"RRAutoFmt", */
    },
    /*::[*/
    333: {
      /* n:"RRInsertSh", */
    },
    /*::[*/
    334: {
      /* n:"RRDMoveBegin", */
    },
    /*::[*/
    335: {
      /* n:"RRDMoveEnd", */
    },
    /*::[*/
    336: {
      /* n:"RRDInsDelBegin", */
    },
    /*::[*/
    337: {
      /* n:"RRDInsDelEnd", */
    },
    /*::[*/
    338: {
      /* n:"RRDConflict", */
    },
    /*::[*/
    339: {
      /* n:"RRDDefName", */
    },
    /*::[*/
    340: {
      /* n:"RRDRstEtxp", */
    },
    /*::[*/
    351: {
      /* n:"LRng", */
    },
    /*::[*/
    352: {
      /* n:"UsesELFs", */
      f: parsebool
    },
    /*::[*/
    353: {
      /* n:"DSF", */
      f: parsenoop2
    },
    /*::[*/
    401: {
      /* n:"CUsr", */
    },
    /*::[*/
    402: {
      /* n:"CbUsr", */
    },
    /*::[*/
    403: {
      /* n:"UsrInfo", */
    },
    /*::[*/
    404: {
      /* n:"UsrExcl", */
    },
    /*::[*/
    405: {
      /* n:"FileLock", */
    },
    /*::[*/
    406: {
      /* n:"RRDInfo", */
    },
    /*::[*/
    407: {
      /* n:"BCUsrs", */
    },
    /*::[*/
    408: {
      /* n:"UsrChk", */
    },
    /*::[*/
    425: {
      /* n:"UserBView", */
    },
    /*::[*/
    426: {
      /* n:"UserSViewBegin", */
    },
    /*::[*/
    427: {
      /* n:"UserSViewEnd", */
    },
    /*::[*/
    428: {
      /* n:"RRDUserView", */
    },
    /*::[*/
    429: {
      /* n:"Qsi", */
    },
    /*::[*/
    430: {
      /* n:"SupBook", */
      f: parse_SupBook
    },
    /*::[*/
    431: {
      /* n:"Prot4Rev", */
      f: parsebool
    },
    /*::[*/
    432: {
      /* n:"CondFmt", */
    },
    /*::[*/
    433: {
      /* n:"CF", */
    },
    /*::[*/
    434: {
      /* n:"DVal", */
    },
    /*::[*/
    437: {
      /* n:"DConBin", */
    },
    /*::[*/
    438: {
      /* n:"TxO", */
      f: parse_TxO
    },
    /*::[*/
    439: {
      /* n:"RefreshAll", */
      f: parsebool
    },
    //
    /*::[*/
    440: {
      /* n:"HLink", */
      f: parse_HLink
    },
    /*::[*/
    441: {
      /* n:"Lel", */
    },
    /*::[*/
    442: {
      /* n:"CodeName", */
      f: parse_XLUnicodeString
    },
    /*::[*/
    443: {
      /* n:"SXFDBType", */
    },
    /*::[*/
    444: {
      /* n:"Prot4RevPass", */
      f: parseuint16
    },
    /*::[*/
    445: {
      /* n:"ObNoMacros", */
    },
    /*::[*/
    446: {
      /* n:"Dv", */
    },
    /*::[*/
    448: {
      /* n:"Excel9File", */
      f: parsenoop2
    },
    /*::[*/
    449: {
      /* n:"RecalcId", */
      f: parse_RecalcId,
      r: 2
    },
    /*::[*/
    450: {
      /* n:"EntExU2", */
      f: parsenoop2
    },
    /*::[*/
    512: {
      /* n:"Dimensions", */
      f: parse_Dimensions
    },
    /*::[*/
    513: {
      /* n:"Blank", */
      f: parse_Blank
    },
    /*::[*/
    515: {
      /* n:"Number", */
      f: parse_Number
    },
    /*::[*/
    516: {
      /* n:"Label", */
      f: parse_Label
    },
    /*::[*/
    517: {
      /* n:"BoolErr", */
      f: parse_BoolErr
    },
    /*::[*/
    519: {
      /* n:"String", */
      f: parse_String
    },
    /*::[*/
    520: {
      /* n:"Row", */
      f: parse_Row
    },
    /*::[*/
    523: {
      /* n:"Index", */
    },
    /*::[*/
    545: {
      /* n:"Array", */
      f: parse_Array
    },
    /*::[*/
    549: {
      /* n:"DefaultRowHeight", */
      f: parse_DefaultRowHeight
    },
    /*::[*/
    566: {
      /* n:"Table", */
    },
    /*::[*/
    574: {
      /* n:"Window2", */
      f: parse_Window2
    },
    /*::[*/
    638: {
      /* n:"RK", */
      f: parse_RK
    },
    /*::[*/
    659: {
      /* n:"Style", */
    },
    /*::[*/
    1048: {
      /* n:"BigName", */
    },
    /*::[*/
    1054: {
      /* n:"Format", */
      f: parse_Format
    },
    /*::[*/
    1084: {
      /* n:"ContinueBigName", */
    },
    /*::[*/
    1212: {
      /* n:"ShrFmla", */
      f: parse_ShrFmla
    },
    /*::[*/
    2048: {
      /* n:"HLinkTooltip", */
      f: parse_HLinkTooltip
    },
    /*::[*/
    2049: {
      /* n:"WebPub", */
    },
    /*::[*/
    2050: {
      /* n:"QsiSXTag", */
    },
    /*::[*/
    2051: {
      /* n:"DBQueryExt", */
    },
    /*::[*/
    2052: {
      /* n:"ExtString", */
    },
    /*::[*/
    2053: {
      /* n:"TxtQry", */
    },
    /*::[*/
    2054: {
      /* n:"Qsir", */
    },
    /*::[*/
    2055: {
      /* n:"Qsif", */
    },
    /*::[*/
    2056: {
      /* n:"RRDTQSIF", */
    },
    /*::[*/
    2057: {
      /* n:"BOF", */
      f: parse_BOF
    },
    /*::[*/
    2058: {
      /* n:"OleDbConn", */
    },
    /*::[*/
    2059: {
      /* n:"WOpt", */
    },
    /*::[*/
    2060: {
      /* n:"SXViewEx", */
    },
    /*::[*/
    2061: {
      /* n:"SXTH", */
    },
    /*::[*/
    2062: {
      /* n:"SXPIEx", */
    },
    /*::[*/
    2063: {
      /* n:"SXVDTEx", */
    },
    /*::[*/
    2064: {
      /* n:"SXViewEx9", */
    },
    /*::[*/
    2066: {
      /* n:"ContinueFrt", */
    },
    /*::[*/
    2067: {
      /* n:"RealTimeData", */
    },
    /*::[*/
    2128: {
      /* n:"ChartFrtInfo", */
    },
    /*::[*/
    2129: {
      /* n:"FrtWrapper", */
    },
    /*::[*/
    2130: {
      /* n:"StartBlock", */
    },
    /*::[*/
    2131: {
      /* n:"EndBlock", */
    },
    /*::[*/
    2132: {
      /* n:"StartObject", */
    },
    /*::[*/
    2133: {
      /* n:"EndObject", */
    },
    /*::[*/
    2134: {
      /* n:"CatLab", */
    },
    /*::[*/
    2135: {
      /* n:"YMult", */
    },
    /*::[*/
    2136: {
      /* n:"SXViewLink", */
    },
    /*::[*/
    2137: {
      /* n:"PivotChartBits", */
    },
    /*::[*/
    2138: {
      /* n:"FrtFontList", */
    },
    /*::[*/
    2146: {
      /* n:"SheetExt", */
    },
    /*::[*/
    2147: {
      /* n:"BookExt", */
      r: 12
    },
    /*::[*/
    2148: {
      /* n:"SXAddl", */
    },
    /*::[*/
    2149: {
      /* n:"CrErr", */
    },
    /*::[*/
    2150: {
      /* n:"HFPicture", */
    },
    /*::[*/
    2151: {
      /* n:"FeatHdr", */
      f: parsenoop2
    },
    /*::[*/
    2152: {
      /* n:"Feat", */
    },
    /*::[*/
    2154: {
      /* n:"DataLabExt", */
    },
    /*::[*/
    2155: {
      /* n:"DataLabExtContents", */
    },
    /*::[*/
    2156: {
      /* n:"CellWatch", */
    },
    /*::[*/
    2161: {
      /* n:"FeatHdr11", */
    },
    /*::[*/
    2162: {
      /* n:"Feature11", */
    },
    /*::[*/
    2164: {
      /* n:"DropDownObjIds", */
    },
    /*::[*/
    2165: {
      /* n:"ContinueFrt11", */
    },
    /*::[*/
    2166: {
      /* n:"DConn", */
    },
    /*::[*/
    2167: {
      /* n:"List12", */
    },
    /*::[*/
    2168: {
      /* n:"Feature12", */
    },
    /*::[*/
    2169: {
      /* n:"CondFmt12", */
    },
    /*::[*/
    2170: {
      /* n:"CF12", */
    },
    /*::[*/
    2171: {
      /* n:"CFEx", */
    },
    /*::[*/
    2172: {
      /* n:"XFCRC", */
      f: parse_XFCRC,
      r: 12
    },
    /*::[*/
    2173: {
      /* n:"XFExt", */
      f: parse_XFExt,
      r: 12
    },
    /*::[*/
    2174: {
      /* n:"AutoFilter12", */
    },
    /*::[*/
    2175: {
      /* n:"ContinueFrt12", */
    },
    /*::[*/
    2180: {
      /* n:"MDTInfo", */
    },
    /*::[*/
    2181: {
      /* n:"MDXStr", */
    },
    /*::[*/
    2182: {
      /* n:"MDXTuple", */
    },
    /*::[*/
    2183: {
      /* n:"MDXSet", */
    },
    /*::[*/
    2184: {
      /* n:"MDXProp", */
    },
    /*::[*/
    2185: {
      /* n:"MDXKPI", */
    },
    /*::[*/
    2186: {
      /* n:"MDB", */
    },
    /*::[*/
    2187: {
      /* n:"PLV", */
    },
    /*::[*/
    2188: {
      /* n:"Compat12", */
      f: parsebool,
      r: 12
    },
    /*::[*/
    2189: {
      /* n:"DXF", */
    },
    /*::[*/
    2190: {
      /* n:"TableStyles", */
      r: 12
    },
    /*::[*/
    2191: {
      /* n:"TableStyle", */
    },
    /*::[*/
    2192: {
      /* n:"TableStyleElement", */
    },
    /*::[*/
    2194: {
      /* n:"StyleExt", */
    },
    /*::[*/
    2195: {
      /* n:"NamePublish", */
    },
    /*::[*/
    2196: {
      /* n:"NameCmt", */
      f: parse_NameCmt,
      r: 12
    },
    /*::[*/
    2197: {
      /* n:"SortData", */
    },
    /*::[*/
    2198: {
      /* n:"Theme", */
      f: parse_Theme,
      r: 12
    },
    /*::[*/
    2199: {
      /* n:"GUIDTypeLib", */
    },
    /*::[*/
    2200: {
      /* n:"FnGrp12", */
    },
    /*::[*/
    2201: {
      /* n:"NameFnGrp12", */
    },
    /*::[*/
    2202: {
      /* n:"MTRSettings", */
      f: parse_MTRSettings,
      r: 12
    },
    /*::[*/
    2203: {
      /* n:"CompressPictures", */
      f: parsenoop2
    },
    /*::[*/
    2204: {
      /* n:"HeaderFooter", */
    },
    /*::[*/
    2205: {
      /* n:"CrtLayout12", */
    },
    /*::[*/
    2206: {
      /* n:"CrtMlFrt", */
    },
    /*::[*/
    2207: {
      /* n:"CrtMlFrtContinue", */
    },
    /*::[*/
    2211: {
      /* n:"ForceFullCalculation", */
      f: parse_ForceFullCalculation
    },
    /*::[*/
    2212: {
      /* n:"ShapePropsStream", */
    },
    /*::[*/
    2213: {
      /* n:"TextPropsStream", */
    },
    /*::[*/
    2214: {
      /* n:"RichTextStream", */
    },
    /*::[*/
    2215: {
      /* n:"CrtLayout12A", */
    },
    /*::[*/
    4097: {
      /* n:"Units", */
    },
    /*::[*/
    4098: {
      /* n:"Chart", */
    },
    /*::[*/
    4099: {
      /* n:"Series", */
    },
    /*::[*/
    4102: {
      /* n:"DataFormat", */
    },
    /*::[*/
    4103: {
      /* n:"LineFormat", */
    },
    /*::[*/
    4105: {
      /* n:"MarkerFormat", */
    },
    /*::[*/
    4106: {
      /* n:"AreaFormat", */
    },
    /*::[*/
    4107: {
      /* n:"PieFormat", */
    },
    /*::[*/
    4108: {
      /* n:"AttachedLabel", */
    },
    /*::[*/
    4109: {
      /* n:"SeriesText", */
    },
    /*::[*/
    4116: {
      /* n:"ChartFormat", */
    },
    /*::[*/
    4117: {
      /* n:"Legend", */
    },
    /*::[*/
    4118: {
      /* n:"SeriesList", */
    },
    /*::[*/
    4119: {
      /* n:"Bar", */
    },
    /*::[*/
    4120: {
      /* n:"Line", */
    },
    /*::[*/
    4121: {
      /* n:"Pie", */
    },
    /*::[*/
    4122: {
      /* n:"Area", */
    },
    /*::[*/
    4123: {
      /* n:"Scatter", */
    },
    /*::[*/
    4124: {
      /* n:"CrtLine", */
    },
    /*::[*/
    4125: {
      /* n:"Axis", */
    },
    /*::[*/
    4126: {
      /* n:"Tick", */
    },
    /*::[*/
    4127: {
      /* n:"ValueRange", */
    },
    /*::[*/
    4128: {
      /* n:"CatSerRange", */
    },
    /*::[*/
    4129: {
      /* n:"AxisLine", */
    },
    /*::[*/
    4130: {
      /* n:"CrtLink", */
    },
    /*::[*/
    4132: {
      /* n:"DefaultText", */
    },
    /*::[*/
    4133: {
      /* n:"Text", */
    },
    /*::[*/
    4134: {
      /* n:"FontX", */
      f: parseuint16
    },
    /*::[*/
    4135: {
      /* n:"ObjectLink", */
    },
    /*::[*/
    4146: {
      /* n:"Frame", */
    },
    /*::[*/
    4147: {
      /* n:"Begin", */
    },
    /*::[*/
    4148: {
      /* n:"End", */
    },
    /*::[*/
    4149: {
      /* n:"PlotArea", */
    },
    /*::[*/
    4154: {
      /* n:"Chart3d", */
    },
    /*::[*/
    4156: {
      /* n:"PicF", */
    },
    /*::[*/
    4157: {
      /* n:"DropBar", */
    },
    /*::[*/
    4158: {
      /* n:"Radar", */
    },
    /*::[*/
    4159: {
      /* n:"Surf", */
    },
    /*::[*/
    4160: {
      /* n:"RadarArea", */
    },
    /*::[*/
    4161: {
      /* n:"AxisParent", */
    },
    /*::[*/
    4163: {
      /* n:"LegendException", */
    },
    /*::[*/
    4164: {
      /* n:"ShtProps", */
      f: parse_ShtProps
    },
    /*::[*/
    4165: {
      /* n:"SerToCrt", */
    },
    /*::[*/
    4166: {
      /* n:"AxesUsed", */
    },
    /*::[*/
    4168: {
      /* n:"SBaseRef", */
    },
    /*::[*/
    4170: {
      /* n:"SerParent", */
    },
    /*::[*/
    4171: {
      /* n:"SerAuxTrend", */
    },
    /*::[*/
    4174: {
      /* n:"IFmtRecord", */
    },
    /*::[*/
    4175: {
      /* n:"Pos", */
    },
    /*::[*/
    4176: {
      /* n:"AlRuns", */
    },
    /*::[*/
    4177: {
      /* n:"BRAI", */
    },
    /*::[*/
    4187: {
      /* n:"SerAuxErrBar", */
    },
    /*::[*/
    4188: {
      /* n:"ClrtClient", */
      f: parse_ClrtClient
    },
    /*::[*/
    4189: {
      /* n:"SerFmt", */
    },
    /*::[*/
    4191: {
      /* n:"Chart3DBarShape", */
    },
    /*::[*/
    4192: {
      /* n:"Fbi", */
    },
    /*::[*/
    4193: {
      /* n:"BopPop", */
    },
    /*::[*/
    4194: {
      /* n:"AxcExt", */
    },
    /*::[*/
    4195: {
      /* n:"Dat", */
    },
    /*::[*/
    4196: {
      /* n:"PlotGrowth", */
    },
    /*::[*/
    4197: {
      /* n:"SIIndex", */
    },
    /*::[*/
    4198: {
      /* n:"GelFrame", */
    },
    /*::[*/
    4199: {
      /* n:"BopPopCustom", */
    },
    /*::[*/
    4200: {
      /* n:"Fbi2", */
    },
    /*::[*/
    0: {
      /* n:"Dimensions", */
      f: parse_Dimensions
    },
    /*::[*/
    1: {
      /* n:"BIFF2BLANK", */
    },
    /*::[*/
    2: {
      /* n:"BIFF2INT", */
      f: parse_BIFF2INT
    },
    /*::[*/
    3: {
      /* n:"BIFF2NUM", */
      f: parse_BIFF2NUM
    },
    /*::[*/
    4: {
      /* n:"BIFF2STR", */
      f: parse_BIFF2STR
    },
    /*::[*/
    5: {
      /* n:"BoolErr", */
      f: parse_BoolErr
    },
    /*::[*/
    7: {
      /* n:"String", */
      f: parse_BIFF2STRING
    },
    /*::[*/
    8: {
      /* n:"BIFF2ROW", */
    },
    /*::[*/
    9: {
      /* n:"BOF", */
      f: parse_BOF
    },
    /*::[*/
    11: {
      /* n:"Index", */
    },
    /*::[*/
    22: {
      /* n:"ExternCount", */
      f: parseuint16
    },
    /*::[*/
    30: {
      /* n:"BIFF2FORMAT", */
      f: parse_BIFF2Format
    },
    /*::[*/
    31: {
      /* n:"BIFF2FMTCNT", */
    },
    /* 16-bit cnt of BIFF2FORMAT records */
    /*::[*/
    32: {
      /* n:"BIFF2COLINFO", */
    },
    /*::[*/
    33: {
      /* n:"Array", */
      f: parse_Array
    },
    /*::[*/
    36: {
      /* n:"COLWIDTH", */
    },
    /*::[*/
    37: {
      /* n:"DefaultRowHeight", */
      f: parse_DefaultRowHeight
    },
    // 0x2c ??
    // 0x2d ??
    // 0x2e ??
    // 0x30 FONTCOUNT: number of fonts
    /*::[*/
    50: {
      /* n:"BIFF2FONTXTRA", */
      f: parse_BIFF2FONTXTRA
    },
    // 0x35: INFOOPTS
    // 0x36: TABLE (BIFF2 only)
    // 0x37: TABLE2 (BIFF2 only)
    // 0x38: WNDESK
    // 0x39 ??
    // 0x3a: BEGINPREF
    // 0x3b: ENDPREF
    /*::[*/
    62: {
      /* n:"BIFF2WINDOW2", */
    },
    // 0x3f ??
    // 0x46: SHOWSCROLL
    // 0x47: SHOWFORMULA
    // 0x48: STATUSBAR
    // 0x49: SHORTMENUS
    // 0x4A:
    // 0x4B:
    // 0x4C:
    // 0x4E:
    // 0x4F:
    // 0x58: TOOLBAR (BIFF3)
    /* - - - */
    /*::[*/
    52: {
      /* n:"DDEObjName", */
    },
    /*::[*/
    67: {
      /* n:"BIFF2XF", */
    },
    /*::[*/
    68: {
      /* n:"BIFF2XFINDEX", */
      f: parseuint16
    },
    /*::[*/
    69: {
      /* n:"BIFF2FONTCLR", */
    },
    /*::[*/
    86: {
      /* n:"BIFF4FMTCNT", */
    },
    /* 16-bit cnt, similar to BIFF2 */
    /*::[*/
    126: {
      /* n:"RK", */
    },
    /* Not necessarily same as 0x027e */
    /*::[*/
    127: {
      /* n:"ImData", */
      f: parse_ImData
    },
    /*::[*/
    135: {
      /* n:"Addin", */
    },
    /*::[*/
    136: {
      /* n:"Edg", */
    },
    /*::[*/
    137: {
      /* n:"Pub", */
    },
    // 0x8A
    // 0x8B LH: alternate menu key flag (BIFF3/4)
    // 0x8E
    // 0x8F
    /*::[*/
    145: {
      /* n:"Sub", */
    },
    // 0x93 STYLE
    /*::[*/
    148: {
      /* n:"LHRecord", */
    },
    /*::[*/
    149: {
      /* n:"LHNGraph", */
    },
    /*::[*/
    150: {
      /* n:"Sound", */
    },
    // 0xA2 FNPROTO: function prototypes (BIFF4)
    // 0xA3
    // 0xA8
    /*::[*/
    169: {
      /* n:"CoordList", */
    },
    /*::[*/
    171: {
      /* n:"GCW", */
    },
    /*::[*/
    188: {
      /* n:"ShrFmla", */
    },
    /* Not necessarily same as 0x04bc */
    /*::[*/
    191: {
      /* n:"ToolbarHdr", */
    },
    /*::[*/
    192: {
      /* n:"ToolbarEnd", */
    },
    /*::[*/
    194: {
      /* n:"AddMenu", */
    },
    /*::[*/
    195: {
      /* n:"DelMenu", */
    },
    /*::[*/
    214: {
      /* n:"RString", */
      f: parse_RString
    },
    /*::[*/
    223: {
      /* n:"UDDesc", */
    },
    /*::[*/
    234: {
      /* n:"TabIdConf", */
    },
    /*::[*/
    354: {
      /* n:"XL5Modify", */
    },
    /*::[*/
    421: {
      /* n:"FileSharing2", */
    },
    /*::[*/
    518: {
      /* n:"Formula", */
      f: parse_Formula
    },
    /*::[*/
    521: {
      /* n:"BOF", */
      f: parse_BOF
    },
    /*::[*/
    536: {
      /* n:"Lbl", */
      f: parse_Lbl
    },
    /*::[*/
    547: {
      /* n:"ExternName", */
      f: parse_ExternName
    },
    /*::[*/
    561: {
      /* n:"Font", */
    },
    /*::[*/
    579: {
      /* n:"BIFF3XF", */
    },
    /*::[*/
    1030: {
      /* n:"Formula", */
      f: parse_Formula
    },
    /*::[*/
    1033: {
      /* n:"BOF", */
      f: parse_BOF
    },
    /*::[*/
    1091: {
      /* n:"BIFF4XF", */
    },
    /*::[*/
    2157: {
      /* n:"FeatInfo", */
    },
    /*::[*/
    2163: {
      /* n:"FeatInfo11", */
    },
    /*::[*/
    2177: {
      /* n:"SXAddl12", */
    },
    /*::[*/
    2240: {
      /* n:"AutoWebPub", */
    },
    /*::[*/
    2241: {
      /* n:"ListObj", */
    },
    /*::[*/
    2242: {
      /* n:"ListField", */
    },
    /*::[*/
    2243: {
      /* n:"ListDV", */
    },
    /*::[*/
    2244: {
      /* n:"ListCondFmt", */
    },
    /*::[*/
    2245: {
      /* n:"ListCF", */
    },
    /*::[*/
    2246: {
      /* n:"FMQry", */
    },
    /*::[*/
    2247: {
      /* n:"FMSQry", */
    },
    /*::[*/
    2248: {
      /* n:"PLV", */
    },
    /*::[*/
    2249: {
      /* n:"LnExt", */
    },
    /*::[*/
    2250: {
      /* n:"MkrExt", */
    },
    /*::[*/
    2251: {
      /* n:"CrtCoopt", */
    },
    /*::[*/
    2262: {
      /* n:"FRTArchId$", */
      r: 12
    },
    /*::[*/
    29282: {}
  };
  function write_biff_rec(ba, type2, payload, length) {
    var t2 = type2;
    if (isNaN(t2))
      return;
    var len = length || (payload || []).length || 0;
    var o2 = ba.next(4);
    o2.write_shift(2, t2);
    o2.write_shift(2, len);
    if (
      /*:: len != null &&*/
      len > 0 && is_buf(payload)
    )
      ba.push(payload);
  }
  function html_to_sheet(str, _opts) {
    var opts = _opts || {};
    var ws2 = opts.dense ? [] : {};
    str = str.replace(/<!--.*?-->/g, "");
    var mtch = str.match(/<table/i);
    if (!mtch)
      throw new Error("Invalid HTML: could not find <table>");
    var mtch2 = str.match(/<\/table/i);
    var i2 = mtch.index, j2 = mtch2 && mtch2.index || str.length;
    var rows = split_regex(str.slice(i2, j2), /(:?<tr[^>]*>)/i, "<tr>");
    var R2 = -1, C2 = 0, RS = 0, CS = 0;
    var range2 = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } };
    var merges = [];
    for (i2 = 0; i2 < rows.length; ++i2) {
      var row = rows[i2].trim();
      var hd = row.slice(0, 3).toLowerCase();
      if (hd == "<tr") {
        ++R2;
        if (opts.sheetRows && opts.sheetRows <= R2) {
          --R2;
          break;
        }
        C2 = 0;
        continue;
      }
      if (hd != "<td" && hd != "<th")
        continue;
      var cells = row.split(/<\/t[dh]>/i);
      for (j2 = 0; j2 < cells.length; ++j2) {
        var cell = cells[j2].trim();
        if (!cell.match(/<t[dh]/i))
          continue;
        var m2 = cell, cc = 0;
        while (m2.charAt(0) == "<" && (cc = m2.indexOf(">")) > -1)
          m2 = m2.slice(cc + 1);
        for (var midx = 0; midx < merges.length; ++midx) {
          var _merge = merges[midx];
          if (_merge.s.c == C2 && _merge.s.r < R2 && R2 <= _merge.e.r) {
            C2 = _merge.e.c + 1;
            midx = -1;
          }
        }
        var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
        CS = tag.colspan ? +tag.colspan : 1;
        if ((RS = +tag.rowspan) > 1 || CS > 1)
          merges.push({ s: { r: R2, c: C2 }, e: { r: R2 + (RS || 1) - 1, c: C2 + CS - 1 } });
        var _t3 = tag.t || tag["data-t"] || "";
        if (!m2.length) {
          C2 += CS;
          continue;
        }
        m2 = htmldecode(m2);
        if (range2.s.r > R2)
          range2.s.r = R2;
        if (range2.e.r < R2)
          range2.e.r = R2;
        if (range2.s.c > C2)
          range2.s.c = C2;
        if (range2.e.c < C2)
          range2.e.c = C2;
        if (!m2.length) {
          C2 += CS;
          continue;
        }
        var o2 = { t: "s", v: m2 };
        if (opts.raw || !m2.trim().length || _t3 == "s")
          ;
        else if (m2 === "TRUE")
          o2 = { t: "b", v: true };
        else if (m2 === "FALSE")
          o2 = { t: "b", v: false };
        else if (!isNaN(fuzzynum(m2)))
          o2 = { t: "n", v: fuzzynum(m2) };
        else if (!isNaN(fuzzydate(m2).getDate())) {
          o2 = { t: "d", v: parseDate(m2) };
          if (!opts.cellDates)
            o2 = { t: "n", v: datenum(o2.v) };
          o2.z = opts.dateNF || table_fmt[14];
        }
        if (opts.dense) {
          if (!ws2[R2])
            ws2[R2] = [];
          ws2[R2][C2] = o2;
        } else
          ws2[encode_cell({ r: R2, c: C2 })] = o2;
        C2 += CS;
      }
    }
    ws2["!ref"] = encode_range(range2);
    if (merges.length)
      ws2["!merges"] = merges;
    return ws2;
  }
  function make_html_row(ws2, r2, R2, o2) {
    var M2 = ws2["!merges"] || [];
    var oo = [];
    for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
      var RS = 0, CS = 0;
      for (var j2 = 0; j2 < M2.length; ++j2) {
        if (M2[j2].s.r > R2 || M2[j2].s.c > C2)
          continue;
        if (M2[j2].e.r < R2 || M2[j2].e.c < C2)
          continue;
        if (M2[j2].s.r < R2 || M2[j2].s.c < C2) {
          RS = -1;
          break;
        }
        RS = M2[j2].e.r - M2[j2].s.r + 1;
        CS = M2[j2].e.c - M2[j2].s.c + 1;
        break;
      }
      if (RS < 0)
        continue;
      var coord = encode_cell({ r: R2, c: C2 });
      var cell = o2.dense ? (ws2[R2] || [])[C2] : ws2[coord];
      var w2 = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
      var sp = {};
      if (RS > 1)
        sp.rowspan = RS;
      if (CS > 1)
        sp.colspan = CS;
      if (o2.editable)
        w2 = '<span contenteditable="true">' + w2 + "</span>";
      else if (cell) {
        sp["data-t"] = cell && cell.t || "z";
        if (cell.v != null)
          sp["data-v"] = cell.v;
        if (cell.z != null)
          sp["data-z"] = cell.z;
        if (cell.l && (cell.l.Target || "#").charAt(0) != "#")
          w2 = '<a href="' + cell.l.Target + '">' + w2 + "</a>";
      }
      sp.id = (o2.id || "sjs") + "-" + coord;
      oo.push(writextag("td", w2, sp));
    }
    var preamble = "<tr>";
    return preamble + oo.join("") + "</tr>";
  }
  var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
  var HTML_END = "</body></html>";
  function html_to_workbook(str, opts) {
    var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
    if (!mtch || mtch.length == 0)
      throw new Error("Invalid HTML: could not find <table>");
    if (mtch.length == 1)
      return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
    var wb = book_new();
    mtch.forEach(function(s2, idx) {
      book_append_sheet(wb, html_to_sheet(s2, opts), "Sheet" + (idx + 1));
    });
    return wb;
  }
  function make_html_preamble(ws2, R2, o2) {
    var out = [];
    return out.join("") + "<table" + (o2 && o2.id ? ' id="' + o2.id + '"' : "") + ">";
  }
  function sheet_to_html(ws2, opts) {
    var o2 = opts || {};
    var header = o2.header != null ? o2.header : HTML_BEGIN;
    var footer = o2.footer != null ? o2.footer : HTML_END;
    var out = [header];
    var r2 = decode_range(ws2["!ref"]);
    o2.dense = Array.isArray(ws2);
    out.push(make_html_preamble(ws2, r2, o2));
    for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2)
      out.push(make_html_row(ws2, r2, R2, o2));
    out.push("</table>" + footer);
    return out.join("");
  }
  function sheet_add_dom(ws2, table, _opts) {
    var opts = _opts || {};
    var or_R = 0, or_C = 0;
    if (opts.origin != null) {
      if (typeof opts.origin == "number")
        or_R = opts.origin;
      else {
        var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
        or_R = _origin.r;
        or_C = _origin.c;
      }
    }
    var rows = table.getElementsByTagName("tr");
    var sheetRows = Math.min(opts.sheetRows || 1e7, rows.length);
    var range2 = { s: { r: 0, c: 0 }, e: { r: or_R, c: or_C } };
    if (ws2["!ref"]) {
      var _range = decode_range(ws2["!ref"]);
      range2.s.r = Math.min(range2.s.r, _range.s.r);
      range2.s.c = Math.min(range2.s.c, _range.s.c);
      range2.e.r = Math.max(range2.e.r, _range.e.r);
      range2.e.c = Math.max(range2.e.c, _range.e.c);
      if (or_R == -1)
        range2.e.r = or_R = _range.e.r + 1;
    }
    var merges = [], midx = 0;
    var rowinfo = ws2["!rows"] || (ws2["!rows"] = []);
    var _R2 = 0, R2 = 0, _C2 = 0, C2 = 0, RS = 0, CS = 0;
    if (!ws2["!cols"])
      ws2["!cols"] = [];
    for (; _R2 < rows.length && R2 < sheetRows; ++_R2) {
      var row = rows[_R2];
      if (is_dom_element_hidden(row)) {
        if (opts.display)
          continue;
        rowinfo[R2] = { hidden: true };
      }
      var elts = row.children;
      for (_C2 = C2 = 0; _C2 < elts.length; ++_C2) {
        var elt = elts[_C2];
        if (opts.display && is_dom_element_hidden(elt))
          continue;
        var v2 = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
        var z2 = elt.getAttribute("data-z") || elt.getAttribute("z");
        for (midx = 0; midx < merges.length; ++midx) {
          var m2 = merges[midx];
          if (m2.s.c == C2 + or_C && m2.s.r < R2 + or_R && R2 + or_R <= m2.e.r) {
            C2 = m2.e.c + 1 - or_C;
            midx = -1;
          }
        }
        CS = +elt.getAttribute("colspan") || 1;
        if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1)
          merges.push({ s: { r: R2 + or_R, c: C2 + or_C }, e: { r: R2 + or_R + (RS || 1) - 1, c: C2 + or_C + (CS || 1) - 1 } });
        var o2 = { t: "s", v: v2 };
        var _t3 = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
        if (v2 != null) {
          if (v2.length == 0)
            o2.t = _t3 || "z";
          else if (opts.raw || v2.trim().length == 0 || _t3 == "s")
            ;
          else if (v2 === "TRUE")
            o2 = { t: "b", v: true };
          else if (v2 === "FALSE")
            o2 = { t: "b", v: false };
          else if (!isNaN(fuzzynum(v2)))
            o2 = { t: "n", v: fuzzynum(v2) };
          else if (!isNaN(fuzzydate(v2).getDate())) {
            o2 = { t: "d", v: parseDate(v2) };
            if (!opts.cellDates)
              o2 = { t: "n", v: datenum(o2.v) };
            o2.z = opts.dateNF || table_fmt[14];
          }
        }
        if (o2.z === void 0 && z2 != null)
          o2.z = z2;
        var l2 = "", Aelts = elt.getElementsByTagName("A");
        if (Aelts && Aelts.length) {
          for (var Aelti = 0; Aelti < Aelts.length; ++Aelti)
            if (Aelts[Aelti].hasAttribute("href")) {
              l2 = Aelts[Aelti].getAttribute("href");
              if (l2.charAt(0) != "#")
                break;
            }
        }
        if (l2 && l2.charAt(0) != "#")
          o2.l = { Target: l2 };
        if (opts.dense) {
          if (!ws2[R2 + or_R])
            ws2[R2 + or_R] = [];
          ws2[R2 + or_R][C2 + or_C] = o2;
        } else
          ws2[encode_cell({ c: C2 + or_C, r: R2 + or_R })] = o2;
        if (range2.e.c < C2 + or_C)
          range2.e.c = C2 + or_C;
        C2 += CS;
      }
      ++R2;
    }
    if (merges.length)
      ws2["!merges"] = (ws2["!merges"] || []).concat(merges);
    range2.e.r = Math.max(range2.e.r, R2 - 1 + or_R);
    ws2["!ref"] = encode_range(range2);
    if (R2 >= sheetRows)
      ws2["!fullref"] = encode_range((range2.e.r = rows.length - _R2 + R2 - 1 + or_R, range2));
    return ws2;
  }
  function parse_dom_table(table, _opts) {
    var opts = _opts || {};
    var ws2 = opts.dense ? [] : {};
    return sheet_add_dom(ws2, table, _opts);
  }
  function table_to_book(table, opts) {
    return sheet_to_workbook(parse_dom_table(table, opts), opts);
  }
  function is_dom_element_hidden(element) {
    var display = "";
    var get_computed_style = get_get_computed_style_function(element);
    if (get_computed_style)
      display = get_computed_style(element).getPropertyValue("display");
    if (!display)
      display = element.style && element.style.display;
    return display === "none";
  }
  function get_get_computed_style_function(element) {
    if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function")
      return element.ownerDocument.defaultView.getComputedStyle;
    if (typeof getComputedStyle === "function")
      return getComputedStyle;
    return null;
  }
  function parse_text_p(text) {
    var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
      return Array(parseInt($1, 10) + 1).join(" ");
    }).replace(/<text:tab[^>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
    var v2 = unescapexml(fixed.replace(/<[^>]*>/g, ""));
    return [v2];
  }
  var number_formats_ods = {
    /* ods name: [short ssf fmt, long ssf fmt] */
    day: ["d", "dd"],
    month: ["m", "mm"],
    year: ["y", "yy"],
    hours: ["h", "hh"],
    minutes: ["m", "mm"],
    seconds: ["s", "ss"],
    "am-pm": ["A/P", "AM/PM"],
    "day-of-week": ["ddd", "dddd"],
    era: ["e", "ee"],
    /* there is no native representation of LO "Q" format */
    quarter: ["\\Qm", 'm\\"th quarter"']
  };
  function parse_content_xml(d2, _opts) {
    var opts = _opts || {};
    var str = xlml_normalize(d2);
    var state = [], tmp;
    var tag;
    var NFtag = { name: "" }, NF = "", pidx = 0;
    var sheetag;
    var rowtag;
    var Sheets = {}, SheetNames = [];
    var ws2 = opts.dense ? [] : {};
    var Rn, q2;
    var ctag = { value: "" };
    var textp = "", textpidx = 0;
    var textR = [];
    var R2 = -1, C2 = -1, range2 = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } };
    var row_ol = 0;
    var number_format_map = {};
    var merges = [], mrange = {}, mR = 0, mC = 0;
    var rowinfo = [], rowpeat = 1, colpeat = 1;
    var arrayf = [];
    var WB = { Names: [] };
    var atag = {};
    var _Ref = ["", ""];
    var comments = [], comment = {};
    var creator = "", creatoridx = 0;
    var isstub = false, intable = false;
    var i2 = 0;
    xlmlregex.lastIndex = 0;
    str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
    while (Rn = xlmlregex.exec(str))
      switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
        case "table":
        case "工作表":
          if (Rn[1] === "/") {
            if (range2.e.c >= range2.s.c && range2.e.r >= range2.s.r)
              ws2["!ref"] = encode_range(range2);
            else
              ws2["!ref"] = "A1:A1";
            if (opts.sheetRows > 0 && opts.sheetRows <= range2.e.r) {
              ws2["!fullref"] = ws2["!ref"];
              range2.e.r = opts.sheetRows - 1;
              ws2["!ref"] = encode_range(range2);
            }
            if (merges.length)
              ws2["!merges"] = merges;
            if (rowinfo.length)
              ws2["!rows"] = rowinfo;
            sheetag.name = sheetag["名称"] || sheetag.name;
            if (typeof JSON !== "undefined")
              JSON.stringify(sheetag);
            SheetNames.push(sheetag.name);
            Sheets[sheetag.name] = ws2;
            intable = false;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
            sheetag = parsexmltag(Rn[0], false);
            R2 = C2 = -1;
            range2.s.r = range2.s.c = 1e7;
            range2.e.r = range2.e.c = 0;
            ws2 = opts.dense ? [] : {};
            merges = [];
            rowinfo = [];
            intable = true;
          }
          break;
        case "table-row-group":
          if (Rn[1] === "/")
            --row_ol;
          else
            ++row_ol;
          break;
        case "table-row":
        case "行":
          if (Rn[1] === "/") {
            R2 += rowpeat;
            rowpeat = 1;
            break;
          }
          rowtag = parsexmltag(Rn[0], false);
          if (rowtag["行号"])
            R2 = rowtag["行号"] - 1;
          else if (R2 == -1)
            R2 = 0;
          rowpeat = +rowtag["number-rows-repeated"] || 1;
          if (rowpeat < 10) {
            for (i2 = 0; i2 < rowpeat; ++i2)
              if (row_ol > 0)
                rowinfo[R2 + i2] = { level: row_ol };
          }
          C2 = -1;
          break;
        case "covered-table-cell":
          if (Rn[1] !== "/")
            ++C2;
          if (opts.sheetStubs) {
            if (opts.dense) {
              if (!ws2[R2])
                ws2[R2] = [];
              ws2[R2][C2] = { t: "z" };
            } else
              ws2[encode_cell({ r: R2, c: C2 })] = { t: "z" };
          }
          textp = "";
          textR = [];
          break;
        case "table-cell":
        case "数据":
          if (Rn[0].charAt(Rn[0].length - 2) === "/") {
            ++C2;
            ctag = parsexmltag(Rn[0], false);
            colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
            q2 = {
              t: "z",
              v: null
              /*:: , z:null, w:"",c:[]*/
            };
            if (ctag.formula && opts.cellFormula != false)
              q2.f = ods_to_csf_formula(unescapexml(ctag.formula));
            if ((ctag["数据类型"] || ctag["value-type"]) == "string") {
              q2.t = "s";
              q2.v = unescapexml(ctag["string-value"] || "");
              if (opts.dense) {
                if (!ws2[R2])
                  ws2[R2] = [];
                ws2[R2][C2] = q2;
              } else {
                ws2[encode_cell({ r: R2, c: C2 })] = q2;
              }
            }
            C2 += colpeat - 1;
          } else if (Rn[1] !== "/") {
            ++C2;
            textp = "";
            textpidx = 0;
            textR = [];
            colpeat = 1;
            var rptR = rowpeat ? R2 + rowpeat - 1 : R2;
            if (C2 > range2.e.c)
              range2.e.c = C2;
            if (C2 < range2.s.c)
              range2.s.c = C2;
            if (R2 < range2.s.r)
              range2.s.r = R2;
            if (rptR > range2.e.r)
              range2.e.r = rptR;
            ctag = parsexmltag(Rn[0], false);
            comments = [];
            comment = {};
            q2 = {
              t: ctag["数据类型"] || ctag["value-type"],
              v: null
              /*:: , z:null, w:"",c:[]*/
            };
            if (opts.cellFormula) {
              if (ctag.formula)
                ctag.formula = unescapexml(ctag.formula);
              if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
                mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
                mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
                mrange = { s: { r: R2, c: C2 }, e: { r: R2 + mR - 1, c: C2 + mC - 1 } };
                q2.F = encode_range(mrange);
                arrayf.push([mrange, q2.F]);
              }
              if (ctag.formula)
                q2.f = ods_to_csf_formula(ctag.formula);
              else
                for (i2 = 0; i2 < arrayf.length; ++i2)
                  if (R2 >= arrayf[i2][0].s.r && R2 <= arrayf[i2][0].e.r) {
                    if (C2 >= arrayf[i2][0].s.c && C2 <= arrayf[i2][0].e.c)
                      q2.F = arrayf[i2][1];
                  }
            }
            if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
              mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
              mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
              mrange = { s: { r: R2, c: C2 }, e: { r: R2 + mR - 1, c: C2 + mC - 1 } };
              merges.push(mrange);
            }
            if (ctag["number-columns-repeated"])
              colpeat = parseInt(ctag["number-columns-repeated"], 10);
            switch (q2.t) {
              case "boolean":
                q2.t = "b";
                q2.v = parsexmlbool(ctag["boolean-value"]);
                break;
              case "float":
                q2.t = "n";
                q2.v = parseFloat(ctag.value);
                break;
              case "percentage":
                q2.t = "n";
                q2.v = parseFloat(ctag.value);
                break;
              case "currency":
                q2.t = "n";
                q2.v = parseFloat(ctag.value);
                break;
              case "date":
                q2.t = "d";
                q2.v = parseDate(ctag["date-value"]);
                if (!opts.cellDates) {
                  q2.t = "n";
                  q2.v = datenum(q2.v);
                }
                q2.z = "m/d/yy";
                break;
              case "time":
                q2.t = "n";
                q2.v = parse_isodur(ctag["time-value"]) / 86400;
                if (opts.cellDates) {
                  q2.t = "d";
                  q2.v = numdate(q2.v);
                }
                q2.z = "HH:MM:SS";
                break;
              case "number":
                q2.t = "n";
                q2.v = parseFloat(ctag["数据数值"]);
                break;
              default:
                if (q2.t === "string" || q2.t === "text" || !q2.t) {
                  q2.t = "s";
                  if (ctag["string-value"] != null) {
                    textp = unescapexml(ctag["string-value"]);
                    textR = [];
                  }
                } else
                  throw new Error("Unsupported value type " + q2.t);
            }
          } else {
            isstub = false;
            if (q2.t === "s") {
              q2.v = textp || "";
              if (textR.length)
                q2.R = textR;
              isstub = textpidx == 0;
            }
            if (atag.Target)
              q2.l = atag;
            if (comments.length > 0) {
              q2.c = comments;
              comments = [];
            }
            if (textp && opts.cellText !== false)
              q2.w = textp;
            if (isstub) {
              q2.t = "z";
              delete q2.v;
            }
            if (!isstub || opts.sheetStubs) {
              if (!(opts.sheetRows && opts.sheetRows <= R2)) {
                for (var rpt = 0; rpt < rowpeat; ++rpt) {
                  colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                  if (opts.dense) {
                    if (!ws2[R2 + rpt])
                      ws2[R2 + rpt] = [];
                    ws2[R2 + rpt][C2] = rpt == 0 ? q2 : dup(q2);
                    while (--colpeat > 0)
                      ws2[R2 + rpt][C2 + colpeat] = dup(q2);
                  } else {
                    ws2[encode_cell({ r: R2 + rpt, c: C2 })] = q2;
                    while (--colpeat > 0)
                      ws2[encode_cell({ r: R2 + rpt, c: C2 + colpeat })] = dup(q2);
                  }
                  if (range2.e.c <= C2)
                    range2.e.c = C2;
                }
              }
            }
            colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
            C2 += colpeat - 1;
            colpeat = 0;
            q2 = {
              /*:: t:"", v:null, z:null, w:"",c:[]*/
            };
            textp = "";
            textR = [];
          }
          atag = {};
          break;
        case "document":
        case "document-content":
        case "电子表格文档":
        case "spreadsheet":
        case "主体":
        case "scripts":
        case "styles":
        case "font-face-decls":
        case "master-styles":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw "Bad state: " + tmp;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
            state.push([Rn[3], true]);
          break;
        case "annotation":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw "Bad state: " + tmp;
            comment.t = textp;
            if (textR.length)
              comment.R = textR;
            comment.a = creator;
            comments.push(comment);
          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
            state.push([Rn[3], false]);
          }
          creator = "";
          creatoridx = 0;
          textp = "";
          textpidx = 0;
          textR = [];
          break;
        case "creator":
          if (Rn[1] === "/") {
            creator = str.slice(creatoridx, Rn.index);
          } else
            creatoridx = Rn.index + Rn[0].length;
          break;
        case "meta":
        case "元数据":
        case "settings":
        case "config-item-set":
        case "config-item-map-indexed":
        case "config-item-map-entry":
        case "config-item-map-named":
        case "shapes":
        case "frame":
        case "text-box":
        case "image":
        case "data-pilot-tables":
        case "list-style":
        case "form":
        case "dde-links":
        case "event-listeners":
        case "chart":
          if (Rn[1] === "/") {
            if ((tmp = state.pop())[0] !== Rn[3])
              throw "Bad state: " + tmp;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
            state.push([Rn[3], false]);
          textp = "";
          textpidx = 0;
          textR = [];
          break;
        case "scientific-number":
          break;
        case "currency-symbol":
          break;
        case "currency-style":
          break;
        case "number-style":
        case "percentage-style":
        case "date-style":
        case "time-style":
          if (Rn[1] === "/") {
            number_format_map[NFtag.name] = NF;
            if ((tmp = state.pop())[0] !== Rn[3])
              throw "Bad state: " + tmp;
          } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
            NF = "";
            NFtag = parsexmltag(Rn[0], false);
            state.push([Rn[3], true]);
          }
          break;
        case "script":
          break;
        case "libraries":
          break;
        case "automatic-styles":
          break;
        case "default-style":
        case "page-layout":
          break;
        case "style":
          break;
        case "map":
          break;
        case "font-face":
          break;
        case "paragraph-properties":
          break;
        case "table-properties":
          break;
        case "table-column-properties":
          break;
        case "table-row-properties":
          break;
        case "table-cell-properties":
          break;
        case "number":
          switch (state[state.length - 1][0]) {
            case "time-style":
            case "date-style":
              tag = parsexmltag(Rn[0], false);
              NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
              break;
          }
          break;
        case "fraction":
          break;
        case "day":
        case "month":
        case "year":
        case "era":
        case "day-of-week":
        case "week-of-year":
        case "quarter":
        case "hours":
        case "minutes":
        case "seconds":
        case "am-pm":
          switch (state[state.length - 1][0]) {
            case "time-style":
            case "date-style":
              tag = parsexmltag(Rn[0], false);
              NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
              break;
          }
          break;
        case "boolean-style":
          break;
        case "boolean":
          break;
        case "text-style":
          break;
        case "text":
          if (Rn[0].slice(-2) === "/>")
            break;
          else if (Rn[1] === "/")
            switch (state[state.length - 1][0]) {
              case "number-style":
              case "date-style":
              case "time-style":
                NF += str.slice(pidx, Rn.index);
                break;
            }
          else
            pidx = Rn.index + Rn[0].length;
          break;
        case "named-range":
          tag = parsexmltag(Rn[0], false);
          _Ref = ods_to_csf_3D(tag["cell-range-address"]);
          var nrange = { Name: tag.name, Ref: _Ref[0] + "!" + _Ref[1] };
          if (intable)
            nrange.Sheet = SheetNames.length;
          WB.Names.push(nrange);
          break;
        case "text-content":
          break;
        case "text-properties":
          break;
        case "embedded-text":
          break;
        case "body":
        case "电子表格":
          break;
        case "forms":
          break;
        case "table-column":
          break;
        case "table-header-rows":
          break;
        case "table-rows":
          break;
        case "table-column-group":
          break;
        case "table-header-columns":
          break;
        case "table-columns":
          break;
        case "null-date":
          break;
        case "graphic-properties":
          break;
        case "calculation-settings":
          break;
        case "named-expressions":
          break;
        case "label-range":
          break;
        case "label-ranges":
          break;
        case "named-expression":
          break;
        case "sort":
          break;
        case "sort-by":
          break;
        case "sort-groups":
          break;
        case "tab":
          break;
        case "line-break":
          break;
        case "span":
          break;
        case "p":
        case "文本串":
          if (["master-styles"].indexOf(state[state.length - 1][0]) > -1)
            break;
          if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
            var ptp = parse_text_p(str.slice(textpidx, Rn.index));
            textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
          } else {
            parsexmltag(Rn[0], false);
            textpidx = Rn.index + Rn[0].length;
          }
          break;
        case "s":
          break;
        case "database-range":
          if (Rn[1] === "/")
            break;
          try {
            _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
            Sheets[_Ref[0]]["!autofilter"] = { ref: _Ref[1] };
          } catch (e2) {
          }
          break;
        case "date":
          break;
        case "object":
          break;
        case "title":
        case "标题":
          break;
        case "desc":
          break;
        case "binary-data":
          break;
        case "table-source":
          break;
        case "scenario":
          break;
        case "iteration":
          break;
        case "content-validations":
          break;
        case "content-validation":
          break;
        case "help-message":
          break;
        case "error-message":
          break;
        case "database-ranges":
          break;
        case "filter":
          break;
        case "filter-and":
          break;
        case "filter-or":
          break;
        case "filter-condition":
          break;
        case "list-level-style-bullet":
          break;
        case "list-level-style-number":
          break;
        case "list-level-properties":
          break;
        case "sender-firstname":
        case "sender-lastname":
        case "sender-initials":
        case "sender-title":
        case "sender-position":
        case "sender-email":
        case "sender-phone-private":
        case "sender-fax":
        case "sender-company":
        case "sender-phone-work":
        case "sender-street":
        case "sender-city":
        case "sender-postal-code":
        case "sender-country":
        case "sender-state-or-province":
        case "author-name":
        case "author-initials":
        case "chapter":
        case "file-name":
        case "template-name":
        case "sheet-name":
          break;
        case "event-listener":
          break;
        case "initial-creator":
        case "creation-date":
        case "print-date":
        case "generator":
        case "document-statistic":
        case "user-defined":
        case "editing-duration":
        case "editing-cycles":
          break;
        case "config-item":
          break;
        case "page-number":
          break;
        case "page-count":
          break;
        case "time":
          break;
        case "cell-range-source":
          break;
        case "detective":
          break;
        case "operation":
          break;
        case "highlighted-range":
          break;
        case "data-pilot-table":
        case "source-cell-range":
        case "source-service":
        case "data-pilot-field":
        case "data-pilot-level":
        case "data-pilot-subtotals":
        case "data-pilot-subtotal":
        case "data-pilot-members":
        case "data-pilot-member":
        case "data-pilot-display-info":
        case "data-pilot-sort-info":
        case "data-pilot-layout-info":
        case "data-pilot-field-reference":
        case "data-pilot-groups":
        case "data-pilot-group":
        case "data-pilot-group-member":
          break;
        case "rect":
          break;
        case "dde-connection-decls":
        case "dde-connection-decl":
        case "dde-link":
        case "dde-source":
          break;
        case "properties":
          break;
        case "property":
          break;
        case "a":
          if (Rn[1] !== "/") {
            atag = parsexmltag(Rn[0], false);
            if (!atag.href)
              break;
            atag.Target = unescapexml(atag.href);
            delete atag.href;
            if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
              _Ref = ods_to_csf_3D(atag.Target.slice(1));
              atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
            } else if (atag.Target.match(/^\.\.[\\\/]/))
              atag.Target = atag.Target.slice(3);
          }
          break;
        case "table-protection":
          break;
        case "data-pilot-grand-total":
          break;
        case "office-document-common-attrs":
          break;
        default:
          switch (Rn[2]) {
            case "dc:":
            case "calcext:":
            case "loext:":
            case "ooo:":
            case "chartooo:":
            case "draw:":
            case "style:":
            case "chart:":
            case "form:":
            case "uof:":
            case "表:":
            case "字:":
              break;
            default:
              if (opts.WTF)
                throw new Error(Rn);
          }
      }
    var out = {
      Sheets,
      SheetNames,
      Workbook: WB
    };
    if (opts.bookSheets)
      delete /*::(*/
      out.Sheets;
    return out;
  }
  function parse_ods(zip, opts) {
    opts = opts || {};
    if (safegetzipfile(zip, "META-INF/manifest.xml"))
      parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
    var content = getzipstr(zip, "content.xml");
    if (!content)
      throw new Error("Missing content.xml in ODS / UOF file");
    var wb = parse_content_xml(utf8read(content), opts);
    if (safegetzipfile(zip, "meta.xml"))
      wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
    return wb;
  }
  function parse_fods(data, opts) {
    return parse_content_xml(data, opts);
  }
  /*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */
  function u8_to_dataview(array3) {
    return new DataView(array3.buffer, array3.byteOffset, array3.byteLength);
  }
  function u8str(u8) {
    return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
  }
  function u8concat(u8a) {
    var len = u8a.reduce(function(acc, x) {
      return acc + x.length;
    }, 0);
    var out = new Uint8Array(len);
    var off = 0;
    u8a.forEach(function(u8) {
      out.set(u8, off);
      off += u8.length;
    });
    return out;
  }
  function popcnt(x) {
    x -= x >> 1 & 1431655765;
    x = (x & 858993459) + (x >> 2 & 858993459);
    return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
  }
  function readDecimal128LE(buf, offset) {
    var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
    var mantissa = buf[offset + 14] & 1;
    for (var j2 = offset + 13; j2 >= offset; --j2)
      mantissa = mantissa * 256 + buf[j2];
    return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
  }
  function parse_varint49(buf, ptr) {
    var l2 = ptr ? ptr[0] : 0;
    var usz = buf[l2] & 127;
    varint:
      if (buf[l2++] >= 128) {
        usz |= (buf[l2] & 127) << 7;
        if (buf[l2++] < 128)
          break varint;
        usz |= (buf[l2] & 127) << 14;
        if (buf[l2++] < 128)
          break varint;
        usz |= (buf[l2] & 127) << 21;
        if (buf[l2++] < 128)
          break varint;
        usz += (buf[l2] & 127) * Math.pow(2, 28);
        ++l2;
        if (buf[l2++] < 128)
          break varint;
        usz += (buf[l2] & 127) * Math.pow(2, 35);
        ++l2;
        if (buf[l2++] < 128)
          break varint;
        usz += (buf[l2] & 127) * Math.pow(2, 42);
        ++l2;
        if (buf[l2++] < 128)
          break varint;
      }
    if (ptr)
      ptr[0] = l2;
    return usz;
  }
  function varint_to_i32(buf) {
    var l2 = 0, i32 = buf[l2] & 127;
    varint:
      if (buf[l2++] >= 128) {
        i32 |= (buf[l2] & 127) << 7;
        if (buf[l2++] < 128)
          break varint;
        i32 |= (buf[l2] & 127) << 14;
        if (buf[l2++] < 128)
          break varint;
        i32 |= (buf[l2] & 127) << 21;
        if (buf[l2++] < 128)
          break varint;
        i32 |= (buf[l2] & 127) << 28;
      }
    return i32;
  }
  function parse_shallow(buf) {
    var out = [], ptr = [0];
    while (ptr[0] < buf.length) {
      var off = ptr[0];
      var num = parse_varint49(buf, ptr);
      var type2 = num & 7;
      num = Math.floor(num / 8);
      var len = 0;
      var res;
      if (num == 0)
        break;
      switch (type2) {
        case 0:
          {
            var l2 = ptr[0];
            while (buf[ptr[0]++] >= 128)
              ;
            res = buf.slice(l2, ptr[0]);
          }
          break;
        case 5:
          len = 4;
          res = buf.slice(ptr[0], ptr[0] + len);
          ptr[0] += len;
          break;
        case 1:
          len = 8;
          res = buf.slice(ptr[0], ptr[0] + len);
          ptr[0] += len;
          break;
        case 2:
          len = parse_varint49(buf, ptr);
          res = buf.slice(ptr[0], ptr[0] + len);
          ptr[0] += len;
          break;
        case 3:
        case 4:
        default:
          throw new Error("PB Type ".concat(type2, " for Field ").concat(num, " at offset ").concat(off));
      }
      var v2 = { data: res, type: type2 };
      if (out[num] == null)
        out[num] = [v2];
      else
        out[num].push(v2);
    }
    return out;
  }
  function mappa(data, cb) {
    return (data == null ? void 0 : data.map(function(d2) {
      return cb(d2.data);
    })) || [];
  }
  function parse_iwa_file(buf) {
    var _a;
    var out = [], ptr = [0];
    while (ptr[0] < buf.length) {
      var len = parse_varint49(buf, ptr);
      var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
      ptr[0] += len;
      var res = {
        id: varint_to_i32(ai[1][0].data),
        messages: []
      };
      ai[2].forEach(function(b2) {
        var mi = parse_shallow(b2.data);
        var fl = varint_to_i32(mi[3][0].data);
        res.messages.push({
          meta: mi,
          data: buf.slice(ptr[0], ptr[0] + fl)
        });
        ptr[0] += fl;
      });
      if ((_a = ai[3]) == null ? void 0 : _a[0])
        res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
      out.push(res);
    }
    return out;
  }
  function parse_snappy_chunk(type2, buf) {
    if (type2 != 0)
      throw new Error("Unexpected Snappy chunk type ".concat(type2));
    var ptr = [0];
    var usz = parse_varint49(buf, ptr);
    var chunks = [];
    while (ptr[0] < buf.length) {
      var tag = buf[ptr[0]] & 3;
      if (tag == 0) {
        var len = buf[ptr[0]++] >> 2;
        if (len < 60)
          ++len;
        else {
          var c2 = len - 59;
          len = buf[ptr[0]];
          if (c2 > 1)
            len |= buf[ptr[0] + 1] << 8;
          if (c2 > 2)
            len |= buf[ptr[0] + 2] << 16;
          if (c2 > 3)
            len |= buf[ptr[0] + 3] << 24;
          len >>>= 0;
          len++;
          ptr[0] += c2;
        }
        chunks.push(buf.slice(ptr[0], ptr[0] + len));
        ptr[0] += len;
        continue;
      } else {
        var offset = 0, length = 0;
        if (tag == 1) {
          length = (buf[ptr[0]] >> 2 & 7) + 4;
          offset = (buf[ptr[0]++] & 224) << 3;
          offset |= buf[ptr[0]++];
        } else {
          length = (buf[ptr[0]++] >> 2) + 1;
          if (tag == 2) {
            offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
            ptr[0] += 2;
          } else {
            offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
            ptr[0] += 4;
          }
        }
        chunks = [u8concat(chunks)];
        if (offset == 0)
          throw new Error("Invalid offset 0");
        if (offset > chunks[0].length)
          throw new Error("Invalid offset beyond length");
        if (length >= offset) {
          chunks.push(chunks[0].slice(-offset));
          length -= offset;
          while (length >= chunks[chunks.length - 1].length) {
            chunks.push(chunks[chunks.length - 1]);
            length -= chunks[chunks.length - 1].length;
          }
        }
        chunks.push(chunks[0].slice(-offset, -offset + length));
      }
    }
    var o2 = u8concat(chunks);
    if (o2.length != usz)
      throw new Error("Unexpected length: ".concat(o2.length, " != ").concat(usz));
    return o2;
  }
  function decompress_iwa_file(buf) {
    var out = [];
    var l2 = 0;
    while (l2 < buf.length) {
      var t2 = buf[l2++];
      var len = buf[l2] | buf[l2 + 1] << 8 | buf[l2 + 2] << 16;
      l2 += 3;
      out.push(parse_snappy_chunk(t2, buf.slice(l2, l2 + len)));
      l2 += len;
    }
    if (l2 !== buf.length)
      throw new Error("data is not a valid framed stream!");
    return u8concat(out);
  }
  function parse_old_storage(buf, sst, rsst, v2) {
    var dv = u8_to_dataview(buf);
    var flags = dv.getUint32(4, true);
    var data_offset = (v2 > 1 ? 12 : 8) + popcnt(flags & (v2 > 1 ? 3470 : 398)) * 4;
    var ridx = -1, sidx = -1, ieee = NaN, dt2 = new Date(2001, 0, 1);
    if (flags & 512) {
      ridx = dv.getUint32(data_offset, true);
      data_offset += 4;
    }
    data_offset += popcnt(flags & (v2 > 1 ? 12288 : 4096)) * 4;
    if (flags & 16) {
      sidx = dv.getUint32(data_offset, true);
      data_offset += 4;
    }
    if (flags & 32) {
      ieee = dv.getFloat64(data_offset, true);
      data_offset += 8;
    }
    if (flags & 64) {
      dt2.setTime(dt2.getTime() + dv.getFloat64(data_offset, true) * 1e3);
      data_offset += 8;
    }
    var ret;
    switch (buf[2]) {
      case 0:
        break;
      case 2:
        ret = { t: "n", v: ieee };
        break;
      case 3:
        ret = { t: "s", v: sst[sidx] };
        break;
      case 5:
        ret = { t: "d", v: dt2 };
        break;
      case 6:
        ret = { t: "b", v: ieee > 0 };
        break;
      case 7:
        ret = { t: "n", v: ieee / 86400 };
        break;
      case 8:
        ret = { t: "e", v: 0 };
        break;
      case 9:
        {
          if (ridx > -1)
            ret = { t: "s", v: rsst[ridx] };
          else if (sidx > -1)
            ret = { t: "s", v: sst[sidx] };
          else if (!isNaN(ieee))
            ret = { t: "n", v: ieee };
          else
            throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
        }
        break;
      default:
        throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
    }
    return ret;
  }
  function parse_new_storage(buf, sst, rsst) {
    var dv = u8_to_dataview(buf);
    var flags = dv.getUint32(8, true);
    var data_offset = 12;
    var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt2 = new Date(2001, 0, 1);
    if (flags & 1) {
      d128 = readDecimal128LE(buf, data_offset);
      data_offset += 16;
    }
    if (flags & 2) {
      ieee = dv.getFloat64(data_offset, true);
      data_offset += 8;
    }
    if (flags & 4) {
      dt2.setTime(dt2.getTime() + dv.getFloat64(data_offset, true) * 1e3);
      data_offset += 8;
    }
    if (flags & 8) {
      sidx = dv.getUint32(data_offset, true);
      data_offset += 4;
    }
    if (flags & 16) {
      ridx = dv.getUint32(data_offset, true);
      data_offset += 4;
    }
    var ret;
    switch (buf[1]) {
      case 0:
        break;
      case 2:
        ret = { t: "n", v: d128 };
        break;
      case 3:
        ret = { t: "s", v: sst[sidx] };
        break;
      case 5:
        ret = { t: "d", v: dt2 };
        break;
      case 6:
        ret = { t: "b", v: ieee > 0 };
        break;
      case 7:
        ret = { t: "n", v: ieee / 86400 };
        break;
      case 8:
        ret = { t: "e", v: 0 };
        break;
      case 9:
        {
          if (ridx > -1)
            ret = { t: "s", v: rsst[ridx] };
          else
            throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
        }
        break;
      case 10:
        ret = { t: "n", v: d128 };
        break;
      default:
        throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
    }
    return ret;
  }
  function parse_cell_storage(buf, sst, rsst) {
    switch (buf[0]) {
      case 0:
      case 1:
      case 2:
      case 3:
        return parse_old_storage(buf, sst, rsst, buf[0]);
      case 5:
        return parse_new_storage(buf, sst, rsst);
      default:
        throw new Error("Unsupported payload version ".concat(buf[0]));
    }
  }
  function parse_TSP_Reference(buf) {
    var pb = parse_shallow(buf);
    return parse_varint49(pb[1][0].data);
  }
  function parse_TST_TableDataList(M2, root) {
    var pb = parse_shallow(root.data);
    var type2 = varint_to_i32(pb[1][0].data);
    var entries = pb[3];
    var data = [];
    (entries || []).forEach(function(entry) {
      var le2 = parse_shallow(entry.data);
      var key = varint_to_i32(le2[1][0].data) >>> 0;
      switch (type2) {
        case 1:
          data[key] = u8str(le2[3][0].data);
          break;
        case 8:
          {
            var rt2 = M2[parse_TSP_Reference(le2[9][0].data)][0];
            var rtp = parse_shallow(rt2.data);
            var rtpref = M2[parse_TSP_Reference(rtp[1][0].data)][0];
            var mtype = varint_to_i32(rtpref.meta[1][0].data);
            if (mtype != 2001)
              throw new Error("2000 unexpected reference to ".concat(mtype));
            var tswpsa = parse_shallow(rtpref.data);
            data[key] = tswpsa[3].map(function(x) {
              return u8str(x.data);
            }).join("");
          }
          break;
      }
    });
    return data;
  }
  function parse_TST_TileRowInfo(u8, type2) {
    var _a, _b, _c, _d, _e3, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2;
    var pb = parse_shallow(u8);
    var R2 = varint_to_i32(pb[1][0].data) >>> 0;
    var cnt = varint_to_i32(pb[2][0].data) >>> 0;
    var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
    var used_storage_u8, used_storage;
    if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type2 != 0) {
      used_storage_u8 = (_f2 = (_e3 = pb[7]) == null ? void 0 : _e3[0]) == null ? void 0 : _f2.data;
      used_storage = (_h2 = (_g2 = pb[6]) == null ? void 0 : _g2[0]) == null ? void 0 : _h2.data;
    } else if (((_j2 = (_i2 = pb[4]) == null ? void 0 : _i2[0]) == null ? void 0 : _j2.data) && type2 != 1) {
      used_storage_u8 = (_l2 = (_k2 = pb[4]) == null ? void 0 : _k2[0]) == null ? void 0 : _l2.data;
      used_storage = (_n2 = (_m2 = pb[3]) == null ? void 0 : _m2[0]) == null ? void 0 : _n2.data;
    } else
      throw "NUMBERS Tile missing ".concat(type2, " cell storage");
    var width = wide_offsets ? 4 : 1;
    var used_storage_offsets = u8_to_dataview(used_storage_u8);
    var offsets = [];
    for (var C2 = 0; C2 < used_storage_u8.length / 2; ++C2) {
      var off = used_storage_offsets.getUint16(C2 * 2, true);
      if (off < 65535)
        offsets.push([C2, off]);
    }
    if (offsets.length != cnt)
      throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
    var cells = [];
    for (C2 = 0; C2 < offsets.length - 1; ++C2)
      cells[offsets[C2][0]] = used_storage.subarray(offsets[C2][1] * width, offsets[C2 + 1][1] * width);
    if (offsets.length >= 1)
      cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
    return { R: R2, cells };
  }
  function parse_TST_Tile(M2, root) {
    var _a;
    var pb = parse_shallow(root.data);
    var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
    var ri = mappa(pb[5], function(u8) {
      return parse_TST_TileRowInfo(u8, storage);
    });
    return {
      nrows: varint_to_i32(pb[4][0].data) >>> 0,
      data: ri.reduce(function(acc, x) {
        if (!acc[x.R])
          acc[x.R] = [];
        x.cells.forEach(function(cell, C2) {
          if (acc[x.R][C2])
            throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C2));
          acc[x.R][C2] = cell;
        });
        return acc;
      }, [])
    };
  }
  function parse_TST_TableModelArchive(M2, root, ws2) {
    var _a;
    var pb = parse_shallow(root.data);
    var range2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
    range2.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
    if (range2.e.r < 0)
      throw new Error("Invalid row varint ".concat(pb[6][0].data));
    range2.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
    if (range2.e.c < 0)
      throw new Error("Invalid col varint ".concat(pb[7][0].data));
    ws2["!ref"] = encode_range(range2);
    var store = parse_shallow(pb[4][0].data);
    var sst = parse_TST_TableDataList(M2, M2[parse_TSP_Reference(store[4][0].data)][0]);
    var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M2, M2[parse_TSP_Reference(store[17][0].data)][0]) : [];
    var tile = parse_shallow(store[3][0].data);
    var _R2 = 0;
    tile[1].forEach(function(t2) {
      var tl = parse_shallow(t2.data);
      var ref = M2[parse_TSP_Reference(tl[2][0].data)][0];
      var mtype = varint_to_i32(ref.meta[1][0].data);
      if (mtype != 6002)
        throw new Error("6001 unexpected reference to ".concat(mtype));
      var _tile = parse_TST_Tile(M2, ref);
      _tile.data.forEach(function(row, R2) {
        row.forEach(function(buf, C2) {
          var addr = encode_cell({ r: _R2 + R2, c: C2 });
          var res = parse_cell_storage(buf, sst, rsst);
          if (res)
            ws2[addr] = res;
        });
      });
      _R2 += _tile.nrows;
    });
  }
  function parse_TST_TableInfoArchive(M2, root) {
    var pb = parse_shallow(root.data);
    var out = { "!ref": "A1" };
    var tableref = M2[parse_TSP_Reference(pb[2][0].data)];
    var mtype = varint_to_i32(tableref[0].meta[1][0].data);
    if (mtype != 6001)
      throw new Error("6000 unexpected reference to ".concat(mtype));
    parse_TST_TableModelArchive(M2, tableref[0], out);
    return out;
  }
  function parse_TN_SheetArchive(M2, root) {
    var _a;
    var pb = parse_shallow(root.data);
    var out = {
      name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
      sheets: []
    };
    var shapeoffs = mappa(pb[2], parse_TSP_Reference);
    shapeoffs.forEach(function(off) {
      M2[off].forEach(function(m2) {
        var mtype = varint_to_i32(m2.meta[1][0].data);
        if (mtype == 6e3)
          out.sheets.push(parse_TST_TableInfoArchive(M2, m2));
      });
    });
    return out;
  }
  function parse_TN_DocumentArchive(M2, root) {
    var out = book_new();
    var pb = parse_shallow(root.data);
    var sheetoffs = mappa(pb[1], parse_TSP_Reference);
    sheetoffs.forEach(function(off) {
      M2[off].forEach(function(m2) {
        var mtype = varint_to_i32(m2.meta[1][0].data);
        if (mtype == 2) {
          var root2 = parse_TN_SheetArchive(M2, m2);
          root2.sheets.forEach(function(sheet, idx) {
            book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
          });
        }
      });
    });
    if (out.SheetNames.length == 0)
      throw new Error("Empty NUMBERS file");
    return out;
  }
  function parse_numbers_iwa(cfb) {
    var _a, _b, _c, _d;
    var M2 = {}, indices = [];
    cfb.FullPaths.forEach(function(p2) {
      if (p2.match(/\.iwpv2/))
        throw new Error("Unsupported password protection");
    });
    cfb.FileIndex.forEach(function(s2) {
      if (!s2.name.match(/\.iwa$/))
        return;
      var o2;
      try {
        o2 = decompress_iwa_file(s2.content);
      } catch (e2) {
        return formatAppLog("log", "at node_modules/xlsx/xlsx.mjs:22746", "?? " + s2.content.length + " " + (e2.message || e2));
      }
      var packets;
      try {
        packets = parse_iwa_file(o2);
      } catch (e2) {
        return formatAppLog("log", "at node_modules/xlsx/xlsx.mjs:22752", "## " + (e2.message || e2));
      }
      packets.forEach(function(packet) {
        M2[packet.id] = packet.messages;
        indices.push(packet.id);
      });
    });
    if (!indices.length)
      throw new Error("File has no messages");
    var docroot = ((_d = (_c = (_b = (_a = M2 == null ? void 0 : M2[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M2[1][0].meta[1][0].data) == 1 && M2[1][0];
    if (!docroot)
      indices.forEach(function(idx) {
        M2[idx].forEach(function(iwam) {
          var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
          if (mtype == 1) {
            if (!docroot)
              docroot = iwam;
            else
              throw new Error("Document has multiple roots");
          }
        });
      });
    if (!docroot)
      throw new Error("Cannot find Document root");
    return parse_TN_DocumentArchive(M2, docroot);
  }
  function fix_opts_func(defaults) {
    return function fix_opts(opts) {
      for (var i2 = 0; i2 != defaults.length; ++i2) {
        var d2 = defaults[i2];
        if (opts[d2[0]] === void 0)
          opts[d2[0]] = d2[1];
        if (d2[2] === "n")
          opts[d2[0]] = Number(opts[d2[0]]);
      }
    };
  }
  function fix_read_opts(opts) {
    fix_opts_func([
      ["cellNF", false],
      /* emit cell number format string as .z */
      ["cellHTML", true],
      /* emit html string as .h */
      ["cellFormula", true],
      /* emit formulae as .f */
      ["cellStyles", false],
      /* emits style/theme as .s */
      ["cellText", true],
      /* emit formatted text as .w */
      ["cellDates", false],
      /* emit date cells with type `d` */
      ["sheetStubs", false],
      /* emit empty cells */
      ["sheetRows", 0, "n"],
      /* read n rows (0 = read all rows) */
      ["bookDeps", false],
      /* parse calculation chains */
      ["bookSheets", false],
      /* only try to get sheet names (no Sheets) */
      ["bookProps", false],
      /* only try to get properties (no Sheets) */
      ["bookFiles", false],
      /* include raw file structure (keys, files, cfb) */
      ["bookVBA", false],
      /* include vba raw data (vbaraw) */
      ["password", ""],
      /* password */
      ["WTF", false]
      /* WTF mode (throws errors) */
    ])(opts);
  }
  function get_sheet_type(n2) {
    if (RELS.WS.indexOf(n2) > -1)
      return "sheet";
    if (n2 == RELS.CS)
      return "chart";
    if (n2 == RELS.DS)
      return "dialog";
    if (n2 == RELS.MS)
      return "macro";
    return n2 && n2.length ? n2 : "sheet";
  }
  function safe_parse_wbrels(wbrels, sheets) {
    if (!wbrels)
      return 0;
    try {
      wbrels = sheets.map(function pwbr(w2) {
        if (!w2.id)
          w2.id = w2.strRelID;
        return [w2.name, wbrels["!id"][w2.id].Target, get_sheet_type(wbrels["!id"][w2.id].Type)];
      });
    } catch (e2) {
      return null;
    }
    return !wbrels || wbrels.length === 0 ? null : wbrels;
  }
  function safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
    try {
      sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
      var data = getzipdata(zip, path);
      var _ws;
      switch (stype) {
        case "sheet":
          _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          break;
        case "chart":
          _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          if (!_ws || !_ws["!drawel"])
            break;
          var dfile = resolve_path(_ws["!drawel"].Target, path);
          var drelsp = get_rels_path(dfile);
          var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
          var chartp = resolve_path(draw, dfile);
          var crelsp = get_rels_path(chartp);
          _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
          break;
        case "macro":
          _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          break;
        case "dialog":
          _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
          break;
        default:
          throw new Error("Unrecognized sheet type " + stype);
      }
      sheets[sheet] = _ws;
      var tcomments = [];
      if (sheetRels && sheetRels[sheet])
        keys(sheetRels[sheet]).forEach(function(n2) {
          var dfile2 = "";
          if (sheetRels[sheet][n2].Type == RELS.CMNT) {
            dfile2 = resolve_path(sheetRels[sheet][n2].Target, path);
            var comments = parse_cmnt(getzipdata(zip, dfile2, true), dfile2, opts);
            if (!comments || !comments.length)
              return;
            sheet_insert_comments(_ws, comments, false);
          }
          if (sheetRels[sheet][n2].Type == RELS.TCMNT) {
            dfile2 = resolve_path(sheetRels[sheet][n2].Target, path);
            tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile2, true), opts));
          }
        });
      if (tcomments && tcomments.length)
        sheet_insert_comments(_ws, tcomments, true, opts.people || []);
    } catch (e2) {
      if (opts.WTF)
        throw e2;
    }
  }
  function strip_front_slash(x) {
    return x.charAt(0) == "/" ? x.slice(1) : x;
  }
  function parse_zip(zip, opts) {
    make_ssf();
    opts = opts || {};
    fix_read_opts(opts);
    if (safegetzipfile(zip, "META-INF/manifest.xml"))
      return parse_ods(zip, opts);
    if (safegetzipfile(zip, "objectdata.xml"))
      return parse_ods(zip, opts);
    if (safegetzipfile(zip, "Index/Document.iwa")) {
      if (typeof Uint8Array == "undefined")
        throw new Error("NUMBERS file parsing requires Uint8Array support");
      if (typeof parse_numbers_iwa != "undefined") {
        if (zip.FileIndex)
          return parse_numbers_iwa(zip);
        var _zip = CFB.utils.cfb_new();
        zipentries(zip).forEach(function(e2) {
          zip_add_file(_zip, e2, getzipbin(zip, e2));
        });
        return parse_numbers_iwa(_zip);
      }
      throw new Error("Unsupported NUMBERS file");
    }
    if (!safegetzipfile(zip, "[Content_Types].xml")) {
      if (safegetzipfile(zip, "index.xml.gz"))
        throw new Error("Unsupported NUMBERS 08 file");
      if (safegetzipfile(zip, "index.xml"))
        throw new Error("Unsupported NUMBERS 09 file");
      throw new Error("Unsupported ZIP file");
    }
    var entries = zipentries(zip);
    var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
    var xlsb = false;
    var sheets, binname;
    if (dir.workbooks.length === 0) {
      binname = "xl/workbook.xml";
      if (getzipdata(zip, binname, true))
        dir.workbooks.push(binname);
    }
    if (dir.workbooks.length === 0) {
      binname = "xl/workbook.bin";
      if (!getzipdata(zip, binname, true))
        throw new Error("Could not find workbook");
      dir.workbooks.push(binname);
      xlsb = true;
    }
    if (dir.workbooks[0].slice(-3) == "bin")
      xlsb = true;
    var themes = {};
    var styles = {};
    if (!opts.bookSheets && !opts.bookProps) {
      strs = [];
      if (dir.sst)
        try {
          strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
        } catch (e2) {
          if (opts.WTF)
            throw e2;
        }
      if (opts.cellStyles && dir.themes.length)
        themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts);
      if (dir.style)
        styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
    }
    dir.links.map(function(link) {
      try {
        var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
        return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
      } catch (e2) {
      }
    });
    var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
    var props2 = {}, propdata = "";
    if (dir.coreprops.length) {
      propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
      if (propdata)
        props2 = parse_core_props(propdata);
      if (dir.extprops.length !== 0) {
        propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
        if (propdata)
          parse_ext_props(propdata, props2, opts);
      }
    }
    var custprops = {};
    if (!opts.bookSheets || opts.bookProps) {
      if (dir.custprops.length !== 0) {
        propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
        if (propdata)
          custprops = parse_cust_props(propdata, opts);
      }
    }
    var out = {};
    if (opts.bookSheets || opts.bookProps) {
      if (wb.Sheets)
        sheets = wb.Sheets.map(function pluck(x) {
          return x.name;
        });
      else if (props2.Worksheets && props2.SheetNames.length > 0)
        sheets = props2.SheetNames;
      if (opts.bookProps) {
        out.Props = props2;
        out.Custprops = custprops;
      }
      if (opts.bookSheets && typeof sheets !== "undefined")
        out.SheetNames = sheets;
      if (opts.bookSheets ? out.SheetNames : opts.bookProps)
        return out;
    }
    sheets = {};
    var deps = {};
    if (opts.bookDeps && dir.calcchain)
      deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain);
    var i2 = 0;
    var sheetRels = {};
    var path, relsPath;
    {
      var wbsheets = wb.Sheets;
      props2.Worksheets = wbsheets.length;
      props2.SheetNames = [];
      for (var j2 = 0; j2 != wbsheets.length; ++j2) {
        props2.SheetNames[j2] = wbsheets[j2].name;
      }
    }
    var wbext = xlsb ? "bin" : "xml";
    var wbrelsi = dir.workbooks[0].lastIndexOf("/");
    var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
    if (!safegetzipfile(zip, wbrelsfile))
      wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
    var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
    if ((dir.metadata || []).length >= 1) {
      opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
    }
    if ((dir.people || []).length >= 1) {
      opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
    }
    if (wbrels)
      wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
    var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
    wsloop:
      for (i2 = 0; i2 != props2.Worksheets; ++i2) {
        var stype = "sheet";
        if (wbrels && wbrels[i2]) {
          path = "xl/" + wbrels[i2][1].replace(/[\/]?xl\//, "");
          if (!safegetzipfile(zip, path))
            path = wbrels[i2][1];
          if (!safegetzipfile(zip, path))
            path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i2][1];
          stype = wbrels[i2][2];
        } else {
          path = "xl/worksheets/sheet" + (i2 + 1 - nmode) + "." + wbext;
          path = path.replace(/sheet0\./, "sheet.");
        }
        relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
        if (opts && opts.sheets != null)
          switch (typeof opts.sheets) {
            case "number":
              if (i2 != opts.sheets)
                continue wsloop;
              break;
            case "string":
              if (props2.SheetNames[i2].toLowerCase() != opts.sheets.toLowerCase())
                continue wsloop;
              break;
            default:
              if (Array.isArray && Array.isArray(opts.sheets)) {
                var snjseen = false;
                for (var snj = 0; snj != opts.sheets.length; ++snj) {
                  if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i2)
                    snjseen = 1;
                  if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props2.SheetNames[i2].toLowerCase())
                    snjseen = 1;
                }
                if (!snjseen)
                  continue wsloop;
              }
          }
        safe_parse_sheet(zip, path, relsPath, props2.SheetNames[i2], i2, sheetRels, sheets, stype, opts, wb, themes, styles);
      }
    out = {
      Directory: dir,
      Workbook: wb,
      Props: props2,
      Custprops: custprops,
      Deps: deps,
      Sheets: sheets,
      SheetNames: props2.SheetNames,
      Strings: strs,
      Styles: styles,
      Themes: themes,
      SSF: dup(table_fmt)
    };
    if (opts && opts.bookFiles) {
      if (zip.files) {
        out.keys = entries;
        out.files = zip.files;
      } else {
        out.keys = [];
        out.files = {};
        zip.FullPaths.forEach(function(p2, idx) {
          p2 = p2.replace(/^Root Entry[\/]/, "");
          out.keys.push(p2);
          out.files[p2] = zip.FileIndex[idx];
        });
      }
    }
    if (opts && opts.bookVBA) {
      if (dir.vba.length > 0)
        out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
      else if (dir.defaults && dir.defaults.bin === CT_VBA)
        out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
    }
    return out;
  }
  function parse_xlsxcfb(cfb, _opts) {
    var opts = _opts || {};
    var f2 = "Workbook", data = CFB.find(cfb, f2);
    try {
      f2 = "/!DataSpaces/Version";
      data = CFB.find(cfb, f2);
      if (!data || !data.content)
        throw new Error("ECMA-376 Encrypted file missing " + f2);
      parse_DataSpaceVersionInfo(data.content);
      f2 = "/!DataSpaces/DataSpaceMap";
      data = CFB.find(cfb, f2);
      if (!data || !data.content)
        throw new Error("ECMA-376 Encrypted file missing " + f2);
      var dsm = parse_DataSpaceMap(data.content);
      if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
        throw new Error("ECMA-376 Encrypted file bad " + f2);
      f2 = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
      data = CFB.find(cfb, f2);
      if (!data || !data.content)
        throw new Error("ECMA-376 Encrypted file missing " + f2);
      var seds = parse_DataSpaceDefinition(data.content);
      if (seds.length != 1 || seds[0] != "StrongEncryptionTransform")
        throw new Error("ECMA-376 Encrypted file bad " + f2);
      f2 = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
      data = CFB.find(cfb, f2);
      if (!data || !data.content)
        throw new Error("ECMA-376 Encrypted file missing " + f2);
      parse_Primary(data.content);
    } catch (e2) {
    }
    f2 = "/EncryptionInfo";
    data = CFB.find(cfb, f2);
    if (!data || !data.content)
      throw new Error("ECMA-376 Encrypted file missing " + f2);
    var einfo = parse_EncryptionInfo(data.content);
    f2 = "/EncryptedPackage";
    data = CFB.find(cfb, f2);
    if (!data || !data.content)
      throw new Error("ECMA-376 Encrypted file missing " + f2);
    if (einfo[0] == 4 && typeof decrypt_agile !== "undefined")
      return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
    if (einfo[0] == 2 && typeof decrypt_std76 !== "undefined")
      return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
    throw new Error("File is password-protected");
  }
  function firstbyte(f2, o2) {
    var x = "";
    switch ((o2 || {}).type || "base64") {
      case "buffer":
        return [f2[0], f2[1], f2[2], f2[3], f2[4], f2[5], f2[6], f2[7]];
      case "base64":
        x = Base64_decode(f2.slice(0, 12));
        break;
      case "binary":
        x = f2;
        break;
      case "array":
        return [f2[0], f2[1], f2[2], f2[3], f2[4], f2[5], f2[6], f2[7]];
      default:
        throw new Error("Unrecognized type " + (o2 && o2.type || "undefined"));
    }
    return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
  }
  function read_cfb(cfb, opts) {
    if (CFB.find(cfb, "EncryptedPackage"))
      return parse_xlsxcfb(cfb, opts);
    return parse_xlscfb(cfb, opts);
  }
  function read_zip(data, opts) {
    var zip, d2 = data;
    var o2 = opts || {};
    if (!o2.type)
      o2.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
    zip = zip_read(d2, o2);
    return parse_zip(zip, o2);
  }
  function read_plaintext(data, o2) {
    var i2 = 0;
    main:
      while (i2 < data.length)
        switch (data.charCodeAt(i2)) {
          case 10:
          case 13:
          case 32:
            ++i2;
            break;
          case 60:
            return parse_xlml(data.slice(i2), o2);
          default:
            break main;
        }
    return PRN.to_workbook(data, o2);
  }
  function read_plaintext_raw(data, o2) {
    var str = "", bytes = firstbyte(data, o2);
    switch (o2.type) {
      case "base64":
        str = Base64_decode(data);
        break;
      case "binary":
        str = data;
        break;
      case "buffer":
        str = data.toString("binary");
        break;
      case "array":
        str = cc2str(data);
        break;
      default:
        throw new Error("Unrecognized type " + o2.type);
    }
    if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
      str = utf8read(str);
    o2.type = "binary";
    return read_plaintext(str, o2);
  }
  function read_utf16(data, o2) {
    var d2 = data;
    if (o2.type == "base64")
      d2 = Base64_decode(d2);
    d2 = $cptable.utils.decode(1200, d2.slice(2), "str");
    o2.type = "binary";
    return read_plaintext(d2, o2);
  }
  function bstrify(data) {
    return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
  }
  function read_prn(data, d2, o2, str) {
    if (str) {
      o2.type = "string";
      return PRN.to_workbook(data, o2);
    }
    return PRN.to_workbook(d2, o2);
  }
  function readSync(data, opts) {
    reset_cp();
    var o2 = opts || {};
    if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer)
      return readSync(new Uint8Array(data), (o2 = dup(o2), o2.type = "array", o2));
    if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o2.type)
      o2.type = typeof Deno !== "undefined" ? "buffer" : "array";
    var d2 = data, n2 = [0, 0, 0, 0], str = false;
    if (o2.cellStyles) {
      o2.cellNF = true;
      o2.sheetStubs = true;
    }
    _ssfopts = {};
    if (o2.dateNF)
      _ssfopts.dateNF = o2.dateNF;
    if (!o2.type)
      o2.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
    if (o2.type == "file") {
      o2.type = has_buf ? "buffer" : "binary";
      d2 = read_binary(data);
      if (typeof Uint8Array !== "undefined" && !has_buf)
        o2.type = "array";
    }
    if (o2.type == "string") {
      str = true;
      o2.type = "binary";
      o2.codepage = 65001;
      d2 = bstrify(data);
    }
    if (o2.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
      var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
      vu.foo = "bar";
      if (!vu.foo) {
        o2 = dup(o2);
        o2.type = "array";
        return readSync(ab2a(d2), o2);
      }
    }
    switch ((n2 = firstbyte(d2, o2))[0]) {
      case 208:
        if (n2[1] === 207 && n2[2] === 17 && n2[3] === 224 && n2[4] === 161 && n2[5] === 177 && n2[6] === 26 && n2[7] === 225)
          return read_cfb(CFB.read(d2, o2), o2);
        break;
      case 9:
        if (n2[1] <= 8)
          return parse_xlscfb(d2, o2);
        break;
      case 60:
        return parse_xlml(d2, o2);
      case 73:
        if (n2[1] === 73 && n2[2] === 42 && n2[3] === 0)
          throw new Error("TIFF Image File is not a spreadsheet");
        if (n2[1] === 68)
          return read_wb_ID(d2, o2);
        break;
      case 84:
        if (n2[1] === 65 && n2[2] === 66 && n2[3] === 76)
          return DIF.to_workbook(d2, o2);
        break;
      case 80:
        return n2[1] === 75 && n2[2] < 9 && n2[3] < 9 ? read_zip(d2, o2) : read_prn(data, d2, o2, str);
      case 239:
        return n2[3] === 60 ? parse_xlml(d2, o2) : read_prn(data, d2, o2, str);
      case 255:
        if (n2[1] === 254) {
          return read_utf16(d2, o2);
        } else if (n2[1] === 0 && n2[2] === 2 && n2[3] === 0)
          return WK_.to_workbook(d2, o2);
        break;
      case 0:
        if (n2[1] === 0) {
          if (n2[2] >= 2 && n2[3] === 0)
            return WK_.to_workbook(d2, o2);
          if (n2[2] === 0 && (n2[3] === 8 || n2[3] === 9))
            return WK_.to_workbook(d2, o2);
        }
        break;
      case 3:
      case 131:
      case 139:
      case 140:
        return DBF.to_workbook(d2, o2);
      case 123:
        if (n2[1] === 92 && n2[2] === 114 && n2[3] === 116)
          return RTF.to_workbook(d2, o2);
        break;
      case 10:
      case 13:
      case 32:
        return read_plaintext_raw(d2, o2);
      case 137:
        if (n2[1] === 80 && n2[2] === 78 && n2[3] === 71)
          throw new Error("PNG Image File is not a spreadsheet");
        break;
    }
    if (DBF_SUPPORTED_VERSIONS.indexOf(n2[0]) > -1 && n2[2] <= 12 && n2[3] <= 31)
      return DBF.to_workbook(d2, o2);
    return read_prn(data, d2, o2, str);
  }
  function make_json_row(sheet, r2, R2, cols, header, hdr, dense, o2) {
    var rr = encode_row(R2);
    var defval = o2.defval, raw = o2.raw || !Object.prototype.hasOwnProperty.call(o2, "raw");
    var isempty = true;
    var row = header === 1 ? [] : {};
    if (header !== 1) {
      if (Object.defineProperty)
        try {
          Object.defineProperty(row, "__rowNum__", { value: R2, enumerable: false });
        } catch (e2) {
          row.__rowNum__ = R2;
        }
      else
        row.__rowNum__ = R2;
    }
    if (!dense || sheet[R2])
      for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
        var val = dense ? sheet[R2][C2] : sheet[cols[C2] + rr];
        if (val === void 0 || val.t === void 0) {
          if (defval === void 0)
            continue;
          if (hdr[C2] != null) {
            row[hdr[C2]] = defval;
          }
          continue;
        }
        var v2 = val.v;
        switch (val.t) {
          case "z":
            if (v2 == null)
              break;
            continue;
          case "e":
            v2 = v2 == 0 ? null : void 0;
            break;
          case "s":
          case "d":
          case "b":
          case "n":
            break;
          default:
            throw new Error("unrecognized type " + val.t);
        }
        if (hdr[C2] != null) {
          if (v2 == null) {
            if (val.t == "e" && v2 === null)
              row[hdr[C2]] = null;
            else if (defval !== void 0)
              row[hdr[C2]] = defval;
            else if (raw && v2 === null)
              row[hdr[C2]] = null;
            else
              continue;
          } else {
            row[hdr[C2]] = raw && (val.t !== "n" || val.t === "n" && o2.rawNumbers !== false) ? v2 : format_cell(val, v2, o2);
          }
          if (v2 != null)
            isempty = false;
        }
      }
    return { row, isempty };
  }
  function sheet_to_json(sheet, opts) {
    if (sheet == null || sheet["!ref"] == null)
      return [];
    var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v2 = 0, vv = "";
    var r2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
    var o2 = opts || {};
    var range2 = o2.range != null ? o2.range : sheet["!ref"];
    if (o2.header === 1)
      header = 1;
    else if (o2.header === "A")
      header = 2;
    else if (Array.isArray(o2.header))
      header = 3;
    else if (o2.header == null)
      header = 0;
    switch (typeof range2) {
      case "string":
        r2 = safe_decode_range(range2);
        break;
      case "number":
        r2 = safe_decode_range(sheet["!ref"]);
        r2.s.r = range2;
        break;
      default:
        r2 = range2;
    }
    if (header > 0)
      offset = 0;
    var rr = encode_row(r2.s.r);
    var cols = [];
    var out = [];
    var outi = 0, counter = 0;
    var dense = Array.isArray(sheet);
    var R2 = r2.s.r, C2 = 0;
    var header_cnt = {};
    if (dense && !sheet[R2])
      sheet[R2] = [];
    var colinfo = o2.skipHidden && sheet["!cols"] || [];
    var rowinfo = o2.skipHidden && sheet["!rows"] || [];
    for (C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
      if ((colinfo[C2] || {}).hidden)
        continue;
      cols[C2] = encode_col(C2);
      val = dense ? sheet[R2][C2] : sheet[cols[C2] + rr];
      switch (header) {
        case 1:
          hdr[C2] = C2 - r2.s.c;
          break;
        case 2:
          hdr[C2] = cols[C2];
          break;
        case 3:
          hdr[C2] = o2.header[C2 - r2.s.c];
          break;
        default:
          if (val == null)
            val = { w: "__EMPTY", t: "s" };
          vv = v2 = format_cell(val, null, o2);
          counter = header_cnt[v2] || 0;
          if (!counter)
            header_cnt[v2] = 1;
          else {
            do {
              vv = v2 + "_" + counter++;
            } while (header_cnt[vv]);
            header_cnt[v2] = counter;
            header_cnt[vv] = 1;
          }
          hdr[C2] = vv;
      }
    }
    for (R2 = r2.s.r + offset; R2 <= r2.e.r; ++R2) {
      if ((rowinfo[R2] || {}).hidden)
        continue;
      var row = make_json_row(sheet, r2, R2, cols, header, hdr, dense, o2);
      if (row.isempty === false || (header === 1 ? o2.blankrows !== false : !!o2.blankrows))
        out[outi++] = row.row;
    }
    out.length = outi;
    return out;
  }
  var qreg = /"/g;
  function make_csv_row(sheet, r2, R2, cols, fs2, rs2, FS, o2) {
    var isempty = true;
    var row = [], txt = "", rr = encode_row(R2);
    for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
      if (!cols[C2])
        continue;
      var val = o2.dense ? (sheet[R2] || [])[C2] : sheet[cols[C2] + rr];
      if (val == null)
        txt = "";
      else if (val.v != null) {
        isempty = false;
        txt = "" + (o2.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o2));
        for (var i2 = 0, cc = 0; i2 !== txt.length; ++i2)
          if ((cc = txt.charCodeAt(i2)) === fs2 || cc === rs2 || cc === 34 || o2.forceQuotes) {
            txt = '"' + txt.replace(qreg, '""') + '"';
            break;
          }
        if (txt == "ID")
          txt = '"ID"';
      } else if (val.f != null && !val.F) {
        isempty = false;
        txt = "=" + val.f;
        if (txt.indexOf(",") >= 0)
          txt = '"' + txt.replace(qreg, '""') + '"';
      } else
        txt = "";
      row.push(txt);
    }
    if (o2.blankrows === false && isempty)
      return null;
    return row.join(FS);
  }
  function sheet_to_csv(sheet, opts) {
    var out = [];
    var o2 = opts == null ? {} : opts;
    if (sheet == null || sheet["!ref"] == null)
      return "";
    var r2 = safe_decode_range(sheet["!ref"]);
    var FS = o2.FS !== void 0 ? o2.FS : ",", fs2 = FS.charCodeAt(0);
    var RS = o2.RS !== void 0 ? o2.RS : "\n", rs2 = RS.charCodeAt(0);
    var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
    var row = "", cols = [];
    o2.dense = Array.isArray(sheet);
    var colinfo = o2.skipHidden && sheet["!cols"] || [];
    var rowinfo = o2.skipHidden && sheet["!rows"] || [];
    for (var C2 = r2.s.c; C2 <= r2.e.c; ++C2)
      if (!(colinfo[C2] || {}).hidden)
        cols[C2] = encode_col(C2);
    var w2 = 0;
    for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2) {
      if ((rowinfo[R2] || {}).hidden)
        continue;
      row = make_csv_row(sheet, r2, R2, cols, fs2, rs2, FS, o2);
      if (row == null) {
        continue;
      }
      if (o2.strip)
        row = row.replace(endregex, "");
      if (row || o2.blankrows !== false)
        out.push((w2++ ? RS : "") + row);
    }
    delete o2.dense;
    return out.join("");
  }
  function sheet_to_txt(sheet, opts) {
    if (!opts)
      opts = {};
    opts.FS = "	";
    opts.RS = "\n";
    var s2 = sheet_to_csv(sheet, opts);
    return s2;
  }
  function sheet_to_formulae(sheet) {
    var y2 = "", x, val = "";
    if (sheet == null || sheet["!ref"] == null)
      return [];
    var r2 = safe_decode_range(sheet["!ref"]), rr = "", cols = [], C2;
    var cmds = [];
    var dense = Array.isArray(sheet);
    for (C2 = r2.s.c; C2 <= r2.e.c; ++C2)
      cols[C2] = encode_col(C2);
    for (var R2 = r2.s.r; R2 <= r2.e.r; ++R2) {
      rr = encode_row(R2);
      for (C2 = r2.s.c; C2 <= r2.e.c; ++C2) {
        y2 = cols[C2] + rr;
        x = dense ? (sheet[R2] || [])[C2] : sheet[y2];
        val = "";
        if (x === void 0)
          continue;
        else if (x.F != null) {
          y2 = x.F;
          if (!x.f)
            continue;
          val = x.f;
          if (y2.indexOf(":") == -1)
            y2 = y2 + ":" + y2;
        }
        if (x.f != null)
          val = x.f;
        else if (x.t == "z")
          continue;
        else if (x.t == "n" && x.v != null)
          val = "" + x.v;
        else if (x.t == "b")
          val = x.v ? "TRUE" : "FALSE";
        else if (x.w !== void 0)
          val = "'" + x.w;
        else if (x.v === void 0)
          continue;
        else if (x.t == "s")
          val = "'" + x.v;
        else
          val = "" + x.v;
        cmds[cmds.length] = y2 + "=" + val;
      }
    }
    return cmds;
  }
  function sheet_add_json(_ws, js2, opts) {
    var o2 = opts || {};
    var offset = +!o2.skipHeader;
    var ws2 = _ws || {};
    var _R2 = 0, _C2 = 0;
    if (ws2 && o2.origin != null) {
      if (typeof o2.origin == "number")
        _R2 = o2.origin;
      else {
        var _origin = typeof o2.origin == "string" ? decode_cell(o2.origin) : o2.origin;
        _R2 = _origin.r;
        _C2 = _origin.c;
      }
    }
    var cell;
    var range2 = { s: { c: 0, r: 0 }, e: { c: _C2, r: _R2 + js2.length - 1 + offset } };
    if (ws2["!ref"]) {
      var _range = safe_decode_range(ws2["!ref"]);
      range2.e.c = Math.max(range2.e.c, _range.e.c);
      range2.e.r = Math.max(range2.e.r, _range.e.r);
      if (_R2 == -1) {
        _R2 = _range.e.r + 1;
        range2.e.r = _R2 + js2.length - 1 + offset;
      }
    } else {
      if (_R2 == -1) {
        _R2 = 0;
        range2.e.r = js2.length - 1 + offset;
      }
    }
    var hdr = o2.header || [], C2 = 0;
    js2.forEach(function(JS, R2) {
      keys(JS).forEach(function(k) {
        if ((C2 = hdr.indexOf(k)) == -1)
          hdr[C2 = hdr.length] = k;
        var v2 = JS[k];
        var t2 = "z";
        var z2 = "";
        var ref = encode_cell({ c: _C2 + C2, r: _R2 + R2 + offset });
        cell = ws_get_cell_stub(ws2, ref);
        if (v2 && typeof v2 === "object" && !(v2 instanceof Date)) {
          ws2[ref] = v2;
        } else {
          if (typeof v2 == "number")
            t2 = "n";
          else if (typeof v2 == "boolean")
            t2 = "b";
          else if (typeof v2 == "string")
            t2 = "s";
          else if (v2 instanceof Date) {
            t2 = "d";
            if (!o2.cellDates) {
              t2 = "n";
              v2 = datenum(v2);
            }
            z2 = o2.dateNF || table_fmt[14];
          } else if (v2 === null && o2.nullError) {
            t2 = "e";
            v2 = 0;
          }
          if (!cell)
            ws2[ref] = cell = { t: t2, v: v2 };
          else {
            cell.t = t2;
            cell.v = v2;
            delete cell.w;
            delete cell.R;
            if (z2)
              cell.z = z2;
          }
          if (z2)
            cell.z = z2;
        }
      });
    });
    range2.e.c = Math.max(range2.e.c, _C2 + hdr.length - 1);
    var __R = encode_row(_R2);
    if (offset)
      for (C2 = 0; C2 < hdr.length; ++C2)
        ws2[encode_col(C2 + _C2) + __R] = { t: "s", v: hdr[C2] };
    ws2["!ref"] = encode_range(range2);
    return ws2;
  }
  function json_to_sheet(js2, opts) {
    return sheet_add_json(null, js2, opts);
  }
  function ws_get_cell_stub(ws2, R2, C2) {
    if (typeof R2 == "string") {
      if (Array.isArray(ws2)) {
        var RC = decode_cell(R2);
        if (!ws2[RC.r])
          ws2[RC.r] = [];
        return ws2[RC.r][RC.c] || (ws2[RC.r][RC.c] = { t: "z" });
      }
      return ws2[R2] || (ws2[R2] = { t: "z" });
    }
    if (typeof R2 != "number")
      return ws_get_cell_stub(ws2, encode_cell(R2));
    return ws_get_cell_stub(ws2, encode_cell({ r: R2, c: C2 || 0 }));
  }
  function wb_sheet_idx(wb, sh) {
    if (typeof sh == "number") {
      if (sh >= 0 && wb.SheetNames.length > sh)
        return sh;
      throw new Error("Cannot find sheet # " + sh);
    } else if (typeof sh == "string") {
      var idx = wb.SheetNames.indexOf(sh);
      if (idx > -1)
        return idx;
      throw new Error("Cannot find sheet name |" + sh + "|");
    } else
      throw new Error("Cannot find sheet |" + sh + "|");
  }
  function book_new() {
    return { SheetNames: [], Sheets: {} };
  }
  function book_append_sheet(wb, ws2, name, roll) {
    var i2 = 1;
    if (!name) {
      for (; i2 <= 65535; ++i2, name = void 0)
        if (wb.SheetNames.indexOf(name = "Sheet" + i2) == -1)
          break;
    }
    if (!name || wb.SheetNames.length >= 65535)
      throw new Error("Too many worksheets");
    if (roll && wb.SheetNames.indexOf(name) >= 0) {
      var m2 = name.match(/(^.*?)(\d+)$/);
      i2 = m2 && +m2[2] || 0;
      var root = m2 && m2[1] || name;
      for (++i2; i2 <= 65535; ++i2)
        if (wb.SheetNames.indexOf(name = root + i2) == -1)
          break;
    }
    check_ws_name(name);
    if (wb.SheetNames.indexOf(name) >= 0)
      throw new Error("Worksheet with name |" + name + "| already exists!");
    wb.SheetNames.push(name);
    wb.Sheets[name] = ws2;
    return name;
  }
  function book_set_sheet_visibility(wb, sh, vis) {
    if (!wb.Workbook)
      wb.Workbook = {};
    if (!wb.Workbook.Sheets)
      wb.Workbook.Sheets = [];
    var idx = wb_sheet_idx(wb, sh);
    if (!wb.Workbook.Sheets[idx])
      wb.Workbook.Sheets[idx] = {};
    switch (vis) {
      case 0:
      case 1:
      case 2:
        break;
      default:
        throw new Error("Bad sheet visibility setting " + vis);
    }
    wb.Workbook.Sheets[idx].Hidden = vis;
  }
  function cell_set_number_format(cell, fmt) {
    cell.z = fmt;
    return cell;
  }
  function cell_set_hyperlink(cell, target, tooltip) {
    if (!target) {
      delete cell.l;
    } else {
      cell.l = { Target: target };
      if (tooltip)
        cell.l.Tooltip = tooltip;
    }
    return cell;
  }
  function cell_set_internal_link(cell, range2, tooltip) {
    return cell_set_hyperlink(cell, "#" + range2, tooltip);
  }
  function cell_add_comment(cell, text, author) {
    if (!cell.c)
      cell.c = [];
    cell.c.push({ t: text, a: author || "SheetJS" });
  }
  function sheet_set_array_formula(ws2, range2, formula, dynamic) {
    var rng = typeof range2 != "string" ? range2 : safe_decode_range(range2);
    var rngstr = typeof range2 == "string" ? range2 : encode_range(range2);
    for (var R2 = rng.s.r; R2 <= rng.e.r; ++R2)
      for (var C2 = rng.s.c; C2 <= rng.e.c; ++C2) {
        var cell = ws_get_cell_stub(ws2, R2, C2);
        cell.t = "n";
        cell.F = rngstr;
        delete cell.v;
        if (R2 == rng.s.r && C2 == rng.s.c) {
          cell.f = formula;
          if (dynamic)
            cell.D = true;
        }
      }
    return ws2;
  }
  var utils = {
    encode_col,
    encode_row,
    encode_cell,
    encode_range,
    decode_col,
    decode_row,
    split_cell,
    decode_cell,
    decode_range,
    format_cell,
    sheet_add_aoa,
    sheet_add_json,
    sheet_add_dom,
    aoa_to_sheet,
    json_to_sheet,
    table_to_sheet: parse_dom_table,
    table_to_book,
    sheet_to_csv,
    sheet_to_txt,
    sheet_to_json,
    sheet_to_html,
    sheet_to_formulae,
    sheet_to_row_object_array: sheet_to_json,
    sheet_get_cell: ws_get_cell_stub,
    book_new,
    book_append_sheet,
    book_set_sheet_visibility,
    cell_set_number_format,
    cell_set_hyperlink,
    cell_set_internal_link,
    cell_add_comment,
    sheet_set_array_formula,
    consts: {
      SHEET_VISIBLE: 0,
      SHEET_HIDDEN: 1,
      SHEET_VERY_HIDDEN: 2
    }
  };
  const block0 = (Comp) => {
    (Comp.$renderjs || (Comp.$renderjs = [])).push("renderJS");
    (Comp.$renderjsModules || (Comp.$renderjsModules = {}))["renderJS"] = "2dccaea8";
  };
  const _sfc_main$5 = {
    methods: {
      parseJSONData(base64Str) {
        if (base64Str.includes("application/json")) {
          let jsonStr = this.convertBase64ToUTF8(base64Str);
          let jsonData = JSON.parse(jsonStr);
          this.$emit("readJSONFinish", { jsonData });
        } else if (base64Str.includes("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")) {
          this.parseXLSXData(base64Str);
        } else {
          this.$emit("readJSONFinish", { jsonStr: base64Str });
        }
      },
      async parseXLSXData(base64Str) {
        try {
          const base64Data = base64Str.split(",")[1];
          const binaryString = atob(base64Data);
          const buffer = new Uint8Array(binaryString.length);
          for (let i2 = 0; i2 < binaryString.length; i2++) {
            buffer[i2] = binaryString.charCodeAt(i2);
          }
          const workbook = readSync(buffer, { type: "array", cellDates: true });
          const firstSheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[firstSheetName];
          const data = utils.sheet_to_json(worksheet, { header: 1, cellDates: true });
          const headers = data[0].map((h2) => h2.trim());
          const equipmentList = [];
          const columnMapping = {
            "编号": "id",
            "设备名称": "name",
            "类型": "category",
            "维护间隔": "time",
            "上次维护时间": "lasttime"
          };
          for (let i2 = 1; i2 < data.length; i2++) {
            const row = data[i2];
            const equipment = {
              id: "",
              name: "",
              category: "",
              time: "",
              lasttime: ""
            };
            headers.forEach((header, index2) => {
              const mappedKey = columnMapping[header];
              if (mappedKey) {
                const value2 = row[index2];
                if (value2 !== void 0 && value2 !== null) {
                  if (mappedKey === "lasttime") {
                    let date3;
                    if (value2 instanceof Date) {
                      date3 = value2;
                    } else if (typeof value2 === "number") {
                      const utcDays = Math.floor(value2 - 25569);
                      date3 = new Date(utcDays * 86400 * 1e3);
                    } else {
                      date3 = new Date(value2);
                    }
                    if (!isNaN(date3)) {
                      const year = date3.getFullYear();
                      const month = String(date3.getMonth() + 1).padStart(2, "0");
                      const day = String(date3.getDate()).padStart(2, "0");
                      equipment[mappedKey] = `${year}-${month}-${day}`;
                    } else {
                      equipment[mappedKey] = value2;
                    }
                  } else {
                    equipment[mappedKey] = value2 === 0 ? "0" : value2;
                  }
                }
              }
            });
            equipmentList.push(equipment);
          }
          this.$emit("processXLSXFinish", { equipmentList });
        } catch (error2) {
          formatAppLog("error", "at uni_modules/heyuan-chooseFile/components/heyuan-chooseFile/heyuan-chooseFile.vue:97", "解析XLSX失败:", error2);
          this.$emit("processXLSXError", { error: error2 });
        }
      }
    }
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "main" }, [
      vue.createElementVNode("button", {
        type: "info",
        style: { "margin-top": "10px", "height": "38px", "width": "328px" },
        size: "mini",
        onClick: _cache[0] || (_cache[0] = (...args) => _ctx.renderJS.createFileInputDom && _ctx.renderJS.createFileInputDom(...args))
      }, [
        vue.createElementVNode("text", null, "选择文件")
      ])
    ]);
  }
  if (typeof block0 === "function")
    block0(_sfc_main$5);
  const HeyuanChooseFile = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__scopeId", "data-v-76c30a4d"], ["__file", "E:/code/app/WH-app/uni_modules/heyuan-chooseFile/components/heyuan-chooseFile/heyuan-chooseFile.vue"]]);
  const _sfc_main$4 = {
    __name: "equipment_Input",
    setup(__props, { expose: __expose }) {
      __expose();
      const deviceList = vue.ref([]);
      const calendar2 = vue.ref(null);
      const formRef = vue.ref(null);
      const list = vue.ref(null);
      const readFile = (equipmentList) => {
        deviceList.value = equipmentList;
        deviceList.value = deviceList.value.equipmentList;
        list.value.open();
      };
      const saveDevice = async () => {
        uni.setStorageSync("deviceList", deviceList.value);
        list.value.clear();
        uni.showToast({
          title: "保存成功",
          icon: "success"
        });
      };
      const model1 = vue.ref({
        equipment: {
          id: "",
          name: "",
          category: "",
          time: "",
          lasttime: ""
        }
      });
      const radiovalue = vue.ref("小型设备");
      const radiolist = vue.reactive([
        { name: "小型设备", disabled: false },
        { name: "中型设备", disabled: false },
        { name: "大型设备", disabled: false },
        { name: "其他", disabled: false }
      ]);
      const calendar_open = () => {
        calendar2.value.open();
      };
      const submit = async () => {
        const requiredFields = [
          model1.value.equipment.id,
          model1.value.equipment.name,
          model1.value.equipment.time,
          model1.value.equipment.lasttime
        ];
        if (requiredFields.some((field) => !field || field.trim() === "")) {
          uni.showToast({
            title: "请填写所有字段",
            icon: "error"
          });
          return;
        }
        model1.value.equipment.category = radiovalue.value;
        const newDevice = { ...model1.value.equipment };
        deviceList.value.push(newDevice);
        uni.setStorageSync("deviceList", deviceList.value);
        uni.showToast({
          title: "保存成功",
          icon: "success"
        });
        reset();
      };
      const reset = () => {
        model1.value.equipment = {
          id: "",
          name: "",
          category: "",
          time: "",
          lasttime: ""
        };
        radiovalue.value = "小型设备";
      };
      const onCalendarConfirm = (e2) => {
        model1.value.equipment.lasttime = e2.fulldate;
      };
      vue.onMounted(() => {
        const storedDevices = uni.getStorageSync("deviceList");
        if (storedDevices) {
          deviceList.value = storedDevices;
        }
      });
      const __returned__ = { deviceList, calendar: calendar2, formRef, list, readFile, saveDevice, model1, radiovalue, radiolist, calendar_open, submit, reset, onCalendarConfirm, ref: vue.ref, reactive: vue.reactive, onMounted: vue.onMounted, HeyuanChooseFile };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_text = resolveEasycom(vue.resolveDynamicComponent("uv-text"), __easycom_0$2);
    const _component_uv_input = resolveEasycom(vue.resolveDynamicComponent("uv-input"), __easycom_6);
    const _component_uv_form_item = resolveEasycom(vue.resolveDynamicComponent("uv-form-item"), __easycom_7);
    const _component_uv_radio = resolveEasycom(vue.resolveDynamicComponent("uv-radio"), __easycom_3$1);
    const _component_uv_radio_group = resolveEasycom(vue.resolveDynamicComponent("uv-radio-group"), __easycom_4);
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_button = resolveEasycom(vue.resolveDynamicComponent("uv-button"), __easycom_10);
    const _component_uv_form = resolveEasycom(vue.resolveDynamicComponent("uv-form"), __easycom_9);
    const _component_uni_calendar = resolveEasycom(vue.resolveDynamicComponent("uni-calendar"), __easycom_8);
    const _component_uv_col = resolveEasycom(vue.resolveDynamicComponent("uv-col"), __easycom_4$1);
    const _component_uv_row = resolveEasycom(vue.resolveDynamicComponent("uv-row"), __easycom_5);
    const _component_uv_popup = resolveEasycom(vue.resolveDynamicComponent("uv-popup"), __easycom_11);
    return vue.openBlock(), vue.createElementBlock("view", { class: "content" }, [
      vue.createElementVNode("view", { style: { "height": "120px", "padding-left": "20px", "display": "flex", "align-items": "center" } }, [
        vue.createVNode(_component_uv_text, {
          text: "设备录入",
          size: "36"
        })
      ]),
      vue.createElementVNode("view", { class: "from" }, [
        vue.createVNode(_component_uv_form, {
          "label-width": "70px",
          model: $setup.model1,
          ref: "formRef"
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uv_form_item, {
              label: "编号",
              borderBottom: ""
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uv_input, {
                  border: "none",
                  placeholder: "请输入编号",
                  modelValue: $setup.model1.equipment.id,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.model1.equipment.id = $event)
                }, null, 8, ["modelValue"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_form_item, {
              label: "设备名",
              borderBottom: ""
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uv_input, {
                  border: "none",
                  placeholder: "请输入设备名",
                  modelValue: $setup.model1.equipment.name,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.model1.equipment.name = $event)
                }, null, 8, ["modelValue"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_form_item, {
              label: "类别",
              borderBottom: ""
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uv_radio_group, {
                  modelValue: $setup.radiovalue,
                  "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.radiovalue = $event)
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($setup.radiolist, (item, index2) => {
                        return vue.openBlock(), vue.createBlock(_component_uv_radio, {
                          customStyle: { margin: "8px" },
                          key: index2,
                          label: item.name,
                          name: item.name
                        }, null, 8, ["label", "name"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["modelValue"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_form_item, {
              label: "维护间隔",
              borderBottom: ""
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uv_input, {
                  border: "none",
                  placeholder: "请输入维护间隔(天)",
                  modelValue: $setup.model1.equipment.time,
                  "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $setup.model1.equipment.time = $event)
                }, null, 8, ["modelValue"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_form_item, {
              label: "上次维护日期",
              borderBottom: ""
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uv_input, {
                  placeholder: "请选择日期",
                  disabled: "",
                  onClick: $setup.calendar_open,
                  modelValue: $setup.model1.equipment.lasttime,
                  "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $setup.model1.equipment.lasttime = $event)
                }, {
                  prefix: vue.withCtx(() => [
                    vue.createVNode(_component_uv_icon, { name: "calendar" })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["modelValue"])
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_button, {
              type: "primary",
              text: "提交",
              customStyle: "margin-top: 20px",
              onClick: $setup.submit
            }),
            vue.createVNode(_component_uv_button, {
              type: "error",
              text: "重置",
              customStyle: "margin-top: 10px",
              onClick: $setup.reset
            }),
            vue.createVNode($setup["HeyuanChooseFile"], { onProcessXLSXFinish: $setup.readFile })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["model"]),
        vue.createVNode(
          _component_uni_calendar,
          {
            ref: "calendar",
            insert: false,
            onConfirm: $setup.onCalendarConfirm
          },
          null,
          512
          /* NEED_PATCH */
        ),
        vue.createVNode(
          _component_uv_popup,
          {
            ref: "list",
            closeable: true,
            round: "20"
          },
          {
            default: vue.withCtx(() => [
              vue.createElementVNode("view", { style: { "width": "280px", "min-height": "220px", "padding": "20px" } }, [
                vue.createVNode(_component_uv_text, {
                  text: "仅展示部分内容供参考",
                  type: "info"
                }),
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($setup.deviceList.slice(0, 5), (item, index2) => {
                    return vue.openBlock(), vue.createBlock(
                      _component_uv_row,
                      {
                        key: index2,
                        gutter: "6"
                      },
                      {
                        default: vue.withCtx(() => [
                          vue.createVNode(
                            _component_uv_col,
                            { span: "2" },
                            {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(
                                  vue.toDisplayString(item.id),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          ),
                          vue.createVNode(
                            _component_uv_col,
                            { span: "3" },
                            {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(
                                  vue.toDisplayString(item.name),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          ),
                          vue.createVNode(
                            _component_uv_col,
                            { span: "6" },
                            {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(
                                  vue.toDisplayString(item.lasttime),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          ),
                          vue.createVNode(_component_uv_col, { span: "1" }, {
                            default: vue.withCtx(() => [
                              vue.createTextVNode("....")
                            ]),
                            _: 1
                            /* STABLE */
                          })
                        ]),
                        _: 2
                        /* DYNAMIC */
                      },
                      1024
                      /* DYNAMIC_SLOTS */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )),
                vue.createVNode(_component_uv_button, {
                  type: "primary",
                  onClick: $setup.saveDevice,
                  style: { "margin-top": "35px" }
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("保存")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ]),
            _: 1
            /* STABLE */
          },
          512
          /* NEED_PATCH */
        )
      ])
    ]);
  }
  const PagesEquipmentEquipmentInput = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__scopeId", "data-v-ae321017"], ["__file", "E:/code/app/WH-app/pages/equipment/equipment_Input.vue"]]);
  const props$1 = {
    props: {
      value: {
        type: [String, Number],
        default: ""
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      // 搜索框形状，round-圆形，square-方形
      shape: {
        type: String,
        default: "round"
      },
      // 搜索框背景色，默认值#f2f2f2
      bgColor: {
        type: String,
        default: "#f2f2f2"
      },
      // 占位提示文字
      placeholder: {
        type: String,
        default: "请输入关键字"
      },
      // 是否启用清除控件
      clearabled: {
        type: Boolean,
        default: true
      },
      // 是否自动聚焦
      focus: {
        type: Boolean,
        default: false
      },
      // 是否在搜索框右侧显示取消按钮
      showAction: {
        type: Boolean,
        default: true
      },
      // 右边控件的样式
      actionStyle: {
        type: Object,
        default: () => ({})
      },
      // 取消按钮文字
      actionText: {
        type: String,
        default: "搜索"
      },
      // 输入框内容对齐方式，可选值为 left|center|right
      inputAlign: {
        type: String,
        default: "left"
      },
      // input输入框的样式，可以定义文字颜色，大小等，对象形式
      inputStyle: {
        type: Object,
        default: () => ({})
      },
      // 是否禁用输入框
      disabled: {
        type: Boolean,
        default: false
      },
      // 边框颜色
      borderColor: {
        type: String,
        default: "transparent"
      },
      // 搜索图标的颜色，默认同输入框字体颜色
      searchIconColor: {
        type: String,
        default: "#909399"
      },
      // 输入框字体颜色
      color: {
        type: String,
        default: "#606266"
      },
      // placeholder的颜色
      placeholderColor: {
        type: String,
        default: "#909399"
      },
      // 左边输入框的图标，可以为uvui图标名称或图片路径
      searchIcon: {
        type: String,
        default: "search"
      },
      searchIconSize: {
        type: [Number, String],
        default: 22
      },
      // 组件与其他上下左右元素之间的距离，带单位的字符串形式，如"30px"、"30px 20px"等写法
      margin: {
        type: String,
        default: "0"
      },
      // 开启showAction时，是否在input获取焦点时才显示
      animation: {
        type: Boolean,
        default: false
      },
      // 输入框最大能输入的长度，-1为不限制长度(来自uniapp文档)
      maxlength: {
        type: [String, Number],
        default: -1
      },
      // 搜索框高度，单位px
      height: {
        type: [String, Number],
        default: 32
      },
      // 搜索框左侧文本
      label: {
        type: [String, Number, null],
        default: null
      },
      // 搜索框扩展样式
      boxStyle: {
        type: [String, Object],
        default: () => ({})
      },
      ...(_T = (_S = uni.$uv) == null ? void 0 : _S.props) == null ? void 0 : _T.search
    }
  };
  const _sfc_main$3 = {
    name: "uv-search",
    emits: ["click", "input", "change", "clear", "search", "custom", "focus", "blur", "clickIcon", "update:modelValue"],
    mixins: [mpMixin, mixin, props$1],
    data() {
      return {
        keyword: "",
        showClear: false,
        // 是否显示右边的清除图标
        show: false,
        // 标记input当前状态是否处于聚焦中，如果是，才会显示右侧的清除控件
        focused: this.focus
      };
    },
    created() {
      this.keyword = this.modelValue;
    },
    watch: {
      value(nVal) {
        this.keyword = nVal;
      },
      modelValue(nVal) {
        this.keyword = nVal;
      }
    },
    computed: {
      showActionBtn() {
        return !this.animation && this.showAction;
      }
    },
    methods: {
      keywordChange() {
        this.$emit("input", this.keyword);
        this.$emit("update:modelValue", this.keyword);
        this.$emit("change", this.keyword);
      },
      // 目前HX2.6.9 v-model双向绑定无效，故监听input事件获取输入框内容的变化
      inputChange(e2) {
        this.keyword = e2.detail.value;
        this.keywordChange();
      },
      // 清空输入
      // 也可以作为用户通过this.$refs形式调用清空输入框内容
      clear() {
        this.keyword = "";
        this.$nextTick(() => {
          this.$emit("clear");
        });
        this.keywordChange();
      },
      // 确定搜索
      search(e2) {
        this.$emit("search", e2.detail.value);
        try {
          uni.hideKeyboard();
        } catch (e3) {
        }
      },
      // 点击右边自定义按钮的事件
      custom() {
        this.$emit("custom", this.keyword);
        try {
          uni.hideKeyboard();
        } catch (e2) {
        }
      },
      // 获取焦点
      getFocus() {
        this.focused = true;
        if (this.animation && this.showAction)
          this.show = true;
        this.$emit("focus", this.keyword);
      },
      // 失去焦点
      blur() {
        setTimeout(() => {
          this.focused = false;
        }, 100);
        this.show = false;
        this.$emit("blur", this.keyword);
      },
      // 点击搜索框，只有disabled=true时才发出事件，因为禁止了输入，意味着是想跳转真正的搜索页
      clickHandler() {
        if (this.disabled)
          this.$emit("click");
      },
      // 点击左边图标
      clickIcon() {
        this.$emit("clickIcon");
      }
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "uv-search",
        onClick: _cache[6] || (_cache[6] = (...args) => $options.clickHandler && $options.clickHandler(...args)),
        style: vue.normalizeStyle([{
          margin: _ctx.margin
        }, _ctx.$uv.addStyle(_ctx.customStyle)])
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "uv-search__content",
            style: vue.normalizeStyle([{
              backgroundColor: _ctx.bgColor,
              borderRadius: _ctx.shape == "round" ? "100px" : "4px",
              borderColor: _ctx.borderColor
            }, _ctx.$uv.addStyle(_ctx.boxStyle)])
          },
          [
            _ctx.disabled ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "uv-search__content__disabled"
            })) : vue.createCommentVNode("v-if", true),
            vue.renderSlot(_ctx.$slots, "prefix", {}, () => [
              vue.createElementVNode("view", { class: "uv-search__content__icon" }, [
                vue.createVNode(_component_uv_icon, {
                  onClick: $options.clickIcon,
                  size: _ctx.searchIconSize,
                  name: _ctx.searchIcon,
                  color: _ctx.searchIconColor ? _ctx.searchIconColor : _ctx.color
                }, null, 8, ["onClick", "size", "name", "color"])
              ])
            ], true),
            vue.createElementVNode("input", {
              "confirm-type": "search",
              onBlur: _cache[0] || (_cache[0] = (...args) => $options.blur && $options.blur(...args)),
              value: $data.keyword,
              onConfirm: _cache[1] || (_cache[1] = (...args) => $options.search && $options.search(...args)),
              onInput: _cache[2] || (_cache[2] = (...args) => $options.inputChange && $options.inputChange(...args)),
              disabled: _ctx.disabled,
              onFocus: _cache[3] || (_cache[3] = (...args) => $options.getFocus && $options.getFocus(...args)),
              focus: _ctx.focus,
              maxlength: _ctx.maxlength,
              "placeholder-class": "uv-search__content__input--placeholder",
              placeholder: _ctx.placeholder,
              "placeholder-style": `color: ${_ctx.placeholderColor}`,
              class: "uv-search__content__input",
              type: "text",
              style: vue.normalizeStyle([{
                textAlign: _ctx.inputAlign,
                color: _ctx.color,
                backgroundColor: _ctx.bgColor,
                height: _ctx.$uv.addUnit(_ctx.height)
              }, _ctx.inputStyle])
            }, null, 44, ["value", "disabled", "focus", "maxlength", "placeholder", "placeholder-style"]),
            $data.keyword && _ctx.clearabled && $data.focused ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "uv-search__content__icon uv-search__content__close",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.clear && $options.clear(...args))
            }, [
              vue.createVNode(_component_uv_icon, {
                name: "close",
                size: "11",
                color: "#ffffff",
                customStyle: "line-height: 12px"
              })
            ])) : vue.createCommentVNode("v-if", true),
            vue.renderSlot(_ctx.$slots, "suffix", {}, void 0, true)
          ],
          4
          /* STYLE */
        ),
        vue.createElementVNode(
          "text",
          {
            style: vue.normalizeStyle([_ctx.actionStyle]),
            class: vue.normalizeClass(["uv-search__action", [($options.showActionBtn || $data.show) && "uv-search__action--active"]]),
            onClick: _cache[5] || (_cache[5] = vue.withModifiers((...args) => $options.custom && $options.custom(...args), ["stop", "prevent"]))
          },
          vue.toDisplayString(_ctx.actionText),
          7
          /* TEXT, CLASS, STYLE */
        )
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_2 = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__scopeId", "data-v-46cbdd03"], ["__file", "E:/code/app/WH-app/uni_modules/uv-search/components/uv-search/uv-search.vue"]]);
  const props = {
    props: {
      // 吸顶容器到顶部某个距离的时候，进行吸顶，在H5平台，NavigationBar为44px
      offsetTop: {
        type: [String, Number],
        default: 0
      },
      // 自定义导航栏的高度
      customNavHeight: {
        type: [String, Number],
        default: 0
      },
      // 是否禁用吸顶功能
      disabled: {
        type: Boolean,
        default: false
      },
      // 吸顶区域的背景颜色
      bgColor: {
        type: String,
        default: "transparent"
      },
      // z-index值
      zIndex: {
        type: [String, Number],
        default: ""
      },
      // 列表中的索引值
      index: {
        type: [String, Number],
        default: ""
      },
      ...(_V = (_U = uni.$uv) == null ? void 0 : _U.props) == null ? void 0 : _V.sticky
    }
  };
  const _sfc_main$2 = {
    name: "uv-sticky",
    mixins: [mpMixin, mixin, props],
    data() {
      return {
        cssSticky: false,
        // 是否使用css的sticky实现
        stickyTop: 0,
        // 吸顶的top值，因为可能受自定义导航栏影响，最终的吸顶值非offsetTop值
        elId: "",
        left: 0,
        // js模式时，吸顶的内容因为处于postition: fixed模式，为了和原来保持一致的样式，需要记录并重新设置它的left，height，width属性
        width: "auto",
        height: "auto",
        fixed: false
        // js模式时，是否处于吸顶模式
      };
    },
    computed: {
      style() {
        const style = {};
        if (!this.disabled) {
          if (this.cssSticky) {
            style.position = "sticky";
            style.zIndex = this.uZindex;
            style.top = this.$uv.addUnit(this.stickyTop);
          } else {
            style.height = this.fixed ? this.height + "px" : "auto";
          }
        } else {
          style.position = "static";
        }
        style.backgroundColor = this.bgColor;
        return this.$uv.deepMerge(style, this.$uv.addStyle(this.customStyle));
      },
      // 吸顶内容的样式
      stickyContent() {
        const style = {};
        if (!this.cssSticky) {
          style.position = this.fixed ? "fixed" : "static";
          style.top = this.stickyTop + "px";
          style.left = this.left + "px";
          style.width = this.width == "auto" ? "auto" : this.width + "px";
          style.zIndex = this.uZindex;
        }
        return style;
      },
      uZindex() {
        return this.zIndex ? this.zIndex : 970;
      }
    },
    created() {
      this.elId = this.$uv.guid();
    },
    mounted() {
      this.init();
    },
    methods: {
      init() {
        this.getStickyTop();
        this.checkSupportCssSticky();
        if (!this.cssSticky) {
          !this.disabled && this.initObserveContent();
        }
      },
      initObserveContent() {
        this.$uvGetRect("#" + this.elId).then((res) => {
          this.height = res.height;
          this.left = res.left;
          this.width = res.width;
          this.$nextTick(() => {
            this.observeContent();
          });
        });
      },
      observeContent() {
        this.disconnectObserver("contentObserver");
        const contentObserver = uni.createIntersectionObserver({
          // 检测的区间范围
          thresholds: [0.95, 0.98, 1]
        });
        contentObserver.relativeToViewport({
          top: -this.stickyTop
        });
        contentObserver.observe(`#${this.elId}`, (res) => {
          this.setFixed(res.boundingClientRect.top);
        });
        this.contentObserver = contentObserver;
      },
      setFixed(top) {
        const fixed = top <= this.stickyTop;
        this.fixed = fixed;
      },
      disconnectObserver(observerName) {
        const observer = this[observerName];
        observer && observer.disconnect();
      },
      getStickyTop() {
        this.stickyTop = this.$uv.getPx(this.offsetTop) + this.$uv.getPx(this.customNavHeight);
      },
      async checkSupportCssSticky() {
        if (this.$uv.os() === "android" && Number(this.$uv.sys().system) > 8) {
          this.cssSticky = true;
        }
        this.cssSticky = await this.checkComputedStyle();
        if (this.$uv.os() === "ios") {
          this.cssSticky = true;
        }
      },
      // 在APP和微信小程序上，通过uni.createSelectorQuery可以判断是否支持css sticky
      checkComputedStyle() {
        return new Promise((resolve) => {
          uni.createSelectorQuery().in(this).select(".uv-sticky").fields({
            computedStyle: ["position"]
          }).exec((e2) => {
            resolve("sticky" === e2[0].position);
          });
        });
      },
      // H5通过创建元素的形式嗅探是否支持css sticky
      // 判断浏览器是否支持sticky属性
      checkCssStickyForH5() {
      }
    },
    unmounted() {
      this.disconnectObserver("contentObserver");
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", {
      class: "uv-sticky",
      id: $data.elId,
      style: vue.normalizeStyle([$options.style])
    }, [
      vue.createElementVNode(
        "view",
        {
          style: vue.normalizeStyle([$options.stickyContent]),
          class: "uv-sticky__content"
        },
        [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ],
        4
        /* STYLE */
      )
    ], 12, ["id"]);
  }
  const __easycom_3 = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__scopeId", "data-v-0a817f53"], ["__file", "E:/code/app/WH-app/uni_modules/uv-sticky/components/uv-sticky/uv-sticky.vue"]]);
  const _sfc_main$1 = {
    __name: "equipment_manage",
    setup(__props, { expose: __expose }) {
      __expose();
      const device = vue.ref([]);
      const searchKeyword = vue.ref("");
      const edit = vue.ref(null);
      const formRef = vue.ref(null);
      const originalDeviceList = vue.ref([]);
      const equipment = vue.ref({
        id: "",
        name: "",
        category: "",
        time: "",
        lasttime: ""
      });
      const rules2 = {
        name: [{ required: true, message: "设备名不能为空", trigger: "blur" }],
        category: [{ required: true, message: "类别不能为空", trigger: "blur" }],
        time: [{
          required: true,
          message: "维护间隔不能为空",
          validator: (rule, value2) => /^\d+$/.test(value2),
          trigger: "blur"
        }]
      };
      const filteredDevices = vue.computed(() => {
        if (!searchKeyword.value)
          return device.value;
        return device.value.filter(
          (item) => item.id.includes(searchKeyword.value) || item.name.toLowerCase().includes(searchKeyword.value.toLowerCase())
        );
      });
      const showEditPopup = (item) => {
        equipment.value = { ...item };
        edit.value.open();
      };
      const saveDevice = async () => {
        try {
          await formRef.value.validate();
          const index2 = device.value.findIndex((d2) => d2.id === equipment.value.id);
          if (index2 > -1) {
            device.value.splice(index2, 1, equipment.value);
            uni.setStorageSync("deviceList", device.value);
            edit.value.close();
            uni.showToast({ title: "保存成功", icon: "success" });
          }
        } catch (error2) {
          formatAppLog("log", "at pages/equipment/equipment_manage.vue:111", "验证失败:", error2);
        }
      };
      const deleteDevice = () => {
        uni.showModal({
          title: "确认删除",
          content: "确定要删除该设备吗？",
          success: (res) => {
            if (res.confirm) {
              const index2 = device.value.findIndex((d2) => d2.id === equipment.value.id);
              if (index2 > -1) {
                device.value.splice(index2, 1);
                uni.setStorageSync("deviceList", device.value);
                edit.value.close();
                uni.showToast({ title: "删除成功", icon: "success" });
              }
            }
          }
        });
      };
      vue.onMounted(() => {
        const data = uni.getStorageSync("deviceList") || [];
        device.value = data;
        originalDeviceList.value = [...data];
      });
      const handleSearch = () => {
        if (!searchKeyword.value) {
          device.value = [...originalDeviceList.value];
        }
      };
      const __returned__ = { device, searchKeyword, edit, formRef, originalDeviceList, equipment, rules: rules2, filteredDevices, showEditPopup, saveDevice, deleteDevice, handleSearch, ref: vue.ref, computed: vue.computed, onMounted: vue.onMounted };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uv_text = resolveEasycom(vue.resolveDynamicComponent("uv-text"), __easycom_0$2);
    const _component_uv_line = resolveEasycom(vue.resolveDynamicComponent("uv-line"), __easycom_1$3);
    const _component_uv_search = resolveEasycom(vue.resolveDynamicComponent("uv-search"), __easycom_2);
    const _component_uv_sticky = resolveEasycom(vue.resolveDynamicComponent("uv-sticky"), __easycom_3);
    const _component_uv_col = resolveEasycom(vue.resolveDynamicComponent("uv-col"), __easycom_4$1);
    const _component_uv_row = resolveEasycom(vue.resolveDynamicComponent("uv-row"), __easycom_5);
    const _component_uv_input = resolveEasycom(vue.resolveDynamicComponent("uv-input"), __easycom_6);
    const _component_uv_form_item = resolveEasycom(vue.resolveDynamicComponent("uv-form-item"), __easycom_7);
    const _component_uv_icon = resolveEasycom(vue.resolveDynamicComponent("uv-icon"), __easycom_8$2);
    const _component_uv_form = resolveEasycom(vue.resolveDynamicComponent("uv-form"), __easycom_9);
    const _component_uv_button = resolveEasycom(vue.resolveDynamicComponent("uv-button"), __easycom_10);
    const _component_uv_popup = resolveEasycom(vue.resolveDynamicComponent("uv-popup"), __easycom_11);
    return vue.openBlock(), vue.createElementBlock("view", { class: "content" }, [
      vue.createElementVNode("view", { style: { "height": "200px", "display": "flex", "align-items": "center" } }, [
        vue.createVNode(_component_uv_text, {
          text: "设备管理",
          size: "40",
          align: "center"
        })
      ]),
      vue.createVNode(_component_uv_line),
      vue.createElementVNode("view", { style: { "height": "50px", "width": "100%", "display": "flex", "align-items": "center", "justify-content": "center" } }, [
        vue.createVNode(_component_uv_sticky, { "offset-top": "10px" }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uv_search, {
              modelValue: $setup.searchKeyword,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.searchKeyword = $event),
              onSearch: $setup.handleSearch
            }, null, 8, ["modelValue"])
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      vue.createElementVNode("view", { style: { "margin-top": "10px" } }, [
        vue.createVNode(_component_uv_row, { gutter: "10" }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uv_col, {
              justify: "center",
              align: "center",
              "text-align": "center",
              span: "3"
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode("编号")
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_col, {
              justify: "center",
              align: "center",
              "text-align": "center",
              span: "3"
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode("设备名称")
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_uv_col, {
              justify: "center",
              align: "center",
              "text-align": "center",
              span: "6"
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode("上次保养时间")
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          _: 1
          /* STABLE */
        }),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.filteredDevices, (item, index2) => {
            return vue.openBlock(), vue.createBlock(_component_uv_row, {
              gutter: "10",
              key: index2,
              style: { "height": "50px" },
              onClick: ($event) => $setup.showEditPopup(item)
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(
                  _component_uv_col,
                  {
                    justify: "center",
                    align: "center",
                    "text-align": "center",
                    span: "3"
                  },
                  {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item.id),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                ),
                vue.createVNode(
                  _component_uv_col,
                  {
                    justify: "center",
                    align: "center",
                    "text-align": "center",
                    span: "3"
                  },
                  {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item.name),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                ),
                vue.createVNode(
                  _component_uv_col,
                  {
                    justify: "center",
                    align: "center",
                    span: "6"
                  },
                  {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item.lasttime),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                )
              ]),
              _: 2
              /* DYNAMIC */
            }, 1032, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createVNode(
        _component_uv_popup,
        {
          ref: "edit",
          closeable: true,
          round: "25",
          "custom-style": "min-height: 180px;width: 360px; "
        },
        {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "edit" }, [
              vue.createVNode(_component_uv_form, {
                "label-width": "70px",
                rules: $setup.rules,
                ref: "formRef",
                model: $setup.equipment
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_uv_form_item, {
                    label: "编号",
                    prop: "id",
                    borderBottom: ""
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_uv_input, {
                        modelValue: $setup.equipment.id,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.equipment.id = $event),
                        disabled: true
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_uv_form_item, {
                    label: "设备名",
                    prop: "name",
                    borderBottom: ""
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_uv_input, {
                        modelValue: $setup.equipment.name,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.equipment.name = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_uv_form_item, {
                    label: "类别",
                    prop: "category",
                    borderBottom: ""
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_uv_input, {
                        modelValue: $setup.equipment.category,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $setup.equipment.category = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_uv_form_item, {
                    label: "维护间隔",
                    prop: "time",
                    borderBottom: ""
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_uv_input, {
                        modelValue: $setup.equipment.time,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $setup.equipment.time = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_uv_form_item, {
                    label: "上次维护日期",
                    prop: "lasttime",
                    borderBottom: ""
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_uv_input, {
                        modelValue: $setup.equipment.lasttime,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $setup.equipment.lasttime = $event)
                      }, {
                        prefix: vue.withCtx(() => [
                          vue.createVNode(_component_uv_icon, { name: "calendar" })
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["model"]),
              vue.createElementVNode("view", { style: { "display": "flex", "justify-content": "space-around", "margin": "20px 0" } }, [
                vue.createVNode(_component_uv_button, {
                  type: "primary",
                  onClick: $setup.saveDevice,
                  style: { "width": "120px" }
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("保存")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_uv_button, {
                  type: "error",
                  onClick: $setup.deleteDevice,
                  style: { "width": "120px" }
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("删除")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesEquipmentEquipmentManage = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__scopeId", "data-v-a85bdf97"], ["__file", "E:/code/app/WH-app/pages/equipment/equipment_manage.vue"]]);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/equipment/equipment_Input", PagesEquipmentEquipmentInput);
  __definePage("pages/equipment/equipment_manage", PagesEquipmentEquipmentManage);
  const _sfc_main = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:4", "App Launch");
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:7", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:10", "App Hide");
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "E:/code/app/WH-app/App.vue"]]);
  const easycom = {
    autoscan: true,
    custom: {
      "^uv-(.*)": "@climblee/uv-ui/components/uv-$1/uv-$1.vue"
    }
  };
  const pages = [
    {
      path: "pages/index/index",
      style: {
        navigationStyle: "custom",
        enablePullDownRefresh: true
      }
    },
    {
      path: "pages/equipment/equipment_Input",
      style: {
        navigationBarTitleText: "",
        disableScroll: true
      }
    },
    {
      path: "pages/equipment/equipment_manage",
      style: {
        navigationBarTitleText: "",
        enablePullDownRefresh: true
      }
    }
  ];
  const globalStyle = {};
  const uniIdRouter = {};
  const e = {
    easycom,
    pages,
    globalStyle,
    uniIdRouter
  };
  var define_process_env_UNI_SECURE_NETWORK_CONFIG_default = [];
  function t(e2) {
    return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
  }
  function n(e2, t2, n2) {
    return e2(n2 = { path: t2, exports: {}, require: function(e3, t3) {
      return function() {
        throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
      }(null == t3 && n2.path);
    } }, n2.exports), n2.exports;
  }
  var s = n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = n2 || function(e3, t3) {
      var n3 = Object.create || /* @__PURE__ */ function() {
        function e4() {
        }
        return function(t4) {
          var n4;
          return e4.prototype = t4, n4 = new e4(), e4.prototype = null, n4;
        };
      }(), s2 = {}, r2 = s2.lib = {}, i2 = r2.Base = { extend: function(e4) {
        var t4 = n3(this);
        return e4 && t4.mixIn(e4), t4.hasOwnProperty("init") && this.init !== t4.init || (t4.init = function() {
          t4.$super.init.apply(this, arguments);
        }), t4.init.prototype = t4, t4.$super = this, t4;
      }, create: function() {
        var e4 = this.extend();
        return e4.init.apply(e4, arguments), e4;
      }, init: function() {
      }, mixIn: function(e4) {
        for (var t4 in e4)
          e4.hasOwnProperty(t4) && (this[t4] = e4[t4]);
        e4.hasOwnProperty("toString") && (this.toString = e4.toString);
      }, clone: function() {
        return this.init.prototype.extend(this);
      } }, o2 = r2.WordArray = i2.extend({ init: function(e4, n4) {
        e4 = this.words = e4 || [], this.sigBytes = n4 != t3 ? n4 : 4 * e4.length;
      }, toString: function(e4) {
        return (e4 || c2).stringify(this);
      }, concat: function(e4) {
        var t4 = this.words, n4 = e4.words, s3 = this.sigBytes, r3 = e4.sigBytes;
        if (this.clamp(), s3 % 4)
          for (var i3 = 0; i3 < r3; i3++) {
            var o3 = n4[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
            t4[s3 + i3 >>> 2] |= o3 << 24 - (s3 + i3) % 4 * 8;
          }
        else
          for (i3 = 0; i3 < r3; i3 += 4)
            t4[s3 + i3 >>> 2] = n4[i3 >>> 2];
        return this.sigBytes += r3, this;
      }, clamp: function() {
        var t4 = this.words, n4 = this.sigBytes;
        t4[n4 >>> 2] &= 4294967295 << 32 - n4 % 4 * 8, t4.length = e3.ceil(n4 / 4);
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4.words = this.words.slice(0), e4;
      }, random: function(t4) {
        for (var n4, s3 = [], r3 = function(t5) {
          t5 = t5;
          var n5 = 987654321, s4 = 4294967295;
          return function() {
            var r4 = ((n5 = 36969 * (65535 & n5) + (n5 >> 16) & s4) << 16) + (t5 = 18e3 * (65535 & t5) + (t5 >> 16) & s4) & s4;
            return r4 /= 4294967296, (r4 += 0.5) * (e3.random() > 0.5 ? 1 : -1);
          };
        }, i3 = 0; i3 < t4; i3 += 4) {
          var a3 = r3(4294967296 * (n4 || e3.random()));
          n4 = 987654071 * a3(), s3.push(4294967296 * a3() | 0);
        }
        return new o2.init(s3, t4);
      } }), a2 = s2.enc = {}, c2 = a2.Hex = { stringify: function(e4) {
        for (var t4 = e4.words, n4 = e4.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push((i3 >>> 4).toString(16)), s3.push((15 & i3).toString(16));
        }
        return s3.join("");
      }, parse: function(e4) {
        for (var t4 = e4.length, n4 = [], s3 = 0; s3 < t4; s3 += 2)
          n4[s3 >>> 3] |= parseInt(e4.substr(s3, 2), 16) << 24 - s3 % 8 * 4;
        return new o2.init(n4, t4 / 2);
      } }, u2 = a2.Latin1 = { stringify: function(e4) {
        for (var t4 = e4.words, n4 = e4.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push(String.fromCharCode(i3));
        }
        return s3.join("");
      }, parse: function(e4) {
        for (var t4 = e4.length, n4 = [], s3 = 0; s3 < t4; s3++)
          n4[s3 >>> 2] |= (255 & e4.charCodeAt(s3)) << 24 - s3 % 4 * 8;
        return new o2.init(n4, t4);
      } }, h2 = a2.Utf8 = { stringify: function(e4) {
        try {
          return decodeURIComponent(escape(u2.stringify(e4)));
        } catch (e5) {
          throw new Error("Malformed UTF-8 data");
        }
      }, parse: function(e4) {
        return u2.parse(unescape(encodeURIComponent(e4)));
      } }, l2 = r2.BufferedBlockAlgorithm = i2.extend({ reset: function() {
        this._data = new o2.init(), this._nDataBytes = 0;
      }, _append: function(e4) {
        "string" == typeof e4 && (e4 = h2.parse(e4)), this._data.concat(e4), this._nDataBytes += e4.sigBytes;
      }, _process: function(t4) {
        var n4 = this._data, s3 = n4.words, r3 = n4.sigBytes, i3 = this.blockSize, a3 = r3 / (4 * i3), c3 = (a3 = t4 ? e3.ceil(a3) : e3.max((0 | a3) - this._minBufferSize, 0)) * i3, u3 = e3.min(4 * c3, r3);
        if (c3) {
          for (var h3 = 0; h3 < c3; h3 += i3)
            this._doProcessBlock(s3, h3);
          var l3 = s3.splice(0, c3);
          n4.sigBytes -= u3;
        }
        return new o2.init(l3, u3);
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._data = this._data.clone(), e4;
      }, _minBufferSize: 0 });
      r2.Hasher = l2.extend({ cfg: i2.extend(), init: function(e4) {
        this.cfg = this.cfg.extend(e4), this.reset();
      }, reset: function() {
        l2.reset.call(this), this._doReset();
      }, update: function(e4) {
        return this._append(e4), this._process(), this;
      }, finalize: function(e4) {
        return e4 && this._append(e4), this._doFinalize();
      }, blockSize: 16, _createHelper: function(e4) {
        return function(t4, n4) {
          return new e4.init(n4).finalize(t4);
        };
      }, _createHmacHelper: function(e4) {
        return function(t4, n4) {
          return new d2.HMAC.init(e4, n4).finalize(t4);
        };
      } });
      var d2 = s2.algo = {};
      return s2;
    }(Math), n2);
  }), r = s, i = (n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, function(e3) {
      var t3 = n2, s2 = t3.lib, r2 = s2.WordArray, i2 = s2.Hasher, o2 = t3.algo, a2 = [];
      !function() {
        for (var t4 = 0; t4 < 64; t4++)
          a2[t4] = 4294967296 * e3.abs(e3.sin(t4 + 1)) | 0;
      }();
      var c2 = o2.MD5 = i2.extend({ _doReset: function() {
        this._hash = new r2.init([1732584193, 4023233417, 2562383102, 271733878]);
      }, _doProcessBlock: function(e4, t4) {
        for (var n3 = 0; n3 < 16; n3++) {
          var s3 = t4 + n3, r3 = e4[s3];
          e4[s3] = 16711935 & (r3 << 8 | r3 >>> 24) | 4278255360 & (r3 << 24 | r3 >>> 8);
        }
        var i3 = this._hash.words, o3 = e4[t4 + 0], c3 = e4[t4 + 1], p2 = e4[t4 + 2], f2 = e4[t4 + 3], g2 = e4[t4 + 4], m2 = e4[t4 + 5], y2 = e4[t4 + 6], _2 = e4[t4 + 7], w2 = e4[t4 + 8], v2 = e4[t4 + 9], I2 = e4[t4 + 10], S2 = e4[t4 + 11], b2 = e4[t4 + 12], k2 = e4[t4 + 13], T2 = e4[t4 + 14], A2 = e4[t4 + 15], P2 = i3[0], C2 = i3[1], x2 = i3[2], O2 = i3[3];
        P2 = u2(P2, C2, x2, O2, o3, 7, a2[0]), O2 = u2(O2, P2, C2, x2, c3, 12, a2[1]), x2 = u2(x2, O2, P2, C2, p2, 17, a2[2]), C2 = u2(C2, x2, O2, P2, f2, 22, a2[3]), P2 = u2(P2, C2, x2, O2, g2, 7, a2[4]), O2 = u2(O2, P2, C2, x2, m2, 12, a2[5]), x2 = u2(x2, O2, P2, C2, y2, 17, a2[6]), C2 = u2(C2, x2, O2, P2, _2, 22, a2[7]), P2 = u2(P2, C2, x2, O2, w2, 7, a2[8]), O2 = u2(O2, P2, C2, x2, v2, 12, a2[9]), x2 = u2(x2, O2, P2, C2, I2, 17, a2[10]), C2 = u2(C2, x2, O2, P2, S2, 22, a2[11]), P2 = u2(P2, C2, x2, O2, b2, 7, a2[12]), O2 = u2(O2, P2, C2, x2, k2, 12, a2[13]), x2 = u2(x2, O2, P2, C2, T2, 17, a2[14]), P2 = h2(P2, C2 = u2(C2, x2, O2, P2, A2, 22, a2[15]), x2, O2, c3, 5, a2[16]), O2 = h2(O2, P2, C2, x2, y2, 9, a2[17]), x2 = h2(x2, O2, P2, C2, S2, 14, a2[18]), C2 = h2(C2, x2, O2, P2, o3, 20, a2[19]), P2 = h2(P2, C2, x2, O2, m2, 5, a2[20]), O2 = h2(O2, P2, C2, x2, I2, 9, a2[21]), x2 = h2(x2, O2, P2, C2, A2, 14, a2[22]), C2 = h2(C2, x2, O2, P2, g2, 20, a2[23]), P2 = h2(P2, C2, x2, O2, v2, 5, a2[24]), O2 = h2(O2, P2, C2, x2, T2, 9, a2[25]), x2 = h2(x2, O2, P2, C2, f2, 14, a2[26]), C2 = h2(C2, x2, O2, P2, w2, 20, a2[27]), P2 = h2(P2, C2, x2, O2, k2, 5, a2[28]), O2 = h2(O2, P2, C2, x2, p2, 9, a2[29]), x2 = h2(x2, O2, P2, C2, _2, 14, a2[30]), P2 = l2(P2, C2 = h2(C2, x2, O2, P2, b2, 20, a2[31]), x2, O2, m2, 4, a2[32]), O2 = l2(O2, P2, C2, x2, w2, 11, a2[33]), x2 = l2(x2, O2, P2, C2, S2, 16, a2[34]), C2 = l2(C2, x2, O2, P2, T2, 23, a2[35]), P2 = l2(P2, C2, x2, O2, c3, 4, a2[36]), O2 = l2(O2, P2, C2, x2, g2, 11, a2[37]), x2 = l2(x2, O2, P2, C2, _2, 16, a2[38]), C2 = l2(C2, x2, O2, P2, I2, 23, a2[39]), P2 = l2(P2, C2, x2, O2, k2, 4, a2[40]), O2 = l2(O2, P2, C2, x2, o3, 11, a2[41]), x2 = l2(x2, O2, P2, C2, f2, 16, a2[42]), C2 = l2(C2, x2, O2, P2, y2, 23, a2[43]), P2 = l2(P2, C2, x2, O2, v2, 4, a2[44]), O2 = l2(O2, P2, C2, x2, b2, 11, a2[45]), x2 = l2(x2, O2, P2, C2, A2, 16, a2[46]), P2 = d2(P2, C2 = l2(C2, x2, O2, P2, p2, 23, a2[47]), x2, O2, o3, 6, a2[48]), O2 = d2(O2, P2, C2, x2, _2, 10, a2[49]), x2 = d2(x2, O2, P2, C2, T2, 15, a2[50]), C2 = d2(C2, x2, O2, P2, m2, 21, a2[51]), P2 = d2(P2, C2, x2, O2, b2, 6, a2[52]), O2 = d2(O2, P2, C2, x2, f2, 10, a2[53]), x2 = d2(x2, O2, P2, C2, I2, 15, a2[54]), C2 = d2(C2, x2, O2, P2, c3, 21, a2[55]), P2 = d2(P2, C2, x2, O2, w2, 6, a2[56]), O2 = d2(O2, P2, C2, x2, A2, 10, a2[57]), x2 = d2(x2, O2, P2, C2, y2, 15, a2[58]), C2 = d2(C2, x2, O2, P2, k2, 21, a2[59]), P2 = d2(P2, C2, x2, O2, g2, 6, a2[60]), O2 = d2(O2, P2, C2, x2, S2, 10, a2[61]), x2 = d2(x2, O2, P2, C2, p2, 15, a2[62]), C2 = d2(C2, x2, O2, P2, v2, 21, a2[63]), i3[0] = i3[0] + P2 | 0, i3[1] = i3[1] + C2 | 0, i3[2] = i3[2] + x2 | 0, i3[3] = i3[3] + O2 | 0;
      }, _doFinalize: function() {
        var t4 = this._data, n3 = t4.words, s3 = 8 * this._nDataBytes, r3 = 8 * t4.sigBytes;
        n3[r3 >>> 5] |= 128 << 24 - r3 % 32;
        var i3 = e3.floor(s3 / 4294967296), o3 = s3;
        n3[15 + (r3 + 64 >>> 9 << 4)] = 16711935 & (i3 << 8 | i3 >>> 24) | 4278255360 & (i3 << 24 | i3 >>> 8), n3[14 + (r3 + 64 >>> 9 << 4)] = 16711935 & (o3 << 8 | o3 >>> 24) | 4278255360 & (o3 << 24 | o3 >>> 8), t4.sigBytes = 4 * (n3.length + 1), this._process();
        for (var a3 = this._hash, c3 = a3.words, u3 = 0; u3 < 4; u3++) {
          var h3 = c3[u3];
          c3[u3] = 16711935 & (h3 << 8 | h3 >>> 24) | 4278255360 & (h3 << 24 | h3 >>> 8);
        }
        return a3;
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._hash = this._hash.clone(), e4;
      } });
      function u2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 & n3 | ~t4 & s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function h2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 & s3 | n3 & ~s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function l2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 ^ n3 ^ s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function d2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (n3 ^ (t4 | ~s3)) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      t3.MD5 = i2._createHelper(c2), t3.HmacMD5 = i2._createHmacHelper(c2);
    }(Math), n2.MD5);
  }), n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, void function() {
      var e3 = n2, t3 = e3.lib.Base, s2 = e3.enc.Utf8;
      e3.algo.HMAC = t3.extend({ init: function(e4, t4) {
        e4 = this._hasher = new e4.init(), "string" == typeof t4 && (t4 = s2.parse(t4));
        var n3 = e4.blockSize, r2 = 4 * n3;
        t4.sigBytes > r2 && (t4 = e4.finalize(t4)), t4.clamp();
        for (var i2 = this._oKey = t4.clone(), o2 = this._iKey = t4.clone(), a2 = i2.words, c2 = o2.words, u2 = 0; u2 < n3; u2++)
          a2[u2] ^= 1549556828, c2[u2] ^= 909522486;
        i2.sigBytes = o2.sigBytes = r2, this.reset();
      }, reset: function() {
        var e4 = this._hasher;
        e4.reset(), e4.update(this._iKey);
      }, update: function(e4) {
        return this._hasher.update(e4), this;
      }, finalize: function(e4) {
        var t4 = this._hasher, n3 = t4.finalize(e4);
        return t4.reset(), t4.finalize(this._oKey.clone().concat(n3));
      } });
    }());
  }), n(function(e2, t2) {
    e2.exports = r.HmacMD5;
  })), o = n(function(e2, t2) {
    e2.exports = r.enc.Utf8;
  }), a = n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, function() {
      var e3 = n2, t3 = e3.lib.WordArray;
      function s2(e4, n3, s3) {
        for (var r2 = [], i2 = 0, o2 = 0; o2 < n3; o2++)
          if (o2 % 4) {
            var a2 = s3[e4.charCodeAt(o2 - 1)] << o2 % 4 * 2, c2 = s3[e4.charCodeAt(o2)] >>> 6 - o2 % 4 * 2;
            r2[i2 >>> 2] |= (a2 | c2) << 24 - i2 % 4 * 8, i2++;
          }
        return t3.create(r2, i2);
      }
      e3.enc.Base64 = { stringify: function(e4) {
        var t4 = e4.words, n3 = e4.sigBytes, s3 = this._map;
        e4.clamp();
        for (var r2 = [], i2 = 0; i2 < n3; i2 += 3)
          for (var o2 = (t4[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) << 16 | (t4[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255) << 8 | t4[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255, a2 = 0; a2 < 4 && i2 + 0.75 * a2 < n3; a2++)
            r2.push(s3.charAt(o2 >>> 6 * (3 - a2) & 63));
        var c2 = s3.charAt(64);
        if (c2)
          for (; r2.length % 4; )
            r2.push(c2);
        return r2.join("");
      }, parse: function(e4) {
        var t4 = e4.length, n3 = this._map, r2 = this._reverseMap;
        if (!r2) {
          r2 = this._reverseMap = [];
          for (var i2 = 0; i2 < n3.length; i2++)
            r2[n3.charCodeAt(i2)] = i2;
        }
        var o2 = n3.charAt(64);
        if (o2) {
          var a2 = e4.indexOf(o2);
          -1 !== a2 && (t4 = a2);
        }
        return s2(e4, t4, r2);
      }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
    }(), n2.enc.Base64);
  });
  const c = "FUNCTION", u = "OBJECT", h = "CLIENT_DB", l = "pending", d = "fulfilled", p = "rejected";
  function f(e2) {
    return Object.prototype.toString.call(e2).slice(8, -1).toLowerCase();
  }
  function g(e2) {
    return "object" === f(e2);
  }
  function m(e2) {
    return "function" == typeof e2;
  }
  function y(e2) {
    return function() {
      try {
        return e2.apply(e2, arguments);
      } catch (e3) {
        console.error(e3);
      }
    };
  }
  const _ = "REJECTED", w = "NOT_PENDING";
  class v {
    constructor({ createPromise: e2, retryRule: t2 = _ } = {}) {
      this.createPromise = e2, this.status = null, this.promise = null, this.retryRule = t2;
    }
    get needRetry() {
      if (!this.status)
        return true;
      switch (this.retryRule) {
        case _:
          return this.status === p;
        case w:
          return this.status !== l;
      }
    }
    exec() {
      return this.needRetry ? (this.status = l, this.promise = this.createPromise().then((e2) => (this.status = d, Promise.resolve(e2)), (e2) => (this.status = p, Promise.reject(e2))), this.promise) : this.promise;
    }
  }
  function I(e2) {
    return e2 && "string" == typeof e2 ? JSON.parse(e2) : e2;
  }
  const S = true, b = "app", T = I(define_process_env_UNI_SECURE_NETWORK_CONFIG_default), A = b, P = I('{"address":["127.0.0.1","169.254.25.233","10.193.27.96"],"servePort":7000,"debugPort":9000,"initialLaunchType":"local","skipFiles":["<node_internals>/**","E:/HBuilderX/plugins/unicloud/**/*.js"]}'), C = I('[{"provider":"aliyun","spaceName":"no-1","spaceId":"mp-6c4723ed-d7ef-445c-8f7f-0d87fc29747c","clientSecret":"hEwV/ZrTxDzb4SCH2ZNdNg==","endpoint":"https://api.next.bspapp.com"}]') || [];
  let O = "";
  try {
    O = "__UNI__B004C41";
  } catch (e2) {
  }
  let E, L = {};
  function R(e2, t2 = {}) {
    var n2, s2;
    return n2 = L, s2 = e2, Object.prototype.hasOwnProperty.call(n2, s2) || (L[e2] = t2), L[e2];
  }
  function U() {
    return E || (E = function() {
      if ("undefined" != typeof globalThis)
        return globalThis;
      if ("undefined" != typeof self)
        return self;
      if ("undefined" != typeof window)
        return window;
      function e2() {
        return this;
      }
      return void 0 !== e2() ? e2() : new Function("return this")();
    }(), E);
  }
  L = uni._globalUniCloudObj ? uni._globalUniCloudObj : uni._globalUniCloudObj = {};
  const N = ["invoke", "success", "fail", "complete"], D = R("_globalUniCloudInterceptor");
  function M(e2, t2) {
    D[e2] || (D[e2] = {}), g(t2) && Object.keys(t2).forEach((n2) => {
      N.indexOf(n2) > -1 && function(e3, t3, n3) {
        let s2 = D[e3][t3];
        s2 || (s2 = D[e3][t3] = []), -1 === s2.indexOf(n3) && m(n3) && s2.push(n3);
      }(e2, n2, t2[n2]);
    });
  }
  function q(e2, t2) {
    D[e2] || (D[e2] = {}), g(t2) ? Object.keys(t2).forEach((n2) => {
      N.indexOf(n2) > -1 && function(e3, t3, n3) {
        const s2 = D[e3][t3];
        if (!s2)
          return;
        const r2 = s2.indexOf(n3);
        r2 > -1 && s2.splice(r2, 1);
      }(e2, n2, t2[n2]);
    }) : delete D[e2];
  }
  function K(e2, t2) {
    return e2 && 0 !== e2.length ? e2.reduce((e3, n2) => e3.then(() => n2(t2)), Promise.resolve()) : Promise.resolve();
  }
  function F(e2, t2) {
    return D[e2] && D[e2][t2] || [];
  }
  function j(e2) {
    M("callObject", e2);
  }
  const $$1 = R("_globalUniCloudListener"), B = "response", W = "needLogin", H = "refreshToken", J = "clientdb", z = "cloudfunction", V = "cloudobject";
  function G(e2) {
    return $$1[e2] || ($$1[e2] = []), $$1[e2];
  }
  function Y(e2, t2) {
    const n2 = G(e2);
    n2.includes(t2) || n2.push(t2);
  }
  function Q(e2, t2) {
    const n2 = G(e2), s2 = n2.indexOf(t2);
    -1 !== s2 && n2.splice(s2, 1);
  }
  function X(e2, t2) {
    const n2 = G(e2);
    for (let e3 = 0; e3 < n2.length; e3++) {
      (0, n2[e3])(t2);
    }
  }
  let Z, ee = false;
  function te() {
    return Z || (Z = new Promise((e2) => {
      ee && e2(), function t2() {
        if ("function" == typeof getCurrentPages) {
          const t3 = getCurrentPages();
          t3 && t3[0] && (ee = true, e2());
        }
        ee || setTimeout(() => {
          t2();
        }, 30);
      }();
    }), Z);
  }
  function ne(e2) {
    const t2 = {};
    for (const n2 in e2) {
      const s2 = e2[n2];
      m(s2) && (t2[n2] = y(s2));
    }
    return t2;
  }
  class se extends Error {
    constructor(e2) {
      super(e2.message), this.errMsg = e2.message || e2.errMsg || "unknown system error", this.code = this.errCode = e2.code || e2.errCode || "SYSTEM_ERROR", this.errSubject = this.subject = e2.subject || e2.errSubject, this.cause = e2.cause, this.requestId = e2.requestId;
    }
    toJson(e2 = 0) {
      if (!(e2 >= 10))
        return e2++, { errCode: this.errCode, errMsg: this.errMsg, errSubject: this.errSubject, cause: this.cause && this.cause.toJson ? this.cause.toJson(e2) : this.cause };
    }
  }
  var re = { request: (e2) => uni.request(e2), uploadFile: (e2) => uni.uploadFile(e2), setStorageSync: (e2, t2) => uni.setStorageSync(e2, t2), getStorageSync: (e2) => uni.getStorageSync(e2), removeStorageSync: (e2) => uni.removeStorageSync(e2), clearStorageSync: () => uni.clearStorageSync(), connectSocket: (e2) => uni.connectSocket(e2) };
  function ie(e2) {
    return e2 && ie(e2.__v_raw) || e2;
  }
  function oe() {
    return { token: re.getStorageSync("uni_id_token") || re.getStorageSync("uniIdToken"), tokenExpired: re.getStorageSync("uni_id_token_expired") };
  }
  function ae({ token: e2, tokenExpired: t2 } = {}) {
    e2 && re.setStorageSync("uni_id_token", e2), t2 && re.setStorageSync("uni_id_token_expired", t2);
  }
  let ce, ue;
  function he() {
    return ce || (ce = uni.getSystemInfoSync()), ce;
  }
  function le() {
    let e2, t2;
    try {
      if (uni.getLaunchOptionsSync) {
        if (uni.getLaunchOptionsSync.toString().indexOf("not yet implemented") > -1)
          return;
        const { scene: n2, channel: s2 } = uni.getLaunchOptionsSync();
        e2 = s2, t2 = n2;
      }
    } catch (e3) {
    }
    return { channel: e2, scene: t2 };
  }
  let de = {};
  function pe() {
    const e2 = uni.getLocale && uni.getLocale() || "en";
    if (ue)
      return { ...de, ...ue, locale: e2, LOCALE: e2 };
    const t2 = he(), { deviceId: n2, osName: s2, uniPlatform: r2, appId: i2 } = t2, o2 = ["appId", "appLanguage", "appName", "appVersion", "appVersionCode", "appWgtVersion", "browserName", "browserVersion", "deviceBrand", "deviceId", "deviceModel", "deviceType", "osName", "osVersion", "romName", "romVersion", "ua", "hostName", "hostVersion", "uniPlatform", "uniRuntimeVersion", "uniRuntimeVersionCode", "uniCompilerVersion", "uniCompilerVersionCode"];
    for (const e3 in t2)
      Object.hasOwnProperty.call(t2, e3) && -1 === o2.indexOf(e3) && delete t2[e3];
    return ue = { PLATFORM: r2, OS: s2, APPID: i2, DEVICEID: n2, ...le(), ...t2 }, { ...de, ...ue, locale: e2, LOCALE: e2 };
  }
  var fe = { sign: function(e2, t2) {
    let n2 = "";
    return Object.keys(e2).sort().forEach(function(t3) {
      e2[t3] && (n2 = n2 + "&" + t3 + "=" + e2[t3]);
    }), n2 = n2.slice(1), i(n2, t2).toString();
  }, wrappedRequest: function(e2, t2) {
    return new Promise((n2, s2) => {
      t2(Object.assign(e2, { complete(e3) {
        e3 || (e3 = {});
        const t3 = e3.data && e3.data.header && e3.data.header["x-serverless-request-id"] || e3.header && e3.header["request-id"];
        if (!e3.statusCode || e3.statusCode >= 400) {
          const n3 = e3.data && e3.data.error && e3.data.error.code || "SYS_ERR", r3 = e3.data && e3.data.error && e3.data.error.message || e3.errMsg || "request:fail";
          return s2(new se({ code: n3, message: r3, requestId: t3 }));
        }
        const r2 = e3.data;
        if (r2.error)
          return s2(new se({ code: r2.error.code, message: r2.error.message, requestId: t3 }));
        r2.result = r2.data, r2.requestId = t3, delete r2.data, n2(r2);
      } }));
    });
  }, toBase64: function(e2) {
    return a.stringify(o.parse(e2));
  } };
  var ge = class {
    constructor(e2) {
      ["spaceId", "clientSecret"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e2, t2))
          throw new Error(`${t2} required`);
      }), this.config = Object.assign({}, { endpoint: 0 === e2.spaceId.indexOf("mp-") ? "https://api.next.bspapp.com" : "https://api.bspapp.com" }, e2), this.config.provider = "aliyun", this.config.requestUrl = this.config.endpoint + "/client", this.config.envType = this.config.envType || "public", this.config.accessTokenKey = "access_token_" + this.config.spaceId, this.adapter = re, this._getAccessTokenPromiseHub = new v({ createPromise: () => this.requestAuth(this.setupRequest({ method: "serverless.auth.user.anonymousAuthorize", params: "{}" }, "auth")).then((e3) => {
        if (!e3.result || !e3.result.accessToken)
          throw new se({ code: "AUTH_FAILED", message: "获取accessToken失败" });
        this.setAccessToken(e3.result.accessToken);
      }), retryRule: w });
    }
    get hasAccessToken() {
      return !!this.accessToken;
    }
    setAccessToken(e2) {
      this.accessToken = e2;
    }
    requestWrapped(e2) {
      return fe.wrappedRequest(e2, this.adapter.request);
    }
    requestAuth(e2) {
      return this.requestWrapped(e2);
    }
    request(e2, t2) {
      return Promise.resolve().then(() => this.hasAccessToken ? t2 ? this.requestWrapped(e2) : this.requestWrapped(e2).catch((t3) => new Promise((e3, n2) => {
        !t3 || "GATEWAY_INVALID_TOKEN" !== t3.code && "InvalidParameter.InvalidToken" !== t3.code ? n2(t3) : e3();
      }).then(() => this.getAccessToken()).then(() => {
        const t4 = this.rebuildRequest(e2);
        return this.request(t4, true);
      })) : this.getAccessToken().then(() => {
        const t3 = this.rebuildRequest(e2);
        return this.request(t3, true);
      }));
    }
    rebuildRequest(e2) {
      const t2 = Object.assign({}, e2);
      return t2.data.token = this.accessToken, t2.header["x-basement-token"] = this.accessToken, t2.header["x-serverless-sign"] = fe.sign(t2.data, this.config.clientSecret), t2;
    }
    setupRequest(e2, t2) {
      const n2 = Object.assign({}, e2, { spaceId: this.config.spaceId, timestamp: Date.now() }), s2 = { "Content-Type": "application/json" };
      return "auth" !== t2 && (n2.token = this.accessToken, s2["x-basement-token"] = this.accessToken), s2["x-serverless-sign"] = fe.sign(n2, this.config.clientSecret), { url: this.config.requestUrl, method: "POST", data: n2, dataType: "json", header: s2 };
    }
    getAccessToken() {
      return this._getAccessTokenPromiseHub.exec();
    }
    async authorize() {
      await this.getAccessToken();
    }
    callFunction(e2) {
      const t2 = { method: "serverless.function.runtime.invoke", params: JSON.stringify({ functionTarget: e2.name, functionArgs: e2.data || {} }) };
      return this.request({ ...this.setupRequest(t2), timeout: e2.timeout });
    }
    getOSSUploadOptionsFromPath(e2) {
      const t2 = { method: "serverless.file.resource.generateProximalSign", params: JSON.stringify(e2) };
      return this.request(this.setupRequest(t2));
    }
    uploadFileToOSS({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, onUploadProgress: i2 }) {
      return new Promise((o2, a2) => {
        const c2 = this.adapter.uploadFile({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, header: { "X-OSS-server-side-encrpytion": "AES256" }, success(e3) {
          e3 && e3.statusCode < 400 ? o2(e3) : a2(new se({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          a2(new se({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof i2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e3) => {
          i2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    reportOSSUpload(e2) {
      const t2 = { method: "serverless.file.resource.report", params: JSON.stringify(e2) };
      return this.request(this.setupRequest(t2));
    }
    async uploadFile({ filePath: e2, cloudPath: t2, fileType: n2 = "image", cloudPathAsRealPath: s2 = false, onUploadProgress: r2, config: i2 }) {
      if ("string" !== f(t2))
        throw new se({ code: "INVALID_PARAM", message: "cloudPath必须为字符串类型" });
      if (!(t2 = t2.trim()))
        throw new se({ code: "INVALID_PARAM", message: "cloudPath不可为空" });
      if (/:\/\//.test(t2))
        throw new se({ code: "INVALID_PARAM", message: "cloudPath不合法" });
      const o2 = i2 && i2.envType || this.config.envType;
      if (s2 && ("/" !== t2[0] && (t2 = "/" + t2), t2.indexOf("\\") > -1))
        throw new se({ code: "INVALID_PARAM", message: "使用cloudPath作为路径时，cloudPath不可包含“\\”" });
      const a2 = (await this.getOSSUploadOptionsFromPath({ env: o2, filename: s2 ? t2.split("/").pop() : t2, fileId: s2 ? t2 : void 0 })).result, c2 = "https://" + a2.cdnDomain + "/" + a2.ossPath, { securityToken: u2, accessKeyId: h2, signature: l2, host: d2, ossPath: p2, id: g2, policy: m2, ossCallbackUrl: y2 } = a2, _2 = { "Cache-Control": "max-age=2592000", "Content-Disposition": "attachment", OSSAccessKeyId: h2, Signature: l2, host: d2, id: g2, key: p2, policy: m2, success_action_status: 200 };
      if (u2 && (_2["x-oss-security-token"] = u2), y2) {
        const e3 = JSON.stringify({ callbackUrl: y2, callbackBody: JSON.stringify({ fileId: g2, spaceId: this.config.spaceId }), callbackBodyType: "application/json" });
        _2.callback = fe.toBase64(e3);
      }
      const w2 = { url: "https://" + a2.host, formData: _2, fileName: "file", name: "file", filePath: e2, fileType: n2 };
      if (await this.uploadFileToOSS(Object.assign({}, w2, { onUploadProgress: r2 })), y2)
        return { success: true, filePath: e2, fileID: c2 };
      if ((await this.reportOSSUpload({ id: g2 })).success)
        return { success: true, filePath: e2, fileID: c2 };
      throw new se({ code: "UPLOAD_FAILED", message: "文件上传失败" });
    }
    getTempFileURL({ fileList: e2 } = {}) {
      return new Promise((t2, n2) => {
        Array.isArray(e2) && 0 !== e2.length || n2(new se({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" })), t2({ fileList: e2.map((e3) => ({ fileID: e3, tempFileURL: e3 })) });
      });
    }
    async getFileInfo({ fileList: e2 } = {}) {
      if (!Array.isArray(e2) || 0 === e2.length)
        throw new se({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" });
      const t2 = { method: "serverless.file.resource.info", params: JSON.stringify({ id: e2.map((e3) => e3.split("?")[0]).join(",") }) };
      return { fileList: (await this.request(this.setupRequest(t2))).result };
    }
  };
  var me = { init(e2) {
    const t2 = new ge(e2), n2 = { signInAnonymously: function() {
      return t2.authorize();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } };
  const ye = "undefined" != typeof location && "http:" === location.protocol ? "http:" : "https:";
  var _e;
  !function(e2) {
    e2.local = "local", e2.none = "none", e2.session = "session";
  }(_e || (_e = {}));
  var we = function() {
  }, ve = n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, function(e3) {
      var t3 = n2, s2 = t3.lib, r2 = s2.WordArray, i2 = s2.Hasher, o2 = t3.algo, a2 = [], c2 = [];
      !function() {
        function t4(t5) {
          for (var n4 = e3.sqrt(t5), s4 = 2; s4 <= n4; s4++)
            if (!(t5 % s4))
              return false;
          return true;
        }
        function n3(e4) {
          return 4294967296 * (e4 - (0 | e4)) | 0;
        }
        for (var s3 = 2, r3 = 0; r3 < 64; )
          t4(s3) && (r3 < 8 && (a2[r3] = n3(e3.pow(s3, 0.5))), c2[r3] = n3(e3.pow(s3, 1 / 3)), r3++), s3++;
      }();
      var u2 = [], h2 = o2.SHA256 = i2.extend({ _doReset: function() {
        this._hash = new r2.init(a2.slice(0));
      }, _doProcessBlock: function(e4, t4) {
        for (var n3 = this._hash.words, s3 = n3[0], r3 = n3[1], i3 = n3[2], o3 = n3[3], a3 = n3[4], h3 = n3[5], l2 = n3[6], d2 = n3[7], p2 = 0; p2 < 64; p2++) {
          if (p2 < 16)
            u2[p2] = 0 | e4[t4 + p2];
          else {
            var f2 = u2[p2 - 15], g2 = (f2 << 25 | f2 >>> 7) ^ (f2 << 14 | f2 >>> 18) ^ f2 >>> 3, m2 = u2[p2 - 2], y2 = (m2 << 15 | m2 >>> 17) ^ (m2 << 13 | m2 >>> 19) ^ m2 >>> 10;
            u2[p2] = g2 + u2[p2 - 7] + y2 + u2[p2 - 16];
          }
          var _2 = s3 & r3 ^ s3 & i3 ^ r3 & i3, w2 = (s3 << 30 | s3 >>> 2) ^ (s3 << 19 | s3 >>> 13) ^ (s3 << 10 | s3 >>> 22), v2 = d2 + ((a3 << 26 | a3 >>> 6) ^ (a3 << 21 | a3 >>> 11) ^ (a3 << 7 | a3 >>> 25)) + (a3 & h3 ^ ~a3 & l2) + c2[p2] + u2[p2];
          d2 = l2, l2 = h3, h3 = a3, a3 = o3 + v2 | 0, o3 = i3, i3 = r3, r3 = s3, s3 = v2 + (w2 + _2) | 0;
        }
        n3[0] = n3[0] + s3 | 0, n3[1] = n3[1] + r3 | 0, n3[2] = n3[2] + i3 | 0, n3[3] = n3[3] + o3 | 0, n3[4] = n3[4] + a3 | 0, n3[5] = n3[5] + h3 | 0, n3[6] = n3[6] + l2 | 0, n3[7] = n3[7] + d2 | 0;
      }, _doFinalize: function() {
        var t4 = this._data, n3 = t4.words, s3 = 8 * this._nDataBytes, r3 = 8 * t4.sigBytes;
        return n3[r3 >>> 5] |= 128 << 24 - r3 % 32, n3[14 + (r3 + 64 >>> 9 << 4)] = e3.floor(s3 / 4294967296), n3[15 + (r3 + 64 >>> 9 << 4)] = s3, t4.sigBytes = 4 * n3.length, this._process(), this._hash;
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._hash = this._hash.clone(), e4;
      } });
      t3.SHA256 = i2._createHelper(h2), t3.HmacSHA256 = i2._createHmacHelper(h2);
    }(Math), n2.SHA256);
  }), Ie = ve, Se = n(function(e2, t2) {
    e2.exports = r.HmacSHA256;
  });
  const be = () => {
    let e2;
    if (!Promise) {
      e2 = () => {
      }, e2.promise = {};
      const t3 = () => {
        throw new se({ message: 'Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.' });
      };
      return Object.defineProperty(e2.promise, "then", { get: t3 }), Object.defineProperty(e2.promise, "catch", { get: t3 }), e2;
    }
    const t2 = new Promise((t3, n2) => {
      e2 = (e3, s2) => e3 ? n2(e3) : t3(s2);
    });
    return e2.promise = t2, e2;
  };
  function ke(e2) {
    return void 0 === e2;
  }
  function Te(e2) {
    return "[object Null]" === Object.prototype.toString.call(e2);
  }
  function Ae(e2 = "") {
    return e2.replace(/([\s\S]+)\s+(请前往云开发AI小助手查看问题：.*)/, "$1");
  }
  function Pe(e2 = 32) {
    const t2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n2 = t2.length;
    let s2 = "";
    for (let r2 = 0; r2 < e2; r2++)
      s2 += t2.charAt(Math.floor(Math.random() * n2));
    return s2;
  }
  var Ce;
  function xe(e2) {
    const t2 = (n2 = e2, "[object Array]" === Object.prototype.toString.call(n2) ? e2 : [e2]);
    var n2;
    for (const e3 of t2) {
      const { isMatch: t3, genAdapter: n3, runtime: s2 } = e3;
      if (t3())
        return { adapter: n3(), runtime: s2 };
    }
  }
  !function(e2) {
    e2.WEB = "web", e2.WX_MP = "wx_mp";
  }(Ce || (Ce = {}));
  const Oe = { adapter: null, runtime: void 0 }, Ee = ["anonymousUuidKey"];
  class Le extends we {
    constructor() {
      super(), Oe.adapter.root.tcbObject || (Oe.adapter.root.tcbObject = {});
    }
    setItem(e2, t2) {
      Oe.adapter.root.tcbObject[e2] = t2;
    }
    getItem(e2) {
      return Oe.adapter.root.tcbObject[e2];
    }
    removeItem(e2) {
      delete Oe.adapter.root.tcbObject[e2];
    }
    clear() {
      delete Oe.adapter.root.tcbObject;
    }
  }
  function Re(e2, t2) {
    switch (e2) {
      case "local":
        return t2.localStorage || new Le();
      case "none":
        return new Le();
      default:
        return t2.sessionStorage || new Le();
    }
  }
  class Ue {
    constructor(e2) {
      if (!this._storage) {
        this._persistence = Oe.adapter.primaryStorage || e2.persistence, this._storage = Re(this._persistence, Oe.adapter);
        const t2 = `access_token_${e2.env}`, n2 = `access_token_expire_${e2.env}`, s2 = `refresh_token_${e2.env}`, r2 = `anonymous_uuid_${e2.env}`, i2 = `login_type_${e2.env}`, o2 = "device_id", a2 = `token_type_${e2.env}`, c2 = `user_info_${e2.env}`;
        this.keys = { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2, anonymousUuidKey: r2, loginTypeKey: i2, userInfoKey: c2, deviceIdKey: o2, tokenTypeKey: a2 };
      }
    }
    updatePersistence(e2) {
      if (e2 === this._persistence)
        return;
      const t2 = "local" === this._persistence;
      this._persistence = e2;
      const n2 = Re(e2, Oe.adapter);
      for (const e3 in this.keys) {
        const s2 = this.keys[e3];
        if (t2 && Ee.includes(e3))
          continue;
        const r2 = this._storage.getItem(s2);
        ke(r2) || Te(r2) || (n2.setItem(s2, r2), this._storage.removeItem(s2));
      }
      this._storage = n2;
    }
    setStore(e2, t2, n2) {
      if (!this._storage)
        return;
      const s2 = { version: n2 || "localCachev1", content: t2 }, r2 = JSON.stringify(s2);
      try {
        this._storage.setItem(e2, r2);
      } catch (e3) {
        throw e3;
      }
    }
    getStore(e2, t2) {
      try {
        if (!this._storage)
          return;
      } catch (e3) {
        return "";
      }
      t2 = t2 || "localCachev1";
      const n2 = this._storage.getItem(e2);
      if (!n2)
        return "";
      if (n2.indexOf(t2) >= 0) {
        return JSON.parse(n2).content;
      }
      return "";
    }
    removeStore(e2) {
      this._storage.removeItem(e2);
    }
  }
  const Ne = {}, De = {};
  function Me(e2) {
    return Ne[e2];
  }
  class qe {
    constructor(e2, t2) {
      this.data = t2 || null, this.name = e2;
    }
  }
  class Ke extends qe {
    constructor(e2, t2) {
      super("error", { error: e2, data: t2 }), this.error = e2;
    }
  }
  const Fe = new class {
    constructor() {
      this._listeners = {};
    }
    on(e2, t2) {
      return function(e3, t3, n2) {
        n2[e3] = n2[e3] || [], n2[e3].push(t3);
      }(e2, t2, this._listeners), this;
    }
    off(e2, t2) {
      return function(e3, t3, n2) {
        if (n2 && n2[e3]) {
          const s2 = n2[e3].indexOf(t3);
          -1 !== s2 && n2[e3].splice(s2, 1);
        }
      }(e2, t2, this._listeners), this;
    }
    fire(e2, t2) {
      if (e2 instanceof Ke)
        return console.error(e2.error), this;
      const n2 = "string" == typeof e2 ? new qe(e2, t2 || {}) : e2;
      const s2 = n2.name;
      if (this._listens(s2)) {
        n2.target = this;
        const e3 = this._listeners[s2] ? [...this._listeners[s2]] : [];
        for (const t3 of e3)
          t3.call(this, n2);
      }
      return this;
    }
    _listens(e2) {
      return this._listeners[e2] && this._listeners[e2].length > 0;
    }
  }();
  function je(e2, t2) {
    Fe.on(e2, t2);
  }
  function $e(e2, t2 = {}) {
    Fe.fire(e2, t2);
  }
  function Be(e2, t2) {
    Fe.off(e2, t2);
  }
  const We = "loginStateChanged", He = "loginStateExpire", Je = "loginTypeChanged", ze = "anonymousConverted", Ve = "refreshAccessToken";
  var Ge;
  !function(e2) {
    e2.ANONYMOUS = "ANONYMOUS", e2.WECHAT = "WECHAT", e2.WECHAT_PUBLIC = "WECHAT-PUBLIC", e2.WECHAT_OPEN = "WECHAT-OPEN", e2.CUSTOM = "CUSTOM", e2.EMAIL = "EMAIL", e2.USERNAME = "USERNAME", e2.NULL = "NULL";
  }(Ge || (Ge = {}));
  class Ye {
    constructor() {
      this._fnPromiseMap = /* @__PURE__ */ new Map();
    }
    async run(e2, t2) {
      let n2 = this._fnPromiseMap.get(e2);
      return n2 || (n2 = new Promise(async (n3, s2) => {
        try {
          await this._runIdlePromise();
          const s3 = t2();
          n3(await s3);
        } catch (e3) {
          s2(e3);
        } finally {
          this._fnPromiseMap.delete(e2);
        }
      }), this._fnPromiseMap.set(e2, n2)), n2;
    }
    _runIdlePromise() {
      return Promise.resolve();
    }
  }
  class Qe {
    constructor(e2) {
      this._singlePromise = new Ye(), this._cache = Me(e2.env), this._baseURL = `https://${e2.env}.ap-shanghai.tcb-api.tencentcloudapi.com`, this._reqClass = new Oe.adapter.reqClass({ timeout: e2.timeout, timeoutMsg: `请求在${e2.timeout / 1e3}s内未完成，已中断`, restrictedMethods: ["post"] });
    }
    _getDeviceId() {
      if (this._deviceID)
        return this._deviceID;
      const { deviceIdKey: e2 } = this._cache.keys;
      let t2 = this._cache.getStore(e2);
      return "string" == typeof t2 && t2.length >= 16 && t2.length <= 48 || (t2 = Pe(), this._cache.setStore(e2, t2)), this._deviceID = t2, t2;
    }
    async _request(e2, t2, n2 = {}) {
      const s2 = { "x-request-id": Pe(), "x-device-id": this._getDeviceId() };
      if (n2.withAccessToken) {
        const { tokenTypeKey: e3 } = this._cache.keys, t3 = await this.getAccessToken(), n3 = this._cache.getStore(e3);
        s2.authorization = `${n3} ${t3}`;
      }
      return this._reqClass["get" === n2.method ? "get" : "post"]({ url: `${this._baseURL}${e2}`, data: t2, headers: s2 });
    }
    async _fetchAccessToken() {
      const { loginTypeKey: e2, accessTokenKey: t2, accessTokenExpireKey: n2, tokenTypeKey: s2 } = this._cache.keys, r2 = this._cache.getStore(e2);
      if (r2 && r2 !== Ge.ANONYMOUS)
        throw new se({ code: "INVALID_OPERATION", message: "非匿名登录不支持刷新 access token" });
      const i2 = await this._singlePromise.run("fetchAccessToken", async () => (await this._request("/auth/v1/signin/anonymously", {}, { method: "post" })).data), { access_token: o2, expires_in: a2, token_type: c2 } = i2;
      return this._cache.setStore(s2, c2), this._cache.setStore(t2, o2), this._cache.setStore(n2, Date.now() + 1e3 * a2), o2;
    }
    isAccessTokenExpired(e2, t2) {
      let n2 = true;
      return e2 && t2 && (n2 = t2 < Date.now()), n2;
    }
    async getAccessToken() {
      const { accessTokenKey: e2, accessTokenExpireKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e2), s2 = this._cache.getStore(t2);
      return this.isAccessTokenExpired(n2, s2) ? this._fetchAccessToken() : n2;
    }
    async refreshAccessToken() {
      const { accessTokenKey: e2, accessTokenExpireKey: t2, loginTypeKey: n2 } = this._cache.keys;
      return this._cache.removeStore(e2), this._cache.removeStore(t2), this._cache.setStore(n2, Ge.ANONYMOUS), this.getAccessToken();
    }
    async getUserInfo() {
      return this._singlePromise.run("getUserInfo", async () => (await this._request("/auth/v1/user/me", {}, { withAccessToken: true, method: "get" })).data);
    }
  }
  const Xe = ["auth.getJwt", "auth.logout", "auth.signInWithTicket", "auth.signInAnonymously", "auth.signIn", "auth.fetchAccessTokenWithRefreshToken", "auth.signUpWithEmailAndPassword", "auth.activateEndUserMail", "auth.sendPasswordResetEmail", "auth.resetPasswordWithToken", "auth.isUsernameRegistered"], Ze = { "X-SDK-Version": "1.3.5" };
  function et(e2, t2, n2) {
    const s2 = e2[t2];
    e2[t2] = function(t3) {
      const r2 = {}, i2 = {};
      n2.forEach((n3) => {
        const { data: s3, headers: o3 } = n3.call(e2, t3);
        Object.assign(r2, s3), Object.assign(i2, o3);
      });
      const o2 = t3.data;
      return o2 && (() => {
        var e3;
        if (e3 = o2, "[object FormData]" !== Object.prototype.toString.call(e3))
          t3.data = { ...o2, ...r2 };
        else
          for (const e4 in r2)
            o2.append(e4, r2[e4]);
      })(), t3.headers = { ...t3.headers || {}, ...i2 }, s2.call(e2, t3);
    };
  }
  function tt() {
    const e2 = Math.random().toString(16).slice(2);
    return { data: { seqId: e2 }, headers: { ...Ze, "x-seqid": e2 } };
  }
  class nt {
    constructor(e2 = {}) {
      var t2;
      this.config = e2, this._reqClass = new Oe.adapter.reqClass({ timeout: this.config.timeout, timeoutMsg: `请求在${this.config.timeout / 1e3}s内未完成，已中断`, restrictedMethods: ["post"] }), this._cache = Me(this.config.env), this._localCache = (t2 = this.config.env, De[t2]), this.oauth = new Qe(this.config), et(this._reqClass, "post", [tt]), et(this._reqClass, "upload", [tt]), et(this._reqClass, "download", [tt]);
    }
    async post(e2) {
      return await this._reqClass.post(e2);
    }
    async upload(e2) {
      return await this._reqClass.upload(e2);
    }
    async download(e2) {
      return await this._reqClass.download(e2);
    }
    async refreshAccessToken() {
      let e2, t2;
      this._refreshAccessTokenPromise || (this._refreshAccessTokenPromise = this._refreshAccessToken());
      try {
        e2 = await this._refreshAccessTokenPromise;
      } catch (e3) {
        t2 = e3;
      }
      if (this._refreshAccessTokenPromise = null, this._shouldRefreshAccessTokenHook = null, t2)
        throw t2;
      return e2;
    }
    async _refreshAccessToken() {
      const { accessTokenKey: e2, accessTokenExpireKey: t2, refreshTokenKey: n2, loginTypeKey: s2, anonymousUuidKey: r2 } = this._cache.keys;
      this._cache.removeStore(e2), this._cache.removeStore(t2);
      let i2 = this._cache.getStore(n2);
      if (!i2)
        throw new se({ message: "未登录CloudBase" });
      const o2 = { refresh_token: i2 }, a2 = await this.request("auth.fetchAccessTokenWithRefreshToken", o2);
      if (a2.data.code) {
        const { code: e3 } = a2.data;
        if ("SIGN_PARAM_INVALID" === e3 || "REFRESH_TOKEN_EXPIRED" === e3 || "INVALID_REFRESH_TOKEN" === e3) {
          if (this._cache.getStore(s2) === Ge.ANONYMOUS && "INVALID_REFRESH_TOKEN" === e3) {
            const e4 = this._cache.getStore(r2), t3 = this._cache.getStore(n2), s3 = await this.send("auth.signInAnonymously", { anonymous_uuid: e4, refresh_token: t3 });
            return this.setRefreshToken(s3.refresh_token), this._refreshAccessToken();
          }
          $e(He), this._cache.removeStore(n2);
        }
        throw new se({ code: a2.data.code, message: `刷新access token失败：${a2.data.code}` });
      }
      if (a2.data.access_token)
        return $e(Ve), this._cache.setStore(e2, a2.data.access_token), this._cache.setStore(t2, a2.data.access_token_expire + Date.now()), { accessToken: a2.data.access_token, accessTokenExpire: a2.data.access_token_expire };
      a2.data.refresh_token && (this._cache.removeStore(n2), this._cache.setStore(n2, a2.data.refresh_token), this._refreshAccessToken());
    }
    async getAccessToken() {
      const { accessTokenKey: e2, accessTokenExpireKey: t2, refreshTokenKey: n2 } = this._cache.keys;
      if (!this._cache.getStore(n2))
        throw new se({ message: "refresh token不存在，登录状态异常" });
      let s2 = this._cache.getStore(e2), r2 = this._cache.getStore(t2), i2 = true;
      return this._shouldRefreshAccessTokenHook && !await this._shouldRefreshAccessTokenHook(s2, r2) && (i2 = false), (!s2 || !r2 || r2 < Date.now()) && i2 ? this.refreshAccessToken() : { accessToken: s2, accessTokenExpire: r2 };
    }
    async request(e2, t2, n2) {
      const s2 = `x-tcb-trace_${this.config.env}`;
      let r2 = "application/x-www-form-urlencoded";
      const i2 = { action: e2, env: this.config.env, dataVersion: "2019-08-16", ...t2 };
      let o2;
      if (-1 === Xe.indexOf(e2) && (this._cache.keys, i2.access_token = await this.oauth.getAccessToken()), "storage.uploadFile" === e2) {
        o2 = new FormData();
        for (let e3 in o2)
          o2.hasOwnProperty(e3) && void 0 !== o2[e3] && o2.append(e3, i2[e3]);
        r2 = "multipart/form-data";
      } else {
        r2 = "application/json", o2 = {};
        for (let e3 in i2)
          void 0 !== i2[e3] && (o2[e3] = i2[e3]);
      }
      let a2 = { headers: { "content-type": r2 } };
      n2 && n2.timeout && (a2.timeout = n2.timeout), n2 && n2.onUploadProgress && (a2.onUploadProgress = n2.onUploadProgress);
      const c2 = this._localCache.getStore(s2);
      c2 && (a2.headers["X-TCB-Trace"] = c2);
      const { parse: u2, inQuery: h2, search: l2 } = t2;
      let d2 = { env: this.config.env };
      u2 && (d2.parse = true), h2 && (d2 = { ...h2, ...d2 });
      let p2 = function(e3, t3, n3 = {}) {
        const s3 = /\?/.test(t3);
        let r3 = "";
        for (let e4 in n3)
          "" === r3 ? !s3 && (t3 += "?") : r3 += "&", r3 += `${e4}=${encodeURIComponent(n3[e4])}`;
        return /^http(s)?\:\/\//.test(t3 += r3) ? t3 : `${e3}${t3}`;
      }(ye, "//tcb-api.tencentcloudapi.com/web", d2);
      l2 && (p2 += l2);
      const f2 = await this.post({ url: p2, data: o2, ...a2 }), g2 = f2.header && f2.header["x-tcb-trace"];
      if (g2 && this._localCache.setStore(s2, g2), 200 !== Number(f2.status) && 200 !== Number(f2.statusCode) || !f2.data)
        throw new se({ code: "NETWORK_ERROR", message: "network request error" });
      return f2;
    }
    async send(e2, t2 = {}, n2 = {}) {
      const s2 = await this.request(e2, t2, { ...n2, onUploadProgress: t2.onUploadProgress });
      if (("ACCESS_TOKEN_DISABLED" === s2.data.code || "ACCESS_TOKEN_EXPIRED" === s2.data.code) && -1 === Xe.indexOf(e2)) {
        await this.oauth.refreshAccessToken();
        const s3 = await this.request(e2, t2, { ...n2, onUploadProgress: t2.onUploadProgress });
        if (s3.data.code)
          throw new se({ code: s3.data.code, message: Ae(s3.data.message) });
        return s3.data;
      }
      if (s2.data.code)
        throw new se({ code: s2.data.code, message: Ae(s2.data.message) });
      return s2.data;
    }
    setRefreshToken(e2) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e2);
    }
  }
  const st = {};
  function rt(e2) {
    return st[e2];
  }
  class it {
    constructor(e2) {
      this.config = e2, this._cache = Me(e2.env), this._request = rt(e2.env);
    }
    setRefreshToken(e2) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e2);
    }
    setAccessToken(e2, t2) {
      const { accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys;
      this._cache.setStore(n2, e2), this._cache.setStore(s2, t2);
    }
    async refreshUserInfo() {
      const { data: e2 } = await this._request.send("auth.getUserInfo", {});
      return this.setLocalUserInfo(e2), e2;
    }
    setLocalUserInfo(e2) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e2);
    }
  }
  class ot {
    constructor(e2) {
      if (!e2)
        throw new se({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._envId = e2, this._cache = Me(this._envId), this._request = rt(this._envId), this.setUserInfo();
    }
    linkWithTicket(e2) {
      if ("string" != typeof e2)
        throw new se({ code: "PARAM_ERROR", message: "ticket must be string" });
      return this._request.send("auth.linkWithTicket", { ticket: e2 });
    }
    linkWithRedirect(e2) {
      e2.signInWithRedirect();
    }
    updatePassword(e2, t2) {
      return this._request.send("auth.updatePassword", { oldPassword: t2, newPassword: e2 });
    }
    updateEmail(e2) {
      return this._request.send("auth.updateEmail", { newEmail: e2 });
    }
    updateUsername(e2) {
      if ("string" != typeof e2)
        throw new se({ code: "PARAM_ERROR", message: "username must be a string" });
      return this._request.send("auth.updateUsername", { username: e2 });
    }
    async getLinkedUidList() {
      const { data: e2 } = await this._request.send("auth.getLinkedUidList", {});
      let t2 = false;
      const { users: n2 } = e2;
      return n2.forEach((e3) => {
        e3.wxOpenId && e3.wxPublicId && (t2 = true);
      }), { users: n2, hasPrimaryUid: t2 };
    }
    setPrimaryUid(e2) {
      return this._request.send("auth.setPrimaryUid", { uid: e2 });
    }
    unlink(e2) {
      return this._request.send("auth.unlink", { platform: e2 });
    }
    async update(e2) {
      const { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 } = e2, { data: a2 } = await this._request.send("auth.updateUserInfo", { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 });
      this.setLocalUserInfo(a2);
    }
    async refresh() {
      const e2 = await this._request.oauth.getUserInfo();
      return this.setLocalUserInfo(e2), e2;
    }
    setUserInfo() {
      const { userInfoKey: e2 } = this._cache.keys, t2 = this._cache.getStore(e2);
      ["uid", "loginType", "openid", "wxOpenId", "wxPublicId", "unionId", "qqMiniOpenId", "email", "hasPassword", "customUserId", "nickName", "gender", "avatarUrl"].forEach((e3) => {
        this[e3] = t2[e3];
      }), this.location = { country: t2.country, province: t2.province, city: t2.city };
    }
    setLocalUserInfo(e2) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e2), this.setUserInfo();
    }
  }
  class at {
    constructor(e2) {
      if (!e2)
        throw new se({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._cache = Me(e2);
      const { refreshTokenKey: t2, accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys, r2 = this._cache.getStore(t2), i2 = this._cache.getStore(n2), o2 = this._cache.getStore(s2);
      this.credential = { refreshToken: r2, accessToken: i2, accessTokenExpire: o2 }, this.user = new ot(e2);
    }
    get isAnonymousAuth() {
      return this.loginType === Ge.ANONYMOUS;
    }
    get isCustomAuth() {
      return this.loginType === Ge.CUSTOM;
    }
    get isWeixinAuth() {
      return this.loginType === Ge.WECHAT || this.loginType === Ge.WECHAT_OPEN || this.loginType === Ge.WECHAT_PUBLIC;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
  }
  class ct extends it {
    async signIn() {
      this._cache.updatePersistence("local"), await this._request.oauth.getAccessToken(), $e(We), $e(Je, { env: this.config.env, loginType: Ge.ANONYMOUS, persistence: "local" });
      const e2 = new at(this.config.env);
      return await e2.user.refresh(), e2;
    }
    async linkAndRetrieveDataWithTicket(e2) {
      const { anonymousUuidKey: t2, refreshTokenKey: n2 } = this._cache.keys, s2 = this._cache.getStore(t2), r2 = this._cache.getStore(n2), i2 = await this._request.send("auth.linkAndRetrieveDataWithTicket", { anonymous_uuid: s2, refresh_token: r2, ticket: e2 });
      if (i2.refresh_token)
        return this._clearAnonymousUUID(), this.setRefreshToken(i2.refresh_token), await this._request.refreshAccessToken(), $e(ze, { env: this.config.env }), $e(Je, { loginType: Ge.CUSTOM, persistence: "local" }), { credential: { refreshToken: i2.refresh_token } };
      throw new se({ message: "匿名转化失败" });
    }
    _setAnonymousUUID(e2) {
      const { anonymousUuidKey: t2, loginTypeKey: n2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.setStore(t2, e2), this._cache.setStore(n2, Ge.ANONYMOUS);
    }
    _clearAnonymousUUID() {
      this._cache.removeStore(this._cache.keys.anonymousUuidKey);
    }
  }
  class ut extends it {
    async signIn(e2) {
      if ("string" != typeof e2)
        throw new se({ code: "PARAM_ERROR", message: "ticket must be a string" });
      const { refreshTokenKey: t2 } = this._cache.keys, n2 = await this._request.send("auth.signInWithTicket", { ticket: e2, refresh_token: this._cache.getStore(t2) || "" });
      if (n2.refresh_token)
        return this.setRefreshToken(n2.refresh_token), await this._request.refreshAccessToken(), $e(We), $e(Je, { env: this.config.env, loginType: Ge.CUSTOM, persistence: this.config.persistence }), await this.refreshUserInfo(), new at(this.config.env);
      throw new se({ message: "自定义登录失败" });
    }
  }
  class ht extends it {
    async signIn(e2, t2) {
      if ("string" != typeof e2)
        throw new se({ code: "PARAM_ERROR", message: "email must be a string" });
      const { refreshTokenKey: n2 } = this._cache.keys, s2 = await this._request.send("auth.signIn", { loginType: "EMAIL", email: e2, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token: i2, access_token_expire: o2 } = s2;
      if (r2)
        return this.setRefreshToken(r2), i2 && o2 ? this.setAccessToken(i2, o2) : await this._request.refreshAccessToken(), await this.refreshUserInfo(), $e(We), $e(Je, { env: this.config.env, loginType: Ge.EMAIL, persistence: this.config.persistence }), new at(this.config.env);
      throw s2.code ? new se({ code: s2.code, message: `邮箱登录失败: ${s2.message}` }) : new se({ message: "邮箱登录失败" });
    }
    async activate(e2) {
      return this._request.send("auth.activateEndUserMail", { token: e2 });
    }
    async resetPasswordWithToken(e2, t2) {
      return this._request.send("auth.resetPasswordWithToken", { token: e2, newPassword: t2 });
    }
  }
  class lt extends it {
    async signIn(e2, t2) {
      if ("string" != typeof e2)
        throw new se({ code: "PARAM_ERROR", message: "username must be a string" });
      "string" != typeof t2 && (t2 = "", console.warn("password is empty"));
      const { refreshTokenKey: n2 } = this._cache.keys, s2 = await this._request.send("auth.signIn", { loginType: Ge.USERNAME, username: e2, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token_expire: i2, access_token: o2 } = s2;
      if (r2)
        return this.setRefreshToken(r2), o2 && i2 ? this.setAccessToken(o2, i2) : await this._request.refreshAccessToken(), await this.refreshUserInfo(), $e(We), $e(Je, { env: this.config.env, loginType: Ge.USERNAME, persistence: this.config.persistence }), new at(this.config.env);
      throw s2.code ? new se({ code: s2.code, message: `用户名密码登录失败: ${s2.message}` }) : new se({ message: "用户名密码登录失败" });
    }
  }
  class dt {
    constructor(e2) {
      this.config = e2, this._cache = Me(e2.env), this._request = rt(e2.env), this._onAnonymousConverted = this._onAnonymousConverted.bind(this), this._onLoginTypeChanged = this._onLoginTypeChanged.bind(this), je(Je, this._onLoginTypeChanged);
    }
    get currentUser() {
      const e2 = this.hasLoginState();
      return e2 && e2.user || null;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
    anonymousAuthProvider() {
      return new ct(this.config);
    }
    customAuthProvider() {
      return new ut(this.config);
    }
    emailAuthProvider() {
      return new ht(this.config);
    }
    usernameAuthProvider() {
      return new lt(this.config);
    }
    async signInAnonymously() {
      return new ct(this.config).signIn();
    }
    async signInWithEmailAndPassword(e2, t2) {
      return new ht(this.config).signIn(e2, t2);
    }
    signInWithUsernameAndPassword(e2, t2) {
      return new lt(this.config).signIn(e2, t2);
    }
    async linkAndRetrieveDataWithTicket(e2) {
      this._anonymousAuthProvider || (this._anonymousAuthProvider = new ct(this.config)), je(ze, this._onAnonymousConverted);
      return await this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e2);
    }
    async signOut() {
      if (this.loginType === Ge.ANONYMOUS)
        throw new se({ message: "匿名用户不支持登出操作" });
      const { refreshTokenKey: e2, accessTokenKey: t2, accessTokenExpireKey: n2 } = this._cache.keys, s2 = this._cache.getStore(e2);
      if (!s2)
        return;
      const r2 = await this._request.send("auth.logout", { refresh_token: s2 });
      return this._cache.removeStore(e2), this._cache.removeStore(t2), this._cache.removeStore(n2), $e(We), $e(Je, { env: this.config.env, loginType: Ge.NULL, persistence: this.config.persistence }), r2;
    }
    async signUpWithEmailAndPassword(e2, t2) {
      return this._request.send("auth.signUpWithEmailAndPassword", { email: e2, password: t2 });
    }
    async sendPasswordResetEmail(e2) {
      return this._request.send("auth.sendPasswordResetEmail", { email: e2 });
    }
    onLoginStateChanged(e2) {
      je(We, () => {
        const t3 = this.hasLoginState();
        e2.call(this, t3);
      });
      const t2 = this.hasLoginState();
      e2.call(this, t2);
    }
    onLoginStateExpired(e2) {
      je(He, e2.bind(this));
    }
    onAccessTokenRefreshed(e2) {
      je(Ve, e2.bind(this));
    }
    onAnonymousConverted(e2) {
      je(ze, e2.bind(this));
    }
    onLoginTypeChanged(e2) {
      je(Je, () => {
        const t2 = this.hasLoginState();
        e2.call(this, t2);
      });
    }
    async getAccessToken() {
      return { accessToken: (await this._request.getAccessToken()).accessToken, env: this.config.env };
    }
    hasLoginState() {
      const { accessTokenKey: e2, accessTokenExpireKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e2), s2 = this._cache.getStore(t2);
      return this._request.oauth.isAccessTokenExpired(n2, s2) ? null : new at(this.config.env);
    }
    async isUsernameRegistered(e2) {
      if ("string" != typeof e2)
        throw new se({ code: "PARAM_ERROR", message: "username must be a string" });
      const { data: t2 } = await this._request.send("auth.isUsernameRegistered", { username: e2 });
      return t2 && t2.isRegistered;
    }
    getLoginState() {
      return Promise.resolve(this.hasLoginState());
    }
    async signInWithTicket(e2) {
      return new ut(this.config).signIn(e2);
    }
    shouldRefreshAccessToken(e2) {
      this._request._shouldRefreshAccessTokenHook = e2.bind(this);
    }
    getUserInfo() {
      return this._request.send("auth.getUserInfo", {}).then((e2) => e2.code ? e2 : { ...e2.data, requestId: e2.seqId });
    }
    getAuthHeader() {
      const { refreshTokenKey: e2, accessTokenKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e2);
      return { "x-cloudbase-credentials": this._cache.getStore(t2) + "/@@/" + n2 };
    }
    _onAnonymousConverted(e2) {
      const { env: t2 } = e2.data;
      t2 === this.config.env && this._cache.updatePersistence(this.config.persistence);
    }
    _onLoginTypeChanged(e2) {
      const { loginType: t2, persistence: n2, env: s2 } = e2.data;
      s2 === this.config.env && (this._cache.updatePersistence(n2), this._cache.setStore(this._cache.keys.loginTypeKey, t2));
    }
  }
  const pt = function(e2, t2) {
    t2 = t2 || be();
    const n2 = rt(this.config.env), { cloudPath: s2, filePath: r2, onUploadProgress: i2, fileType: o2 = "image" } = e2;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e3) => {
      const { data: { url: a2, authorization: c2, token: u2, fileId: h2, cosFileId: l2 }, requestId: d2 } = e3, p2 = { key: s2, signature: c2, "x-cos-meta-fileid": l2, success_action_status: "201", "x-cos-security-token": u2 };
      n2.upload({ url: a2, data: p2, file: r2, name: s2, fileType: o2, onUploadProgress: i2 }).then((e4) => {
        201 === e4.statusCode ? t2(null, { fileID: h2, requestId: d2 }) : t2(new se({ code: "STORAGE_REQUEST_FAIL", message: `STORAGE_REQUEST_FAIL: ${e4.data}` }));
      }).catch((e4) => {
        t2(e4);
      });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, ft = function(e2, t2) {
    t2 = t2 || be();
    const n2 = rt(this.config.env), { cloudPath: s2 } = e2;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e3) => {
      t2(null, e3);
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, gt = function({ fileList: e2 }, t2) {
    if (t2 = t2 || be(), !e2 || !Array.isArray(e2))
      return { code: "INVALID_PARAM", message: "fileList必须是非空的数组" };
    for (let t3 of e2)
      if (!t3 || "string" != typeof t3)
        return { code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" };
    const n2 = { fileid_list: e2 };
    return rt(this.config.env).send("storage.batchDeleteFile", n2).then((e3) => {
      e3.code ? t2(null, e3) : t2(null, { fileList: e3.data.delete_list, requestId: e3.requestId });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, mt = function({ fileList: e2 }, t2) {
    t2 = t2 || be(), e2 && Array.isArray(e2) || t2(null, { code: "INVALID_PARAM", message: "fileList必须是非空的数组" });
    let n2 = [];
    for (let s3 of e2)
      "object" == typeof s3 ? (s3.hasOwnProperty("fileID") && s3.hasOwnProperty("maxAge") || t2(null, { code: "INVALID_PARAM", message: "fileList的元素必须是包含fileID和maxAge的对象" }), n2.push({ fileid: s3.fileID, max_age: s3.maxAge })) : "string" == typeof s3 ? n2.push({ fileid: s3 }) : t2(null, { code: "INVALID_PARAM", message: "fileList的元素必须是字符串" });
    const s2 = { file_list: n2 };
    return rt(this.config.env).send("storage.batchGetDownloadUrl", s2).then((e3) => {
      e3.code ? t2(null, e3) : t2(null, { fileList: e3.data.download_list, requestId: e3.requestId });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, yt = async function({ fileID: e2 }, t2) {
    const n2 = (await mt.call(this, { fileList: [{ fileID: e2, maxAge: 600 }] })).fileList[0];
    if ("SUCCESS" !== n2.code)
      return t2 ? t2(n2) : new Promise((e3) => {
        e3(n2);
      });
    const s2 = rt(this.config.env);
    let r2 = n2.download_url;
    if (r2 = encodeURI(r2), !t2)
      return s2.download({ url: r2 });
    t2(await s2.download({ url: r2 }));
  }, _t = function({ name: e2, data: t2, query: n2, parse: s2, search: r2, timeout: i2 }, o2) {
    const a2 = o2 || be();
    let c2;
    try {
      c2 = t2 ? JSON.stringify(t2) : "";
    } catch (e3) {
      return Promise.reject(e3);
    }
    if (!e2)
      return Promise.reject(new se({ code: "PARAM_ERROR", message: "函数名不能为空" }));
    const u2 = { inQuery: n2, parse: s2, search: r2, function_name: e2, request_data: c2 };
    return rt(this.config.env).send("functions.invokeFunction", u2, { timeout: i2 }).then((e3) => {
      if (e3.code)
        a2(null, e3);
      else {
        let t3 = e3.data.response_data;
        if (s2)
          a2(null, { result: t3, requestId: e3.requestId });
        else
          try {
            t3 = JSON.parse(e3.data.response_data), a2(null, { result: t3, requestId: e3.requestId });
          } catch (e4) {
            a2(new se({ message: "response data must be json" }));
          }
      }
      return a2.promise;
    }).catch((e3) => {
      a2(e3);
    }), a2.promise;
  }, wt = { timeout: 15e3, persistence: "session" }, vt = {};
  class It {
    constructor(e2) {
      this.config = e2 || this.config, this.authObj = void 0;
    }
    init(e2) {
      switch (Oe.adapter || (this.requestClient = new Oe.adapter.reqClass({ timeout: e2.timeout || 5e3, timeoutMsg: `请求在${(e2.timeout || 5e3) / 1e3}s内未完成，已中断` })), this.config = { ...wt, ...e2 }, true) {
        case this.config.timeout > 6e5:
          console.warn("timeout大于可配置上限[10分钟]，已重置为上限数值"), this.config.timeout = 6e5;
          break;
        case this.config.timeout < 100:
          console.warn("timeout小于可配置下限[100ms]，已重置为下限数值"), this.config.timeout = 100;
      }
      return new It(this.config);
    }
    auth({ persistence: e2 } = {}) {
      if (this.authObj)
        return this.authObj;
      const t2 = e2 || Oe.adapter.primaryStorage || wt.persistence;
      var n2;
      return t2 !== this.config.persistence && (this.config.persistence = t2), function(e3) {
        const { env: t3 } = e3;
        Ne[t3] = new Ue(e3), De[t3] = new Ue({ ...e3, persistence: "local" });
      }(this.config), n2 = this.config, st[n2.env] = new nt(n2), this.authObj = new dt(this.config), this.authObj;
    }
    on(e2, t2) {
      return je.apply(this, [e2, t2]);
    }
    off(e2, t2) {
      return Be.apply(this, [e2, t2]);
    }
    callFunction(e2, t2) {
      return _t.apply(this, [e2, t2]);
    }
    deleteFile(e2, t2) {
      return gt.apply(this, [e2, t2]);
    }
    getTempFileURL(e2, t2) {
      return mt.apply(this, [e2, t2]);
    }
    downloadFile(e2, t2) {
      return yt.apply(this, [e2, t2]);
    }
    uploadFile(e2, t2) {
      return pt.apply(this, [e2, t2]);
    }
    getUploadMetadata(e2, t2) {
      return ft.apply(this, [e2, t2]);
    }
    registerExtension(e2) {
      vt[e2.name] = e2;
    }
    async invokeExtension(e2, t2) {
      const n2 = vt[e2];
      if (!n2)
        throw new se({ message: `扩展${e2} 必须先注册` });
      return await n2.invoke(t2, this);
    }
    useAdapters(e2) {
      const { adapter: t2, runtime: n2 } = xe(e2) || {};
      t2 && (Oe.adapter = t2), n2 && (Oe.runtime = n2);
    }
  }
  var St = new It();
  function bt(e2, t2, n2) {
    void 0 === n2 && (n2 = {});
    var s2 = /\?/.test(t2), r2 = "";
    for (var i2 in n2)
      "" === r2 ? !s2 && (t2 += "?") : r2 += "&", r2 += i2 + "=" + encodeURIComponent(n2[i2]);
    return /^http(s)?:\/\//.test(t2 += r2) ? t2 : "" + e2 + t2;
  }
  class kt {
    get(e2) {
      const { url: t2, data: n2, headers: s2, timeout: r2 } = e2;
      return new Promise((e3, i2) => {
        re.request({ url: bt("https:", t2), data: n2, method: "GET", header: s2, timeout: r2, success(t3) {
          e3(t3);
        }, fail(e4) {
          i2(e4);
        } });
      });
    }
    post(e2) {
      const { url: t2, data: n2, headers: s2, timeout: r2 } = e2;
      return new Promise((e3, i2) => {
        re.request({ url: bt("https:", t2), data: n2, method: "POST", header: s2, timeout: r2, success(t3) {
          e3(t3);
        }, fail(e4) {
          i2(e4);
        } });
      });
    }
    upload(e2) {
      return new Promise((t2, n2) => {
        const { url: s2, file: r2, data: i2, headers: o2, fileType: a2 } = e2, c2 = re.uploadFile({ url: bt("https:", s2), name: "file", formData: Object.assign({}, i2), filePath: r2, fileType: a2, header: o2, success(e3) {
          const n3 = { statusCode: e3.statusCode, data: e3.data || {} };
          200 === e3.statusCode && i2.success_action_status && (n3.statusCode = parseInt(i2.success_action_status, 10)), t2(n3);
        }, fail(e3) {
          n2(new Error(e3.errMsg || "uploadFile:fail"));
        } });
        "function" == typeof e2.onUploadProgress && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((t3) => {
          e2.onUploadProgress({ loaded: t3.totalBytesSent, total: t3.totalBytesExpectedToSend });
        });
      });
    }
  }
  const Tt = { setItem(e2, t2) {
    re.setStorageSync(e2, t2);
  }, getItem: (e2) => re.getStorageSync(e2), removeItem(e2) {
    re.removeStorageSync(e2);
  }, clear() {
    re.clearStorageSync();
  } };
  var At = { genAdapter: function() {
    return { root: {}, reqClass: kt, localStorage: Tt, primaryStorage: "local" };
  }, isMatch: function() {
    return true;
  }, runtime: "uni_app" };
  St.useAdapters(At);
  const Pt = St, Ct = Pt.init;
  Pt.init = function(e2) {
    e2.env = e2.spaceId;
    const t2 = Ct.call(this, e2);
    t2.config.provider = "tencent", t2.config.spaceId = e2.spaceId;
    const n2 = t2.auth;
    return t2.auth = function(e3) {
      const t3 = n2.call(this, e3);
      return ["linkAndRetrieveDataWithTicket", "signInAnonymously", "signOut", "getAccessToken", "getLoginState", "signInWithTicket", "getUserInfo"].forEach((e4) => {
        var n3;
        t3[e4] = (n3 = t3[e4], function(e5) {
          e5 = e5 || {};
          const { success: t4, fail: s2, complete: r2 } = ne(e5);
          if (!(t4 || s2 || r2))
            return n3.call(this, e5);
          n3.call(this, e5).then((e6) => {
            t4 && t4(e6), r2 && r2(e6);
          }, (e6) => {
            s2 && s2(e6), r2 && r2(e6);
          });
        }).bind(t3);
      }), t3;
    }, t2.customAuth = t2.auth, t2;
  };
  var xt = Pt;
  async function Ot(e2, t2) {
    const n2 = `http://${e2}:${t2}/system/ping`;
    try {
      const e3 = await (s2 = { url: n2, timeout: 500 }, new Promise((e4, t3) => {
        re.request({ ...s2, success(t4) {
          e4(t4);
        }, fail(e5) {
          t3(e5);
        } });
      }));
      return !(!e3.data || 0 !== e3.data.code);
    } catch (e3) {
      return false;
    }
    var s2;
  }
  async function Et(e2, t2) {
    let n2;
    for (let s2 = 0; s2 < e2.length; s2++) {
      const r2 = e2[s2];
      if (await Ot(r2, t2)) {
        n2 = r2;
        break;
      }
    }
    return { address: n2, port: t2 };
  }
  const Lt = { "serverless.file.resource.generateProximalSign": "storage/generate-proximal-sign", "serverless.file.resource.report": "storage/report", "serverless.file.resource.delete": "storage/delete", "serverless.file.resource.getTempFileURL": "storage/get-temp-file-url" };
  var Rt = class {
    constructor(e2) {
      if (["spaceId", "clientSecret"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e2, t2))
          throw new Error(`${t2} required`);
      }), !e2.endpoint)
        throw new Error("集群空间未配置ApiEndpoint，配置后需要重新关联服务空间后生效");
      this.config = Object.assign({}, e2), this.config.provider = "dcloud", this.config.requestUrl = this.config.endpoint + "/client", this.config.envType = this.config.envType || "public", this.adapter = re;
    }
    async request(e2, t2 = true) {
      const n2 = t2;
      return e2 = n2 ? await this.setupLocalRequest(e2) : this.setupRequest(e2), Promise.resolve().then(() => n2 ? this.requestLocal(e2) : fe.wrappedRequest(e2, this.adapter.request));
    }
    requestLocal(e2) {
      return new Promise((t2, n2) => {
        this.adapter.request(Object.assign(e2, { complete(e3) {
          if (e3 || (e3 = {}), !e3.statusCode || e3.statusCode >= 400) {
            const t3 = e3.data && e3.data.code || "SYS_ERR", s2 = e3.data && e3.data.message || "request:fail";
            return n2(new se({ code: t3, message: s2 }));
          }
          t2({ success: true, result: e3.data });
        } }));
      });
    }
    setupRequest(e2) {
      const t2 = Object.assign({}, e2, { spaceId: this.config.spaceId, timestamp: Date.now() }), n2 = { "Content-Type": "application/json" };
      n2["x-serverless-sign"] = fe.sign(t2, this.config.clientSecret);
      const s2 = pe();
      n2["x-client-info"] = encodeURIComponent(JSON.stringify(s2));
      const { token: r2 } = oe();
      return n2["x-client-token"] = r2, { url: this.config.requestUrl, method: "POST", data: t2, dataType: "json", header: JSON.parse(JSON.stringify(n2)) };
    }
    async setupLocalRequest(e2) {
      const t2 = pe(), { token: n2 } = oe(), s2 = Object.assign({}, e2, { spaceId: this.config.spaceId, timestamp: Date.now(), clientInfo: t2, token: n2 }), { address: r2, servePort: i2 } = this.__dev__ && this.__dev__.debugInfo || {}, { address: o2 } = await Et(r2, i2);
      return { url: `http://${o2}:${i2}/${Lt[e2.method]}`, method: "POST", data: s2, dataType: "json", header: JSON.parse(JSON.stringify({ "Content-Type": "application/json" })) };
    }
    callFunction(e2) {
      const t2 = { method: "serverless.function.runtime.invoke", params: JSON.stringify({ functionTarget: e2.name, functionArgs: e2.data || {} }) };
      return this.request(t2, false);
    }
    getUploadFileOptions(e2) {
      const t2 = { method: "serverless.file.resource.generateProximalSign", params: JSON.stringify(e2) };
      return this.request(t2);
    }
    reportUploadFile(e2) {
      const t2 = { method: "serverless.file.resource.report", params: JSON.stringify(e2) };
      return this.request(t2);
    }
    uploadFile({ filePath: e2, cloudPath: t2, fileType: n2 = "image", onUploadProgress: s2 }) {
      if (!t2)
        throw new se({ code: "CLOUDPATH_REQUIRED", message: "cloudPath不可为空" });
      let r2;
      return this.getUploadFileOptions({ cloudPath: t2 }).then((t3) => {
        const { url: i2, formData: o2, name: a2 } = t3.result;
        return r2 = t3.result.fileUrl, new Promise((t4, r3) => {
          const c2 = this.adapter.uploadFile({ url: i2, formData: o2, name: a2, filePath: e2, fileType: n2, success(e3) {
            e3 && e3.statusCode < 400 ? t4(e3) : r3(new se({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
          }, fail(e3) {
            r3(new se({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
          } });
          "function" == typeof s2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e3) => {
            s2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
          });
        });
      }).then(() => this.reportUploadFile({ cloudPath: t2 })).then((t3) => new Promise((n3, s3) => {
        t3.success ? n3({ success: true, filePath: e2, fileID: r2 }) : s3(new se({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
      }));
    }
    deleteFile({ fileList: e2 }) {
      const t2 = { method: "serverless.file.resource.delete", params: JSON.stringify({ fileList: e2 }) };
      return this.request(t2).then((e3) => {
        if (e3.success)
          return e3.result;
        throw new se({ code: "DELETE_FILE_FAILED", message: "删除文件失败" });
      });
    }
    getTempFileURL({ fileList: e2, maxAge: t2 } = {}) {
      if (!Array.isArray(e2) || 0 === e2.length)
        throw new se({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" });
      const n2 = { method: "serverless.file.resource.getTempFileURL", params: JSON.stringify({ fileList: e2, maxAge: t2 }) };
      return this.request(n2).then((e3) => {
        if (e3.success)
          return { fileList: e3.result.fileList.map((e4) => ({ fileID: e4.fileID, tempFileURL: e4.tempFileURL })) };
        throw new se({ code: "GET_TEMP_FILE_URL_FAILED", message: "获取临时文件链接失败" });
      });
    }
  };
  var Ut = { init(e2) {
    const t2 = new Rt(e2), n2 = { signInAnonymously: function() {
      return Promise.resolve();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } }, Nt = n(function(e2, t2) {
    e2.exports = r.enc.Hex;
  });
  function Dt() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e2) {
      var t2 = 16 * Math.random() | 0;
      return ("x" === e2 ? t2 : 3 & t2 | 8).toString(16);
    });
  }
  function Mt(e2 = "", t2 = {}) {
    const { data: n2, functionName: s2, method: r2, headers: i2, signHeaderKeys: o2 = [], config: a2 } = t2, c2 = String(Date.now()), u2 = Dt(), h2 = Object.assign({}, i2, { "x-from-app-id": a2.spaceAppId, "x-from-env-id": a2.spaceId, "x-to-env-id": a2.spaceId, "x-from-instance-id": c2, "x-from-function-name": s2, "x-client-timestamp": c2, "x-alipay-source": "client", "x-request-id": u2, "x-alipay-callid": u2, "x-trace-id": u2 }), l2 = ["x-from-app-id", "x-from-env-id", "x-to-env-id", "x-from-instance-id", "x-from-function-name", "x-client-timestamp"].concat(o2), [d2 = "", p2 = ""] = e2.split("?") || [], f2 = function(e3) {
      const t3 = e3.signedHeaders.join(";"), n3 = e3.signedHeaders.map((t4) => `${t4.toLowerCase()}:${e3.headers[t4]}
`).join(""), s3 = Ie(e3.body).toString(Nt), r3 = `${e3.method.toUpperCase()}
${e3.path}
${e3.query}
${n3}
${t3}
${s3}
`, i3 = Ie(r3).toString(Nt), o3 = `HMAC-SHA256
${e3.timestamp}
${i3}
`, a3 = Se(o3, e3.secretKey).toString(Nt);
      return `HMAC-SHA256 Credential=${e3.secretId}, SignedHeaders=${t3}, Signature=${a3}`;
    }({ path: d2, query: p2, method: r2, headers: h2, timestamp: c2, body: JSON.stringify(n2), secretId: a2.accessKey, secretKey: a2.secretKey, signedHeaders: l2.sort() });
    return { url: `${a2.endpoint}${e2}`, headers: Object.assign({}, h2, { Authorization: f2 }) };
  }
  function qt({ url: e2, data: t2, method: n2 = "POST", headers: s2 = {}, timeout: r2 }) {
    return new Promise((i2, o2) => {
      re.request({ url: e2, method: n2, data: "object" == typeof t2 ? JSON.stringify(t2) : t2, header: s2, dataType: "json", timeout: r2, complete: (e3 = {}) => {
        const t3 = s2["x-trace-id"] || "";
        if (!e3.statusCode || e3.statusCode >= 400) {
          const { message: n3, errMsg: s3, trace_id: r3 } = e3.data || {};
          return o2(new se({ code: "SYS_ERR", message: n3 || s3 || "request:fail", requestId: r3 || t3 }));
        }
        i2({ status: e3.statusCode, data: e3.data, headers: e3.header, requestId: t3 });
      } });
    });
  }
  function Kt(e2, t2) {
    const { path: n2, data: s2, method: r2 = "GET" } = e2, { url: i2, headers: o2 } = Mt(n2, { functionName: "", data: s2, method: r2, headers: { "x-alipay-cloud-mode": "oss", "x-data-api-type": "oss", "x-expire-timestamp": Date.now() + 6e4 }, signHeaderKeys: ["x-data-api-type", "x-expire-timestamp"], config: t2 });
    return qt({ url: i2, data: s2, method: r2, headers: o2 }).then((e3) => {
      const t3 = e3.data || {};
      if (!t3.success)
        throw new se({ code: e3.errCode, message: e3.errMsg, requestId: e3.requestId });
      return t3.data || {};
    }).catch((e3) => {
      throw new se({ code: e3.errCode, message: e3.errMsg, requestId: e3.requestId });
    });
  }
  function Ft(e2 = "") {
    const t2 = e2.trim().replace(/^cloud:\/\//, ""), n2 = t2.indexOf("/");
    if (n2 <= 0)
      throw new se({ code: "INVALID_PARAM", message: "fileID不合法" });
    const s2 = t2.substring(0, n2), r2 = t2.substring(n2 + 1);
    return s2 !== this.config.spaceId && console.warn("file ".concat(e2, " does not belong to env ").concat(this.config.spaceId)), r2;
  }
  function jt(e2 = "") {
    return "cloud://".concat(this.config.spaceId, "/").concat(e2.replace(/^\/+/, ""));
  }
  class $t {
    constructor(e2) {
      this.config = e2;
    }
    signedURL(e2, t2 = {}) {
      const n2 = `/ws/function/${e2}`, s2 = this.config.wsEndpoint.replace(/^ws(s)?:\/\//, ""), r2 = Object.assign({}, t2, { accessKeyId: this.config.accessKey, signatureNonce: Dt(), timestamp: "" + Date.now() }), i2 = [n2, ["accessKeyId", "authorization", "signatureNonce", "timestamp"].sort().map(function(e3) {
        return r2[e3] ? "".concat(e3, "=").concat(r2[e3]) : null;
      }).filter(Boolean).join("&"), `host:${s2}`].join("\n"), o2 = ["HMAC-SHA256", Ie(i2).toString(Nt)].join("\n"), a2 = Se(o2, this.config.secretKey).toString(Nt), c2 = Object.keys(r2).map((e3) => `${e3}=${encodeURIComponent(r2[e3])}`).join("&");
      return `${this.config.wsEndpoint}${n2}?${c2}&signature=${a2}`;
    }
  }
  var Bt = class {
    constructor(e2) {
      if (["spaceId", "spaceAppId", "accessKey", "secretKey"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e2, t2))
          throw new Error(`${t2} required`);
      }), e2.endpoint) {
        if ("string" != typeof e2.endpoint)
          throw new Error("endpoint must be string");
        if (!/^https:\/\//.test(e2.endpoint))
          throw new Error("endpoint must start with https://");
        e2.endpoint = e2.endpoint.replace(/\/$/, "");
      }
      this.config = Object.assign({}, e2, { endpoint: e2.endpoint || `https://${e2.spaceId}.api-hz.cloudbasefunction.cn`, wsEndpoint: e2.wsEndpoint || `wss://${e2.spaceId}.api-hz.cloudbasefunction.cn` }), this._websocket = new $t(this.config);
    }
    callFunction(e2) {
      return function(e3, t2) {
        const { name: n2, data: s2, async: r2 = false, timeout: i2 } = e3, o2 = "POST", a2 = { "x-to-function-name": n2 };
        r2 && (a2["x-function-invoke-type"] = "async");
        const { url: c2, headers: u2 } = Mt("/functions/invokeFunction", { functionName: n2, data: s2, method: o2, headers: a2, signHeaderKeys: ["x-to-function-name"], config: t2 });
        return qt({ url: c2, data: s2, method: o2, headers: u2, timeout: i2 }).then((e4) => {
          let t3 = 0;
          if (r2) {
            const n3 = e4.data || {};
            t3 = "200" === n3.errCode ? 0 : n3.errCode, e4.data = n3.data || {}, e4.errMsg = n3.errMsg;
          }
          if (0 !== t3)
            throw new se({ code: t3, message: e4.errMsg, requestId: e4.requestId });
          return { errCode: t3, success: 0 === t3, requestId: e4.requestId, result: e4.data };
        }).catch((e4) => {
          throw new se({ code: e4.errCode, message: e4.errMsg, requestId: e4.requestId });
        });
      }(e2, this.config);
    }
    uploadFileToOSS({ url: e2, filePath: t2, fileType: n2, formData: s2, onUploadProgress: r2 }) {
      return new Promise((i2, o2) => {
        const a2 = re.uploadFile({ url: e2, filePath: t2, fileType: n2, formData: s2, name: "file", success(e3) {
          e3 && e3.statusCode < 400 ? i2(e3) : o2(new se({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          o2(new se({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof r2 && a2 && "function" == typeof a2.onProgressUpdate && a2.onProgressUpdate((e3) => {
          r2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    async uploadFile({ filePath: e2, cloudPath: t2 = "", fileType: n2 = "image", onUploadProgress: s2 }) {
      if ("string" !== f(t2))
        throw new se({ code: "INVALID_PARAM", message: "cloudPath必须为字符串类型" });
      if (!(t2 = t2.trim()))
        throw new se({ code: "INVALID_PARAM", message: "cloudPath不可为空" });
      if (/:\/\//.test(t2))
        throw new se({ code: "INVALID_PARAM", message: "cloudPath不合法" });
      const r2 = await Kt({ path: "/".concat(t2.replace(/^\//, ""), "?post_url") }, this.config), { file_id: i2, upload_url: o2, form_data: a2 } = r2, c2 = a2 && a2.reduce((e3, t3) => (e3[t3.key] = t3.value, e3), {});
      return this.uploadFileToOSS({ url: o2, filePath: e2, fileType: n2, formData: c2, onUploadProgress: s2 }).then(() => ({ fileID: i2 }));
    }
    async getTempFileURL({ fileList: e2 }) {
      return new Promise((t2, n2) => {
        (!e2 || e2.length < 0) && t2({ code: "INVALID_PARAM", message: "fileList不能为空数组" }), e2.length > 50 && t2({ code: "INVALID_PARAM", message: "fileList数组长度不能超过50" });
        const s2 = [];
        for (const n3 of e2) {
          let e3;
          "string" !== f(n3) && t2({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" });
          try {
            e3 = Ft.call(this, n3);
          } catch (t3) {
            console.warn(t3.errCode, t3.errMsg), e3 = n3;
          }
          s2.push({ file_id: e3, expire: 600 });
        }
        Kt({ path: "/?download_url", data: { file_list: s2 }, method: "POST" }, this.config).then((e3) => {
          const { file_list: n3 = [] } = e3;
          t2({ fileList: n3.map((e4) => ({ fileID: jt.call(this, e4.file_id), tempFileURL: e4.download_url })) });
        }).catch((e3) => n2(e3));
      });
    }
    async connectWebSocket(e2) {
      const { name: t2, query: n2 } = e2;
      return re.connectSocket({ url: this._websocket.signedURL(t2, n2), complete: () => {
      } });
    }
  };
  var Wt = { init: (e2) => {
    e2.provider = "alipay";
    const t2 = new Bt(e2);
    return t2.auth = function() {
      return { signInAnonymously: function() {
        return Promise.resolve();
      }, getLoginState: function() {
        return Promise.resolve(true);
      } };
    }, t2;
  } };
  function Ht({ data: e2 }) {
    let t2;
    t2 = pe();
    const n2 = JSON.parse(JSON.stringify(e2 || {}));
    if (Object.assign(n2, { clientInfo: t2 }), !n2.uniIdToken) {
      const { token: e3 } = oe();
      e3 && (n2.uniIdToken = e3);
    }
    return n2;
  }
  async function Jt(e2 = {}) {
    await this.__dev__.initLocalNetwork();
    const { localAddress: t2, localPort: n2 } = this.__dev__, s2 = { aliyun: "aliyun", tencent: "tcb", alipay: "alipay", dcloud: "dcloud" }[this.config.provider], r2 = this.config.spaceId, i2 = `http://${t2}:${n2}/system/check-function`, o2 = `http://${t2}:${n2}/cloudfunctions/${e2.name}`;
    return new Promise((t3, n3) => {
      re.request({ method: "POST", url: i2, data: { name: e2.name, platform: A, provider: s2, spaceId: r2 }, timeout: 3e3, success(e3) {
        t3(e3);
      }, fail() {
        t3({ data: { code: "NETWORK_ERROR", message: "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下，自动切换为已部署的云函数。" } });
      } });
    }).then(({ data: e3 } = {}) => {
      const { code: t3, message: n3 } = e3 || {};
      return { code: 0 === t3 ? 0 : t3 || "SYS_ERR", message: n3 || "SYS_ERR" };
    }).then(({ code: t3, message: n3 }) => {
      if (0 !== t3) {
        switch (t3) {
          case "MODULE_ENCRYPTED":
            console.error(`此云函数（${e2.name}）依赖加密公共模块不可本地调试，自动切换为云端已部署的云函数`);
            break;
          case "FUNCTION_ENCRYPTED":
            console.error(`此云函数（${e2.name}）已加密不可本地调试，自动切换为云端已部署的云函数`);
            break;
          case "ACTION_ENCRYPTED":
            console.error(n3 || "需要访问加密的uni-clientDB-action，自动切换为云端环境");
            break;
          case "NETWORK_ERROR":
            console.error(n3 || "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下");
            break;
          case "SWITCH_TO_CLOUD":
            break;
          default: {
            const e3 = `检测本地调试服务出现错误：${n3}，请检查网络环境或重启客户端再试`;
            throw console.error(e3), new Error(e3);
          }
        }
        return this._callCloudFunction(e2);
      }
      return new Promise((t4, n4) => {
        const r3 = Ht.call(this, { data: e2.data });
        re.request({ method: "POST", url: o2, data: { provider: s2, platform: A, param: r3 }, timeout: e2.timeout, success: ({ statusCode: e3, data: s3 } = {}) => !e3 || e3 >= 400 ? n4(new se({ code: s3.code || "SYS_ERR", message: s3.message || "request:fail" })) : t4({ result: s3 }), fail(e3) {
          n4(new se({ code: e3.code || e3.errCode || "SYS_ERR", message: e3.message || e3.errMsg || "request:fail" }));
        } });
      });
    });
  }
  const zt = [{ rule: /fc_function_not_found|FUNCTION_NOT_FOUND/, content: "，云函数[{functionName}]在云端不存在，请检查此云函数名称是否正确以及该云函数是否已上传到服务空间", mode: "append" }];
  var Vt = /[\\^$.*+?()[\]{}|]/g, Gt = RegExp(Vt.source);
  function Yt(e2, t2, n2) {
    return e2.replace(new RegExp((s2 = t2) && Gt.test(s2) ? s2.replace(Vt, "\\$&") : s2, "g"), n2);
    var s2;
  }
  const Xt = "request", Zt = "response", en = "both";
  const Mn = { code: 2e4, message: "System error" }, qn = { code: 20101, message: "Invalid client" };
  function jn(e2) {
    const { errSubject: t2, subject: n2, errCode: s2, errMsg: r2, code: i2, message: o2, cause: a2 } = e2 || {};
    return new se({ subject: t2 || n2 || "uni-secure-network", code: s2 || i2 || Mn.code, message: r2 || o2, cause: a2 });
  }
  let Bn;
  function Vn({ secretType: e2 } = {}) {
    return e2 === Xt || e2 === Zt || e2 === en;
  }
  function Gn({ name: e2, data: t2 = {} } = {}) {
    return "DCloud-clientDB" === e2 && "encryption" === t2.redirectTo && "getAppClientKey" === t2.action;
  }
  function Yn({ provider: e2, spaceId: t2, functionName: n2 } = {}) {
    const { appId: s2, uniPlatform: r2, osName: i2 } = he();
    let o2 = r2;
    "app" === r2 && (o2 = i2);
    const a2 = function({ provider: e3, spaceId: t3 } = {}) {
      const n3 = T;
      if (!n3)
        return {};
      e3 = /* @__PURE__ */ function(e4) {
        return "tencent" === e4 ? "tcb" : e4;
      }(e3);
      const s3 = n3.find((n4) => n4.provider === e3 && n4.spaceId === t3);
      return s3 && s3.config;
    }({ provider: e2, spaceId: t2 });
    if (!a2 || !a2.accessControl || !a2.accessControl.enable)
      return false;
    const c2 = a2.accessControl.function || {}, u2 = Object.keys(c2);
    if (0 === u2.length)
      return true;
    const h2 = function(e3, t3) {
      let n3, s3, r3;
      for (let i3 = 0; i3 < e3.length; i3++) {
        const o3 = e3[i3];
        o3 !== t3 ? "*" !== o3 ? o3.split(",").map((e4) => e4.trim()).indexOf(t3) > -1 && (s3 = o3) : r3 = o3 : n3 = o3;
      }
      return n3 || s3 || r3;
    }(u2, n2);
    if (!h2)
      return false;
    if ((c2[h2] || []).find((e3 = {}) => e3.appId === s2 && (e3.platform || "").toLowerCase() === o2.toLowerCase()))
      return true;
    throw console.error(`此应用[appId: ${s2}, platform: ${o2}]不在云端配置的允许访问的应用列表内，参考：https://uniapp.dcloud.net.cn/uniCloud/secure-network.html#verify-client`), jn(qn);
  }
  function Qn({ functionName: e2, result: t2, logPvd: n2 }) {
    if (this.__dev__.debugLog && t2 && t2.requestId) {
      const s2 = JSON.stringify({ spaceId: this.config.spaceId, functionName: e2, requestId: t2.requestId });
      console.log(`[${n2}-request]${s2}[/${n2}-request]`);
    }
  }
  function Xn(e2) {
    const t2 = e2.callFunction, n2 = function(n3) {
      const s2 = n3.name;
      n3.data = Ht.call(e2, { data: n3.data });
      const r2 = { aliyun: "aliyun", tencent: "tcb", tcb: "tcb", alipay: "alipay", dcloud: "dcloud" }[this.config.provider], i2 = Vn(n3), o2 = Gn(n3), a2 = i2 || o2;
      return t2.call(this, n3).then((e3) => (e3.errCode = 0, !a2 && Qn.call(this, { functionName: s2, result: e3, logPvd: r2 }), Promise.resolve(e3)), (e3) => (!a2 && Qn.call(this, { functionName: s2, result: e3, logPvd: r2 }), e3 && e3.message && (e3.message = function({ message: e4 = "", extraInfo: t3 = {}, formatter: n4 = [] } = {}) {
        for (let s3 = 0; s3 < n4.length; s3++) {
          const { rule: r3, content: i3, mode: o3 } = n4[s3], a3 = e4.match(r3);
          if (!a3)
            continue;
          let c2 = i3;
          for (let e5 = 1; e5 < a3.length; e5++)
            c2 = Yt(c2, `{$${e5}}`, a3[e5]);
          for (const e5 in t3)
            c2 = Yt(c2, `{${e5}}`, t3[e5]);
          return "replace" === o3 ? c2 : e4 + c2;
        }
        return e4;
      }({ message: `[${n3.name}]: ${e3.message}`, formatter: zt, extraInfo: { functionName: s2 } })), Promise.reject(e3)));
    };
    e2.callFunction = function(t3) {
      const { provider: s2, spaceId: r2 } = e2.config, i2 = t3.name;
      let o2, a2;
      if (t3.data = t3.data || {}, e2.__dev__.debugInfo && !e2.__dev__.debugInfo.forceRemote && C ? (e2._callCloudFunction || (e2._callCloudFunction = n2, e2._callLocalFunction = Jt), o2 = Jt) : o2 = n2, o2 = o2.bind(e2), Gn(t3))
        a2 = n2.call(e2, t3);
      else if (Vn(t3)) {
        a2 = new Bn({ secretType: t3.secretType, uniCloudIns: e2 }).wrapEncryptDataCallFunction(n2.bind(e2))(t3);
      } else if (Yn({ provider: s2, spaceId: r2, functionName: i2 })) {
        a2 = new Bn({ secretType: t3.secretType, uniCloudIns: e2 }).wrapVerifyClientCallFunction(n2.bind(e2))(t3);
      } else
        a2 = o2(t3);
      return Object.defineProperty(a2, "result", { get: () => (console.warn("当前返回结果为Promise类型，不可直接访问其result属性，详情请参考：https://uniapp.dcloud.net.cn/uniCloud/faq?id=promise"), {}) }), a2.then((e3) => ("undefined" != typeof UTSJSONObject && "undefined" != typeof UTS && (e3.result = UTS.JSON.parse(JSON.stringify(e3.result))), e3));
    };
  }
  Bn = class {
    constructor() {
      throw jn({ message: `Platform ${A} is not enabled, please check whether secure network module is enabled in your manifest.json` });
    }
  };
  const Zn = Symbol("CLIENT_DB_INTERNAL");
  function es(e2, t2) {
    return e2.then = "DoNotReturnProxyWithAFunctionNamedThen", e2._internalType = Zn, e2.inspect = null, e2.__v_raw = void 0, new Proxy(e2, { get(e3, n2, s2) {
      if ("_uniClient" === n2)
        return null;
      if ("symbol" == typeof n2)
        return e3[n2];
      if (n2 in e3 || "string" != typeof n2) {
        const t3 = e3[n2];
        return "function" == typeof t3 ? t3.bind(e3) : t3;
      }
      return t2.get(e3, n2, s2);
    } });
  }
  function ts(e2) {
    return { on: (t2, n2) => {
      e2[t2] = e2[t2] || [], e2[t2].indexOf(n2) > -1 || e2[t2].push(n2);
    }, off: (t2, n2) => {
      e2[t2] = e2[t2] || [];
      const s2 = e2[t2].indexOf(n2);
      -1 !== s2 && e2[t2].splice(s2, 1);
    } };
  }
  const ns = ["db.Geo", "db.command", "command.aggregate"];
  function ss(e2, t2) {
    return ns.indexOf(`${e2}.${t2}`) > -1;
  }
  function rs(e2) {
    switch (f(e2 = ie(e2))) {
      case "array":
        return e2.map((e3) => rs(e3));
      case "object":
        return e2._internalType === Zn || Object.keys(e2).forEach((t2) => {
          e2[t2] = rs(e2[t2]);
        }), e2;
      case "regexp":
        return { $regexp: { source: e2.source, flags: e2.flags } };
      case "date":
        return { $date: e2.toISOString() };
      default:
        return e2;
    }
  }
  function is(e2) {
    return e2 && e2.content && e2.content.$method;
  }
  class os {
    constructor(e2, t2, n2) {
      this.content = e2, this.prevStage = t2 || null, this.udb = null, this._database = n2;
    }
    toJSON() {
      let e2 = this;
      const t2 = [e2.content];
      for (; e2.prevStage; )
        e2 = e2.prevStage, t2.push(e2.content);
      return { $db: t2.reverse().map((e3) => ({ $method: e3.$method, $param: rs(e3.$param) })) };
    }
    toString() {
      return JSON.stringify(this.toJSON());
    }
    getAction() {
      const e2 = this.toJSON().$db.find((e3) => "action" === e3.$method);
      return e2 && e2.$param && e2.$param[0];
    }
    getCommand() {
      return { $db: this.toJSON().$db.filter((e2) => "action" !== e2.$method) };
    }
    get isAggregate() {
      let e2 = this;
      for (; e2; ) {
        const t2 = is(e2), n2 = is(e2.prevStage);
        if ("aggregate" === t2 && "collection" === n2 || "pipeline" === t2)
          return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    get isCommand() {
      let e2 = this;
      for (; e2; ) {
        if ("command" === is(e2))
          return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    get isAggregateCommand() {
      let e2 = this;
      for (; e2; ) {
        const t2 = is(e2), n2 = is(e2.prevStage);
        if ("aggregate" === t2 && "command" === n2)
          return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    getNextStageFn(e2) {
      const t2 = this;
      return function() {
        return as({ $method: e2, $param: rs(Array.from(arguments)) }, t2, t2._database);
      };
    }
    get count() {
      return this.isAggregate ? this.getNextStageFn("count") : function() {
        return this._send("count", Array.from(arguments));
      };
    }
    get remove() {
      return this.isCommand ? this.getNextStageFn("remove") : function() {
        return this._send("remove", Array.from(arguments));
      };
    }
    get() {
      return this._send("get", Array.from(arguments));
    }
    get add() {
      return this.isCommand ? this.getNextStageFn("add") : function() {
        return this._send("add", Array.from(arguments));
      };
    }
    update() {
      return this._send("update", Array.from(arguments));
    }
    end() {
      return this._send("end", Array.from(arguments));
    }
    get set() {
      return this.isCommand ? this.getNextStageFn("set") : function() {
        throw new Error("JQL禁止使用set方法");
      };
    }
    _send(e2, t2) {
      const n2 = this.getAction(), s2 = this.getCommand();
      if (s2.$db.push({ $method: e2, $param: rs(t2) }), S) {
        const e3 = s2.$db.find((e4) => "collection" === e4.$method), t3 = e3 && e3.$param;
        t3 && 1 === t3.length && "string" == typeof e3.$param[0] && e3.$param[0].indexOf(",") > -1 && console.warn("检测到使用JQL语法联表查询时，未使用getTemp先过滤主表数据，在主表数据量大的情况下可能会查询缓慢。\n- 如何优化请参考此文档：https://uniapp.dcloud.net.cn/uniCloud/jql?id=lookup-with-temp \n- 如果主表数据量很小请忽略此信息，项目发行时不会出现此提示。");
      }
      return this._database._callCloudFunction({ action: n2, command: s2 });
    }
  }
  function as(e2, t2, n2) {
    return es(new os(e2, t2, n2), { get(e3, t3) {
      let s2 = "db";
      return e3 && e3.content && (s2 = e3.content.$method), ss(s2, t3) ? as({ $method: t3 }, e3, n2) : function() {
        return as({ $method: t3, $param: rs(Array.from(arguments)) }, e3, n2);
      };
    } });
  }
  function cs({ path: e2, method: t2 }) {
    return class {
      constructor() {
        this.param = Array.from(arguments);
      }
      toJSON() {
        return { $newDb: [...e2.map((e3) => ({ $method: e3 })), { $method: t2, $param: this.param }] };
      }
      toString() {
        return JSON.stringify(this.toJSON());
      }
    };
  }
  function us(e2, t2 = {}) {
    return es(new e2(t2), { get: (e3, t3) => ss("db", t3) ? as({ $method: t3 }, null, e3) : function() {
      return as({ $method: t3, $param: rs(Array.from(arguments)) }, null, e3);
    } });
  }
  class hs extends class {
    constructor({ uniClient: e2 = {}, isJQL: t2 = false } = {}) {
      this._uniClient = e2, this._authCallBacks = {}, this._dbCallBacks = {}, e2._isDefault && (this._dbCallBacks = R("_globalUniCloudDatabaseCallback")), t2 || (this.auth = ts(this._authCallBacks)), this._isJQL = t2, Object.assign(this, ts(this._dbCallBacks)), this.env = es({}, { get: (e3, t3) => ({ $env: t3 }) }), this.Geo = es({}, { get: (e3, t3) => cs({ path: ["Geo"], method: t3 }) }), this.serverDate = cs({ path: [], method: "serverDate" }), this.RegExp = cs({ path: [], method: "RegExp" });
    }
    getCloudEnv(e2) {
      if ("string" != typeof e2 || !e2.trim())
        throw new Error("getCloudEnv参数错误");
      return { $env: e2.replace("$cloudEnv_", "") };
    }
    _callback(e2, t2) {
      const n2 = this._dbCallBacks;
      n2[e2] && n2[e2].forEach((e3) => {
        e3(...t2);
      });
    }
    _callbackAuth(e2, t2) {
      const n2 = this._authCallBacks;
      n2[e2] && n2[e2].forEach((e3) => {
        e3(...t2);
      });
    }
    multiSend() {
      const e2 = Array.from(arguments), t2 = e2.map((e3) => {
        const t3 = e3.getAction(), n2 = e3.getCommand();
        if ("getTemp" !== n2.$db[n2.$db.length - 1].$method)
          throw new Error("multiSend只支持子命令内使用getTemp");
        return { action: t3, command: n2 };
      });
      return this._callCloudFunction({ multiCommand: t2, queryList: e2 });
    }
  } {
    _parseResult(e2) {
      return this._isJQL ? e2.result : e2;
    }
    _callCloudFunction({ action: e2, command: t2, multiCommand: n2, queryList: s2 }) {
      function r2(e3, t3) {
        if (n2 && s2)
          for (let n3 = 0; n3 < s2.length; n3++) {
            const r3 = s2[n3];
            r3.udb && "function" == typeof r3.udb.setResult && (t3 ? r3.udb.setResult(t3) : r3.udb.setResult(e3.result.dataList[n3]));
          }
      }
      const i2 = this, o2 = this._isJQL ? "databaseForJQL" : "database";
      function a2(e3) {
        return i2._callback("error", [e3]), K(F(o2, "fail"), e3).then(() => K(F(o2, "complete"), e3)).then(() => (r2(null, e3), X(B, { type: J, content: e3 }), Promise.reject(e3)));
      }
      const c2 = K(F(o2, "invoke")), u2 = this._uniClient;
      return c2.then(() => u2.callFunction({ name: "DCloud-clientDB", type: h, data: { action: e2, command: t2, multiCommand: n2 } })).then((e3) => {
        const { code: t3, message: n3, token: s3, tokenExpired: c3, systemInfo: u3 = [] } = e3.result;
        if (u3)
          for (let e4 = 0; e4 < u3.length; e4++) {
            const { level: t4, message: n4, detail: s4 } = u3[e4], r3 = console["warn" === t4 ? "error" : t4] || console.log;
            let i3 = "[System Info]" + n4;
            s4 && (i3 = `${i3}
详细信息：${s4}`), r3(i3);
          }
        if (t3) {
          return a2(new se({ code: t3, message: n3, requestId: e3.requestId }));
        }
        e3.result.errCode = e3.result.errCode || e3.result.code, e3.result.errMsg = e3.result.errMsg || e3.result.message, s3 && c3 && (ae({ token: s3, tokenExpired: c3 }), this._callbackAuth("refreshToken", [{ token: s3, tokenExpired: c3 }]), this._callback("refreshToken", [{ token: s3, tokenExpired: c3 }]), X(H, { token: s3, tokenExpired: c3 }));
        const h2 = [{ prop: "affectedDocs", tips: "affectedDocs不再推荐使用，请使用inserted/deleted/updated/data.length替代" }, { prop: "code", tips: "code不再推荐使用，请使用errCode替代" }, { prop: "message", tips: "message不再推荐使用，请使用errMsg替代" }];
        for (let t4 = 0; t4 < h2.length; t4++) {
          const { prop: n4, tips: s4 } = h2[t4];
          if (n4 in e3.result) {
            const t5 = e3.result[n4];
            Object.defineProperty(e3.result, n4, { get: () => (console.warn(s4), t5) });
          }
        }
        return function(e4) {
          return K(F(o2, "success"), e4).then(() => K(F(o2, "complete"), e4)).then(() => {
            r2(e4, null);
            const t4 = i2._parseResult(e4);
            return X(B, { type: J, content: t4 }), Promise.resolve(t4);
          });
        }(e3);
      }, (e3) => {
        /fc_function_not_found|FUNCTION_NOT_FOUND/g.test(e3.message) && console.warn("clientDB未初始化，请在web控制台保存一次schema以开启clientDB");
        return a2(new se({ code: e3.code || "SYSTEM_ERROR", message: e3.message, requestId: e3.requestId }));
      });
    }
  }
  const ls = "token无效，跳转登录页面", ds = "token过期，跳转登录页面", ps = { TOKEN_INVALID_TOKEN_EXPIRED: ds, TOKEN_INVALID_INVALID_CLIENTID: ls, TOKEN_INVALID: ls, TOKEN_INVALID_WRONG_TOKEN: ls, TOKEN_INVALID_ANONYMOUS_USER: ls }, fs = { "uni-id-token-expired": ds, "uni-id-check-token-failed": ls, "uni-id-token-not-exist": ls, "uni-id-check-device-feature-failed": ls };
  function gs(e2, t2) {
    let n2 = "";
    return n2 = e2 ? `${e2}/${t2}` : t2, n2.replace(/^\//, "");
  }
  function ms(e2 = [], t2 = "") {
    const n2 = [], s2 = [];
    return e2.forEach((e3) => {
      true === e3.needLogin ? n2.push(gs(t2, e3.path)) : false === e3.needLogin && s2.push(gs(t2, e3.path));
    }), { needLoginPage: n2, notNeedLoginPage: s2 };
  }
  function ys(e2) {
    return e2.split("?")[0].replace(/^\//, "");
  }
  function _s() {
    return function(e2) {
      let t2 = e2 && e2.$page && e2.$page.fullPath || "";
      return t2 ? ("/" !== t2.charAt(0) && (t2 = "/" + t2), t2) : t2;
    }(function() {
      const e2 = getCurrentPages();
      return e2[e2.length - 1];
    }());
  }
  function ws() {
    return ys(_s());
  }
  function vs(e2 = "", t2 = {}) {
    if (!e2)
      return false;
    if (!(t2 && t2.list && t2.list.length))
      return false;
    const n2 = t2.list, s2 = ys(e2);
    return n2.some((e3) => e3.pagePath === s2);
  }
  const Is = !!e.uniIdRouter;
  const { loginPage: Ss, routerNeedLogin: bs, resToLogin: ks, needLoginPage: Ts, notNeedLoginPage: As, loginPageInTabBar: Ps } = function({ pages: t2 = [], subPackages: n2 = [], uniIdRouter: s2 = {}, tabBar: r2 = {} } = e) {
    const { loginPage: i2, needLogin: o2 = [], resToLogin: a2 = true } = s2, { needLoginPage: c2, notNeedLoginPage: u2 } = ms(t2), { needLoginPage: h2, notNeedLoginPage: l2 } = function(e2 = []) {
      const t3 = [], n3 = [];
      return e2.forEach((e3) => {
        const { root: s3, pages: r3 = [] } = e3, { needLoginPage: i3, notNeedLoginPage: o3 } = ms(r3, s3);
        t3.push(...i3), n3.push(...o3);
      }), { needLoginPage: t3, notNeedLoginPage: n3 };
    }(n2);
    return { loginPage: i2, routerNeedLogin: o2, resToLogin: a2, needLoginPage: [...c2, ...h2], notNeedLoginPage: [...u2, ...l2], loginPageInTabBar: vs(i2, r2) };
  }();
  if (Ts.indexOf(Ss) > -1)
    throw new Error(`Login page [${Ss}] should not be "needLogin", please check your pages.json`);
  function Cs(e2) {
    const t2 = ws();
    if ("/" === e2.charAt(0))
      return e2;
    const [n2, s2] = e2.split("?"), r2 = n2.replace(/^\//, "").split("/"), i2 = t2.split("/");
    i2.pop();
    for (let e3 = 0; e3 < r2.length; e3++) {
      const t3 = r2[e3];
      ".." === t3 ? i2.pop() : "." !== t3 && i2.push(t3);
    }
    return "" === i2[0] && i2.shift(), "/" + i2.join("/") + (s2 ? "?" + s2 : "");
  }
  function xs(e2) {
    const t2 = ys(Cs(e2));
    return !(As.indexOf(t2) > -1) && (Ts.indexOf(t2) > -1 || bs.some((t3) => function(e3, t4) {
      return new RegExp(t4).test(e3);
    }(e2, t3)));
  }
  function Os({ redirect: e2 }) {
    const t2 = ys(e2), n2 = ys(Ss);
    return ws() !== n2 && t2 !== n2;
  }
  function Es({ api: e2, redirect: t2 } = {}) {
    if (!t2 || !Os({ redirect: t2 }))
      return;
    const n2 = function(e3, t3) {
      return "/" !== e3.charAt(0) && (e3 = "/" + e3), t3 ? e3.indexOf("?") > -1 ? e3 + `&uniIdRedirectUrl=${encodeURIComponent(t3)}` : e3 + `?uniIdRedirectUrl=${encodeURIComponent(t3)}` : e3;
    }(Ss, t2);
    Ps ? "navigateTo" !== e2 && "redirectTo" !== e2 || (e2 = "switchTab") : "switchTab" === e2 && (e2 = "navigateTo");
    const s2 = { navigateTo: uni.navigateTo, redirectTo: uni.redirectTo, switchTab: uni.switchTab, reLaunch: uni.reLaunch };
    setTimeout(() => {
      s2[e2]({ url: n2 });
    }, 0);
  }
  function Ls({ url: e2 } = {}) {
    const t2 = { abortLoginPageJump: false, autoToLoginPage: false }, n2 = function() {
      const { token: e3, tokenExpired: t3 } = oe();
      let n3;
      if (e3) {
        if (t3 < Date.now()) {
          const e4 = "uni-id-token-expired";
          n3 = { errCode: e4, errMsg: fs[e4] };
        }
      } else {
        const e4 = "uni-id-check-token-failed";
        n3 = { errCode: e4, errMsg: fs[e4] };
      }
      return n3;
    }();
    if (xs(e2) && n2) {
      n2.uniIdRedirectUrl = e2;
      if (G(W).length > 0)
        return setTimeout(() => {
          X(W, n2);
        }, 0), t2.abortLoginPageJump = true, t2;
      t2.autoToLoginPage = true;
    }
    return t2;
  }
  function Rs() {
    !function() {
      const e3 = _s(), { abortLoginPageJump: t2, autoToLoginPage: n2 } = Ls({ url: e3 });
      t2 || n2 && Es({ api: "redirectTo", redirect: e3 });
    }();
    const e2 = ["navigateTo", "redirectTo", "reLaunch", "switchTab"];
    for (let t2 = 0; t2 < e2.length; t2++) {
      const n2 = e2[t2];
      uni.addInterceptor(n2, { invoke(e3) {
        const { abortLoginPageJump: t3, autoToLoginPage: s2 } = Ls({ url: e3.url });
        return t3 ? e3 : s2 ? (Es({ api: n2, redirect: Cs(e3.url) }), false) : e3;
      } });
    }
  }
  function Us() {
    this.onResponse((e2) => {
      const { type: t2, content: n2 } = e2;
      let s2 = false;
      switch (t2) {
        case "cloudobject":
          s2 = function(e3) {
            if ("object" != typeof e3)
              return false;
            const { errCode: t3 } = e3 || {};
            return t3 in fs;
          }(n2);
          break;
        case "clientdb":
          s2 = function(e3) {
            if ("object" != typeof e3)
              return false;
            const { errCode: t3 } = e3 || {};
            return t3 in ps;
          }(n2);
      }
      s2 && function(e3 = {}) {
        const t3 = G(W);
        te().then(() => {
          const n3 = _s();
          if (n3 && Os({ redirect: n3 }))
            return t3.length > 0 ? X(W, Object.assign({ uniIdRedirectUrl: n3 }, e3)) : void (Ss && Es({ api: "navigateTo", redirect: n3 }));
        });
      }(n2);
    });
  }
  function Ns(e2) {
    !function(e3) {
      e3.onResponse = function(e4) {
        Y(B, e4);
      }, e3.offResponse = function(e4) {
        Q(B, e4);
      };
    }(e2), function(e3) {
      e3.onNeedLogin = function(e4) {
        Y(W, e4);
      }, e3.offNeedLogin = function(e4) {
        Q(W, e4);
      }, Is && (R("_globalUniCloudStatus").needLoginInit || (R("_globalUniCloudStatus").needLoginInit = true, te().then(() => {
        Rs.call(e3);
      }), ks && Us.call(e3)));
    }(e2), function(e3) {
      e3.onRefreshToken = function(e4) {
        Y(H, e4);
      }, e3.offRefreshToken = function(e4) {
        Q(H, e4);
      };
    }(e2);
  }
  let Ds;
  const Ms = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", qs = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
  function Ks() {
    const e2 = oe().token || "", t2 = e2.split(".");
    if (!e2 || 3 !== t2.length)
      return { uid: null, role: [], permission: [], tokenExpired: 0 };
    let n2;
    try {
      n2 = JSON.parse((s2 = t2[1], decodeURIComponent(Ds(s2).split("").map(function(e3) {
        return "%" + ("00" + e3.charCodeAt(0).toString(16)).slice(-2);
      }).join(""))));
    } catch (e3) {
      throw new Error("获取当前用户信息出错，详细错误信息为：" + e3.message);
    }
    var s2;
    return n2.tokenExpired = 1e3 * n2.exp, delete n2.exp, delete n2.iat, n2;
  }
  Ds = "function" != typeof atob ? function(e2) {
    if (e2 = String(e2).replace(/[\t\n\f\r ]+/g, ""), !qs.test(e2))
      throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
    var t2;
    e2 += "==".slice(2 - (3 & e2.length));
    for (var n2, s2, r2 = "", i2 = 0; i2 < e2.length; )
      t2 = Ms.indexOf(e2.charAt(i2++)) << 18 | Ms.indexOf(e2.charAt(i2++)) << 12 | (n2 = Ms.indexOf(e2.charAt(i2++))) << 6 | (s2 = Ms.indexOf(e2.charAt(i2++))), r2 += 64 === n2 ? String.fromCharCode(t2 >> 16 & 255) : 64 === s2 ? String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255) : String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255, 255 & t2);
    return r2;
  } : atob;
  var Fs = n(function(e2, t2) {
    Object.defineProperty(t2, "__esModule", { value: true });
    const n2 = "chooseAndUploadFile:ok", s2 = "chooseAndUploadFile:fail";
    function r2(e3, t3) {
      return e3.tempFiles.forEach((e4, n3) => {
        e4.name || (e4.name = e4.path.substring(e4.path.lastIndexOf("/") + 1)), t3 && (e4.fileType = t3), e4.cloudPath = Date.now() + "_" + n3 + e4.name.substring(e4.name.lastIndexOf("."));
      }), e3.tempFilePaths || (e3.tempFilePaths = e3.tempFiles.map((e4) => e4.path)), e3;
    }
    function i2(e3, t3, { onChooseFile: s3, onUploadProgress: r3 }) {
      return t3.then((e4) => {
        if (s3) {
          const t4 = s3(e4);
          if (void 0 !== t4)
            return Promise.resolve(t4).then((t5) => void 0 === t5 ? e4 : t5);
        }
        return e4;
      }).then((t4) => false === t4 ? { errMsg: n2, tempFilePaths: [], tempFiles: [] } : function(e4, t5, s4 = 5, r4) {
        (t5 = Object.assign({}, t5)).errMsg = n2;
        const i3 = t5.tempFiles, o2 = i3.length;
        let a2 = 0;
        return new Promise((n3) => {
          for (; a2 < s4; )
            c2();
          function c2() {
            const s5 = a2++;
            if (s5 >= o2)
              return void (!i3.find((e5) => !e5.url && !e5.errMsg) && n3(t5));
            const u2 = i3[s5];
            e4.uploadFile({ provider: u2.provider, filePath: u2.path, cloudPath: u2.cloudPath, fileType: u2.fileType, cloudPathAsRealPath: u2.cloudPathAsRealPath, onUploadProgress(e5) {
              e5.index = s5, e5.tempFile = u2, e5.tempFilePath = u2.path, r4 && r4(e5);
            } }).then((e5) => {
              u2.url = e5.fileID, s5 < o2 && c2();
            }).catch((e5) => {
              u2.errMsg = e5.errMsg || e5.message, s5 < o2 && c2();
            });
          }
        });
      }(e3, t4, 5, r3));
    }
    t2.initChooseAndUploadFile = function(e3) {
      return function(t3 = { type: "all" }) {
        return "image" === t3.type ? i2(e3, function(e4) {
          const { count: t4, sizeType: n3, sourceType: i3 = ["album", "camera"], extension: o2 } = e4;
          return new Promise((e5, a2) => {
            uni.chooseImage({ count: t4, sizeType: n3, sourceType: i3, extension: o2, success(t5) {
              e5(r2(t5, "image"));
            }, fail(e6) {
              a2({ errMsg: e6.errMsg.replace("chooseImage:fail", s2) });
            } });
          });
        }(t3), t3) : "video" === t3.type ? i2(e3, function(e4) {
          const { camera: t4, compressed: n3, maxDuration: i3, sourceType: o2 = ["album", "camera"], extension: a2 } = e4;
          return new Promise((e5, c2) => {
            uni.chooseVideo({ camera: t4, compressed: n3, maxDuration: i3, sourceType: o2, extension: a2, success(t5) {
              const { tempFilePath: n4, duration: s3, size: i4, height: o3, width: a3 } = t5;
              e5(r2({ errMsg: "chooseVideo:ok", tempFilePaths: [n4], tempFiles: [{ name: t5.tempFile && t5.tempFile.name || "", path: n4, size: i4, type: t5.tempFile && t5.tempFile.type || "", width: a3, height: o3, duration: s3, fileType: "video", cloudPath: "" }] }, "video"));
            }, fail(e6) {
              c2({ errMsg: e6.errMsg.replace("chooseVideo:fail", s2) });
            } });
          });
        }(t3), t3) : i2(e3, function(e4) {
          const { count: t4, extension: n3 } = e4;
          return new Promise((e5, i3) => {
            let o2 = uni.chooseFile;
            if ("undefined" != typeof wx && "function" == typeof wx.chooseMessageFile && (o2 = wx.chooseMessageFile), "function" != typeof o2)
              return i3({ errMsg: s2 + " 请指定 type 类型，该平台仅支持选择 image 或 video。" });
            o2({ type: "all", count: t4, extension: n3, success(t5) {
              e5(r2(t5));
            }, fail(e6) {
              i3({ errMsg: e6.errMsg.replace("chooseFile:fail", s2) });
            } });
          });
        }(t3), t3);
      };
    };
  }), js = t(Fs);
  const $s = "manual";
  function Bs(e2) {
    return { props: { localdata: { type: Array, default: () => [] }, options: { type: [Object, Array], default: () => ({}) }, spaceInfo: { type: Object, default: () => ({}) }, collection: { type: [String, Array], default: "" }, action: { type: String, default: "" }, field: { type: String, default: "" }, orderby: { type: String, default: "" }, where: { type: [String, Object], default: "" }, pageData: { type: String, default: "add" }, pageCurrent: { type: Number, default: 1 }, pageSize: { type: Number, default: 20 }, getcount: { type: [Boolean, String], default: false }, gettree: { type: [Boolean, String], default: false }, gettreepath: { type: [Boolean, String], default: false }, startwith: { type: String, default: "" }, limitlevel: { type: Number, default: 10 }, groupby: { type: String, default: "" }, groupField: { type: String, default: "" }, distinct: { type: [Boolean, String], default: false }, foreignKey: { type: String, default: "" }, loadtime: { type: String, default: "auto" }, manual: { type: Boolean, default: false } }, data: () => ({ mixinDatacomLoading: false, mixinDatacomHasMore: false, mixinDatacomResData: [], mixinDatacomErrorMessage: "", mixinDatacomPage: {}, mixinDatacomError: null }), created() {
      this.mixinDatacomPage = { current: this.pageCurrent, size: this.pageSize, count: 0 }, this.$watch(() => {
        var e3 = [];
        return ["pageCurrent", "pageSize", "localdata", "collection", "action", "field", "orderby", "where", "getont", "getcount", "gettree", "groupby", "groupField", "distinct"].forEach((t2) => {
          e3.push(this[t2]);
        }), e3;
      }, (e3, t2) => {
        if (this.loadtime === $s)
          return;
        let n2 = false;
        const s2 = [];
        for (let r2 = 2; r2 < e3.length; r2++)
          e3[r2] !== t2[r2] && (s2.push(e3[r2]), n2 = true);
        e3[0] !== t2[0] && (this.mixinDatacomPage.current = this.pageCurrent), this.mixinDatacomPage.size = this.pageSize, this.onMixinDatacomPropsChange(n2, s2);
      });
    }, methods: { onMixinDatacomPropsChange(e3, t2) {
    }, mixinDatacomEasyGet({ getone: e3 = false, success: t2, fail: n2 } = {}) {
      this.mixinDatacomLoading || (this.mixinDatacomLoading = true, this.mixinDatacomErrorMessage = "", this.mixinDatacomError = null, this.mixinDatacomGet().then((n3) => {
        this.mixinDatacomLoading = false;
        const { data: s2, count: r2 } = n3.result;
        this.getcount && (this.mixinDatacomPage.count = r2), this.mixinDatacomHasMore = s2.length < this.pageSize;
        const i2 = e3 ? s2.length ? s2[0] : void 0 : s2;
        this.mixinDatacomResData = i2, t2 && t2(i2);
      }).catch((e4) => {
        this.mixinDatacomLoading = false, this.mixinDatacomErrorMessage = e4, this.mixinDatacomError = e4, n2 && n2(e4);
      }));
    }, mixinDatacomGet(t2 = {}) {
      let n2;
      t2 = t2 || {}, n2 = "undefined" != typeof __uniX && __uniX ? e2.databaseForJQL(this.spaceInfo) : e2.database(this.spaceInfo);
      const s2 = t2.action || this.action;
      s2 && (n2 = n2.action(s2));
      const r2 = t2.collection || this.collection;
      n2 = Array.isArray(r2) ? n2.collection(...r2) : n2.collection(r2);
      const i2 = t2.where || this.where;
      i2 && Object.keys(i2).length && (n2 = n2.where(i2));
      const o2 = t2.field || this.field;
      o2 && (n2 = n2.field(o2));
      const a2 = t2.foreignKey || this.foreignKey;
      a2 && (n2 = n2.foreignKey(a2));
      const c2 = t2.groupby || this.groupby;
      c2 && (n2 = n2.groupBy(c2));
      const u2 = t2.groupField || this.groupField;
      u2 && (n2 = n2.groupField(u2));
      true === (void 0 !== t2.distinct ? t2.distinct : this.distinct) && (n2 = n2.distinct());
      const h2 = t2.orderby || this.orderby;
      h2 && (n2 = n2.orderBy(h2));
      const l2 = void 0 !== t2.pageCurrent ? t2.pageCurrent : this.mixinDatacomPage.current, d2 = void 0 !== t2.pageSize ? t2.pageSize : this.mixinDatacomPage.size, p2 = void 0 !== t2.getcount ? t2.getcount : this.getcount, f2 = void 0 !== t2.gettree ? t2.gettree : this.gettree, g2 = void 0 !== t2.gettreepath ? t2.gettreepath : this.gettreepath, m2 = { getCount: p2 }, y2 = { limitLevel: void 0 !== t2.limitlevel ? t2.limitlevel : this.limitlevel, startWith: void 0 !== t2.startwith ? t2.startwith : this.startwith };
      return f2 && (m2.getTree = y2), g2 && (m2.getTreePath = y2), n2 = n2.skip(d2 * (l2 - 1)).limit(d2).get(m2), n2;
    } } };
  }
  function Ws(e2) {
    return function(t2, n2 = {}) {
      n2 = function(e3, t3 = {}) {
        return e3.customUI = t3.customUI || e3.customUI, e3.parseSystemError = t3.parseSystemError || e3.parseSystemError, Object.assign(e3.loadingOptions, t3.loadingOptions), Object.assign(e3.errorOptions, t3.errorOptions), "object" == typeof t3.secretMethods && (e3.secretMethods = t3.secretMethods), e3;
      }({ customUI: false, loadingOptions: { title: "加载中...", mask: true }, errorOptions: { type: "modal", retry: false } }, n2);
      const { customUI: s2, loadingOptions: r2, errorOptions: i2, parseSystemError: o2 } = n2, a2 = !s2;
      return new Proxy({}, { get(s3, c2) {
        switch (c2) {
          case "toString":
            return "[object UniCloudObject]";
          case "toJSON":
            return {};
        }
        return function({ fn: e3, interceptorName: t3, getCallbackArgs: n3 } = {}) {
          return async function(...s4) {
            const r3 = n3 ? n3({ params: s4 }) : {};
            let i3, o3;
            try {
              return await K(F(t3, "invoke"), { ...r3 }), i3 = await e3(...s4), await K(F(t3, "success"), { ...r3, result: i3 }), i3;
            } catch (e4) {
              throw o3 = e4, await K(F(t3, "fail"), { ...r3, error: o3 }), o3;
            } finally {
              await K(F(t3, "complete"), o3 ? { ...r3, error: o3 } : { ...r3, result: i3 });
            }
          };
        }({ fn: async function s4(...h2) {
          let l2;
          a2 && uni.showLoading({ title: r2.title, mask: r2.mask });
          const d2 = { name: t2, type: u, data: { method: c2, params: h2 } };
          "object" == typeof n2.secretMethods && function(e3, t3) {
            const n3 = t3.data.method, s5 = e3.secretMethods || {}, r3 = s5[n3] || s5["*"];
            r3 && (t3.secretType = r3);
          }(n2, d2);
          let p2 = false;
          try {
            l2 = await e2.callFunction(d2);
          } catch (e3) {
            p2 = true, l2 = { result: new se(e3) };
          }
          const { errSubject: f2, errCode: g2, errMsg: m2, newToken: y2 } = l2.result || {};
          if (a2 && uni.hideLoading(), y2 && y2.token && y2.tokenExpired && (ae(y2), X(H, { ...y2 })), g2) {
            let e3 = m2;
            if (p2 && o2) {
              e3 = (await o2({ objectName: t2, methodName: c2, params: h2, errSubject: f2, errCode: g2, errMsg: m2 })).errMsg || m2;
            }
            if (a2)
              if ("toast" === i2.type)
                uni.showToast({ title: e3, icon: "none" });
              else {
                if ("modal" !== i2.type)
                  throw new Error(`Invalid errorOptions.type: ${i2.type}`);
                {
                  const { confirm: t3 } = await async function({ title: e4, content: t4, showCancel: n4, cancelText: s5, confirmText: r3 } = {}) {
                    return new Promise((i3, o3) => {
                      uni.showModal({ title: e4, content: t4, showCancel: n4, cancelText: s5, confirmText: r3, success(e5) {
                        i3(e5);
                      }, fail() {
                        i3({ confirm: false, cancel: true });
                      } });
                    });
                  }({ title: "提示", content: e3, showCancel: i2.retry, cancelText: "取消", confirmText: i2.retry ? "重试" : "确定" });
                  if (i2.retry && t3)
                    return s4(...h2);
                }
              }
            const n3 = new se({ subject: f2, code: g2, message: m2, requestId: l2.requestId });
            throw n3.detail = l2.result, X(B, { type: V, content: n3 }), n3;
          }
          return X(B, { type: V, content: l2.result }), l2.result;
        }, interceptorName: "callObject", getCallbackArgs: function({ params: e3 } = {}) {
          return { objectName: t2, methodName: c2, params: e3 };
        } });
      } });
    };
  }
  function Hs(e2) {
    return R("_globalUniCloudSecureNetworkCache__{spaceId}".replace("{spaceId}", e2.config.spaceId));
  }
  async function Js({ openid: e2, callLoginByWeixin: t2 = false } = {}) {
    Hs(this);
    throw new Error(`[SecureNetwork] API \`initSecureNetworkByWeixin\` is not supported on platform \`${A}\``);
  }
  async function zs(e2) {
    const t2 = Hs(this);
    return t2.initPromise || (t2.initPromise = Js.call(this, e2).then((e3) => e3).catch((e3) => {
      throw delete t2.initPromise, e3;
    })), t2.initPromise;
  }
  function Vs(e2) {
    return function({ openid: t2, callLoginByWeixin: n2 = false } = {}) {
      return zs.call(e2, { openid: t2, callLoginByWeixin: n2 });
    };
  }
  function Gs(e2) {
    !function(e3) {
      de = e3;
    }(e2);
  }
  function Ys(e2) {
    const t2 = { getSystemInfo: uni.getSystemInfo, getPushClientId: uni.getPushClientId };
    return function(n2) {
      return new Promise((s2, r2) => {
        t2[e2]({ ...n2, success(e3) {
          s2(e3);
        }, fail(e3) {
          r2(e3);
        } });
      });
    };
  }
  class Qs extends class {
    constructor() {
      this._callback = {};
    }
    addListener(e2, t2) {
      this._callback[e2] || (this._callback[e2] = []), this._callback[e2].push(t2);
    }
    on(e2, t2) {
      return this.addListener(e2, t2);
    }
    removeListener(e2, t2) {
      if (!t2)
        throw new Error('The "listener" argument must be of type function. Received undefined');
      const n2 = this._callback[e2];
      if (!n2)
        return;
      const s2 = function(e3, t3) {
        for (let n3 = e3.length - 1; n3 >= 0; n3--)
          if (e3[n3] === t3)
            return n3;
        return -1;
      }(n2, t2);
      n2.splice(s2, 1);
    }
    off(e2, t2) {
      return this.removeListener(e2, t2);
    }
    removeAllListener(e2) {
      delete this._callback[e2];
    }
    emit(e2, ...t2) {
      const n2 = this._callback[e2];
      if (n2)
        for (let e3 = 0; e3 < n2.length; e3++)
          n2[e3](...t2);
    }
  } {
    constructor() {
      super(), this._uniPushMessageCallback = this._receivePushMessage.bind(this), this._currentMessageId = -1, this._payloadQueue = [];
    }
    init() {
      return Promise.all([Ys("getSystemInfo")(), Ys("getPushClientId")()]).then(([{ appId: e2 } = {}, { cid: t2 } = {}] = []) => {
        if (!e2)
          throw new Error("Invalid appId, please check the manifest.json file");
        if (!t2)
          throw new Error("Invalid push client id");
        this._appId = e2, this._pushClientId = t2, this._seqId = Date.now() + "-" + Math.floor(9e5 * Math.random() + 1e5), this.emit("open"), this._initMessageListener();
      }, (e2) => {
        throw this.emit("error", e2), this.close(), e2;
      });
    }
    async open() {
      return this.init();
    }
    _isUniCloudSSE(e2) {
      if ("receive" !== e2.type)
        return false;
      const t2 = e2 && e2.data && e2.data.payload;
      return !(!t2 || "UNI_CLOUD_SSE" !== t2.channel || t2.seqId !== this._seqId);
    }
    _receivePushMessage(e2) {
      if (!this._isUniCloudSSE(e2))
        return;
      const t2 = e2 && e2.data && e2.data.payload, { action: n2, messageId: s2, message: r2 } = t2;
      this._payloadQueue.push({ action: n2, messageId: s2, message: r2 }), this._consumMessage();
    }
    _consumMessage() {
      for (; ; ) {
        const e2 = this._payloadQueue.find((e3) => e3.messageId === this._currentMessageId + 1);
        if (!e2)
          break;
        this._currentMessageId++, this._parseMessagePayload(e2);
      }
    }
    _parseMessagePayload(e2) {
      const { action: t2, messageId: n2, message: s2 } = e2;
      "end" === t2 ? this._end({ messageId: n2, message: s2 }) : "message" === t2 && this._appendMessage({ messageId: n2, message: s2 });
    }
    _appendMessage({ messageId: e2, message: t2 } = {}) {
      this.emit("message", t2);
    }
    _end({ messageId: e2, message: t2 } = {}) {
      this.emit("end", t2), this.close();
    }
    _initMessageListener() {
      uni.onPushMessage(this._uniPushMessageCallback);
    }
    _destroy() {
      uni.offPushMessage(this._uniPushMessageCallback);
    }
    toJSON() {
      return { appId: this._appId, pushClientId: this._pushClientId, seqId: this._seqId };
    }
    close() {
      this._destroy(), this.emit("close");
    }
  }
  async function Xs(e2) {
    {
      const { osName: e3, osVersion: t3 } = he();
      "ios" === e3 && function(e4) {
        if (!e4 || "string" != typeof e4)
          return 0;
        const t4 = e4.match(/^(\d+)./);
        return t4 && t4[1] ? parseInt(t4[1]) : 0;
      }(t3) >= 14 && console.warn("iOS 14及以上版本连接uniCloud本地调试服务需要允许客户端查找并连接到本地网络上的设备（仅开发期间需要，发行后不需要）");
    }
    const t2 = e2.__dev__;
    if (!t2.debugInfo)
      return;
    const { address: n2, servePort: s2 } = t2.debugInfo, { address: r2 } = await Et(n2, s2);
    if (r2)
      return t2.localAddress = r2, void (t2.localPort = s2);
    const i2 = console["error"];
    let o2 = "";
    if ("remote" === t2.debugInfo.initialLaunchType ? (t2.debugInfo.forceRemote = true, o2 = "当前客户端和HBuilderX不在同一局域网下（或其他网络原因无法连接HBuilderX），uniCloud本地调试服务不对当前客户端生效。\n- 如果不使用uniCloud本地调试服务，请直接忽略此信息。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。") : o2 = "无法连接uniCloud本地调试服务，请检查当前客户端是否与主机在同一局域网下。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。", o2 += "\n- 如果在HBuilderX开启的状态下切换过网络环境，请重启HBuilderX后再试\n- 检查系统防火墙是否拦截了HBuilderX自带的nodejs\n- 检查是否错误的使用拦截器修改uni.request方法的参数", 0 === A.indexOf("mp-") && (o2 += "\n- 小程序中如何使用uniCloud，请参考：https://uniapp.dcloud.net.cn/uniCloud/publish.html#useinmp"), !t2.debugInfo.forceRemote)
      throw new Error(o2);
    i2(o2);
  }
  function Zs(e2) {
    e2._initPromiseHub || (e2._initPromiseHub = new v({ createPromise: function() {
      let t2 = Promise.resolve();
      var n2;
      n2 = 1, t2 = new Promise((e3) => {
        setTimeout(() => {
          e3();
        }, n2);
      });
      const s2 = e2.auth();
      return t2.then(() => s2.getLoginState()).then((e3) => e3 ? Promise.resolve() : s2.signInAnonymously());
    } }));
  }
  const er = { tcb: xt, tencent: xt, aliyun: me, private: Ut, dcloud: Ut, alipay: Wt };
  let tr = new class {
    init(e2) {
      let t2 = {};
      const n2 = er[e2.provider];
      if (!n2)
        throw new Error("未提供正确的provider参数");
      t2 = n2.init(e2), function(e3) {
        const t3 = {};
        e3.__dev__ = t3, t3.debugLog = "app" === A;
        const n3 = P;
        n3 && !n3.code && (t3.debugInfo = n3);
        const s2 = new v({ createPromise: function() {
          return Xs(e3);
        } });
        t3.initLocalNetwork = function() {
          return s2.exec();
        };
      }(t2), Zs(t2), Xn(t2), function(e3) {
        const t3 = e3.uploadFile;
        e3.uploadFile = function(e4) {
          return t3.call(this, e4);
        };
      }(t2), function(e3) {
        e3.database = function(t3) {
          if (t3 && Object.keys(t3).length > 0)
            return e3.init(t3).database();
          if (this._database)
            return this._database;
          const n3 = us(hs, { uniClient: e3 });
          return this._database = n3, n3;
        }, e3.databaseForJQL = function(t3) {
          if (t3 && Object.keys(t3).length > 0)
            return e3.init(t3).databaseForJQL();
          if (this._databaseForJQL)
            return this._databaseForJQL;
          const n3 = us(hs, { uniClient: e3, isJQL: true });
          return this._databaseForJQL = n3, n3;
        };
      }(t2), function(e3) {
        e3.getCurrentUserInfo = Ks, e3.chooseAndUploadFile = js.initChooseAndUploadFile(e3), Object.assign(e3, { get mixinDatacom() {
          return Bs(e3);
        } }), e3.SSEChannel = Qs, e3.initSecureNetworkByWeixin = Vs(e3), e3.setCustomClientInfo = Gs, e3.importObject = Ws(e3);
      }(t2);
      return ["callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "chooseAndUploadFile"].forEach((e3) => {
        if (!t2[e3])
          return;
        const n3 = t2[e3];
        t2[e3] = function() {
          return n3.apply(t2, Array.from(arguments));
        }, t2[e3] = (/* @__PURE__ */ function(e4, t3) {
          return function(n4) {
            let s2 = false;
            if ("callFunction" === t3) {
              const e5 = n4 && n4.type || c;
              s2 = e5 !== c;
            }
            const r2 = "callFunction" === t3 && !s2, i2 = this._initPromiseHub.exec();
            n4 = n4 || {};
            const { success: o2, fail: a2, complete: u2 } = ne(n4), h2 = i2.then(() => s2 ? Promise.resolve() : K(F(t3, "invoke"), n4)).then(() => e4.call(this, n4)).then((e5) => s2 ? Promise.resolve(e5) : K(F(t3, "success"), e5).then(() => K(F(t3, "complete"), e5)).then(() => (r2 && X(B, { type: z, content: e5 }), Promise.resolve(e5))), (e5) => s2 ? Promise.reject(e5) : K(F(t3, "fail"), e5).then(() => K(F(t3, "complete"), e5)).then(() => (X(B, { type: z, content: e5 }), Promise.reject(e5))));
            if (!(o2 || a2 || u2))
              return h2;
            h2.then((e5) => {
              o2 && o2(e5), u2 && u2(e5), r2 && X(B, { type: z, content: e5 });
            }, (e5) => {
              a2 && a2(e5), u2 && u2(e5), r2 && X(B, { type: z, content: e5 });
            });
          };
        }(t2[e3], e3)).bind(t2);
      }), t2.init = this.init, t2;
    }
  }();
  (() => {
    const e2 = C;
    let t2 = {};
    if (e2 && 1 === e2.length)
      t2 = e2[0], tr = tr.init(t2), tr._isDefault = true;
    else {
      const t3 = ["auth", "callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "database", "getCurrentUSerInfo", "importObject"];
      let n2;
      n2 = e2 && e2.length > 0 ? "应用有多个服务空间，请通过uniCloud.init方法指定要使用的服务空间" : "应用未关联服务空间，请在uniCloud目录右键关联服务空间", t3.forEach((e3) => {
        tr[e3] = function() {
          return console.error(n2), Promise.reject(new se({ code: "SYS_ERR", message: n2 }));
        };
      });
    }
    if (Object.assign(tr, { get mixinDatacom() {
      return Bs(tr);
    } }), Ns(tr), tr.addInterceptor = M, tr.removeInterceptor = q, tr.interceptObject = j, uni.__uniCloud = tr, "app" === A) {
      const e3 = U();
      e3.uniCloud = tr, e3.UniCloudError = se;
    }
  })();
  function createApp() {
    const app = vue.createVueApp(App);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue);
